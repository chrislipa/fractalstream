//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Register Information Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

namespace llvm {

namespace {     // Register classes...
  // F4RC Register Class...
  static const unsigned F4RC[] = {
    Alpha::F0, Alpha::F1, Alpha::F10, Alpha::F11, Alpha::F12, Alpha::F13, Alpha::F14, Alpha::F15, Alpha::F16, Alpha::F17, Alpha::F18, Alpha::F19, Alpha::F20, Alpha::F21, Alpha::F22, Alpha::F23, Alpha::F24, Alpha::F25, Alpha::F26, Alpha::F27, Alpha::F28, Alpha::F29, Alpha::F30, Alpha::F2, Alpha::F3, Alpha::F4, Alpha::F5, Alpha::F6, Alpha::F7, Alpha::F8, Alpha::F9, Alpha::F31, 
  };

  // F8RC Register Class...
  static const unsigned F8RC[] = {
    Alpha::F0, Alpha::F1, Alpha::F10, Alpha::F11, Alpha::F12, Alpha::F13, Alpha::F14, Alpha::F15, Alpha::F16, Alpha::F17, Alpha::F18, Alpha::F19, Alpha::F20, Alpha::F21, Alpha::F22, Alpha::F23, Alpha::F24, Alpha::F25, Alpha::F26, Alpha::F27, Alpha::F28, Alpha::F29, Alpha::F30, Alpha::F2, Alpha::F3, Alpha::F4, Alpha::F5, Alpha::F6, Alpha::F7, Alpha::F8, Alpha::F9, Alpha::F31, 
  };

  // GPRC Register Class...
  static const unsigned GPRC[] = {
    Alpha::R0, Alpha::R1, Alpha::R2, Alpha::R3, Alpha::R4, Alpha::R5, Alpha::R6, Alpha::R7, Alpha::R8, Alpha::R16, Alpha::R17, Alpha::R18, Alpha::R19, Alpha::R20, Alpha::R21, Alpha::R22, Alpha::R23, Alpha::R24, Alpha::R25, Alpha::R28, Alpha::R27, Alpha::R26, Alpha::R29, Alpha::R9, Alpha::R10, Alpha::R11, Alpha::R12, Alpha::R13, Alpha::R14, Alpha::R15, Alpha::R30, Alpha::R31, 
  };

  // F4RCVTs Register Class Value Types...
  static const MVT F4RCVTs[] = {
    MVT::f32, MVT::Other
  };

  // F8RCVTs Register Class Value Types...
  static const MVT F8RCVTs[] = {
    MVT::f64, MVT::Other
  };

  // GPRCVTs Register Class Value Types...
  static const MVT GPRCVTs[] = {
    MVT::i64, MVT::Other
  };

}  // end anonymous namespace

namespace Alpha {   // Register class instances
  F4RCClass	F4RCRegClass;
  F8RCClass	F8RCRegClass;
  GPRCClass	GPRCRegClass;

  // F4RC Register Class sub-classes...
  static const TargetRegisterClass* const F4RCSubclasses [] = {
    NULL
  };

  // F8RC Register Class sub-classes...
  static const TargetRegisterClass* const F8RCSubclasses [] = {
    NULL
  };

  // GPRC Register Class sub-classes...
  static const TargetRegisterClass* const GPRCSubclasses [] = {
    NULL
  };

  // F4RC Register Class super-classes...
  static const TargetRegisterClass* const F4RCSuperclasses [] = {
    NULL
  };

  // F8RC Register Class super-classes...
  static const TargetRegisterClass* const F8RCSuperclasses [] = {
    NULL
  };

  // GPRC Register Class super-classes...
  static const TargetRegisterClass* const GPRCSuperclasses [] = {
    NULL
  };


    F4RCClass::iterator
    F4RCClass::allocation_order_end(const MachineFunction &MF) const {
        return end()-1;
    }
  
F4RCClass::F4RCClass()  : TargetRegisterClass(F4RCRegClassID, F4RCVTs, F4RCSubclasses, F4RCSuperclasses, 4, 8, 1, F4RC, F4RC + 32) {}

    F8RCClass::iterator
    F8RCClass::allocation_order_end(const MachineFunction &MF) const {
        return end()-1;
    }
  
F8RCClass::F8RCClass()  : TargetRegisterClass(F8RCRegClassID, F8RCVTs, F8RCSubclasses, F8RCSuperclasses, 8, 8, 1, F8RC, F8RC + 32) {}

    GPRCClass::iterator
    GPRCClass::allocation_order_end(const MachineFunction &MF) const {
        return end()-3;
    }
  
GPRCClass::GPRCClass()  : TargetRegisterClass(GPRCRegClassID, GPRCVTs, GPRCSubclasses, GPRCSuperclasses, 8, 8, 1, GPRC, GPRC + 32) {}
}

namespace {
  const TargetRegisterClass* const RegisterClasses[] = {
    &Alpha::F4RCRegClass,
    &Alpha::F8RCRegClass,
    &Alpha::GPRCRegClass,
  };


  // Number of hash collisions: 0
  const unsigned SubregHashTable[] = { Alpha::NoRegister, Alpha::NoRegister, 
Alpha::NoRegister, Alpha::NoRegister };
  const unsigned SubregHashTableSize = 2;
  const unsigned Empty_AliasSet[] = { 0 };


  // Register Sub-registers Sets...
  const unsigned Empty_SubRegsSet[] = { 0 };
  const unsigned F0_SubRegsSet[] = { 0 };
  const unsigned F1_SubRegsSet[] = { 0 };
  const unsigned F10_SubRegsSet[] = { 0 };
  const unsigned F11_SubRegsSet[] = { 0 };
  const unsigned F12_SubRegsSet[] = { 0 };
  const unsigned F13_SubRegsSet[] = { 0 };
  const unsigned F14_SubRegsSet[] = { 0 };
  const unsigned F15_SubRegsSet[] = { 0 };
  const unsigned F16_SubRegsSet[] = { 0 };
  const unsigned F17_SubRegsSet[] = { 0 };
  const unsigned F18_SubRegsSet[] = { 0 };
  const unsigned F19_SubRegsSet[] = { 0 };
  const unsigned F2_SubRegsSet[] = { 0 };
  const unsigned F20_SubRegsSet[] = { 0 };
  const unsigned F21_SubRegsSet[] = { 0 };
  const unsigned F22_SubRegsSet[] = { 0 };
  const unsigned F23_SubRegsSet[] = { 0 };
  const unsigned F24_SubRegsSet[] = { 0 };
  const unsigned F25_SubRegsSet[] = { 0 };
  const unsigned F26_SubRegsSet[] = { 0 };
  const unsigned F27_SubRegsSet[] = { 0 };
  const unsigned F28_SubRegsSet[] = { 0 };
  const unsigned F29_SubRegsSet[] = { 0 };
  const unsigned F3_SubRegsSet[] = { 0 };
  const unsigned F30_SubRegsSet[] = { 0 };
  const unsigned F31_SubRegsSet[] = { 0 };
  const unsigned F4_SubRegsSet[] = { 0 };
  const unsigned F5_SubRegsSet[] = { 0 };
  const unsigned F6_SubRegsSet[] = { 0 };
  const unsigned F7_SubRegsSet[] = { 0 };
  const unsigned F8_SubRegsSet[] = { 0 };
  const unsigned F9_SubRegsSet[] = { 0 };
  const unsigned R0_SubRegsSet[] = { 0 };
  const unsigned R1_SubRegsSet[] = { 0 };
  const unsigned R10_SubRegsSet[] = { 0 };
  const unsigned R11_SubRegsSet[] = { 0 };
  const unsigned R12_SubRegsSet[] = { 0 };
  const unsigned R13_SubRegsSet[] = { 0 };
  const unsigned R14_SubRegsSet[] = { 0 };
  const unsigned R15_SubRegsSet[] = { 0 };
  const unsigned R16_SubRegsSet[] = { 0 };
  const unsigned R17_SubRegsSet[] = { 0 };
  const unsigned R18_SubRegsSet[] = { 0 };
  const unsigned R19_SubRegsSet[] = { 0 };
  const unsigned R2_SubRegsSet[] = { 0 };
  const unsigned R20_SubRegsSet[] = { 0 };
  const unsigned R21_SubRegsSet[] = { 0 };
  const unsigned R22_SubRegsSet[] = { 0 };
  const unsigned R23_SubRegsSet[] = { 0 };
  const unsigned R24_SubRegsSet[] = { 0 };
  const unsigned R25_SubRegsSet[] = { 0 };
  const unsigned R26_SubRegsSet[] = { 0 };
  const unsigned R27_SubRegsSet[] = { 0 };
  const unsigned R28_SubRegsSet[] = { 0 };
  const unsigned R29_SubRegsSet[] = { 0 };
  const unsigned R3_SubRegsSet[] = { 0 };
  const unsigned R30_SubRegsSet[] = { 0 };
  const unsigned R31_SubRegsSet[] = { 0 };
  const unsigned R4_SubRegsSet[] = { 0 };
  const unsigned R5_SubRegsSet[] = { 0 };
  const unsigned R6_SubRegsSet[] = { 0 };
  const unsigned R7_SubRegsSet[] = { 0 };
  const unsigned R8_SubRegsSet[] = { 0 };
  const unsigned R9_SubRegsSet[] = { 0 };
  const unsigned Empty_SuperRegsSet[] = { 0 };

  const TargetRegisterDesc RegisterDescriptors[] = { // Descriptors
    { "NOREG",	"NOREG",	0,	0,	0 },
    { "$f0",	"F0",	Empty_AliasSet,	F0_SubRegsSet,	Empty_SuperRegsSet },
    { "$f1",	"F1",	Empty_AliasSet,	F1_SubRegsSet,	Empty_SuperRegsSet },
    { "$f10",	"F10",	Empty_AliasSet,	F10_SubRegsSet,	Empty_SuperRegsSet },
    { "$f11",	"F11",	Empty_AliasSet,	F11_SubRegsSet,	Empty_SuperRegsSet },
    { "$f12",	"F12",	Empty_AliasSet,	F12_SubRegsSet,	Empty_SuperRegsSet },
    { "$f13",	"F13",	Empty_AliasSet,	F13_SubRegsSet,	Empty_SuperRegsSet },
    { "$f14",	"F14",	Empty_AliasSet,	F14_SubRegsSet,	Empty_SuperRegsSet },
    { "$f15",	"F15",	Empty_AliasSet,	F15_SubRegsSet,	Empty_SuperRegsSet },
    { "$f16",	"F16",	Empty_AliasSet,	F16_SubRegsSet,	Empty_SuperRegsSet },
    { "$f17",	"F17",	Empty_AliasSet,	F17_SubRegsSet,	Empty_SuperRegsSet },
    { "$f18",	"F18",	Empty_AliasSet,	F18_SubRegsSet,	Empty_SuperRegsSet },
    { "$f19",	"F19",	Empty_AliasSet,	F19_SubRegsSet,	Empty_SuperRegsSet },
    { "$f2",	"F2",	Empty_AliasSet,	F2_SubRegsSet,	Empty_SuperRegsSet },
    { "$f20",	"F20",	Empty_AliasSet,	F20_SubRegsSet,	Empty_SuperRegsSet },
    { "$f21",	"F21",	Empty_AliasSet,	F21_SubRegsSet,	Empty_SuperRegsSet },
    { "$f22",	"F22",	Empty_AliasSet,	F22_SubRegsSet,	Empty_SuperRegsSet },
    { "$f23",	"F23",	Empty_AliasSet,	F23_SubRegsSet,	Empty_SuperRegsSet },
    { "$f24",	"F24",	Empty_AliasSet,	F24_SubRegsSet,	Empty_SuperRegsSet },
    { "$f25",	"F25",	Empty_AliasSet,	F25_SubRegsSet,	Empty_SuperRegsSet },
    { "$f26",	"F26",	Empty_AliasSet,	F26_SubRegsSet,	Empty_SuperRegsSet },
    { "$f27",	"F27",	Empty_AliasSet,	F27_SubRegsSet,	Empty_SuperRegsSet },
    { "$f28",	"F28",	Empty_AliasSet,	F28_SubRegsSet,	Empty_SuperRegsSet },
    { "$f29",	"F29",	Empty_AliasSet,	F29_SubRegsSet,	Empty_SuperRegsSet },
    { "$f3",	"F3",	Empty_AliasSet,	F3_SubRegsSet,	Empty_SuperRegsSet },
    { "$f30",	"F30",	Empty_AliasSet,	F30_SubRegsSet,	Empty_SuperRegsSet },
    { "$f31",	"F31",	Empty_AliasSet,	F31_SubRegsSet,	Empty_SuperRegsSet },
    { "$f4",	"F4",	Empty_AliasSet,	F4_SubRegsSet,	Empty_SuperRegsSet },
    { "$f5",	"F5",	Empty_AliasSet,	F5_SubRegsSet,	Empty_SuperRegsSet },
    { "$f6",	"F6",	Empty_AliasSet,	F6_SubRegsSet,	Empty_SuperRegsSet },
    { "$f7",	"F7",	Empty_AliasSet,	F7_SubRegsSet,	Empty_SuperRegsSet },
    { "$f8",	"F8",	Empty_AliasSet,	F8_SubRegsSet,	Empty_SuperRegsSet },
    { "$f9",	"F9",	Empty_AliasSet,	F9_SubRegsSet,	Empty_SuperRegsSet },
    { "$0",	"R0",	Empty_AliasSet,	R0_SubRegsSet,	Empty_SuperRegsSet },
    { "$1",	"R1",	Empty_AliasSet,	R1_SubRegsSet,	Empty_SuperRegsSet },
    { "$10",	"R10",	Empty_AliasSet,	R10_SubRegsSet,	Empty_SuperRegsSet },
    { "$11",	"R11",	Empty_AliasSet,	R11_SubRegsSet,	Empty_SuperRegsSet },
    { "$12",	"R12",	Empty_AliasSet,	R12_SubRegsSet,	Empty_SuperRegsSet },
    { "$13",	"R13",	Empty_AliasSet,	R13_SubRegsSet,	Empty_SuperRegsSet },
    { "$14",	"R14",	Empty_AliasSet,	R14_SubRegsSet,	Empty_SuperRegsSet },
    { "$15",	"R15",	Empty_AliasSet,	R15_SubRegsSet,	Empty_SuperRegsSet },
    { "$16",	"R16",	Empty_AliasSet,	R16_SubRegsSet,	Empty_SuperRegsSet },
    { "$17",	"R17",	Empty_AliasSet,	R17_SubRegsSet,	Empty_SuperRegsSet },
    { "$18",	"R18",	Empty_AliasSet,	R18_SubRegsSet,	Empty_SuperRegsSet },
    { "$19",	"R19",	Empty_AliasSet,	R19_SubRegsSet,	Empty_SuperRegsSet },
    { "$2",	"R2",	Empty_AliasSet,	R2_SubRegsSet,	Empty_SuperRegsSet },
    { "$20",	"R20",	Empty_AliasSet,	R20_SubRegsSet,	Empty_SuperRegsSet },
    { "$21",	"R21",	Empty_AliasSet,	R21_SubRegsSet,	Empty_SuperRegsSet },
    { "$22",	"R22",	Empty_AliasSet,	R22_SubRegsSet,	Empty_SuperRegsSet },
    { "$23",	"R23",	Empty_AliasSet,	R23_SubRegsSet,	Empty_SuperRegsSet },
    { "$24",	"R24",	Empty_AliasSet,	R24_SubRegsSet,	Empty_SuperRegsSet },
    { "$25",	"R25",	Empty_AliasSet,	R25_SubRegsSet,	Empty_SuperRegsSet },
    { "$26",	"R26",	Empty_AliasSet,	R26_SubRegsSet,	Empty_SuperRegsSet },
    { "$27",	"R27",	Empty_AliasSet,	R27_SubRegsSet,	Empty_SuperRegsSet },
    { "$28",	"R28",	Empty_AliasSet,	R28_SubRegsSet,	Empty_SuperRegsSet },
    { "$29",	"R29",	Empty_AliasSet,	R29_SubRegsSet,	Empty_SuperRegsSet },
    { "$3",	"R3",	Empty_AliasSet,	R3_SubRegsSet,	Empty_SuperRegsSet },
    { "$30",	"R30",	Empty_AliasSet,	R30_SubRegsSet,	Empty_SuperRegsSet },
    { "$31",	"R31",	Empty_AliasSet,	R31_SubRegsSet,	Empty_SuperRegsSet },
    { "$4",	"R4",	Empty_AliasSet,	R4_SubRegsSet,	Empty_SuperRegsSet },
    { "$5",	"R5",	Empty_AliasSet,	R5_SubRegsSet,	Empty_SuperRegsSet },
    { "$6",	"R6",	Empty_AliasSet,	R6_SubRegsSet,	Empty_SuperRegsSet },
    { "$7",	"R7",	Empty_AliasSet,	R7_SubRegsSet,	Empty_SuperRegsSet },
    { "$8",	"R8",	Empty_AliasSet,	R8_SubRegsSet,	Empty_SuperRegsSet },
    { "$9",	"R9",	Empty_AliasSet,	R9_SubRegsSet,	Empty_SuperRegsSet },
  };
}

unsigned AlphaGenRegisterInfo::getSubReg(unsigned RegNo, unsigned Index) const {
  switch (RegNo) {
  default:
    return 0;
  };
  return 0;
}

AlphaGenRegisterInfo::AlphaGenRegisterInfo(int CallFrameSetupOpcode, int CallFrameDestroyOpcode)
  : TargetRegisterInfo(RegisterDescriptors, 65, RegisterClasses, RegisterClasses+3,
                  CallFrameSetupOpcode, CallFrameDestroyOpcode,
                 SubregHashTable, SubregHashTableSize) {
}

int AlphaGenRegisterInfo::getDwarfRegNumFull(unsigned RegNum, unsigned Flavour) const {
  switch (Flavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    return -1;
  case 0:
    switch (RegNum) {
    default:
      assert(0 && "Invalid RegNum");
      return -1;
    case Alpha::F0:
      return 33;
    case Alpha::F1:
      return 34;
    case Alpha::F10:
      return 43;
    case Alpha::F11:
      return 44;
    case Alpha::F12:
      return 45;
    case Alpha::F13:
      return 46;
    case Alpha::F14:
      return 47;
    case Alpha::F15:
      return 48;
    case Alpha::F16:
      return 49;
    case Alpha::F17:
      return 50;
    case Alpha::F18:
      return 51;
    case Alpha::F19:
      return 52;
    case Alpha::F2:
      return 35;
    case Alpha::F20:
      return 53;
    case Alpha::F21:
      return 54;
    case Alpha::F22:
      return 55;
    case Alpha::F23:
      return 56;
    case Alpha::F24:
      return 57;
    case Alpha::F25:
      return 58;
    case Alpha::F26:
      return 59;
    case Alpha::F27:
      return 60;
    case Alpha::F28:
      return 61;
    case Alpha::F29:
      return 62;
    case Alpha::F3:
      return 36;
    case Alpha::F30:
      return 63;
    case Alpha::F31:
      return 64;
    case Alpha::F4:
      return 37;
    case Alpha::F5:
      return 38;
    case Alpha::F6:
      return 39;
    case Alpha::F7:
      return 40;
    case Alpha::F8:
      return 41;
    case Alpha::F9:
      return 42;
    case Alpha::R0:
      return 0;
    case Alpha::R1:
      return 1;
    case Alpha::R10:
      return 10;
    case Alpha::R11:
      return 11;
    case Alpha::R12:
      return 12;
    case Alpha::R13:
      return 13;
    case Alpha::R14:
      return 14;
    case Alpha::R15:
      return 15;
    case Alpha::R16:
      return 16;
    case Alpha::R17:
      return 17;
    case Alpha::R18:
      return 18;
    case Alpha::R19:
      return 19;
    case Alpha::R2:
      return 2;
    case Alpha::R20:
      return 20;
    case Alpha::R21:
      return 21;
    case Alpha::R22:
      return 22;
    case Alpha::R23:
      return 23;
    case Alpha::R24:
      return 24;
    case Alpha::R25:
      return 25;
    case Alpha::R26:
      return 26;
    case Alpha::R27:
      return 27;
    case Alpha::R28:
      return 28;
    case Alpha::R29:
      return 29;
    case Alpha::R3:
      return 3;
    case Alpha::R30:
      return 30;
    case Alpha::R31:
      return 31;
    case Alpha::R4:
      return 4;
    case Alpha::R5:
      return 5;
    case Alpha::R6:
      return 6;
    case Alpha::R7:
      return 7;
    case Alpha::R8:
      return 8;
    case Alpha::R9:
      return 9;
    };
  };
}

} // End llvm namespace 
