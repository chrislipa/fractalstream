//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// DAG Instruction Selector for the SPU target
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

// *** NOTE: This file is #included into the middle of the target
// *** instruction selector class.  These functions are really methods.

// Include standard, target-independent definitions and methods used
// by the instruction selector.
#include <llvm/CodeGen/DAGISelHeader.h>


// Node transformations.
inline SDValue Transform_FPimm_sext16(SDNode *inN) {
  ConstantFPSDNode *N = cast<ConstantFPSDNode>(inN);

  float fval = N->getValueAPF().convertToFloat();
  return getI32Imm((int) ((FloatToBits(fval) << 16) >> 16));

}
inline SDValue Transform_FPimm_u18(SDNode *inN) {
  ConstantFPSDNode *N = cast<ConstantFPSDNode>(inN);

  float fval = N->getValueAPF().convertToFloat();
  return getI32Imm(FloatToBits(fval) & ((1 << 19) - 1));

}
inline SDValue Transform_HI16(SDNode *inN) {
  ConstantSDNode *N = cast<ConstantSDNode>(inN);

  return getI32Imm((unsigned)N->getZExtValue() >> 16);

}
inline SDValue Transform_HI16_f32(SDNode *inN) {
  ConstantFPSDNode *N = cast<ConstantFPSDNode>(inN);

  float fval = N->getValueAPF().convertToFloat();
  return getI32Imm(FloatToBits(fval) >> 16);

}
inline SDValue Transform_HI16_vec(SDNode *N) {

  SDValue OpVal(0, 0);

  assert(N->getOpcode() == ISD::BUILD_VECTOR
         && "HI16_vec got something other than a BUILD_VECTOR");
  
  // Get first constant operand...
  for (unsigned i = 0, e = N->getNumOperands();
       OpVal.getNode() == 0 && i != e; ++i) {
    if (N->getOperand(i).getOpcode() == ISD::UNDEF) continue;
    if (OpVal.getNode() == 0)
      OpVal = N->getOperand(i);
  }
  
  assert(OpVal.getNode() != 0 && "HI16_vec did not locate a <defined> node");
  ConstantSDNode *CN = cast<ConstantSDNode>(OpVal);
  return getI32Imm((unsigned)CN->getZExtValue() >> 16);

}
inline SDValue Transform_ILHUvec_get_imm(SDNode *N) {

  return SPU::get_ILHUvec_imm(N, *CurDAG, MVT::i32);

}
inline SDValue Transform_LO16(SDNode *inN) {
  ConstantSDNode *N = cast<ConstantSDNode>(inN);

  unsigned val = N->getZExtValue();
  // Transformation function: get the low 16 bits.
  return getI32Imm(val & 0xffff);

}
inline SDValue Transform_LO16_f32(SDNode *inN) {
  ConstantFPSDNode *N = cast<ConstantFPSDNode>(inN);

  float fval = N->getValueAPF().convertToFloat();
  return getI32Imm(FloatToBits(fval) & 0xffff);

}
inline SDValue Transform_LO16_vec(SDNode *N) {

  SDValue OpVal(0, 0);

  // Transformation function: get the low 16 bit immediate from a build_vector
  // node.
  assert(N->getOpcode() == ISD::BUILD_VECTOR
         && "LO16_vec got something other than a BUILD_VECTOR");

  // Get first constant operand...
  for (unsigned i = 0, e = N->getNumOperands();
       OpVal.getNode() == 0 && i != e; ++i) {
    if (N->getOperand(i).getOpcode() == ISD::UNDEF) continue;
    if (OpVal.getNode() == 0)
      OpVal = N->getOperand(i);
  }
  
  assert(OpVal.getNode() != 0 && "LO16_vec did not locate a <defined> node");
  ConstantSDNode *CN = cast<ConstantSDNode>(OpVal);
  return getI32Imm((unsigned)CN->getZExtValue() & 0xffff);

}
inline SDValue Transform_v16i8SExt8Imm_xform(SDNode *N) {

  return SPU::get_vec_i8imm(N, *CurDAG, MVT::i8);

}
inline SDValue Transform_v16i8U8Imm_xform(SDNode *N) {

  return SPU::get_vec_i8imm(N, *CurDAG, MVT::i8);

}
inline SDValue Transform_v2i64SExt10Imm_xform(SDNode *N) {

  return SPU::get_vec_i10imm(N, *CurDAG, MVT::i64);

}
inline SDValue Transform_v2i64SExt16Imm_xform(SDNode *N) {

  return SPU::get_vec_i16imm(N, *CurDAG, MVT::i64);

}
inline SDValue Transform_v2i64Uns18Imm_xform(SDNode *N) {

  return SPU::get_vec_u18imm(N, *CurDAG, MVT::i64);

}
inline SDValue Transform_v2i64_get_imm(SDNode *N) {

  return SPU::get_v2i64_imm(N, *CurDAG);

}
inline SDValue Transform_v4i32SExt10Imm_xform(SDNode *N) {

  return SPU::get_vec_i10imm(N, *CurDAG, MVT::i32);

}
inline SDValue Transform_v4i32SExt16Imm_xform(SDNode *N) {

  return SPU::get_vec_i16imm(N, *CurDAG, MVT::i32);

}
inline SDValue Transform_v4i32Uns10Imm_xform(SDNode *N) {

  return SPU::get_vec_i10imm(N, *CurDAG, MVT::i32);

}
inline SDValue Transform_v4i32Uns18Imm_xform(SDNode *N) {

  return SPU::get_vec_u18imm(N, *CurDAG, MVT::i32);

}
inline SDValue Transform_v4i32_get_imm(SDNode *N) {

  return SPU::get_v4i32_imm(N, *CurDAG);

}
inline SDValue Transform_v8i16SExt10Imm_xform(SDNode *N) {

  return SPU::get_vec_i10imm(N, *CurDAG, MVT::i16);

}
inline SDValue Transform_v8i16SExt8Imm_xform(SDNode *N) {

  return SPU::get_vec_i8imm(N, *CurDAG, MVT::i16);

}
inline SDValue Transform_v8i16Uns10Imm_xform(SDNode *N) {

  return SPU::get_vec_i10imm(N, *CurDAG, MVT::i16);

}
inline SDValue Transform_v8i16Uns16Imm_xform(SDNode *N) {

  return SPU::get_vec_i16imm(N, *CurDAG, MVT::i16);

}

// Predicate functions.
inline bool Predicate_atomic_cmp_swap_16(SDNode *N) {

  return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i16;

}
inline bool Predicate_atomic_cmp_swap_32(SDNode *N) {

  return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i32;

}
inline bool Predicate_atomic_cmp_swap_64(SDNode *N) {

  return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i64;

}
inline bool Predicate_atomic_cmp_swap_8(SDNode *N) {

  return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i8;

}
inline bool Predicate_atomic_load_add_16(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i16;
  
}
inline bool Predicate_atomic_load_add_32(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i32;
  
}
inline bool Predicate_atomic_load_add_64(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i64;
  
}
inline bool Predicate_atomic_load_add_8(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i8;
  
}
inline bool Predicate_atomic_load_and_16(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i16;
  
}
inline bool Predicate_atomic_load_and_32(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i32;
  
}
inline bool Predicate_atomic_load_and_64(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i64;
  
}
inline bool Predicate_atomic_load_and_8(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i8;
  
}
inline bool Predicate_atomic_load_max_16(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i16;
  
}
inline bool Predicate_atomic_load_max_32(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i32;
  
}
inline bool Predicate_atomic_load_max_64(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i64;
  
}
inline bool Predicate_atomic_load_max_8(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i8;
  
}
inline bool Predicate_atomic_load_min_16(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i16;
  
}
inline bool Predicate_atomic_load_min_32(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i32;
  
}
inline bool Predicate_atomic_load_min_64(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i64;
  
}
inline bool Predicate_atomic_load_min_8(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i8;
  
}
inline bool Predicate_atomic_load_nand_16(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i16;
  
}
inline bool Predicate_atomic_load_nand_32(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i32;
  
}
inline bool Predicate_atomic_load_nand_64(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i64;
  
}
inline bool Predicate_atomic_load_nand_8(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i8;
  
}
inline bool Predicate_atomic_load_or_16(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i16;
  
}
inline bool Predicate_atomic_load_or_32(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i32;
  
}
inline bool Predicate_atomic_load_or_64(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i64;
  
}
inline bool Predicate_atomic_load_or_8(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i8;
  
}
inline bool Predicate_atomic_load_sub_16(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i16;
  
}
inline bool Predicate_atomic_load_sub_32(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i32;
  
}
inline bool Predicate_atomic_load_sub_64(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i64;
  
}
inline bool Predicate_atomic_load_sub_8(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i8;
  
}
inline bool Predicate_atomic_load_umax_16(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i16;
  
}
inline bool Predicate_atomic_load_umax_32(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i32;
  
}
inline bool Predicate_atomic_load_umax_64(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i64;
  
}
inline bool Predicate_atomic_load_umax_8(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i8;
  
}
inline bool Predicate_atomic_load_umin_16(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i16;
  
}
inline bool Predicate_atomic_load_umin_32(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i32;
  
}
inline bool Predicate_atomic_load_umin_64(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i64;
  
}
inline bool Predicate_atomic_load_umin_8(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i8;
  
}
inline bool Predicate_atomic_load_xor_16(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i16;
  
}
inline bool Predicate_atomic_load_xor_32(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i32;
  
}
inline bool Predicate_atomic_load_xor_64(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i64;
  
}
inline bool Predicate_atomic_load_xor_8(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i8;
  
}
inline bool Predicate_atomic_swap_16(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i16;
  
}
inline bool Predicate_atomic_swap_32(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i32;
  
}
inline bool Predicate_atomic_swap_64(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i64;
  
}
inline bool Predicate_atomic_swap_8(SDNode *N) {

    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i8;
  
}
inline bool Predicate_bitshift(SDNode *inN) {
  ConstantSDNode *N = cast<ConstantSDNode>(inN);

  // bitshift predicate - returns true if 0 < imm <= 7 for SHLQBII
  // (shift left quadword by bits immediate)
  int64_t Val = N->getZExtValue();
  return (Val > 0 && Val <= 7);

}
inline bool Predicate_cvtff(SDNode *N) {

       return cast<CvtRndSatSDNode>(N)->getCvtCode() == ISD::CVT_FF;
    
}
inline bool Predicate_cvtfs(SDNode *N) {

       return cast<CvtRndSatSDNode>(N)->getCvtCode() == ISD::CVT_FS;
    
}
inline bool Predicate_cvtfu(SDNode *N) {

       return cast<CvtRndSatSDNode>(N)->getCvtCode() == ISD::CVT_FU;
    
}
inline bool Predicate_cvtsf(SDNode *N) {

       return cast<CvtRndSatSDNode>(N)->getCvtCode() == ISD::CVT_SF;
    
}
inline bool Predicate_cvtss(SDNode *N) {

       return cast<CvtRndSatSDNode>(N)->getCvtCode() == ISD::CVT_SS;
    
}
inline bool Predicate_cvtsu(SDNode *N) {

       return cast<CvtRndSatSDNode>(N)->getCvtCode() == ISD::CVT_SU;
    
}
inline bool Predicate_cvtuf(SDNode *N) {

       return cast<CvtRndSatSDNode>(N)->getCvtCode() == ISD::CVT_UF;
    
}
inline bool Predicate_cvtus(SDNode *N) {

       return cast<CvtRndSatSDNode>(N)->getCvtCode() == ISD::CVT_US;
    
}
inline bool Predicate_cvtuu(SDNode *N) {

       return cast<CvtRndSatSDNode>(N)->getCvtCode() == ISD::CVT_UU;
    
}
inline bool Predicate_extload(SDNode *N) {

  return cast<LoadSDNode>(N)->getExtensionType() == ISD::EXTLOAD;

}
inline bool Predicate_extloadf32(SDNode *N) {

  return cast<LoadSDNode>(N)->getMemoryVT() == MVT::f32;

}
inline bool Predicate_extloadf64(SDNode *N) {

  return cast<LoadSDNode>(N)->getMemoryVT() == MVT::f64;

}
inline bool Predicate_extloadi1(SDNode *N) {

  return cast<LoadSDNode>(N)->getMemoryVT() == MVT::i1;

}
inline bool Predicate_extloadi16(SDNode *N) {

  return cast<LoadSDNode>(N)->getMemoryVT() == MVT::i16;

}
inline bool Predicate_extloadi32(SDNode *N) {

  return cast<LoadSDNode>(N)->getMemoryVT() == MVT::i32;

}
inline bool Predicate_extloadi8(SDNode *N) {

  return cast<LoadSDNode>(N)->getMemoryVT() == MVT::i8;

}
inline bool Predicate_fpimm18(SDNode *inN) {
  ConstantFPSDNode *N = cast<ConstantFPSDNode>(inN);

  if (N->getValueType(0) == MVT::f32) {
    uint32_t Value = FloatToBits(N->getValueAPF().convertToFloat());
    return ((Value & ((1 << 19) - 1)) == Value);
  }

  return false;

}
inline bool Predicate_fpimmSExt16(SDNode *inN) {
  ConstantFPSDNode *N = cast<ConstantFPSDNode>(inN);

  short Ignored;
  return isFPS16Immediate(N, Ignored);  

}
inline bool Predicate_hi16(SDNode *inN) {
  ConstantSDNode *N = cast<ConstantSDNode>(inN);

  // hi16 predicate - returns true if the immediate has all zeros in the
  // low order bits and is a 32-bit constant:
  if (N->getValueType(0) == MVT::i32) {
    uint32_t val = uint32_t(N->getZExtValue());
    return ((val & 0xffff0000) == val);
  } else if (N->getValueType(0) == MVT::i64) {
    uint64_t val = N->getZExtValue();
    return ((val & 0xffff0000ULL) == val);
  }

  return false;

}
inline bool Predicate_hi16_f32(SDNode *inN) {
  ConstantFPSDNode *N = cast<ConstantFPSDNode>(inN);

  if (N->getValueType(0) == MVT::f32) {
    uint32_t val = FloatToBits(N->getValueAPF().convertToFloat());
    return ((val & 0xffff0000) == val);
  }

  return false;

}
inline bool Predicate_i16ImmSExt10(SDNode *inN) {
  ConstantSDNode *N = cast<ConstantSDNode>(inN);

  return isI16IntS10Immediate(N);

}
inline bool Predicate_i16ImmUns10(SDNode *inN) {
  ConstantSDNode *N = cast<ConstantSDNode>(inN);

  return isI16IntU10Immediate(N);

}
inline bool Predicate_i32ImmSExt10(SDNode *inN) {
  ConstantSDNode *N = cast<ConstantSDNode>(inN);

  return isI32IntS10Immediate(N);

}
inline bool Predicate_i32ImmUns10(SDNode *inN) {
  ConstantSDNode *N = cast<ConstantSDNode>(inN);

  return isI32IntU10Immediate(N);

}
inline bool Predicate_i64ImmSExt10(SDNode *inN) {
  ConstantSDNode *N = cast<ConstantSDNode>(inN);

  return isI64IntS10Immediate(N);

}
inline bool Predicate_imm18(SDNode *inN) {
  ConstantSDNode *N = cast<ConstantSDNode>(inN);

  // imm18 predicate: True if the immediate fits into an 18-bit unsigned field.
  int Value = (int) N->getZExtValue();
  return ((Value & ((1 << 19) - 1)) == Value);

}
inline bool Predicate_immAllOnes(SDNode *inN) {
  ConstantSDNode *N = cast<ConstantSDNode>(inN);
 return N->isAllOnesValue(); 
}
inline bool Predicate_immAllOnesV(SDNode *N) {

  return ISD::isBuildVectorAllOnes(N);

}
inline bool Predicate_immAllOnesV_bc(SDNode *N) {

  return ISD::isBuildVectorAllOnes(N);

}
inline bool Predicate_immAllZerosV(SDNode *N) {

  return ISD::isBuildVectorAllZeros(N);

}
inline bool Predicate_immAllZerosV_bc(SDNode *N) {

  return ISD::isBuildVectorAllZeros(N);

}
inline bool Predicate_immILHUvec(SDNode *N) {

  return SPU::get_ILHUvec_imm(N, *CurDAG, MVT::i32).getNode() != 0;

}
inline bool Predicate_immILHUvec_i64(SDNode *N) {

  return SPU::get_ILHUvec_imm(N, *CurDAG, MVT::i64).getNode() != 0;

}
inline bool Predicate_immSExt16(SDNode *inN) {
  ConstantSDNode *N = cast<ConstantSDNode>(inN);

  // immSExt16 predicate - True if the immediate fits in a 16-bit sign extended
  // field.
  short Ignored;
  return isIntS16Immediate(N, Ignored);

}
inline bool Predicate_immSExt8(SDNode *inN) {
  ConstantSDNode *N = cast<ConstantSDNode>(inN);

  int Value = int(N->getSExtValue());
  return (Value >= -(1 << 8) && Value <= (1 << 8) - 1);

}
inline bool Predicate_immU16(SDNode *inN) {
  ConstantSDNode *N = cast<ConstantSDNode>(inN);

  // immU16 predicate- True if the immediate fits into a 16-bit unsigned field.
  return (uint64_t)N->getZExtValue() == (N->getZExtValue() & 0xffff);

}
inline bool Predicate_immU8(SDNode *inN) {
  ConstantSDNode *N = cast<ConstantSDNode>(inN);

  return (N->getZExtValue() <= 0xff);

}
inline bool Predicate_immZExt16(SDNode *inN) {
  ConstantSDNode *N = cast<ConstantSDNode>(inN);

  // immZExt16 predicate - True if the immediate fits in a 16-bit zero extended
  // field.
  return (uint64_t)N->getZExtValue() == (unsigned short)N->getZExtValue();

}
inline bool Predicate_istore(SDNode *N) {

  return !cast<StoreSDNode>(N)->isTruncatingStore();

}
inline bool Predicate_itruncstore(SDNode *N) {

  return cast<StoreSDNode>(N)->isTruncatingStore();

}
inline bool Predicate_lo16(SDNode *inN) {
  ConstantSDNode *N = cast<ConstantSDNode>(inN);

  // lo16 predicate - returns true if the immediate has all zeros in the
  // low order bits and is a 32-bit constant:
  if (N->getValueType(0) == MVT::i32) {
    uint32_t val = N->getZExtValue();
    return ((val & 0x0000ffff) == val);
  }

  return false;

}
inline bool Predicate_load(SDNode *N) {

  return cast<LoadSDNode>(N)->getExtensionType() == ISD::NON_EXTLOAD;

}
inline bool Predicate_post_store(SDNode *N) {

  ISD::MemIndexedMode AM = cast<StoreSDNode>(N)->getAddressingMode();
  return AM == ISD::POST_INC || AM == ISD::POST_DEC;

}
inline bool Predicate_post_truncst(SDNode *N) {

  ISD::MemIndexedMode AM = cast<StoreSDNode>(N)->getAddressingMode();
  return AM == ISD::POST_INC || AM == ISD::POST_DEC;

}
inline bool Predicate_post_truncstf32(SDNode *N) {

  return cast<StoreSDNode>(N)->getMemoryVT() == MVT::f32;

}
inline bool Predicate_post_truncsti1(SDNode *N) {

  return cast<StoreSDNode>(N)->getMemoryVT() == MVT::i1;

}
inline bool Predicate_post_truncsti16(SDNode *N) {

  return cast<StoreSDNode>(N)->getMemoryVT() == MVT::i16;

}
inline bool Predicate_post_truncsti32(SDNode *N) {

  return cast<StoreSDNode>(N)->getMemoryVT() == MVT::i32;

}
inline bool Predicate_post_truncsti8(SDNode *N) {

  return cast<StoreSDNode>(N)->getMemoryVT() == MVT::i8;

}
inline bool Predicate_pre_store(SDNode *N) {

  ISD::MemIndexedMode AM = cast<StoreSDNode>(N)->getAddressingMode();
  return AM == ISD::PRE_INC || AM == ISD::PRE_DEC;

}
inline bool Predicate_pre_truncst(SDNode *N) {

  ISD::MemIndexedMode AM = cast<StoreSDNode>(N)->getAddressingMode();
  return AM == ISD::PRE_INC || AM == ISD::PRE_DEC;

}
inline bool Predicate_pre_truncstf32(SDNode *N) {

  return cast<StoreSDNode>(N)->getMemoryVT() == MVT::f32;

}
inline bool Predicate_pre_truncsti1(SDNode *N) {

  return cast<StoreSDNode>(N)->getMemoryVT() == MVT::i1;

}
inline bool Predicate_pre_truncsti16(SDNode *N) {

  return cast<StoreSDNode>(N)->getMemoryVT() == MVT::i16;

}
inline bool Predicate_pre_truncsti32(SDNode *N) {

  return cast<StoreSDNode>(N)->getMemoryVT() == MVT::i32;

}
inline bool Predicate_pre_truncsti8(SDNode *N) {

  return cast<StoreSDNode>(N)->getMemoryVT() == MVT::i8;

}
inline bool Predicate_sextload(SDNode *N) {

  return cast<LoadSDNode>(N)->getExtensionType() == ISD::SEXTLOAD;

}
inline bool Predicate_sextloadi1(SDNode *N) {

  return cast<LoadSDNode>(N)->getMemoryVT() == MVT::i1;

}
inline bool Predicate_sextloadi16(SDNode *N) {

  return cast<LoadSDNode>(N)->getMemoryVT() == MVT::i16;

}
inline bool Predicate_sextloadi32(SDNode *N) {

  return cast<LoadSDNode>(N)->getMemoryVT() == MVT::i32;

}
inline bool Predicate_sextloadi8(SDNode *N) {

  return cast<LoadSDNode>(N)->getMemoryVT() == MVT::i8;

}
inline bool Predicate_simm7(SDNode *inN) {
  ConstantSDNode *N = cast<ConstantSDNode>(inN);

  int sextVal = int(N->getSExtValue());
  return (sextVal >= -64 && sextVal <= 63);

}
inline bool Predicate_store(SDNode *N) {

  return !cast<StoreSDNode>(N)->isTruncatingStore();

}
inline bool Predicate_truncstore(SDNode *N) {

  return cast<StoreSDNode>(N)->isTruncatingStore();

}
inline bool Predicate_truncstoref32(SDNode *N) {

  return cast<StoreSDNode>(N)->getMemoryVT() == MVT::f32;

}
inline bool Predicate_truncstoref64(SDNode *N) {

  return cast<StoreSDNode>(N)->getMemoryVT() == MVT::f64;

}
inline bool Predicate_truncstorei16(SDNode *N) {

  return cast<StoreSDNode>(N)->getMemoryVT() == MVT::i16;

}
inline bool Predicate_truncstorei32(SDNode *N) {

  return cast<StoreSDNode>(N)->getMemoryVT() == MVT::i32;

}
inline bool Predicate_truncstorei8(SDNode *N) {

  return cast<StoreSDNode>(N)->getMemoryVT() == MVT::i8;

}
inline bool Predicate_uimm7(SDNode *inN) {
  ConstantSDNode *N = cast<ConstantSDNode>(inN);

  return (N->getZExtValue() <= 0x7f);

}
inline bool Predicate_unindexedload(SDNode *N) {

  return cast<LoadSDNode>(N)->getAddressingMode() == ISD::UNINDEXED;

}
inline bool Predicate_unindexedstore(SDNode *N) {

  return cast<StoreSDNode>(N)->getAddressingMode() == ISD::UNINDEXED;

}
inline bool Predicate_v16i8SExt8Imm(SDNode *N) {

  return SPU::get_vec_i8imm(N, *CurDAG, MVT::i8).getNode() != 0;

}
inline bool Predicate_v16i8U8Imm(SDNode *N) {

  return SPU::get_vec_i8imm(N, *CurDAG, MVT::i8).getNode() != 0;

}
inline bool Predicate_v2i64Imm(SDNode *N) {

  return SPU::get_v2i64_imm(N, *CurDAG).getNode() != 0;

}
inline bool Predicate_v2i64SExt10Imm(SDNode *N) {

  return SPU::get_vec_i10imm(N, *CurDAG, MVT::i64).getNode() != 0;

}
inline bool Predicate_v2i64SExt16Imm(SDNode *N) {

  return SPU::get_vec_i16imm(N, *CurDAG, MVT::i64).getNode() != 0;

}
inline bool Predicate_v2i64Uns18Imm(SDNode *N) {

  return SPU::get_vec_u18imm(N, *CurDAG, MVT::i64).getNode() != 0;

}
inline bool Predicate_v4i32Imm(SDNode *N) {

  return SPU::get_v4i32_imm(N, *CurDAG).getNode() != 0;

}
inline bool Predicate_v4i32SExt10Imm(SDNode *N) {

  return SPU::get_vec_i10imm(N, *CurDAG, MVT::i32).getNode() != 0;

}
inline bool Predicate_v4i32SExt16Imm(SDNode *N) {

  return SPU::get_vec_i16imm(N, *CurDAG, MVT::i32).getNode() != 0;

}
inline bool Predicate_v4i32Uns10Imm(SDNode *N) {

  return SPU::get_vec_i10imm(N, *CurDAG, MVT::i32).getNode() != 0;

}
inline bool Predicate_v4i32Uns18Imm(SDNode *N) {

  return SPU::get_vec_u18imm(N, *CurDAG, MVT::i32).getNode() != 0;

}
inline bool Predicate_v8i16SExt10Imm(SDNode *N) {

  return SPU::get_vec_i10imm(N, *CurDAG, MVT::i16).getNode() != 0;

}
inline bool Predicate_v8i16SExt16Imm(SDNode *N) {

  return SPU::get_vec_i16imm(N, *CurDAG, MVT::i16).getNode() != 0;

}
inline bool Predicate_v8i16SExt8Imm(SDNode *N) {

  return SPU::get_vec_i8imm(N, *CurDAG, MVT::i16).getNode() != 0;

}
inline bool Predicate_v8i16Uns10Imm(SDNode *N) {

  return SPU::get_vec_i10imm(N, *CurDAG, MVT::i16).getNode() != 0;

}
inline bool Predicate_vtFP(SDNode *inN) {
  VTSDNode *N = cast<VTSDNode>(inN);
 return N->getVT().isFloatingPoint(); 
}
inline bool Predicate_vtInt(SDNode *inN) {
  VTSDNode *N = cast<VTSDNode>(inN);
 return N->getVT().isInteger(); 
}
inline bool Predicate_zextload(SDNode *N) {

  return cast<LoadSDNode>(N)->getExtensionType() == ISD::ZEXTLOAD;

}
inline bool Predicate_zextloadi1(SDNode *N) {

  return cast<LoadSDNode>(N)->getMemoryVT() == MVT::i1;

}
inline bool Predicate_zextloadi16(SDNode *N) {

  return cast<LoadSDNode>(N)->getMemoryVT() == MVT::i16;

}
inline bool Predicate_zextloadi32(SDNode *N) {

  return cast<LoadSDNode>(N)->getMemoryVT() == MVT::i32;

}
inline bool Predicate_zextloadi8(SDNode *N) {

  return cast<LoadSDNode>(N)->getMemoryVT() == MVT::i8;

}


SDNode *Emit_0(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N0, N1);
}
SDNode *Emit_1(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue Tmp1 = CurDAG->getTargetConstant(((unsigned short) cast<ConstantSDNode>(N1)->getZExtValue()), MVT::i16);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N0, Tmp1);
}
SDNode *Select_ISD_ADD_i16(const SDValue &N) {

  // Pattern: (add:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val)
  // Emits: (AHIr16:i16 R16C:i16:$rA, (imm:i16):$val)
  // Pattern complexity = 7  cost = 1  size = 0
  {
    SDValue N0 = N.getOperand(0);
    SDValue N1 = N.getOperand(1);
    if (N1.getOpcode() == ISD::Constant &&
        Predicate_i16ImmSExt10(N1.getNode())) {
      SDNode *Result = Emit_1(N, SPU::AHIr16, MVT::i16);
      return Result;
    }
  }

  // Pattern: (add:i16 R16C:i16:$rA, R16C:i16:$rB)
  // Emits: (AHr16:i16 R16C:i16:$rA, R16C:i16:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::AHr16, MVT::i16);
  return Result;
}

SDNode *Emit_2(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue Tmp1 = CurDAG->getTargetConstant(((unsigned) cast<ConstantSDNode>(N1)->getZExtValue()), MVT::i32);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N0, Tmp1);
}
SDNode *Emit_3(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N000 = N00.getOperand(0);
  SDValue N001 = N00.getOperand(1);
  SDValue N1 = N.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N000, N001, N1);
}
SDNode *Emit_4(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N000 = N00.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N010 = N01.getOperand(0);
  SDValue N1 = N.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N000, N010, N1);
}
SDNode *Emit_5(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N000 = N00.getOperand(0);
  SDValue N001 = N00.getOperand(1);
  SDValue N01 = N0.getOperand(1);
  SDValue N010 = N01.getOperand(0);
  SDValue N011 = N01.getOperand(1);
  SDValue N1 = N.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N000, N010, N1);
}
SDNode *Emit_6(const SDValue &N, unsigned Opc0, unsigned Opc1, MVT VT0, MVT VT1) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  SDValue Tmp5(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N00), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc1, VT1, Tmp5, N00);
}
SDNode *Emit_7(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N100 = N10.getOperand(0);
  SDValue N101 = N10.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N100, N101, N0);
}
SDNode *Emit_8(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N100 = N10.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  SDValue N110 = N11.getOperand(0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N100, N110, N0);
}
SDNode *Emit_9(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N100 = N10.getOperand(0);
  SDValue N101 = N10.getOperand(1);
  SDValue N11 = N1.getOperand(1);
  SDValue N110 = N11.getOperand(0);
  SDValue N111 = N11.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N100, N110, N0);
}
SDNode *Select_ISD_ADD_i32(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);
    if (N0.getOpcode() == SPUISD::Hi) {
      SDValue N00 = N0.getOperand(0);

      // Pattern: (add:i32 (SPUhi:i32 (tglobaladdr:i32):$in, 0:i32), (SPUlo:i32 (tglobaladdr:i32):$in, 0:i32))
      // Emits: (IOHLlo:i32 (ILHUhi:i32 (tglobaladdr:i32):$in), (tglobaladdr:i32):$in)
      // Pattern complexity = 25  cost = 2  size = 0
      if (N00.getOpcode() == ISD::TargetGlobalAddress) {
        SDValue N01 = N0.getOperand(1);
        ConstantSDNode *Tmp0 = dyn_cast<ConstantSDNode>(N01);
        if (Tmp0) {
          int64_t CN1 = Tmp0->getSExtValue();
          if (CN1 == INT64_C(0)) {
            SDValue N1 = N.getOperand(1);
            if (N1.getOpcode() == SPUISD::Lo) {
              SDValue N10 = N1.getOperand(0);
              if (N10.getOpcode() == ISD::TargetGlobalAddress &&
                  N00 == N10) {
                SDValue N11 = N1.getOperand(1);
                ConstantSDNode *Tmp2 = dyn_cast<ConstantSDNode>(N11);
                if (Tmp2) {
                  int64_t CN3 = Tmp2->getSExtValue();
                  if (CN3 == INT64_C(0)) {
                    SDNode *Result = Emit_6(N, SPU::ILHUhi, SPU::IOHLlo, MVT::i32, MVT::i32);
                    return Result;
                  }
                }
              }
            }
          }
        }
      }

      // Pattern: (add:i32 (SPUhi:i32 (texternalsym:i32):$in, 0:i32), (SPUlo:i32 (texternalsym:i32):$in, 0:i32))
      // Emits: (IOHLlo:i32 (ILHUhi:i32 (texternalsym:i32):$in), (texternalsym:i32):$in)
      // Pattern complexity = 25  cost = 2  size = 0
      if (N00.getOpcode() == ISD::TargetExternalSymbol) {
        SDValue N01 = N0.getOperand(1);
        ConstantSDNode *Tmp0 = dyn_cast<ConstantSDNode>(N01);
        if (Tmp0) {
          int64_t CN1 = Tmp0->getSExtValue();
          if (CN1 == INT64_C(0)) {
            SDValue N1 = N.getOperand(1);
            if (N1.getOpcode() == SPUISD::Lo) {
              SDValue N10 = N1.getOperand(0);
              if (N10.getOpcode() == ISD::TargetExternalSymbol &&
                  N00 == N10) {
                SDValue N11 = N1.getOperand(1);
                ConstantSDNode *Tmp2 = dyn_cast<ConstantSDNode>(N11);
                if (Tmp2) {
                  int64_t CN3 = Tmp2->getSExtValue();
                  if (CN3 == INT64_C(0)) {
                    SDNode *Result = Emit_6(N, SPU::ILHUhi, SPU::IOHLlo, MVT::i32, MVT::i32);
                    return Result;
                  }
                }
              }
            }
          }
        }
      }

      // Pattern: (add:i32 (SPUhi:i32 (tjumptable:i32):$in, 0:i32), (SPUlo:i32 (tjumptable:i32):$in, 0:i32))
      // Emits: (IOHLlo:i32 (ILHUhi:i32 (tjumptable:i32):$in), (tjumptable:i32):$in)
      // Pattern complexity = 25  cost = 2  size = 0
      if (N00.getOpcode() == ISD::TargetJumpTable) {
        SDValue N01 = N0.getOperand(1);
        ConstantSDNode *Tmp0 = dyn_cast<ConstantSDNode>(N01);
        if (Tmp0) {
          int64_t CN1 = Tmp0->getSExtValue();
          if (CN1 == INT64_C(0)) {
            SDValue N1 = N.getOperand(1);
            if (N1.getOpcode() == SPUISD::Lo) {
              SDValue N10 = N1.getOperand(0);
              if (N10.getOpcode() == ISD::TargetJumpTable &&
                  N00 == N10) {
                SDValue N11 = N1.getOperand(1);
                ConstantSDNode *Tmp2 = dyn_cast<ConstantSDNode>(N11);
                if (Tmp2) {
                  int64_t CN3 = Tmp2->getSExtValue();
                  if (CN3 == INT64_C(0)) {
                    SDNode *Result = Emit_6(N, SPU::ILHUhi, SPU::IOHLlo, MVT::i32, MVT::i32);
                    return Result;
                  }
                }
              }
            }
          }
        }
      }

      // Pattern: (add:i32 (SPUhi:i32 (tconstpool:i32):$in, 0:i32), (SPUlo:i32 (tconstpool:i32):$in, 0:i32))
      // Emits: (IOHLlo:i32 (ILHUhi:i32 (tconstpool:i32):$in), (tconstpool:i32):$in)
      // Pattern complexity = 25  cost = 2  size = 0
      if (N00.getOpcode() == ISD::TargetConstantPool) {
        SDValue N01 = N0.getOperand(1);
        ConstantSDNode *Tmp0 = dyn_cast<ConstantSDNode>(N01);
        if (Tmp0) {
          int64_t CN1 = Tmp0->getSExtValue();
          if (CN1 == INT64_C(0)) {
            SDValue N1 = N.getOperand(1);
            if (N1.getOpcode() == SPUISD::Lo) {
              SDValue N10 = N1.getOperand(0);
              if (N10.getOpcode() == ISD::TargetConstantPool &&
                  N00 == N10) {
                SDValue N11 = N1.getOperand(1);
                ConstantSDNode *Tmp2 = dyn_cast<ConstantSDNode>(N11);
                if (Tmp2) {
                  int64_t CN3 = Tmp2->getSExtValue();
                  if (CN3 == INT64_C(0)) {
                    SDNode *Result = Emit_6(N, SPU::ILHUhi, SPU::IOHLlo, MVT::i32, MVT::i32);
                    return Result;
                  }
                }
              }
            }
          }
        }
      }
    }
    if (N0.getOpcode() == SPUISD::Lo) {
      SDValue N00 = N0.getOperand(0);

      // Pattern: (add:i32 (SPUlo:i32 (tglobaladdr:i32):$in, 0:i32), (SPUhi:i32 (tglobaladdr:i32):$in, 0:i32))
      // Emits: (IOHLlo:i32 (ILHUhi:i32 (tglobaladdr:i32):$in), (tglobaladdr:i32):$in)
      // Pattern complexity = 25  cost = 2  size = 0
      if (N00.getOpcode() == ISD::TargetGlobalAddress) {
        SDValue N01 = N0.getOperand(1);
        ConstantSDNode *Tmp0 = dyn_cast<ConstantSDNode>(N01);
        if (Tmp0) {
          int64_t CN1 = Tmp0->getSExtValue();
          if (CN1 == INT64_C(0)) {
            SDValue N1 = N.getOperand(1);
            if (N1.getOpcode() == SPUISD::Hi) {
              SDValue N10 = N1.getOperand(0);
              if (N10.getOpcode() == ISD::TargetGlobalAddress &&
                  N00 == N10) {
                SDValue N11 = N1.getOperand(1);
                ConstantSDNode *Tmp2 = dyn_cast<ConstantSDNode>(N11);
                if (Tmp2) {
                  int64_t CN3 = Tmp2->getSExtValue();
                  if (CN3 == INT64_C(0)) {
                    SDNode *Result = Emit_6(N, SPU::ILHUhi, SPU::IOHLlo, MVT::i32, MVT::i32);
                    return Result;
                  }
                }
              }
            }
          }
        }
      }

      // Pattern: (add:i32 (SPUlo:i32 (texternalsym:i32):$in, 0:i32), (SPUhi:i32 (texternalsym:i32):$in, 0:i32))
      // Emits: (IOHLlo:i32 (ILHUhi:i32 (texternalsym:i32):$in), (texternalsym:i32):$in)
      // Pattern complexity = 25  cost = 2  size = 0
      if (N00.getOpcode() == ISD::TargetExternalSymbol) {
        SDValue N01 = N0.getOperand(1);
        ConstantSDNode *Tmp0 = dyn_cast<ConstantSDNode>(N01);
        if (Tmp0) {
          int64_t CN1 = Tmp0->getSExtValue();
          if (CN1 == INT64_C(0)) {
            SDValue N1 = N.getOperand(1);
            if (N1.getOpcode() == SPUISD::Hi) {
              SDValue N10 = N1.getOperand(0);
              if (N10.getOpcode() == ISD::TargetExternalSymbol &&
                  N00 == N10) {
                SDValue N11 = N1.getOperand(1);
                ConstantSDNode *Tmp2 = dyn_cast<ConstantSDNode>(N11);
                if (Tmp2) {
                  int64_t CN3 = Tmp2->getSExtValue();
                  if (CN3 == INT64_C(0)) {
                    SDNode *Result = Emit_6(N, SPU::ILHUhi, SPU::IOHLlo, MVT::i32, MVT::i32);
                    return Result;
                  }
                }
              }
            }
          }
        }
      }

      // Pattern: (add:i32 (SPUlo:i32 (tjumptable:i32):$in, 0:i32), (SPUhi:i32 (tjumptable:i32):$in, 0:i32))
      // Emits: (IOHLlo:i32 (ILHUhi:i32 (tjumptable:i32):$in), (tjumptable:i32):$in)
      // Pattern complexity = 25  cost = 2  size = 0
      if (N00.getOpcode() == ISD::TargetJumpTable) {
        SDValue N01 = N0.getOperand(1);
        ConstantSDNode *Tmp0 = dyn_cast<ConstantSDNode>(N01);
        if (Tmp0) {
          int64_t CN1 = Tmp0->getSExtValue();
          if (CN1 == INT64_C(0)) {
            SDValue N1 = N.getOperand(1);
            if (N1.getOpcode() == SPUISD::Hi) {
              SDValue N10 = N1.getOperand(0);
              if (N10.getOpcode() == ISD::TargetJumpTable &&
                  N00 == N10) {
                SDValue N11 = N1.getOperand(1);
                ConstantSDNode *Tmp2 = dyn_cast<ConstantSDNode>(N11);
                if (Tmp2) {
                  int64_t CN3 = Tmp2->getSExtValue();
                  if (CN3 == INT64_C(0)) {
                    SDNode *Result = Emit_6(N, SPU::ILHUhi, SPU::IOHLlo, MVT::i32, MVT::i32);
                    return Result;
                  }
                }
              }
            }
          }
        }
      }

      // Pattern: (add:i32 (SPUlo:i32 (tconstpool:i32):$in, 0:i32), (SPUhi:i32 (tconstpool:i32):$in, 0:i32))
      // Emits: (IOHLlo:i32 (ILHUhi:i32 (tconstpool:i32):$in), (tconstpool:i32):$in)
      // Pattern complexity = 25  cost = 2  size = 0
      if (N00.getOpcode() == ISD::TargetConstantPool) {
        SDValue N01 = N0.getOperand(1);
        ConstantSDNode *Tmp0 = dyn_cast<ConstantSDNode>(N01);
        if (Tmp0) {
          int64_t CN1 = Tmp0->getSExtValue();
          if (CN1 == INT64_C(0)) {
            SDValue N1 = N.getOperand(1);
            if (N1.getOpcode() == SPUISD::Hi) {
              SDValue N10 = N1.getOperand(0);
              if (N10.getOpcode() == ISD::TargetConstantPool &&
                  N00 == N10) {
                SDValue N11 = N1.getOperand(1);
                ConstantSDNode *Tmp2 = dyn_cast<ConstantSDNode>(N11);
                if (Tmp2) {
                  int64_t CN3 = Tmp2->getSExtValue();
                  if (CN3 == INT64_C(0)) {
                    SDNode *Result = Emit_6(N, SPU::ILHUhi, SPU::IOHLlo, MVT::i32, MVT::i32);
                    return Result;
                  }
                }
              }
            }
          }
        }
      }
    }
    if (N0.getOpcode() == ISD::MUL) {
      SDValue N00 = N0.getOperand(0);

      // Pattern: (add:i32 (mul:i32 (sext:i32 R16C:i16:$rA), (sext:i32 R16C:i16:$rB)), R32C:i32:$rC)
      // Emits: (MPYAr32_sext:i32 R16C:i16:$rA, R16C:i16:$rB, R32C:i32:$rC)
      // Pattern complexity = 12  cost = 1  size = 0
      if (N00.getOpcode() == ISD::SIGN_EXTEND) {
        SDValue N000 = N00.getOperand(0);
        SDValue N01 = N0.getOperand(1);
        if (N01.getOpcode() == ISD::SIGN_EXTEND) {
          SDValue N010 = N01.getOperand(0);
          SDValue N1 = N.getOperand(1);
          if (N000.getNode()->getValueType(0) == MVT::i16 &&
              N010.getNode()->getValueType(0) == MVT::i16) {
            SDNode *Result = Emit_4(N, SPU::MPYAr32_sext, MVT::i32);
            return Result;
          }
        }
      }

      // Pattern: (add:i32 (mul:i32 (sext_inreg:i32 R32C:i32:$rA, i16:Other), (sext_inreg:i32 R32C:i32:$rB, i16:Other)), R32C:i32:$rC)
      // Emits: (MPYAr32_sextinreg:i32 R32C:i32:$rA, R32C:i32:$rB, R32C:i32:$rC)
      // Pattern complexity = 12  cost = 1  size = 0
      if (N00.getOpcode() == ISD::SIGN_EXTEND_INREG) {
        SDValue N000 = N00.getOperand(0);
        SDValue N001 = N00.getOperand(1);
        if (cast<VTSDNode>(N001)->getVT() == MVT::i16) {
          SDValue N01 = N0.getOperand(1);
          if (N01.getOpcode() == ISD::SIGN_EXTEND_INREG) {
            SDValue N010 = N01.getOperand(0);
            SDValue N011 = N01.getOperand(1);
            if (cast<VTSDNode>(N011)->getVT() == MVT::i16) {
              SDNode *Result = Emit_5(N, SPU::MPYAr32_sextinreg, MVT::i32);
              return Result;
            }
          }
        }
      }
    }
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::MUL) {
        SDValue N10 = N1.getOperand(0);

        // Pattern: (add:i32 R32C:i32:$rC, (mul:i32 (sext:i32 R16C:i16:$rA), (sext:i32 R16C:i16:$rB)))
        // Emits: (MPYAr32_sext:i32 R16C:i16:$rA, R16C:i16:$rB, R32C:i32:$rC)
        // Pattern complexity = 12  cost = 1  size = 0
        if (N10.getOpcode() == ISD::SIGN_EXTEND) {
          SDValue N100 = N10.getOperand(0);
          SDValue N11 = N1.getOperand(1);
          if (N11.getOpcode() == ISD::SIGN_EXTEND) {
            SDValue N110 = N11.getOperand(0);
            if (N100.getNode()->getValueType(0) == MVT::i16 &&
                N110.getNode()->getValueType(0) == MVT::i16) {
              SDNode *Result = Emit_8(N, SPU::MPYAr32_sext, MVT::i32);
              return Result;
            }
          }
        }

        // Pattern: (add:i32 R32C:i32:$rC, (mul:i32 (sext_inreg:i32 R32C:i32:$rA, i16:Other), (sext_inreg:i32 R32C:i32:$rB, i16:Other)))
        // Emits: (MPYAr32_sextinreg:i32 R32C:i32:$rA, R32C:i32:$rB, R32C:i32:$rC)
        // Pattern complexity = 12  cost = 1  size = 0
        if (N10.getOpcode() == ISD::SIGN_EXTEND_INREG) {
          SDValue N100 = N10.getOperand(0);
          SDValue N101 = N10.getOperand(1);
          if (cast<VTSDNode>(N101)->getVT() == MVT::i16) {
            SDValue N11 = N1.getOperand(1);
            if (N11.getOpcode() == ISD::SIGN_EXTEND_INREG) {
              SDValue N110 = N11.getOperand(0);
              SDValue N111 = N11.getOperand(1);
              if (cast<VTSDNode>(N111)->getVT() == MVT::i16) {
                SDNode *Result = Emit_9(N, SPU::MPYAr32_sextinreg, MVT::i32);
                return Result;
              }
            }
          }
        }
      }
    }

    // Pattern: (add:i32 (sext:i32 (mul:i16 R16C:i16:$rA, R16C:i16:$rB)), R32C:i32:$rC)
    // Emits: (MPYAr32:i32 R16C:i16:$rA, R16C:i16:$rB, R32C:i32:$rC)
    // Pattern complexity = 9  cost = 1  size = 0
    if (N0.getOpcode() == ISD::SIGN_EXTEND) {
      SDValue N00 = N0.getOperand(0);
      if (N00.getOpcode() == ISD::MUL) {
        SDValue N000 = N00.getOperand(0);
        SDValue N001 = N00.getOperand(1);
        SDValue N1 = N.getOperand(1);
        if (N00.getNode()->getValueType(0) == MVT::i16) {
          SDNode *Result = Emit_3(N, SPU::MPYAr32, MVT::i32);
          return Result;
        }
      }
    }
    SDValue N1 = N.getOperand(1);

    // Pattern: (add:i32 R32C:i32:$rC, (sext:i32 (mul:i16 R16C:i16:$rA, R16C:i16:$rB)))
    // Emits: (MPYAr32:i32 R16C:i16:$rA, R16C:i16:$rB, R32C:i32:$rC)
    // Pattern complexity = 9  cost = 1  size = 0
    if (N1.getOpcode() == ISD::SIGN_EXTEND) {
      SDValue N10 = N1.getOperand(0);
      if (N10.getOpcode() == ISD::MUL) {
        SDValue N100 = N10.getOperand(0);
        SDValue N101 = N10.getOperand(1);
        if (N10.getNode()->getValueType(0) == MVT::i16) {
          SDNode *Result = Emit_7(N, SPU::MPYAr32, MVT::i32);
          return Result;
        }
      }
    }

    // Pattern: (add:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val)
    // Emits: (AIr32:i32 R32C:i32:$rA, (imm:i32):$val)
    // Pattern complexity = 7  cost = 1  size = 0
    if (N1.getOpcode() == ISD::Constant &&
        Predicate_i32ImmSExt10(N1.getNode())) {
      SDNode *Result = Emit_2(N, SPU::AIr32, MVT::i32);
      return Result;
    }
  }

  // Pattern: (add:i32 R32C:i32:$rA, R32C:i32:$rB)
  // Emits: (Ar32:i32 R32C:i32:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::Ar32, MVT::i32);
  return Result;
}

SDNode *Select_ISD_ADD_v16i8(const SDValue &N) {
  SDNode *Result = Emit_0(N, SPU::Av16i8, MVT::v16i8);
  return Result;
}

SDNode *Emit_10(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue Tmp2 = Transform_v8i16SExt10Imm_xform(N1.getNode());
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N0, Tmp2);
}
SDNode *Emit_11(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue Tmp2 = Transform_v8i16SExt10Imm_xform(N0.getNode());
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N1, Tmp2);
}
SDNode *Select_ISD_ADD_v8i16(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);

    // Pattern: (add:v8i16 VECREG:v8i16:$rA, (build_vector:v8i16)<<P:Predicate_v8i16SExt10Imm>><<X:v8i16SExt10Imm_xform>>:$val)
    // Emits: (AHIvec:v8i16 VECREG:v8i16:$rA, (v8i16SExt10Imm_xform:i16 (build_vector:v8i16):$val))
    // Pattern complexity = 7  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_v8i16SExt10Imm(N1.getNode())) {
        SDNode *Result = Emit_10(N, SPU::AHIvec, MVT::v8i16);
        return Result;
      }
    }

    // Pattern: (add:v8i16 (build_vector:v8i16)<<P:Predicate_v8i16SExt10Imm>><<X:v8i16SExt10Imm_xform>>:$val, VECREG:v8i16:$rA)
    // Emits: (AHIvec:v8i16 VECREG:v8i16:$rA, (v8i16SExt10Imm_xform:i16 (build_vector:v8i16):$val))
    // Pattern complexity = 7  cost = 1  size = 0
    if (N0.getOpcode() == ISD::BUILD_VECTOR &&
        Predicate_v8i16SExt10Imm(N0.getNode())) {
      SDNode *Result = Emit_11(N, SPU::AHIvec, MVT::v8i16);
      return Result;
    }
  }

  // Pattern: (add:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
  // Emits: (AHv8i16:v8i16 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::AHv8i16, MVT::v8i16);
  return Result;
}

SDNode *Emit_12(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue Tmp2 = Transform_v4i32SExt10Imm_xform(N1.getNode());
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N0, Tmp2);
}
SDNode *Emit_13(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue Tmp2 = Transform_v4i32SExt10Imm_xform(N0.getNode());
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N1, Tmp2);
}
SDNode *Select_ISD_ADD_v4i32(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);

    // Pattern: (add:v4i32 (bitconvert:v4i32 (mul:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)), VECREG:v4i32:$rC)
    // Emits: (MPYAv4i32:v4i32 VECREG:v8i16:$rA, VECREG:v8i16:$rB, VECREG:v4i32:$rC)
    // Pattern complexity = 9  cost = 1  size = 0
    if (N0.getOpcode() == ISD::BIT_CONVERT) {
      SDValue N00 = N0.getOperand(0);
      if (N00.getOpcode() == ISD::MUL) {
        SDValue N000 = N00.getOperand(0);
        SDValue N001 = N00.getOperand(1);
        SDValue N1 = N.getOperand(1);
        if (N00.getNode()->getValueType(0) == MVT::v8i16) {
          SDNode *Result = Emit_3(N, SPU::MPYAv4i32, MVT::v4i32);
          return Result;
        }
      }
    }
    {
      SDValue N1 = N.getOperand(1);

      // Pattern: (add:v4i32 VECREG:v4i32:$rC, (bitconvert:v4i32 (mul:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)))
      // Emits: (MPYAv4i32:v4i32 VECREG:v8i16:$rA, VECREG:v8i16:$rB, VECREG:v4i32:$rC)
      // Pattern complexity = 9  cost = 1  size = 0
      if (N1.getOpcode() == ISD::BIT_CONVERT) {
        SDValue N10 = N1.getOperand(0);
        if (N10.getOpcode() == ISD::MUL) {
          SDValue N100 = N10.getOperand(0);
          SDValue N101 = N10.getOperand(1);
          if (N10.getNode()->getValueType(0) == MVT::v8i16) {
            SDNode *Result = Emit_7(N, SPU::MPYAv4i32, MVT::v4i32);
            return Result;
          }
        }
      }

      // Pattern: (add:v4i32 VECREG:v4i32:$rA, (build_vector:v4i32)<<P:Predicate_v4i32SExt10Imm>><<X:v4i32SExt10Imm_xform>>:$val)
      // Emits: (AIv4i32:v4i32 VECREG:v4i32:$rA, (v4i32SExt10Imm_xform:i16 (build_vector:v4i32):$val))
      // Pattern complexity = 7  cost = 1  size = 0
      if (N1.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_v4i32SExt10Imm(N1.getNode())) {
        SDNode *Result = Emit_12(N, SPU::AIv4i32, MVT::v4i32);
        return Result;
      }
    }

    // Pattern: (add:v4i32 (build_vector:v4i32)<<P:Predicate_v4i32SExt10Imm>><<X:v4i32SExt10Imm_xform>>:$val, VECREG:v4i32:$rA)
    // Emits: (AIv4i32:v4i32 VECREG:v4i32:$rA, (v4i32SExt10Imm_xform:i16 (build_vector:v4i32):$val))
    // Pattern complexity = 7  cost = 1  size = 0
    if (N0.getOpcode() == ISD::BUILD_VECTOR &&
        Predicate_v4i32SExt10Imm(N0.getNode())) {
      SDNode *Result = Emit_13(N, SPU::AIv4i32, MVT::v4i32);
      return Result;
    }
  }

  // Pattern: (add:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
  // Emits: (Av4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::Av4i32, MVT::v4i32);
  return Result;
}

SDNode *Emit_14(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N0, N10);
}
SDNode *Emit_15(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue Tmp1 = CurDAG->getTargetConstant(((unsigned char) cast<ConstantSDNode>(N1)->getZExtValue()), MVT::i8);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N0, Tmp1);
}
SDNode *Emit_16(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N1 = N.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N1, N00);
}
SDNode *Select_ISD_AND_i8(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);

    // Pattern: (and:i8 R8C:i8:$rA, (xor:i8 R8C:i8:$rB, (imm:i8)<<P:Predicate_immAllOnes>>))
    // Emits: (ANDCr8:i8 R8C:i8:$rA, R8C:i8:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);
        SDValue N11 = N1.getOperand(1);
        if (N11.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N11.getNode())) {
          SDNode *Result = Emit_14(N, SPU::ANDCr8, MVT::i8);
          return Result;
        }
      }
    }

    // Pattern: (and:i8 (xor:i8 R8C:i8:$rB, (imm:i8)<<P:Predicate_immAllOnes>>), R8C:i8:$rA)
    // Emits: (ANDCr8:i8 R8C:i8:$rA, R8C:i8:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);
      if (N01.getOpcode() == ISD::Constant &&
          Predicate_immAllOnes(N01.getNode())) {
        SDNode *Result = Emit_16(N, SPU::ANDCr8, MVT::i8);
        return Result;
      }
    }

    // Pattern: (and:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immU8>>:$val)
    // Emits: (ANDBIr8:i8 R8C:i8:$rA, (imm:i8):$val)
    // Pattern complexity = 7  cost = 1  size = 0
    SDValue N1 = N.getOperand(1);
    if (N1.getOpcode() == ISD::Constant &&
        Predicate_immU8(N1.getNode())) {
      SDNode *Result = Emit_15(N, SPU::ANDBIr8, MVT::i8);
      return Result;
    }
  }

  // Pattern: (and:i8 R8C:i8:$rA, R8C:i8:$rB)
  // Emits: (ANDr8:i8 R8C:i8:$rA, R8C:i8:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::ANDr8, MVT::i8);
  return Result;
}

SDNode *Emit_17(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue Tmp1 = CurDAG->getTargetConstant(((unsigned short) cast<ConstantSDNode>(N1)->getZExtValue()), MVT::i16);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N00, Tmp1);
}
SDNode *Select_ISD_AND_i16(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);

    // Pattern: (and:i16 R16C:i16:$rA, (xor:i16 R16C:i16:$rB, (imm:i16)<<P:Predicate_immAllOnes>>))
    // Emits: (ANDCr16:i16 R16C:i16:$rA, R16C:i16:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);
        SDValue N11 = N1.getOperand(1);
        if (N11.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N11.getNode())) {
          SDNode *Result = Emit_14(N, SPU::ANDCr16, MVT::i16);
          return Result;
        }
      }
    }

    // Pattern: (and:i16 (zext:i16 R8C:i8:$rA), (imm:i16)<<P:Predicate_i16ImmUns10>>:$val)
    // Emits: (ANDHIi8i16:i16 R8C:i8:$rA, (imm:i16):$val)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::ZERO_EXTEND) {
      SDValue N00 = N0.getOperand(0);
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::Constant &&
          Predicate_i16ImmUns10(N1.getNode()) &&
          N00.getNode()->getValueType(0) == MVT::i8) {
        SDNode *Result = Emit_17(N, SPU::ANDHIi8i16, MVT::i16);
        return Result;
      }
    }

    // Pattern: (and:i16 (xor:i16 R16C:i16:$rB, (imm:i16)<<P:Predicate_immAllOnes>>), R16C:i16:$rA)
    // Emits: (ANDCr16:i16 R16C:i16:$rA, R16C:i16:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);
      if (N01.getOpcode() == ISD::Constant &&
          Predicate_immAllOnes(N01.getNode())) {
        SDNode *Result = Emit_16(N, SPU::ANDCr16, MVT::i16);
        return Result;
      }
    }

    // Pattern: (and:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmUns10>>:$val)
    // Emits: (ANDHIr16:i16 R16C:i16:$rA, (imm:i16):$val)
    // Pattern complexity = 7  cost = 1  size = 0
    SDValue N1 = N.getOperand(1);
    if (N1.getOpcode() == ISD::Constant &&
        Predicate_i16ImmUns10(N1.getNode())) {
      SDNode *Result = Emit_1(N, SPU::ANDHIr16, MVT::i16);
      return Result;
    }
  }

  // Pattern: (and:i16 R16C:i16:$rA, R16C:i16:$rB)
  // Emits: (ANDr16:i16 R16C:i16:$rA, R16C:i16:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::ANDr16, MVT::i16);
  return Result;
}

SDNode *Emit_18(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N1 = N.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N00, N1);
}
SDNode *Emit_19(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue Tmp1 = CurDAG->getTargetConstant(((unsigned) cast<ConstantSDNode>(N1)->getZExtValue()), MVT::i32);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N00, Tmp1);
}
SDNode *Emit_20(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N10, N0);
}
SDNode *Select_ISD_AND_i32(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);

    // Pattern: (and:i32 R32C:i32:$rA, (xor:i32 R32C:i32:$rB, (imm:i32)<<P:Predicate_immAllOnes>>))
    // Emits: (ANDCr32:i32 R32C:i32:$rA, R32C:i32:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);
        SDValue N11 = N1.getOperand(1);
        if (N11.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N11.getNode())) {
          SDNode *Result = Emit_14(N, SPU::ANDCr32, MVT::i32);
          return Result;
        }
      }
    }
    if (N0.getOpcode() == ISD::ZERO_EXTEND) {
      SDValue N00 = N0.getOperand(0);
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::Constant &&
          Predicate_i32ImmSExt10(N1.getNode())) {

        // Pattern: (and:i32 (zext:i32 R8C:i8:$rA), (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val)
        // Emits: (ANDIi8i32:i32 R8C:i8:$rA, (imm:i32):$val)
        // Pattern complexity = 10  cost = 1  size = 0
        if (N00.getNode()->getValueType(0) == MVT::i8) {
          SDNode *Result = Emit_19(N, SPU::ANDIi8i32, MVT::i32);
          return Result;
        }

        // Pattern: (and:i32 (zext:i32 R16C:i16:$rA), (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val)
        // Emits: (ANDIi16i32:i32 R16C:i16:$rA, (imm:i32):$val)
        // Pattern complexity = 10  cost = 1  size = 0
        if (N00.getNode()->getValueType(0) == MVT::i16) {
          SDNode *Result = Emit_19(N, SPU::ANDIi16i32, MVT::i32);
          return Result;
        }
      }
    }

    // Pattern: (and:i32 (xor:i32 R32C:i32:$rB, (imm:i32)<<P:Predicate_immAllOnes>>), R32C:i32:$rA)
    // Emits: (ANDCr32:i32 R32C:i32:$rA, R32C:i32:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);
      if (N01.getOpcode() == ISD::Constant &&
          Predicate_immAllOnes(N01.getNode())) {
        SDNode *Result = Emit_16(N, SPU::ANDCr32, MVT::i32);
        return Result;
      }
    }

    // Pattern: (and:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val)
    // Emits: (ANDIr32:i32 R32C:i32:$rA, (imm:i32):$val)
    // Pattern complexity = 7  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::Constant &&
          Predicate_i32ImmSExt10(N1.getNode())) {
        SDNode *Result = Emit_2(N, SPU::ANDIr32, MVT::i32);
        return Result;
      }
    }

    // Pattern: (and:i32 (zext:i32 R16C:i16:$rA), R32C:i32:$rB)
    // Emits: (ANDi16i32:i32 R16C:i16:$rA, R32C:i32:$rB)
    // Pattern complexity = 6  cost = 1  size = 0
    if (N0.getOpcode() == ISD::ZERO_EXTEND) {
      SDValue N00 = N0.getOperand(0);
      SDValue N1 = N.getOperand(1);
      if (N00.getNode()->getValueType(0) == MVT::i16) {
        SDNode *Result = Emit_18(N, SPU::ANDi16i32, MVT::i32);
        return Result;
      }
    }

    // Pattern: (and:i32 R32C:i32:$rB, (zext:i32 R16C:i16:$rA))
    // Emits: (ANDi16i32:i32 R16C:i16:$rA, R32C:i32:$rB)
    // Pattern complexity = 6  cost = 1  size = 0
    SDValue N1 = N.getOperand(1);
    if (N1.getOpcode() == ISD::ZERO_EXTEND) {
      SDValue N10 = N1.getOperand(0);
      if (N10.getNode()->getValueType(0) == MVT::i16) {
        SDNode *Result = Emit_20(N, SPU::ANDi16i32, MVT::i32);
        return Result;
      }
    }
  }

  // Pattern: (and:i32 R32C:i32:$rA, R32C:i32:$rB)
  // Emits: (ANDr32:i32 R32C:i32:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::ANDr32, MVT::i32);
  return Result;
}

SDNode *Select_ISD_AND_i64(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);

    // Pattern: (and:i64 R64C:i64:$rA, (xor:i64 R64C:i64:$rB, (imm:i64)<<P:Predicate_immAllOnes>>))
    // Emits: (ANDCr64:i64 R64C:i64:$rA, R64C:i64:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);
        SDValue N11 = N1.getOperand(1);
        if (N11.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N11.getNode())) {
          SDNode *Result = Emit_14(N, SPU::ANDCr64, MVT::i64);
          return Result;
        }
      }
    }

    // Pattern: (and:i64 (xor:i64 R64C:i64:$rB, (imm:i64)<<P:Predicate_immAllOnes>>), R64C:i64:$rA)
    // Emits: (ANDCr64:i64 R64C:i64:$rA, R64C:i64:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);
      if (N01.getOpcode() == ISD::Constant &&
          Predicate_immAllOnes(N01.getNode())) {
        SDNode *Result = Emit_16(N, SPU::ANDCr64, MVT::i64);
        return Result;
      }
    }
  }

  // Pattern: (and:i64 R64C:i64:$rA, R64C:i64:$rB)
  // Emits: (ANDr64:i64 R64C:i64:$rA, R64C:i64:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::ANDr64, MVT::i64);
  return Result;
}

SDNode *Select_ISD_AND_i128(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);

    // Pattern: (and:i128 GPRC:i128:$rA, (xor:i128 GPRC:i128:$rB, (imm:i128)<<P:Predicate_immAllOnes>>))
    // Emits: (ANDCr128:i128 GPRC:i128:$rA, GPRC:i128:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);
        SDValue N11 = N1.getOperand(1);
        if (N11.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N11.getNode())) {
          SDNode *Result = Emit_14(N, SPU::ANDCr128, MVT::i128);
          return Result;
        }
      }
    }

    // Pattern: (and:i128 (xor:i128 GPRC:i128:$rB, (imm:i128)<<P:Predicate_immAllOnes>>), GPRC:i128:$rA)
    // Emits: (ANDCr128:i128 GPRC:i128:$rA, GPRC:i128:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);
      if (N01.getOpcode() == ISD::Constant &&
          Predicate_immAllOnes(N01.getNode())) {
        SDNode *Result = Emit_16(N, SPU::ANDCr128, MVT::i128);
        return Result;
      }
    }
  }

  // Pattern: (and:i128 GPRC:i128:$rA, GPRC:i128:$rB)
  // Emits: (ANDr128:i128 GPRC:i128:$rA, GPRC:i128:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::ANDr128, MVT::i128);
  return Result;
}

SDNode *Emit_21(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue Tmp2 = Transform_v16i8U8Imm_xform(N1.getNode());
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N0, Tmp2);
}
SDNode *Emit_22(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N0, N11);
}
SDNode *Emit_23(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N1 = N.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N1, N01);
}
SDNode *Emit_24(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue Tmp2 = Transform_v16i8U8Imm_xform(N0.getNode());
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N1, Tmp2);
}
SDNode *Select_ISD_AND_v16i8(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);

        // Pattern: (and:v16i8 VECREG:v16i8:$rA, (xor:v16i8 VECREG:v16i8:$rB, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>))
        // Emits: (ANDCv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
        // Pattern complexity = 10  cost = 1  size = 0
        {
          SDValue N11 = N1.getOperand(1);
          if (N11.getOpcode() == ISD::BUILD_VECTOR &&
              Predicate_immAllOnesV(N11.getNode())) {
            SDNode *Result = Emit_14(N, SPU::ANDCv16i8, MVT::v16i8);
            return Result;
          }
        }

        // Pattern: (and:v16i8 VECREG:v16i8:$rA, (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rB))
        // Emits: (ANDCv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
        // Pattern complexity = 10  cost = 1  size = 0
        if (N10.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N10.getNode())) {
          SDNode *Result = Emit_22(N, SPU::ANDCv16i8, MVT::v16i8);
          return Result;
        }
      }
    }
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);

      // Pattern: (and:v16i8 (xor:v16i8 VECREG:v16i8:$rB, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>), VECREG:v16i8:$rA)
      // Emits: (ANDCv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      {
        SDValue N01 = N0.getOperand(1);
        if (N01.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N01.getNode())) {
          SDNode *Result = Emit_16(N, SPU::ANDCv16i8, MVT::v16i8);
          return Result;
        }
      }

      // Pattern: (and:v16i8 (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rB), VECREG:v16i8:$rA)
      // Emits: (ANDCv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      if (N00.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_immAllOnesV(N00.getNode())) {
        SDNode *Result = Emit_23(N, SPU::ANDCv16i8, MVT::v16i8);
        return Result;
      }
    }

    // Pattern: (and:v16i8 VECREG:v16i8:$rA, (build_vector:v16i8)<<P:Predicate_v16i8U8Imm>><<X:v16i8U8Imm_xform>>:$val)
    // Emits: (ANDBIv16i8:v16i8 VECREG:v16i8:$rA, (v16i8U8Imm_xform:i16 (build_vector:v16i8):$val))
    // Pattern complexity = 7  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_v16i8U8Imm(N1.getNode())) {
        SDNode *Result = Emit_21(N, SPU::ANDBIv16i8, MVT::v16i8);
        return Result;
      }
    }

    // Pattern: (and:v16i8 (build_vector:v16i8)<<P:Predicate_v16i8U8Imm>><<X:v16i8U8Imm_xform>>:$val, VECREG:v16i8:$rA)
    // Emits: (ANDBIv16i8:v16i8 VECREG:v16i8:$rA, (v16i8U8Imm_xform:i16 (build_vector:v16i8):$val))
    // Pattern complexity = 7  cost = 1  size = 0
    if (N0.getOpcode() == ISD::BUILD_VECTOR &&
        Predicate_v16i8U8Imm(N0.getNode())) {
      SDNode *Result = Emit_24(N, SPU::ANDBIv16i8, MVT::v16i8);
      return Result;
    }
  }

  // Pattern: (and:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
  // Emits: (ANDv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::ANDv16i8, MVT::v16i8);
  return Result;
}

SDNode *Select_ISD_AND_v8i16(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);

        // Pattern: (and:v8i16 VECREG:v8i16:$rA, (xor:v8i16 VECREG:v8i16:$rB, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>))
        // Emits: (ANDCv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
        // Pattern complexity = 10  cost = 1  size = 0
        {
          SDValue N11 = N1.getOperand(1);
          if (N11.getOpcode() == ISD::BUILD_VECTOR &&
              Predicate_immAllOnesV(N11.getNode())) {
            SDNode *Result = Emit_14(N, SPU::ANDCv8i16, MVT::v8i16);
            return Result;
          }
        }

        // Pattern: (and:v8i16 VECREG:v8i16:$rA, (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rB))
        // Emits: (ANDCv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
        // Pattern complexity = 10  cost = 1  size = 0
        if (N10.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N10.getNode())) {
          SDNode *Result = Emit_22(N, SPU::ANDCv8i16, MVT::v8i16);
          return Result;
        }
      }
    }
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);

      // Pattern: (and:v8i16 (xor:v8i16 VECREG:v8i16:$rB, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>), VECREG:v8i16:$rA)
      // Emits: (ANDCv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      {
        SDValue N01 = N0.getOperand(1);
        if (N01.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N01.getNode())) {
          SDNode *Result = Emit_16(N, SPU::ANDCv8i16, MVT::v8i16);
          return Result;
        }
      }

      // Pattern: (and:v8i16 (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rB), VECREG:v8i16:$rA)
      // Emits: (ANDCv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      if (N00.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_immAllOnesV(N00.getNode())) {
        SDNode *Result = Emit_23(N, SPU::ANDCv8i16, MVT::v8i16);
        return Result;
      }
    }

    // Pattern: (and:v8i16 VECREG:v8i16:$rA, (build_vector:v8i16)<<P:Predicate_v8i16SExt10Imm>><<X:v8i16SExt10Imm_xform>>:$val)
    // Emits: (ANDHIv8i16:v8i16 VECREG:v8i16:$rA, (v8i16SExt10Imm_xform:i16 (build_vector:v8i16):$val))
    // Pattern complexity = 7  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_v8i16SExt10Imm(N1.getNode())) {
        SDNode *Result = Emit_10(N, SPU::ANDHIv8i16, MVT::v8i16);
        return Result;
      }
    }

    // Pattern: (and:v8i16 (build_vector:v8i16)<<P:Predicate_v8i16SExt10Imm>><<X:v8i16SExt10Imm_xform>>:$val, VECREG:v8i16:$rA)
    // Emits: (ANDHIv8i16:v8i16 VECREG:v8i16:$rA, (v8i16SExt10Imm_xform:i16 (build_vector:v8i16):$val))
    // Pattern complexity = 7  cost = 1  size = 0
    if (N0.getOpcode() == ISD::BUILD_VECTOR &&
        Predicate_v8i16SExt10Imm(N0.getNode())) {
      SDNode *Result = Emit_11(N, SPU::ANDHIv8i16, MVT::v8i16);
      return Result;
    }
  }

  // Pattern: (and:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
  // Emits: (ANDv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::ANDv8i16, MVT::v8i16);
  return Result;
}

SDNode *Select_ISD_AND_v4i32(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);

        // Pattern: (and:v4i32 VECREG:v4i32:$rA, (xor:v4i32 VECREG:v4i32:$rB, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>))
        // Emits: (ANDCv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
        // Pattern complexity = 10  cost = 1  size = 0
        {
          SDValue N11 = N1.getOperand(1);
          if (N11.getOpcode() == ISD::BUILD_VECTOR &&
              Predicate_immAllOnesV(N11.getNode())) {
            SDNode *Result = Emit_14(N, SPU::ANDCv4i32, MVT::v4i32);
            return Result;
          }
        }

        // Pattern: (and:v4i32 VECREG:v4i32:$rA, (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rB))
        // Emits: (ANDCv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
        // Pattern complexity = 10  cost = 1  size = 0
        if (N10.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N10.getNode())) {
          SDNode *Result = Emit_22(N, SPU::ANDCv4i32, MVT::v4i32);
          return Result;
        }
      }
    }
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);

      // Pattern: (and:v4i32 (xor:v4i32 VECREG:v4i32:$rB, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>), VECREG:v4i32:$rA)
      // Emits: (ANDCv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      {
        SDValue N01 = N0.getOperand(1);
        if (N01.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N01.getNode())) {
          SDNode *Result = Emit_16(N, SPU::ANDCv4i32, MVT::v4i32);
          return Result;
        }
      }

      // Pattern: (and:v4i32 (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rB), VECREG:v4i32:$rA)
      // Emits: (ANDCv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      if (N00.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_immAllOnesV(N00.getNode())) {
        SDNode *Result = Emit_23(N, SPU::ANDCv4i32, MVT::v4i32);
        return Result;
      }
    }

    // Pattern: (and:v4i32 VECREG:v4i32:$rA, (build_vector:v4i32)<<P:Predicate_v4i32SExt10Imm>><<X:v4i32SExt10Imm_xform>>:$val)
    // Emits: (ANDIv4i32:v4i32 VECREG:v4i32:$rA, (v4i32SExt10Imm_xform:i16 (build_vector:v4i32):$val))
    // Pattern complexity = 7  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_v4i32SExt10Imm(N1.getNode())) {
        SDNode *Result = Emit_12(N, SPU::ANDIv4i32, MVT::v4i32);
        return Result;
      }
    }

    // Pattern: (and:v4i32 (build_vector:v4i32)<<P:Predicate_v4i32SExt10Imm>><<X:v4i32SExt10Imm_xform>>:$val, VECREG:v4i32:$rA)
    // Emits: (ANDIv4i32:v4i32 VECREG:v4i32:$rA, (v4i32SExt10Imm_xform:i16 (build_vector:v4i32):$val))
    // Pattern complexity = 7  cost = 1  size = 0
    if (N0.getOpcode() == ISD::BUILD_VECTOR &&
        Predicate_v4i32SExt10Imm(N0.getNode())) {
      SDNode *Result = Emit_13(N, SPU::ANDIv4i32, MVT::v4i32);
      return Result;
    }
  }

  // Pattern: (and:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
  // Emits: (ANDv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::ANDv4i32, MVT::v4i32);
  return Result;
}

SDNode *Select_ISD_AND_v2i64(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);

        // Pattern: (and:v2i64 VECREG:v2i64:$rA, (xor:v2i64 VECREG:v2i64:$rB, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>))
        // Emits: (ANDCv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
        // Pattern complexity = 10  cost = 1  size = 0
        {
          SDValue N11 = N1.getOperand(1);
          if (N11.getOpcode() == ISD::BUILD_VECTOR &&
              Predicate_immAllOnesV(N11.getNode())) {
            SDNode *Result = Emit_14(N, SPU::ANDCv2i64, MVT::v2i64);
            return Result;
          }
        }

        // Pattern: (and:v2i64 VECREG:v2i64:$rA, (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rB))
        // Emits: (ANDCv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
        // Pattern complexity = 10  cost = 1  size = 0
        if (N10.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N10.getNode())) {
          SDNode *Result = Emit_22(N, SPU::ANDCv2i64, MVT::v2i64);
          return Result;
        }
      }
    }
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);

      // Pattern: (and:v2i64 (xor:v2i64 VECREG:v2i64:$rB, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>), VECREG:v2i64:$rA)
      // Emits: (ANDCv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      {
        SDValue N01 = N0.getOperand(1);
        if (N01.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N01.getNode())) {
          SDNode *Result = Emit_16(N, SPU::ANDCv2i64, MVT::v2i64);
          return Result;
        }
      }

      // Pattern: (and:v2i64 (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rB), VECREG:v2i64:$rA)
      // Emits: (ANDCv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      if (N00.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_immAllOnesV(N00.getNode())) {
        SDNode *Result = Emit_23(N, SPU::ANDCv2i64, MVT::v2i64);
        return Result;
      }
    }
  }

  // Pattern: (and:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
  // Emits: (ANDv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::ANDv2i64, MVT::v2i64);
  return Result;
}

SDNode *Emit_25(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue Tmp1 = CurDAG->getTargetConstant(0x0ULL, MVT::i16);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N0, Tmp1);
}
SDNode *Select_ISD_ANY_EXTEND_i16(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::i8) {
    SDNode *Result = Emit_25(N, SPU::ORHIi8i16, MVT::i16);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_26(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue Tmp1 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N0, Tmp1);
}
SDNode *Select_ISD_ANY_EXTEND_i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);

  // Pattern: (anyext:i32 R8C:i8:$rSrc)
  // Emits: (ORIi8i32:i32 R8C:i8:$rSrc, 0:i32)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i8) {
    SDNode *Result = Emit_26(N, SPU::ORIi8i32, MVT::i32);
    return Result;
  }

  // Pattern: (anyext:i32 R16C:i16:$rSrc)
  // Emits: (ORIi16i32:i32 R16C:i16:$rSrc, 0:i32)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_26(N, SPU::ORIi16i32, MVT::i32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_27(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue Tmp1 = CurDAG->getTargetConstant(0xCULL, MVT::i32);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N0, Tmp1);
}
SDNode *Emit_28(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue Tmp1 = CurDAG->getTargetConstant(0x8ULL, MVT::i32);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N0, Tmp1);
}
SDNode *Emit_29(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, MVT VT0, MVT VT1, MVT VT2) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue Tmp1 = CurDAG->getTargetConstant(0xFFFFULL, MVT::i32);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, Tmp1), 0);
  SDValue Tmp3(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N0, Tmp2), 0);
  SDValue Tmp4 = CurDAG->getTargetConstant(0xCULL, MVT::i32);
  return CurDAG->SelectNodeTo(N.getNode(), Opc2, VT2, Tmp3, Tmp4);
}
SDNode *Emit_30(const SDValue &N, unsigned Opc0, unsigned Opc1, MVT VT0, MVT VT1) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue Tmp1 = CurDAG->getTargetConstant(0xFULL, MVT::i32);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0, Tmp1), 0);
  SDValue Tmp3 = CurDAG->getTargetConstant(0xCULL, MVT::i32);
  return CurDAG->SelectNodeTo(N.getNode(), Opc1, VT1, Tmp2, Tmp3);
}
SDNode *Select_ISD_ANY_EXTEND_i128(const SDValue &N) {
  SDValue N0 = N.getOperand(0);

  // Pattern: (anyext:i128 R32C:i32:$rSrc)
  // Emits: (ROTQMBYIr128_zext_r32:i128 R32C:i32:$rSrc, 12:i32)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_27(N, SPU::ROTQMBYIr128_zext_r32, MVT::i128);
    return Result;
  }

  // Pattern: (anyext:i128 R64C:i64:$rSrc)
  // Emits: (ROTQMBYIr128_zext_r64:i128 R64C:i64:$rSrc, 8:i32)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i64) {
    SDNode *Result = Emit_28(N, SPU::ROTQMBYIr128_zext_r64, MVT::i128);
    return Result;
  }

  // Pattern: (anyext:i128 R8C:i8:$rSrc)
  // Emits: (ROTQMBYIr128_zext_r32:i128 (ANDIi8i32:i32 R8C:i8:$rSrc, 15:i32), 12:i32)
  // Pattern complexity = 3  cost = 2  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i8) {
    SDNode *Result = Emit_30(N, SPU::ANDIi8i32, SPU::ROTQMBYIr128_zext_r32, MVT::i32, MVT::i128);
    return Result;
  }

  // Pattern: (anyext:i128 R16C:i16:$rSrc)
  // Emits: (ROTQMBYIr128_zext_r32:i128 (ANDi16i32:i32 R16C:i16:$rSrc, (ILAr32:i32 65535:i32)), 12:i32)
  // Pattern complexity = 3  cost = 3  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_29(N, SPU::ILAr32, SPU::ANDi16i32, SPU::ROTQMBYIr128_zext_r32, MVT::i32, MVT::i32, MVT::i128);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_31(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N0);
}
SDNode *Select_ISD_BIT_CONVERT_i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::f32) {
    SDNode *Result = Emit_31(N, SPU::ORf32_r32, MVT::i32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_BIT_CONVERT_i64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::f64) {
    SDNode *Result = Emit_31(N, SPU::ORf64_r64, MVT::i64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_32(const SDValue &N) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  ReplaceUses(N, N0);
  return NULL;
}
SDNode *Select_ISD_BIT_CONVERT_f32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::i32) {

    // Pattern: (bitconvert:f32 R32C:i32:$src)
    // Emits: R32FP:f32:$src
    // Pattern complexity = 3  cost = 0  size = 0
    {
      SDNode *Result = Emit_32(N);
      return Result;
    }

    // Pattern: (bitconvert:f32 R32C:i32:$rA)
    // Emits: (ORr32_f32:f32 R32C:i32:$rA)
    // Pattern complexity = 3  cost = 1  size = 0
    SDNode *Result = Emit_31(N, SPU::ORr32_f32, MVT::f32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_BIT_CONVERT_f64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::i64) {

    // Pattern: (bitconvert:f64 R64C:i64:$src)
    // Emits: R64FP:f64:$src
    // Pattern complexity = 3  cost = 0  size = 0
    {
      SDNode *Result = Emit_32(N);
      return Result;
    }

    // Pattern: (bitconvert:f64 R64C:i64:$rA)
    // Emits: (ORr64_f64:f64 R64C:i64:$rA)
    // Pattern complexity = 3  cost = 1  size = 0
    SDNode *Result = Emit_31(N, SPU::ORr64_f64, MVT::f64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_BIT_CONVERT_v16i8(const SDValue &N) {
  SDValue N0 = N.getOperand(0);

  // Pattern: (bitconvert:v16i8 VECREG:v8i16:$src)
  // Emits: VECREG:v16i8:$src
  // Pattern complexity = 3  cost = 0  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v8i16) {
    SDNode *Result = Emit_32(N);
    return Result;
  }

  // Pattern: (bitconvert:v16i8 VECREG:v4i32:$src)
  // Emits: VECREG:v16i8:$src
  // Pattern complexity = 3  cost = 0  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v4i32) {
    SDNode *Result = Emit_32(N);
    return Result;
  }

  // Pattern: (bitconvert:v16i8 VECREG:v2i64:$src)
  // Emits: VECREG:v16i8:$src
  // Pattern complexity = 3  cost = 0  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v2i64) {
    SDNode *Result = Emit_32(N);
    return Result;
  }

  // Pattern: (bitconvert:v16i8 VECREG:v4f32:$src)
  // Emits: VECREG:v16i8:$src
  // Pattern complexity = 3  cost = 0  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v4f32) {
    SDNode *Result = Emit_32(N);
    return Result;
  }

  // Pattern: (bitconvert:v16i8 VECREG:v2f64:$src)
  // Emits: VECREG:v16i8:$src
  // Pattern complexity = 3  cost = 0  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v2f64) {
    SDNode *Result = Emit_32(N);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_BIT_CONVERT_v8i16(const SDValue &N) {
  SDValue N0 = N.getOperand(0);

  // Pattern: (bitconvert:v8i16 VECREG:v16i8:$src)
  // Emits: VECREG:v8i16:$src
  // Pattern complexity = 3  cost = 0  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v16i8) {
    SDNode *Result = Emit_32(N);
    return Result;
  }

  // Pattern: (bitconvert:v8i16 VECREG:v4i32:$src)
  // Emits: VECREG:v8i16:$src
  // Pattern complexity = 3  cost = 0  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v4i32) {
    SDNode *Result = Emit_32(N);
    return Result;
  }

  // Pattern: (bitconvert:v8i16 VECREG:v2i64:$src)
  // Emits: VECREG:v8i16:$src
  // Pattern complexity = 3  cost = 0  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v2i64) {
    SDNode *Result = Emit_32(N);
    return Result;
  }

  // Pattern: (bitconvert:v8i16 VECREG:v4f32:$src)
  // Emits: VECREG:v8i16:$src
  // Pattern complexity = 3  cost = 0  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v4f32) {
    SDNode *Result = Emit_32(N);
    return Result;
  }

  // Pattern: (bitconvert:v8i16 VECREG:v2f64:$src)
  // Emits: VECREG:v8i16:$src
  // Pattern complexity = 3  cost = 0  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v2f64) {
    SDNode *Result = Emit_32(N);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_BIT_CONVERT_v4i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);

  // Pattern: (bitconvert:v4i32 VECREG:v16i8:$src)
  // Emits: VECREG:v4i32:$src
  // Pattern complexity = 3  cost = 0  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v16i8) {
    SDNode *Result = Emit_32(N);
    return Result;
  }

  // Pattern: (bitconvert:v4i32 VECREG:v8i16:$src)
  // Emits: VECREG:v4i32:$src
  // Pattern complexity = 3  cost = 0  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v8i16) {
    SDNode *Result = Emit_32(N);
    return Result;
  }

  // Pattern: (bitconvert:v4i32 VECREG:v2i64:$src)
  // Emits: VECREG:v4i32:$src
  // Pattern complexity = 3  cost = 0  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v2i64) {
    SDNode *Result = Emit_32(N);
    return Result;
  }

  // Pattern: (bitconvert:v4i32 VECREG:v4f32:$src)
  // Emits: VECREG:v4i32:$src
  // Pattern complexity = 3  cost = 0  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v4f32) {
    SDNode *Result = Emit_32(N);
    return Result;
  }

  // Pattern: (bitconvert:v4i32 VECREG:v2f64:$src)
  // Emits: VECREG:v4i32:$src
  // Pattern complexity = 3  cost = 0  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v2f64) {
    SDNode *Result = Emit_32(N);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_BIT_CONVERT_v2i64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);

  // Pattern: (bitconvert:v2i64 VECREG:v16i8:$src)
  // Emits: VECREG:v2i64:$src
  // Pattern complexity = 3  cost = 0  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v16i8) {
    SDNode *Result = Emit_32(N);
    return Result;
  }

  // Pattern: (bitconvert:v2i64 VECREG:v8i16:$src)
  // Emits: VECREG:v2i64:$src
  // Pattern complexity = 3  cost = 0  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v8i16) {
    SDNode *Result = Emit_32(N);
    return Result;
  }

  // Pattern: (bitconvert:v2i64 VECREG:v4i32:$src)
  // Emits: VECREG:v2i64:$src
  // Pattern complexity = 3  cost = 0  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v4i32) {
    SDNode *Result = Emit_32(N);
    return Result;
  }

  // Pattern: (bitconvert:v2i64 VECREG:v4f32:$src)
  // Emits: VECREG:v2i64:$src
  // Pattern complexity = 3  cost = 0  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v4f32) {
    SDNode *Result = Emit_32(N);
    return Result;
  }

  // Pattern: (bitconvert:v2i64 VECREG:v2f64:$src)
  // Emits: VECREG:v2i64:$src
  // Pattern complexity = 3  cost = 0  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v2f64) {
    SDNode *Result = Emit_32(N);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_33(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N00, N01);
}
SDNode *Select_ISD_BIT_CONVERT_v4f32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);

  // Pattern: (bitconvert:v4f32 (or:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB))
  // Emits: (ORv4f32:v4f32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
  // Pattern complexity = 6  cost = 1  size = 0
  if (N0.getOpcode() == ISD::OR) {
    SDValue N00 = N0.getOperand(0);
    SDValue N01 = N0.getOperand(1);
    if (N0.getNode()->getValueType(0) == MVT::v4i32) {
      SDNode *Result = Emit_33(N, SPU::ORv4f32, MVT::v4f32);
      return Result;
    }
  }

  // Pattern: (bitconvert:v4f32 VECREG:v16i8:$src)
  // Emits: VECREG:v4f32:$src
  // Pattern complexity = 3  cost = 0  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v16i8) {
    SDNode *Result = Emit_32(N);
    return Result;
  }

  // Pattern: (bitconvert:v4f32 VECREG:v8i16:$src)
  // Emits: VECREG:v4f32:$src
  // Pattern complexity = 3  cost = 0  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v8i16) {
    SDNode *Result = Emit_32(N);
    return Result;
  }

  // Pattern: (bitconvert:v4f32 VECREG:v2i64:$src)
  // Emits: VECREG:v4f32:$src
  // Pattern complexity = 3  cost = 0  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v2i64) {
    SDNode *Result = Emit_32(N);
    return Result;
  }

  // Pattern: (bitconvert:v4f32 VECREG:v4i32:$src)
  // Emits: VECREG:v4f32:$src
  // Pattern complexity = 3  cost = 0  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v4i32) {
    SDNode *Result = Emit_32(N);
    return Result;
  }

  // Pattern: (bitconvert:v4f32 VECREG:v2f64:$src)
  // Emits: VECREG:v4f32:$src
  // Pattern complexity = 3  cost = 0  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v2f64) {
    SDNode *Result = Emit_32(N);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_BIT_CONVERT_v2f64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);

  // Pattern: (bitconvert:v2f64 (or:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB))
  // Emits: (ORv2f64:v2f64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
  // Pattern complexity = 6  cost = 1  size = 0
  if (N0.getOpcode() == ISD::OR) {
    SDValue N00 = N0.getOperand(0);
    SDValue N01 = N0.getOperand(1);
    if (N0.getNode()->getValueType(0) == MVT::v2i64) {
      SDNode *Result = Emit_33(N, SPU::ORv2f64, MVT::v2f64);
      return Result;
    }
  }

  // Pattern: (bitconvert:v2f64 VECREG:v16i8:$src)
  // Emits: VECREG:v2f64:$src
  // Pattern complexity = 3  cost = 0  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v16i8) {
    SDNode *Result = Emit_32(N);
    return Result;
  }

  // Pattern: (bitconvert:v2f64 VECREG:v8i16:$src)
  // Emits: VECREG:v2f64:$src
  // Pattern complexity = 3  cost = 0  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v8i16) {
    SDNode *Result = Emit_32(N);
    return Result;
  }

  // Pattern: (bitconvert:v2f64 VECREG:v4i32:$src)
  // Emits: VECREG:v2f64:$src
  // Pattern complexity = 3  cost = 0  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v4i32) {
    SDNode *Result = Emit_32(N);
    return Result;
  }

  // Pattern: (bitconvert:v2f64 VECREG:v2i64:$src)
  // Emits: VECREG:v2f64:$src
  // Pattern complexity = 3  cost = 0  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v2i64) {
    SDNode *Result = Emit_32(N);
    return Result;
  }

  // Pattern: (bitconvert:v2f64 VECREG:v2f64:$src)
  // Emits: VECREG:v2f64:$src
  // Pattern complexity = 3  cost = 0  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v2f64) {
    SDNode *Result = Emit_32(N);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_34(const SDValue &N, unsigned Opc0) DISABLE_INLINE {
  SDValue Chain = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, MVT::Other, N1, Chain);
}
SDNode *Select_ISD_BR(const SDValue &N) {
  SDValue Chain = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getOpcode() == ISD::BasicBlock) {
    SDNode *Result = Emit_34(N, SPU::BR);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_35(const SDValue &N, unsigned Opc0) DISABLE_INLINE {
  SDValue Chain = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, MVT::Other, N1, N2, Chain);
}
SDNode *Emit_36(const SDValue &N, unsigned Opc0, unsigned Opc1, MVT VT0) DISABLE_INLINE {
  SDValue Chain = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  SDValue N12 = N1.getOperand(2);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N10, N11), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc1, MVT::Other, Tmp2, N2, Chain);
}
SDNode *Emit_37(const SDValue &N, unsigned Opc0, unsigned Opc1, MVT VT0) DISABLE_INLINE {
  SDValue Chain = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  SDValue N12 = N1.getOperand(2);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp1 = CurDAG->getTargetConstant(((unsigned short) cast<ConstantSDNode>(N11)->getZExtValue()), MVT::i16);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N10, Tmp1), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc1, MVT::Other, Tmp2, N2, Chain);
}
SDNode *Emit_38(const SDValue &N, unsigned Opc0, unsigned Opc1, MVT VT0) DISABLE_INLINE {
  SDValue Chain = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  SDValue N12 = N1.getOperand(2);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp1 = CurDAG->getTargetConstant(((unsigned) cast<ConstantSDNode>(N11)->getZExtValue()), MVT::i32);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N10, Tmp1), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc1, MVT::Other, Tmp2, N2, Chain);
}
SDNode *Emit_39(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, MVT VT0, MVT VT1, MVT VT2) DISABLE_INLINE {
  SDValue Chain = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  SDValue N12 = N1.getOperand(2);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N10, N11), 0);
  SDValue Tmp5(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N10, N11), 0);
  SDValue Tmp6(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, Tmp2, Tmp5), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc3, MVT::Other, Tmp6, N2, Chain);
}
SDNode *Emit_40(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, MVT VT0, MVT VT1, MVT VT2) DISABLE_INLINE {
  SDValue Chain = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  SDValue N12 = N1.getOperand(2);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp1 = CurDAG->getTargetConstant(((unsigned short) cast<ConstantSDNode>(N11)->getZExtValue()), MVT::i16);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N10, Tmp1), 0);
  SDValue Tmp4(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N10, Tmp1), 0);
  SDValue Tmp5(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, Tmp2, Tmp4), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc3, MVT::Other, Tmp5, N2, Chain);
}
SDNode *Emit_41(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, MVT VT0, MVT VT1, MVT VT2) DISABLE_INLINE {
  SDValue Chain = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  SDValue N12 = N1.getOperand(2);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp1 = CurDAG->getTargetConstant(((unsigned) cast<ConstantSDNode>(N11)->getZExtValue()), MVT::i32);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N10, Tmp1), 0);
  SDValue Tmp4(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N10, Tmp1), 0);
  SDValue Tmp5(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, Tmp2, Tmp4), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc3, MVT::Other, Tmp5, N2, Chain);
}
SDNode *Emit_42(const SDValue &N, unsigned Opc0) DISABLE_INLINE {
  SDValue Chain = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  SDValue N12 = N1.getOperand(2);
  SDValue N2 = N.getOperand(2);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, MVT::Other, N10, N2, Chain);
}
SDNode *Select_ISD_BRCOND(const SDValue &N) {
  SDValue Chain = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getOpcode() == ISD::SETCC) {
    SDValue N10 = N1.getOperand(0);
    SDValue N11 = N1.getOperand(1);
    {
      ConstantSDNode *Tmp0 = dyn_cast<ConstantSDNode>(N11);
      if (Tmp0) {
        int64_t CN1 = Tmp0->getSExtValue();
        if (CN1 == INT64_C(0)) {
          SDValue N12 = N1.getOperand(2);

          // Pattern: (brcond:isVoid (setcc:i16 R16C:i16:$rA, 0:i16, SETEQ:Other), (bb:Other):$dest)
          // Emits: (BRHZr16:isVoid R16C:i16:$rA, (bb:Other):$dest)
          // Pattern complexity = 11  cost = 1  size = 0
          if (cast<CondCodeSDNode>(N12)->get() == ISD::SETEQ) {
            SDValue N2 = N.getOperand(2);
            if (N2.getOpcode() == ISD::BasicBlock &&
                N1.getNode()->getValueType(0) == MVT::i16 &&
                N10.getNode()->getValueType(0) == MVT::i16) {
              SDNode *Result = Emit_42(N, SPU::BRHZr16);
              return Result;
            }
          }

          // Pattern: (brcond:isVoid (setcc:i16 R16C:i16:$rA, 0:i16, SETNE:Other), (bb:Other):$dest)
          // Emits: (BRHNZr16:isVoid R16C:i16:$rA, (bb:Other):$dest)
          // Pattern complexity = 11  cost = 1  size = 0
          if (cast<CondCodeSDNode>(N12)->get() == ISD::SETNE) {
            SDValue N2 = N.getOperand(2);
            if (N2.getOpcode() == ISD::BasicBlock &&
                N1.getNode()->getValueType(0) == MVT::i16 &&
                N10.getNode()->getValueType(0) == MVT::i16) {
              SDNode *Result = Emit_42(N, SPU::BRHNZr16);
              return Result;
            }
          }

          // Pattern: (brcond:isVoid (setcc:i32 R32C:i32:$rA, 0:i32, SETEQ:Other), (bb:Other):$dest)
          // Emits: (BRZr32:isVoid R32C:i32:$rA, (bb:Other):$dest)
          // Pattern complexity = 11  cost = 1  size = 0
          if (cast<CondCodeSDNode>(N12)->get() == ISD::SETEQ) {
            SDValue N2 = N.getOperand(2);
            if (N2.getOpcode() == ISD::BasicBlock &&
                N1.getNode()->getValueType(0) == MVT::i32 &&
                N10.getNode()->getValueType(0) == MVT::i32) {
              SDNode *Result = Emit_42(N, SPU::BRZr32);
              return Result;
            }
          }

          // Pattern: (brcond:isVoid (setcc:i32 R32C:i32:$rA, 0:i32, SETNE:Other), (bb:Other):$dest)
          // Emits: (BRNZr32:isVoid R32C:i32:$rA, (bb:Other):$dest)
          // Pattern complexity = 11  cost = 1  size = 0
          if (cast<CondCodeSDNode>(N12)->get() == ISD::SETNE) {
            SDValue N2 = N.getOperand(2);
            if (N2.getOpcode() == ISD::BasicBlock &&
                N1.getNode()->getValueType(0) == MVT::i32 &&
                N10.getNode()->getValueType(0) == MVT::i32) {
              SDNode *Result = Emit_42(N, SPU::BRNZr32);
              return Result;
            }
          }
        }
      }
    }
    if (N11.getOpcode() == ISD::Constant) {

      // Pattern: (brcond:isVoid (setcc:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val, SETEQ:Other), (bb:Other):$dest)
      // Emits: (BRHNZr16:isVoid (CEQHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val), (bb:Other):$dest)
      // Pattern complexity = 10  cost = 2  size = 0
      if (Predicate_i16ImmSExt10(N11.getNode())) {
        SDValue N12 = N1.getOperand(2);
        if (cast<CondCodeSDNode>(N12)->get() == ISD::SETEQ) {
          SDValue N2 = N.getOperand(2);
          if (N2.getOpcode() == ISD::BasicBlock &&
              N1.getNode()->getValueType(0) == MVT::i16 &&
              N10.getNode()->getValueType(0) == MVT::i16) {
            SDNode *Result = Emit_37(N, SPU::CEQHIr16, SPU::BRHNZr16, MVT::i16);
            return Result;
          }
        }
      }

      // Pattern: (brcond:isVoid (setcc:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val, SETEQ:Other), (bb:Other):$dest)
      // Emits: (BRNZr32:isVoid (CEQIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val), (bb:Other):$dest)
      // Pattern complexity = 10  cost = 2  size = 0
      if (Predicate_i32ImmSExt10(N11.getNode())) {
        SDValue N12 = N1.getOperand(2);
        if (cast<CondCodeSDNode>(N12)->get() == ISD::SETEQ) {
          SDValue N2 = N.getOperand(2);
          if (N2.getOpcode() == ISD::BasicBlock &&
              N1.getNode()->getValueType(0) == MVT::i32 &&
              N10.getNode()->getValueType(0) == MVT::i32) {
            SDNode *Result = Emit_38(N, SPU::CEQIr32, SPU::BRNZr32, MVT::i32);
            return Result;
          }
        }
      }

      // Pattern: (brcond:isVoid (setcc:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val, SETGT:Other), (bb:Other):$dest)
      // Emits: (BRHNZr16:isVoid (CGTHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val), (bb:Other):$dest)
      // Pattern complexity = 10  cost = 2  size = 0
      if (Predicate_i16ImmSExt10(N11.getNode())) {
        SDValue N12 = N1.getOperand(2);
        if (cast<CondCodeSDNode>(N12)->get() == ISD::SETGT) {
          SDValue N2 = N.getOperand(2);
          if (N2.getOpcode() == ISD::BasicBlock &&
              N1.getNode()->getValueType(0) == MVT::i16 &&
              N10.getNode()->getValueType(0) == MVT::i16) {
            SDNode *Result = Emit_37(N, SPU::CGTHIr16, SPU::BRHNZr16, MVT::i16);
            return Result;
          }
        }
      }

      // Pattern: (brcond:isVoid (setcc:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val, SETGT:Other), (bb:Other):$dest)
      // Emits: (BRNZr32:isVoid (CGTIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val), (bb:Other):$dest)
      // Pattern complexity = 10  cost = 2  size = 0
      if (Predicate_i32ImmSExt10(N11.getNode())) {
        SDValue N12 = N1.getOperand(2);
        if (cast<CondCodeSDNode>(N12)->get() == ISD::SETGT) {
          SDValue N2 = N.getOperand(2);
          if (N2.getOpcode() == ISD::BasicBlock &&
              N1.getNode()->getValueType(0) == MVT::i32 &&
              N10.getNode()->getValueType(0) == MVT::i32) {
            SDNode *Result = Emit_38(N, SPU::CGTIr32, SPU::BRNZr32, MVT::i32);
            return Result;
          }
        }
      }

      // Pattern: (brcond:isVoid (setcc:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val, SETLE:Other), (bb:Other):$dest)
      // Emits: (BRHZr16:isVoid (CGTHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val), (bb:Other):$dest)
      // Pattern complexity = 10  cost = 2  size = 0
      if (Predicate_i16ImmSExt10(N11.getNode())) {
        SDValue N12 = N1.getOperand(2);
        if (cast<CondCodeSDNode>(N12)->get() == ISD::SETLE) {
          SDValue N2 = N.getOperand(2);
          if (N2.getOpcode() == ISD::BasicBlock &&
              N1.getNode()->getValueType(0) == MVT::i16 &&
              N10.getNode()->getValueType(0) == MVT::i16) {
            SDNode *Result = Emit_37(N, SPU::CGTHIr16, SPU::BRHZr16, MVT::i16);
            return Result;
          }
        }
      }

      // Pattern: (brcond:isVoid (setcc:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val, SETLE:Other), (bb:Other):$dest)
      // Emits: (BRZr32:isVoid (CGTIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val), (bb:Other):$dest)
      // Pattern complexity = 10  cost = 2  size = 0
      if (Predicate_i32ImmSExt10(N11.getNode())) {
        SDValue N12 = N1.getOperand(2);
        if (cast<CondCodeSDNode>(N12)->get() == ISD::SETLE) {
          SDValue N2 = N.getOperand(2);
          if (N2.getOpcode() == ISD::BasicBlock &&
              N1.getNode()->getValueType(0) == MVT::i32 &&
              N10.getNode()->getValueType(0) == MVT::i32) {
            SDNode *Result = Emit_38(N, SPU::CGTIr32, SPU::BRZr32, MVT::i32);
            return Result;
          }
        }
      }

      // Pattern: (brcond:isVoid (setcc:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val, SETNE:Other), (bb:Other):$dest)
      // Emits: (BRHZr16:isVoid (CEQHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val), (bb:Other):$dest)
      // Pattern complexity = 10  cost = 2  size = 0
      if (Predicate_i16ImmSExt10(N11.getNode())) {
        SDValue N12 = N1.getOperand(2);
        if (cast<CondCodeSDNode>(N12)->get() == ISD::SETNE) {
          SDValue N2 = N.getOperand(2);
          if (N2.getOpcode() == ISD::BasicBlock &&
              N1.getNode()->getValueType(0) == MVT::i16 &&
              N10.getNode()->getValueType(0) == MVT::i16) {
            SDNode *Result = Emit_37(N, SPU::CEQHIr16, SPU::BRHZr16, MVT::i16);
            return Result;
          }
        }
      }

      // Pattern: (brcond:isVoid (setcc:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val, SETNE:Other), (bb:Other):$dest)
      // Emits: (BRZr32:isVoid (CEQIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val), (bb:Other):$dest)
      // Pattern complexity = 10  cost = 2  size = 0
      if (Predicate_i32ImmSExt10(N11.getNode())) {
        SDValue N12 = N1.getOperand(2);
        if (cast<CondCodeSDNode>(N12)->get() == ISD::SETNE) {
          SDValue N2 = N.getOperand(2);
          if (N2.getOpcode() == ISD::BasicBlock &&
              N1.getNode()->getValueType(0) == MVT::i32 &&
              N10.getNode()->getValueType(0) == MVT::i32) {
            SDNode *Result = Emit_38(N, SPU::CEQIr32, SPU::BRZr32, MVT::i32);
            return Result;
          }
        }
      }

      // Pattern: (brcond:isVoid (setcc:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val, SETUGT:Other), (bb:Other):$dest)
      // Emits: (BRHNZr16:isVoid (CLGTHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val), (bb:Other):$dest)
      // Pattern complexity = 10  cost = 2  size = 0
      if (Predicate_i16ImmSExt10(N11.getNode())) {
        SDValue N12 = N1.getOperand(2);
        if (cast<CondCodeSDNode>(N12)->get() == ISD::SETUGT) {
          SDValue N2 = N.getOperand(2);
          if (N2.getOpcode() == ISD::BasicBlock &&
              N1.getNode()->getValueType(0) == MVT::i16 &&
              N10.getNode()->getValueType(0) == MVT::i16) {
            SDNode *Result = Emit_37(N, SPU::CLGTHIr16, SPU::BRHNZr16, MVT::i16);
            return Result;
          }
        }
      }

      // Pattern: (brcond:isVoid (setcc:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val, SETUGT:Other), (bb:Other):$dest)
      // Emits: (BRNZr32:isVoid (CLGTIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val), (bb:Other):$dest)
      // Pattern complexity = 10  cost = 2  size = 0
      if (Predicate_i32ImmSExt10(N11.getNode())) {
        SDValue N12 = N1.getOperand(2);
        if (cast<CondCodeSDNode>(N12)->get() == ISD::SETUGT) {
          SDValue N2 = N.getOperand(2);
          if (N2.getOpcode() == ISD::BasicBlock &&
              N1.getNode()->getValueType(0) == MVT::i32 &&
              N10.getNode()->getValueType(0) == MVT::i32) {
            SDNode *Result = Emit_38(N, SPU::CLGTIr32, SPU::BRNZr32, MVT::i32);
            return Result;
          }
        }
      }

      // Pattern: (brcond:isVoid (setcc:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val, SETULE:Other), (bb:Other):$dest)
      // Emits: (BRHZr16:isVoid (CLGTHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val), (bb:Other):$dest)
      // Pattern complexity = 10  cost = 2  size = 0
      if (Predicate_i16ImmSExt10(N11.getNode())) {
        SDValue N12 = N1.getOperand(2);
        if (cast<CondCodeSDNode>(N12)->get() == ISD::SETULE) {
          SDValue N2 = N.getOperand(2);
          if (N2.getOpcode() == ISD::BasicBlock &&
              N1.getNode()->getValueType(0) == MVT::i16 &&
              N10.getNode()->getValueType(0) == MVT::i16) {
            SDNode *Result = Emit_37(N, SPU::CLGTHIr16, SPU::BRHZr16, MVT::i16);
            return Result;
          }
        }
      }

      // Pattern: (brcond:isVoid (setcc:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val, SETULE:Other), (bb:Other):$dest)
      // Emits: (BRZr32:isVoid (CLGTIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val), (bb:Other):$dest)
      // Pattern complexity = 10  cost = 2  size = 0
      if (Predicate_i32ImmSExt10(N11.getNode())) {
        SDValue N12 = N1.getOperand(2);
        if (cast<CondCodeSDNode>(N12)->get() == ISD::SETULE) {
          SDValue N2 = N.getOperand(2);
          if (N2.getOpcode() == ISD::BasicBlock &&
              N1.getNode()->getValueType(0) == MVT::i32 &&
              N10.getNode()->getValueType(0) == MVT::i32) {
            SDNode *Result = Emit_38(N, SPU::CLGTIr32, SPU::BRZr32, MVT::i32);
            return Result;
          }
        }
      }

      // Pattern: (brcond:isVoid (setcc:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val, SETGE:Other), (bb:Other):$dest)
      // Emits: (BRHNZr16:isVoid (ORr16:i16 (CGTHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val), (CEQHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val)), (bb:Other):$dest)
      // Pattern complexity = 10  cost = 4  size = 0
      if (Predicate_i16ImmSExt10(N11.getNode())) {
        SDValue N12 = N1.getOperand(2);
        if (cast<CondCodeSDNode>(N12)->get() == ISD::SETGE) {
          SDValue N2 = N.getOperand(2);
          if (N2.getOpcode() == ISD::BasicBlock &&
              N1.getNode()->getValueType(0) == MVT::i16 &&
              N10.getNode()->getValueType(0) == MVT::i16) {
            SDNode *Result = Emit_40(N, SPU::CGTHIr16, SPU::CEQHIr16, SPU::ORr16, SPU::BRHNZr16, MVT::i16, MVT::i16, MVT::i16);
            return Result;
          }
        }
      }

      // Pattern: (brcond:isVoid (setcc:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val, SETGE:Other), (bb:Other):$dest)
      // Emits: (BRNZr32:isVoid (ORr32:i32 (CGTIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val), (CEQIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val)), (bb:Other):$dest)
      // Pattern complexity = 10  cost = 4  size = 0
      if (Predicate_i32ImmSExt10(N11.getNode())) {
        SDValue N12 = N1.getOperand(2);
        if (cast<CondCodeSDNode>(N12)->get() == ISD::SETGE) {
          SDValue N2 = N.getOperand(2);
          if (N2.getOpcode() == ISD::BasicBlock &&
              N1.getNode()->getValueType(0) == MVT::i32 &&
              N10.getNode()->getValueType(0) == MVT::i32) {
            SDNode *Result = Emit_41(N, SPU::CGTIr32, SPU::CEQIr32, SPU::ORr32, SPU::BRNZr32, MVT::i32, MVT::i32, MVT::i32);
            return Result;
          }
        }
      }

      // Pattern: (brcond:isVoid (setcc:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val, SETLT:Other), (bb:Other):$dest)
      // Emits: (BRHZr16:isVoid (ORr16:i16 (CGTHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val), (CEQHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val)), (bb:Other):$dest)
      // Pattern complexity = 10  cost = 4  size = 0
      if (Predicate_i16ImmSExt10(N11.getNode())) {
        SDValue N12 = N1.getOperand(2);
        if (cast<CondCodeSDNode>(N12)->get() == ISD::SETLT) {
          SDValue N2 = N.getOperand(2);
          if (N2.getOpcode() == ISD::BasicBlock &&
              N1.getNode()->getValueType(0) == MVT::i16 &&
              N10.getNode()->getValueType(0) == MVT::i16) {
            SDNode *Result = Emit_40(N, SPU::CGTHIr16, SPU::CEQHIr16, SPU::ORr16, SPU::BRHZr16, MVT::i16, MVT::i16, MVT::i16);
            return Result;
          }
        }
      }

      // Pattern: (brcond:isVoid (setcc:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val, SETLT:Other), (bb:Other):$dest)
      // Emits: (BRZr32:isVoid (ORr32:i32 (CGTIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val), (CEQIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val)), (bb:Other):$dest)
      // Pattern complexity = 10  cost = 4  size = 0
      if (Predicate_i32ImmSExt10(N11.getNode())) {
        SDValue N12 = N1.getOperand(2);
        if (cast<CondCodeSDNode>(N12)->get() == ISD::SETLT) {
          SDValue N2 = N.getOperand(2);
          if (N2.getOpcode() == ISD::BasicBlock &&
              N1.getNode()->getValueType(0) == MVT::i32 &&
              N10.getNode()->getValueType(0) == MVT::i32) {
            SDNode *Result = Emit_41(N, SPU::CGTIr32, SPU::CEQIr32, SPU::ORr32, SPU::BRZr32, MVT::i32, MVT::i32, MVT::i32);
            return Result;
          }
        }
      }

      // Pattern: (brcond:isVoid (setcc:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val, SETUGE:Other), (bb:Other):$dest)
      // Emits: (BRHNZr16:isVoid (ORr16:i16 (CLGTHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val), (CEQHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val)), (bb:Other):$dest)
      // Pattern complexity = 10  cost = 4  size = 0
      if (Predicate_i16ImmSExt10(N11.getNode())) {
        SDValue N12 = N1.getOperand(2);
        if (cast<CondCodeSDNode>(N12)->get() == ISD::SETUGE) {
          SDValue N2 = N.getOperand(2);
          if (N2.getOpcode() == ISD::BasicBlock &&
              N1.getNode()->getValueType(0) == MVT::i16 &&
              N10.getNode()->getValueType(0) == MVT::i16) {
            SDNode *Result = Emit_40(N, SPU::CLGTHIr16, SPU::CEQHIr16, SPU::ORr16, SPU::BRHNZr16, MVT::i16, MVT::i16, MVT::i16);
            return Result;
          }
        }
      }

      // Pattern: (brcond:isVoid (setcc:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val, SETUGE:Other), (bb:Other):$dest)
      // Emits: (BRNZr32:isVoid (ORr32:i32 (CLGTIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val), (CEQIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val)), (bb:Other):$dest)
      // Pattern complexity = 10  cost = 4  size = 0
      if (Predicate_i32ImmSExt10(N11.getNode())) {
        SDValue N12 = N1.getOperand(2);
        if (cast<CondCodeSDNode>(N12)->get() == ISD::SETUGE) {
          SDValue N2 = N.getOperand(2);
          if (N2.getOpcode() == ISD::BasicBlock &&
              N1.getNode()->getValueType(0) == MVT::i32 &&
              N10.getNode()->getValueType(0) == MVT::i32) {
            SDNode *Result = Emit_41(N, SPU::CLGTIr32, SPU::CEQIr32, SPU::ORr32, SPU::BRNZr32, MVT::i32, MVT::i32, MVT::i32);
            return Result;
          }
        }
      }

      // Pattern: (brcond:isVoid (setcc:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val, SETULT:Other), (bb:Other):$dest)
      // Emits: (BRHZr16:isVoid (ORr16:i16 (CLGTHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val), (CEQHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val)), (bb:Other):$dest)
      // Pattern complexity = 10  cost = 4  size = 0
      if (Predicate_i16ImmSExt10(N11.getNode())) {
        SDValue N12 = N1.getOperand(2);
        if (cast<CondCodeSDNode>(N12)->get() == ISD::SETULT) {
          SDValue N2 = N.getOperand(2);
          if (N2.getOpcode() == ISD::BasicBlock &&
              N1.getNode()->getValueType(0) == MVT::i16 &&
              N10.getNode()->getValueType(0) == MVT::i16) {
            SDNode *Result = Emit_40(N, SPU::CLGTHIr16, SPU::CEQHIr16, SPU::ORr16, SPU::BRHZr16, MVT::i16, MVT::i16, MVT::i16);
            return Result;
          }
        }
      }

      // Pattern: (brcond:isVoid (setcc:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val, SETULT:Other), (bb:Other):$dest)
      // Emits: (BRZr32:isVoid (ORr32:i32 (CLGTIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val), (CEQIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val)), (bb:Other):$dest)
      // Pattern complexity = 10  cost = 4  size = 0
      if (Predicate_i32ImmSExt10(N11.getNode())) {
        SDValue N12 = N1.getOperand(2);
        if (cast<CondCodeSDNode>(N12)->get() == ISD::SETULT) {
          SDValue N2 = N.getOperand(2);
          if (N2.getOpcode() == ISD::BasicBlock &&
              N1.getNode()->getValueType(0) == MVT::i32 &&
              N10.getNode()->getValueType(0) == MVT::i32) {
            SDNode *Result = Emit_41(N, SPU::CLGTIr32, SPU::CEQIr32, SPU::ORr32, SPU::BRZr32, MVT::i32, MVT::i32, MVT::i32);
            return Result;
          }
        }
      }
    }
    SDValue N12 = N1.getOperand(2);
    if (cast<CondCodeSDNode>(N12)->get() == ISD::SETEQ) {
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::BasicBlock) {

        // Pattern: (brcond:isVoid (setcc:i16 R16C:i16:$rA, R16C:i16:$rB, SETEQ:Other), (bb:Other):$dest)
        // Emits: (BRHNZr16:isVoid (CEQHr16:i16 R16C:i16:$rA, R16:i16:$rB), (bb:Other):$dest)
        // Pattern complexity = 6  cost = 2  size = 0
        if (N1.getNode()->getValueType(0) == MVT::i16 &&
            N10.getNode()->getValueType(0) == MVT::i16) {
          SDNode *Result = Emit_36(N, SPU::CEQHr16, SPU::BRHNZr16, MVT::i16);
          return Result;
        }

        // Pattern: (brcond:isVoid (setcc:i32 R32C:i32:$rA, R32C:i32:$rB, SETEQ:Other), (bb:Other):$dest)
        // Emits: (BRNZr32:isVoid (CEQr32:i32 R32C:i32:$rA, R32C:i32:$rB), (bb:Other):$dest)
        // Pattern complexity = 6  cost = 2  size = 0
        if (N1.getNode()->getValueType(0) == MVT::i32 &&
            N10.getNode()->getValueType(0) == MVT::i32) {
          SDNode *Result = Emit_36(N, SPU::CEQr32, SPU::BRNZr32, MVT::i32);
          return Result;
        }
      }
    }
    if (cast<CondCodeSDNode>(N12)->get() == ISD::SETGT) {
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::BasicBlock) {

        // Pattern: (brcond:isVoid (setcc:i16 R16C:i16:$rA, R16C:i16:$rB, SETGT:Other), (bb:Other):$dest)
        // Emits: (BRHNZr16:isVoid (CGTHr16:i16 R16C:i16:$rA, R16:i16:$rB), (bb:Other):$dest)
        // Pattern complexity = 6  cost = 2  size = 0
        if (N1.getNode()->getValueType(0) == MVT::i16 &&
            N10.getNode()->getValueType(0) == MVT::i16) {
          SDNode *Result = Emit_36(N, SPU::CGTHr16, SPU::BRHNZr16, MVT::i16);
          return Result;
        }

        // Pattern: (brcond:isVoid (setcc:i32 R32C:i32:$rA, R32C:i32:$rB, SETGT:Other), (bb:Other):$dest)
        // Emits: (BRNZr32:isVoid (CGTr32:i32 R32C:i32:$rA, R32C:i32:$rB), (bb:Other):$dest)
        // Pattern complexity = 6  cost = 2  size = 0
        if (N1.getNode()->getValueType(0) == MVT::i32 &&
            N10.getNode()->getValueType(0) == MVT::i32) {
          SDNode *Result = Emit_36(N, SPU::CGTr32, SPU::BRNZr32, MVT::i32);
          return Result;
        }
      }
    }
    if (cast<CondCodeSDNode>(N12)->get() == ISD::SETLE) {
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::BasicBlock) {

        // Pattern: (brcond:isVoid (setcc:i16 R16C:i16:$rA, R16C:i16:$rB, SETLE:Other), (bb:Other):$dest)
        // Emits: (BRHZr16:isVoid (CGTHr16:i16 R16C:i16:$rA, R16:i16:$rB), (bb:Other):$dest)
        // Pattern complexity = 6  cost = 2  size = 0
        if (N1.getNode()->getValueType(0) == MVT::i16 &&
            N10.getNode()->getValueType(0) == MVT::i16) {
          SDNode *Result = Emit_36(N, SPU::CGTHr16, SPU::BRHZr16, MVT::i16);
          return Result;
        }

        // Pattern: (brcond:isVoid (setcc:i32 R32C:i32:$rA, R32C:i32:$rB, SETLE:Other), (bb:Other):$dest)
        // Emits: (BRZr32:isVoid (CGTr32:i32 R32C:i32:$rA, R32C:i32:$rB), (bb:Other):$dest)
        // Pattern complexity = 6  cost = 2  size = 0
        if (N1.getNode()->getValueType(0) == MVT::i32 &&
            N10.getNode()->getValueType(0) == MVT::i32) {
          SDNode *Result = Emit_36(N, SPU::CGTr32, SPU::BRZr32, MVT::i32);
          return Result;
        }
      }
    }
    if (cast<CondCodeSDNode>(N12)->get() == ISD::SETNE) {
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::BasicBlock) {

        // Pattern: (brcond:isVoid (setcc:i16 R16C:i16:$rA, R16C:i16:$rB, SETNE:Other), (bb:Other):$dest)
        // Emits: (BRHZr16:isVoid (CEQHr16:i16 R16C:i16:$rA, R16:i16:$rB), (bb:Other):$dest)
        // Pattern complexity = 6  cost = 2  size = 0
        if (N1.getNode()->getValueType(0) == MVT::i16 &&
            N10.getNode()->getValueType(0) == MVT::i16) {
          SDNode *Result = Emit_36(N, SPU::CEQHr16, SPU::BRHZr16, MVT::i16);
          return Result;
        }

        // Pattern: (brcond:isVoid (setcc:i32 R32C:i32:$rA, R32C:i32:$rB, SETNE:Other), (bb:Other):$dest)
        // Emits: (BRZr32:isVoid (CEQr32:i32 R32C:i32:$rA, R32C:i32:$rB), (bb:Other):$dest)
        // Pattern complexity = 6  cost = 2  size = 0
        if (N1.getNode()->getValueType(0) == MVT::i32 &&
            N10.getNode()->getValueType(0) == MVT::i32) {
          SDNode *Result = Emit_36(N, SPU::CEQr32, SPU::BRZr32, MVT::i32);
          return Result;
        }
      }
    }
    if (cast<CondCodeSDNode>(N12)->get() == ISD::SETUGT) {
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::BasicBlock) {

        // Pattern: (brcond:isVoid (setcc:i16 R16C:i16:$rA, R16C:i16:$rB, SETUGT:Other), (bb:Other):$dest)
        // Emits: (BRHNZr16:isVoid (CLGTHr16:i16 R16C:i16:$rA, R16:i16:$rB), (bb:Other):$dest)
        // Pattern complexity = 6  cost = 2  size = 0
        if (N1.getNode()->getValueType(0) == MVT::i16 &&
            N10.getNode()->getValueType(0) == MVT::i16) {
          SDNode *Result = Emit_36(N, SPU::CLGTHr16, SPU::BRHNZr16, MVT::i16);
          return Result;
        }

        // Pattern: (brcond:isVoid (setcc:i32 R32C:i32:$rA, R32C:i32:$rB, SETUGT:Other), (bb:Other):$dest)
        // Emits: (BRNZr32:isVoid (CLGTr32:i32 R32C:i32:$rA, R32C:i32:$rB), (bb:Other):$dest)
        // Pattern complexity = 6  cost = 2  size = 0
        if (N1.getNode()->getValueType(0) == MVT::i32 &&
            N10.getNode()->getValueType(0) == MVT::i32) {
          SDNode *Result = Emit_36(N, SPU::CLGTr32, SPU::BRNZr32, MVT::i32);
          return Result;
        }
      }
    }
    if (cast<CondCodeSDNode>(N12)->get() == ISD::SETULE) {
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::BasicBlock) {

        // Pattern: (brcond:isVoid (setcc:i16 R16C:i16:$rA, R16C:i16:$rB, SETULE:Other), (bb:Other):$dest)
        // Emits: (BRHZr16:isVoid (CLGTHr16:i16 R16C:i16:$rA, R16:i16:$rB), (bb:Other):$dest)
        // Pattern complexity = 6  cost = 2  size = 0
        if (N1.getNode()->getValueType(0) == MVT::i16 &&
            N10.getNode()->getValueType(0) == MVT::i16) {
          SDNode *Result = Emit_36(N, SPU::CLGTHr16, SPU::BRHZr16, MVT::i16);
          return Result;
        }

        // Pattern: (brcond:isVoid (setcc:i32 R32C:i32:$rA, R32C:i32:$rB, SETULE:Other), (bb:Other):$dest)
        // Emits: (BRZr32:isVoid (CLGTr32:i32 R32C:i32:$rA, R32C:i32:$rB), (bb:Other):$dest)
        // Pattern complexity = 6  cost = 2  size = 0
        if (N1.getNode()->getValueType(0) == MVT::i32 &&
            N10.getNode()->getValueType(0) == MVT::i32) {
          SDNode *Result = Emit_36(N, SPU::CLGTr32, SPU::BRZr32, MVT::i32);
          return Result;
        }
      }
    }
    if (cast<CondCodeSDNode>(N12)->get() == ISD::SETGE) {
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::BasicBlock) {

        // Pattern: (brcond:isVoid (setcc:i16 R16C:i16:$rA, R16C:i16:$rB, SETGE:Other), (bb:Other):$dest)
        // Emits: (BRHNZr16:isVoid (ORr16:i16 (CGTHr16:i16 R16C:i16:$rA, R16:i16:$rB), (CEQHr16:i16 R16C:i16:$rA, R16:i16:$rB)), (bb:Other):$dest)
        // Pattern complexity = 6  cost = 4  size = 0
        if (N1.getNode()->getValueType(0) == MVT::i16 &&
            N10.getNode()->getValueType(0) == MVT::i16) {
          SDNode *Result = Emit_39(N, SPU::CGTHr16, SPU::CEQHr16, SPU::ORr16, SPU::BRHNZr16, MVT::i16, MVT::i16, MVT::i16);
          return Result;
        }

        // Pattern: (brcond:isVoid (setcc:i32 R32C:i32:$rA, R32C:i32:$rB, SETGE:Other), (bb:Other):$dest)
        // Emits: (BRNZr32:isVoid (ORr32:i32 (CGTr32:i32 R32C:i32:$rA, R32C:i32:$rB), (CEQr32:i32 R32C:i32:$rA, R32C:i32:$rB)), (bb:Other):$dest)
        // Pattern complexity = 6  cost = 4  size = 0
        if (N1.getNode()->getValueType(0) == MVT::i32 &&
            N10.getNode()->getValueType(0) == MVT::i32) {
          SDNode *Result = Emit_39(N, SPU::CGTr32, SPU::CEQr32, SPU::ORr32, SPU::BRNZr32, MVT::i32, MVT::i32, MVT::i32);
          return Result;
        }
      }
    }
    if (cast<CondCodeSDNode>(N12)->get() == ISD::SETLT) {
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::BasicBlock) {

        // Pattern: (brcond:isVoid (setcc:i16 R16C:i16:$rA, R16C:i16:$rB, SETLT:Other), (bb:Other):$dest)
        // Emits: (BRHZr16:isVoid (ORr16:i16 (CGTHr16:i16 R16C:i16:$rA, R16:i16:$rB), (CEQHr16:i16 R16C:i16:$rA, R16:i16:$rB)), (bb:Other):$dest)
        // Pattern complexity = 6  cost = 4  size = 0
        if (N1.getNode()->getValueType(0) == MVT::i16 &&
            N10.getNode()->getValueType(0) == MVT::i16) {
          SDNode *Result = Emit_39(N, SPU::CGTHr16, SPU::CEQHr16, SPU::ORr16, SPU::BRHZr16, MVT::i16, MVT::i16, MVT::i16);
          return Result;
        }

        // Pattern: (brcond:isVoid (setcc:i32 R32C:i32:$rA, R32C:i32:$rB, SETLT:Other), (bb:Other):$dest)
        // Emits: (BRZr32:isVoid (ORr32:i32 (CGTr32:i32 R32C:i32:$rA, R32C:i32:$rB), (CEQr32:i32 R32C:i32:$rA, R32C:i32:$rB)), (bb:Other):$dest)
        // Pattern complexity = 6  cost = 4  size = 0
        if (N1.getNode()->getValueType(0) == MVT::i32 &&
            N10.getNode()->getValueType(0) == MVT::i32) {
          SDNode *Result = Emit_39(N, SPU::CGTr32, SPU::CEQr32, SPU::ORr32, SPU::BRZr32, MVT::i32, MVT::i32, MVT::i32);
          return Result;
        }
      }
    }
    if (cast<CondCodeSDNode>(N12)->get() == ISD::SETUGE) {
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::BasicBlock) {

        // Pattern: (brcond:isVoid (setcc:i16 R16C:i16:$rA, R16C:i16:$rB, SETUGE:Other), (bb:Other):$dest)
        // Emits: (BRHNZr16:isVoid (ORr16:i16 (CLGTHr16:i16 R16C:i16:$rA, R16:i16:$rB), (CEQHr16:i16 R16C:i16:$rA, R16:i16:$rB)), (bb:Other):$dest)
        // Pattern complexity = 6  cost = 4  size = 0
        if (N1.getNode()->getValueType(0) == MVT::i16 &&
            N10.getNode()->getValueType(0) == MVT::i16) {
          SDNode *Result = Emit_39(N, SPU::CLGTHr16, SPU::CEQHr16, SPU::ORr16, SPU::BRHNZr16, MVT::i16, MVT::i16, MVT::i16);
          return Result;
        }

        // Pattern: (brcond:isVoid (setcc:i32 R32C:i32:$rA, R32C:i32:$rB, SETUGE:Other), (bb:Other):$dest)
        // Emits: (BRNZr32:isVoid (ORr32:i32 (CLGTr32:i32 R32C:i32:$rA, R32C:i32:$rB), (CEQr32:i32 R32C:i32:$rA, R32C:i32:$rB)), (bb:Other):$dest)
        // Pattern complexity = 6  cost = 4  size = 0
        if (N1.getNode()->getValueType(0) == MVT::i32 &&
            N10.getNode()->getValueType(0) == MVT::i32) {
          SDNode *Result = Emit_39(N, SPU::CLGTr32, SPU::CEQr32, SPU::ORr32, SPU::BRNZr32, MVT::i32, MVT::i32, MVT::i32);
          return Result;
        }
      }
    }
    if (cast<CondCodeSDNode>(N12)->get() == ISD::SETULT) {
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::BasicBlock) {

        // Pattern: (brcond:isVoid (setcc:i16 R16C:i16:$rA, R16C:i16:$rB, SETULT:Other), (bb:Other):$dest)
        // Emits: (BRHZr16:isVoid (ORr16:i16 (CLGTHr16:i16 R16C:i16:$rA, R16:i16:$rB), (CEQHr16:i16 R16C:i16:$rA, R16:i16:$rB)), (bb:Other):$dest)
        // Pattern complexity = 6  cost = 4  size = 0
        if (N1.getNode()->getValueType(0) == MVT::i16 &&
            N10.getNode()->getValueType(0) == MVT::i16) {
          SDNode *Result = Emit_39(N, SPU::CLGTHr16, SPU::CEQHr16, SPU::ORr16, SPU::BRHZr16, MVT::i16, MVT::i16, MVT::i16);
          return Result;
        }

        // Pattern: (brcond:isVoid (setcc:i32 R32C:i32:$rA, R32C:i32:$rB, SETULT:Other), (bb:Other):$dest)
        // Emits: (BRZr32:isVoid (ORr32:i32 (CLGTr32:i32 R32C:i32:$rA, R32C:i32:$rB), (CEQr32:i32 R32C:i32:$rA, R32C:i32:$rB)), (bb:Other):$dest)
        // Pattern complexity = 6  cost = 4  size = 0
        if (N1.getNode()->getValueType(0) == MVT::i32 &&
            N10.getNode()->getValueType(0) == MVT::i32) {
          SDNode *Result = Emit_39(N, SPU::CLGTr32, SPU::CEQr32, SPU::ORr32, SPU::BRZr32, MVT::i32, MVT::i32, MVT::i32);
          return Result;
        }
      }
    }
  }
  SDValue N2 = N.getOperand(2);
  if (N2.getOpcode() == ISD::BasicBlock) {

    // Pattern: (brcond:isVoid VECREG:v4i32:$rCond, (bb:Other):$dest)
    // Emits: (BRNZv4i32:isVoid VECREG:v4i32:$rCond, (bb:Other):$dest)
    // Pattern complexity = 3  cost = 1  size = 0
    if (N1.getNode()->getValueType(0) == MVT::v4i32) {
      SDNode *Result = Emit_35(N, SPU::BRNZv4i32);
      return Result;
    }

    // Pattern: (brcond:isVoid R32C:i32:$rCond, (bb:Other):$dest)
    // Emits: (BRNZr32:isVoid R32C:i32:$rCond, (bb:Other):$dest)
    // Pattern complexity = 3  cost = 1  size = 0
    if (N1.getNode()->getValueType(0) == MVT::i32) {
      SDNode *Result = Emit_35(N, SPU::BRNZr32);
      return Result;
    }

    // Pattern: (brcond:isVoid R16C:i16:$rCond, (bb:Other):$dest)
    // Emits: (BRHNZr16:isVoid R16C:i16:$rCond, (bb:Other):$dest)
    // Pattern complexity = 3  cost = 1  size = 0
    if (N1.getNode()->getValueType(0) == MVT::i16) {
      SDNode *Result = Emit_35(N, SPU::BRHNZr16);
      return Result;
    }
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_BRIND(const SDValue &N) {
  SDValue Chain = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_34(N, SPU::BI);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_43(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue Tmp1 = Transform_v8i16Uns16Imm_xform(N.getNode());
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, Tmp1);
}
SDNode *Select_ISD_BUILD_VECTOR_v8i16(const SDValue &N) {
  if (Predicate_v8i16SExt16Imm(N.getNode())) {
    SDNode *Result = Emit_43(N, SPU::ILHv8i16, MVT::v8i16);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_44(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue Tmp1 = Transform_v4i32SExt16Imm_xform(N.getNode());
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, Tmp1);
}
SDNode *Emit_45(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue Tmp1 = Transform_ILHUvec_get_imm(N.getNode());
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, Tmp1);
}
SDNode *Emit_46(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue Tmp1 = Transform_v4i32Uns18Imm_xform(N.getNode());
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, Tmp1);
}
SDNode *Emit_47(const SDValue &N, unsigned Opc0, unsigned Opc1, MVT VT0, MVT VT1) DISABLE_INLINE {
  SDValue Tmp1 = Transform_HI16_vec(N.getNode());
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, Tmp1), 0);
  SDValue Tmp4 = Transform_LO16_vec(N.getNode());
  return CurDAG->SelectNodeTo(N.getNode(), Opc1, VT1, Tmp2, Tmp4);
}
SDNode *Select_ISD_BUILD_VECTOR_v4i32(const SDValue &N) {

  // Pattern: (build_vector:v4i32)<<P:Predicate_v4i32SExt16Imm>><<X:v4i32SExt16Imm_xform>>:$val
  // Emits: (ILv4i32:v4i32 (v4i32SExt16Imm_xform:i32 (build_vector:v4i32):$val))
  // Pattern complexity = 4  cost = 1  size = 0
  if (Predicate_v4i32SExt16Imm(N.getNode())) {
    SDNode *Result = Emit_44(N, SPU::ILv4i32, MVT::v4i32);
    return Result;
  }

  // Pattern: (build_vector:v4i32)<<P:Predicate_immILHUvec>><<X:ILHUvec_get_imm>>:$val
  // Emits: (ILHUv4i32:v4i32 (ILHUvec_get_imm:i32 (build_vector:v4i32):$val))
  // Pattern complexity = 4  cost = 1  size = 0
  if (Predicate_immILHUvec(N.getNode())) {
    SDNode *Result = Emit_45(N, SPU::ILHUv4i32, MVT::v4i32);
    return Result;
  }

  // Pattern: (build_vector:v4i32)<<P:Predicate_v4i32Uns18Imm>><<X:v4i32Uns18Imm_xform>>:$val
  // Emits: (ILAv4i32:v4i32 (v4i32Uns18Imm_xform:i32 (build_vector:v4i32):$val))
  // Pattern complexity = 4  cost = 1  size = 0
  if (Predicate_v4i32Uns18Imm(N.getNode())) {
    SDNode *Result = Emit_46(N, SPU::ILAv4i32, MVT::v4i32);
    return Result;
  }

  // Pattern: (build_vector:v4i32)<<P:Predicate_v4i32Imm>><<X:v4i32_get_imm>>:$imm
  // Emits: (IOHLv4i32:v4i32 (ILHUv4i32:v4i32 (HI16_vec:i32 (build_vector:i32)<<P:Predicate_v4i32Imm>><<X:v4i32_get_imm>>:$imm)), (LO16_vec:i32 (build_vector:i32)<<P:Predicate_v4i32Imm>><<X:v4i32_get_imm>>:$imm))
  // Pattern complexity = 4  cost = 2  size = 0
  if (Predicate_v4i32Imm(N.getNode())) {
    SDNode *Result = Emit_47(N, SPU::ILHUv4i32, SPU::IOHLv4i32, MVT::v4i32, MVT::v4i32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_48(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue Tmp1 = Transform_v2i64SExt16Imm_xform(N.getNode());
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, Tmp1);
}
SDNode *Emit_49(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue Tmp1 = Transform_v2i64Uns18Imm_xform(N.getNode());
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, Tmp1);
}
SDNode *Select_ISD_BUILD_VECTOR_v2i64(const SDValue &N) {

  // Pattern: (build_vector:v2i64)<<P:Predicate_v2i64SExt16Imm>><<X:v2i64SExt16Imm_xform>>:$val
  // Emits: (ILv2i64:v2i64 (v2i64SExt16Imm_xform:i64 (build_vector:v2i64):$val))
  // Pattern complexity = 4  cost = 1  size = 0
  if (Predicate_v2i64SExt16Imm(N.getNode())) {
    SDNode *Result = Emit_48(N, SPU::ILv2i64, MVT::v2i64);
    return Result;
  }

  // Pattern: (build_vector:v2i64)<<P:Predicate_immILHUvec_i64>><<X:ILHUvec_get_imm>>:$val
  // Emits: (ILHUv2i64:v2i64 (ILHUvec_get_imm:i64 (build_vector:v2i64):$val))
  // Pattern complexity = 4  cost = 1  size = 0
  if (Predicate_immILHUvec_i64(N.getNode())) {
    SDNode *Result = Emit_45(N, SPU::ILHUv2i64, MVT::v2i64);
    return Result;
  }

  // Pattern: (build_vector:v2i64)<<P:Predicate_v2i64Uns18Imm>><<X:v2i64Uns18Imm_xform>>:$val
  // Emits: (ILAv2i64:v2i64 (v2i64Uns18Imm_xform:i32 (build_vector:v2i64):$val))
  // Pattern complexity = 4  cost = 1  size = 0
  if (Predicate_v2i64Uns18Imm(N.getNode())) {
    SDNode *Result = Emit_49(N, SPU::ILAv2i64, MVT::v2i64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_50(const SDValue &N, unsigned Opc0) DISABLE_INLINE {
  SDValue Chain = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDNode *ResNode = CurDAG->SelectNodeTo(N.getNode(), Opc0, MVT::Other, MVT::Flag, N1, Chain);
  Chain = SDValue(ResNode, 0);
  SDValue InFlag(ResNode, 1);
  const SDValue Froms[] = {
    SDValue(N.getNode(), 1),
    SDValue(N.getNode(), 0)
  };
  const SDValue Tos[] = {
    InFlag,
    SDValue(Chain.getNode(), Chain.getResNo())
  };
  ReplaceUses(Froms, Tos, 2);
  return ResNode;
}
SDNode *Select_ISD_CALLSEQ_END(const SDValue &N) {
  SDValue Chain = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getOpcode() == ISD::TargetConstant) {
    SDNode *Result = Emit_50(N, SPU::ADJCALLSTACKUP);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_CALLSEQ_START(const SDValue &N) {
  SDValue Chain = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getOpcode() == ISD::TargetConstant) {
    SDNode *Result = Emit_50(N, SPU::ADJCALLSTACKDOWN);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_CTLZ_i32(const SDValue &N) {
  SDNode *Result = Emit_31(N, SPU::CLZr32, MVT::i32);
  return Result;
}

SDNode *Select_ISD_CTLZ_v4i32(const SDValue &N) {
  SDNode *Result = Emit_31(N, SPU::CLZv4i32, MVT::v4i32);
  return Result;
}

SDNode *Emit_51(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue Tmp0 = CurDAG->getTargetConstant(((unsigned char) cast<ConstantSDNode>(N)->getZExtValue()), MVT::i8);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, Tmp0);
}
SDNode *Select_ISD_Constant_i8(const SDValue &N) {

  // Pattern: (imm:i8)<<P:Predicate_immSExt8>>:$val
  // Emits: (ILHr8:i8 (imm:i8):$val)
  // Pattern complexity = 4  cost = 1  size = 0
  if (Predicate_immSExt8(N.getNode())) {
    SDNode *Result = Emit_51(N, SPU::ILHr8, MVT::i8);
    return Result;
  }

  // Pattern: (imm:i8):$imm
  // Emits: (ILHr8:i8 (imm:i8):$imm)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_51(N, SPU::ILHr8, MVT::i8);
  return Result;
}

SDNode *Emit_52(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue Tmp0 = CurDAG->getTargetConstant(((unsigned short) cast<ConstantSDNode>(N)->getZExtValue()), MVT::i16);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, Tmp0);
}
SDNode *Select_ISD_Constant_i16(const SDValue &N) {
  if (Predicate_immSExt16(N.getNode())) {
    SDNode *Result = Emit_52(N, SPU::ILHr16, MVT::i16);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_53(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue Tmp0 = CurDAG->getTargetConstant(((unsigned) cast<ConstantSDNode>(N)->getZExtValue()), MVT::i32);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, Tmp0);
}
SDNode *Emit_54(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue Tmp0 = CurDAG->getTargetConstant(((unsigned) cast<ConstantSDNode>(N)->getZExtValue()), MVT::i32);
  SDValue Tmp1 = Transform_HI16(Tmp0.getNode());
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, Tmp1);
}
SDNode *Emit_55(const SDValue &N, unsigned Opc0, unsigned Opc1, MVT VT0, MVT VT1) DISABLE_INLINE {
  SDValue Tmp0 = CurDAG->getTargetConstant(((unsigned) cast<ConstantSDNode>(N)->getZExtValue()), MVT::i32);
  SDValue Tmp1 = Transform_HI16(Tmp0.getNode());
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, Tmp1), 0);
  SDValue Tmp3 = Transform_LO16(Tmp0.getNode());
  return CurDAG->SelectNodeTo(N.getNode(), Opc1, VT1, Tmp2, Tmp3);
}
SDNode *Select_ISD_Constant_i32(const SDValue &N) {

  // Pattern: (imm:i32)<<P:Predicate_immSExt16>>:$val
  // Emits: (ILr32:i32 (imm:i32):$val)
  // Pattern complexity = 4  cost = 1  size = 0
  if (Predicate_immSExt16(N.getNode())) {
    SDNode *Result = Emit_53(N, SPU::ILr32, MVT::i32);
    return Result;
  }
  if (Predicate_hi16(N.getNode())) {

    // Pattern: (imm:i32)<<P:Predicate_hi16>><<X:HI16>>:$val
    // Emits: (ILHUr32:i32 (HI16:i32 (imm:i32):$val))
    // Pattern complexity = 4  cost = 1  size = 0
    {
      SDNode *Result = Emit_54(N, SPU::ILHUr32, MVT::i32);
      return Result;
    }

    // Pattern: (imm:i32)<<P:Predicate_hi16>><<X:HI16>>:$val
    // Emits: (ILHUhi:i32 (HI16:i32 (imm:i32):$val))
    // Pattern complexity = 4  cost = 1  size = 0
    SDNode *Result = Emit_54(N, SPU::ILHUhi, MVT::i32);
    return Result;
  }
  if (Predicate_imm18(N.getNode())) {

    // Pattern: (imm:i32)<<P:Predicate_imm18>>:$val
    // Emits: (ILAr32:i32 (imm:i32):$val)
    // Pattern complexity = 4  cost = 1  size = 0
    {
      SDNode *Result = Emit_53(N, SPU::ILAr32, MVT::i32);
      return Result;
    }

    // Pattern: (imm:i32)<<P:Predicate_imm18>>:$val
    // Emits: (ILAhi:i32 (imm:i32):$val)
    // Pattern complexity = 4  cost = 1  size = 0
    {
      SDNode *Result = Emit_53(N, SPU::ILAhi, MVT::i32);
      return Result;
    }

    // Pattern: (imm:i32)<<P:Predicate_imm18>>:$val
    // Emits: (ILAlo:i32 (imm:i32):$val)
    // Pattern complexity = 4  cost = 1  size = 0
    SDNode *Result = Emit_53(N, SPU::ILAlo, MVT::i32);
    return Result;
  }

  // Pattern: (imm:i32):$imm
  // Emits: (IOHLr32:i32 (ILHUr32:i32 (HI16:i32 (imm:i32):$imm)), (LO16:i32 (imm:i32):$imm))
  // Pattern complexity = 3  cost = 2  size = 0
  SDNode *Result = Emit_55(N, SPU::ILHUr32, SPU::IOHLr32, MVT::i32, MVT::i32);
  return Result;
}

SDNode *Emit_56(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue Tmp0 = CurDAG->getTargetConstant(((uint64_t) cast<ConstantSDNode>(N)->getZExtValue()), MVT::i64);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, Tmp0);
}
SDNode *Emit_57(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue Tmp0 = CurDAG->getTargetConstant(((uint64_t) cast<ConstantSDNode>(N)->getZExtValue()), MVT::i64);
  SDValue Tmp1 = Transform_HI16(Tmp0.getNode());
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, Tmp1);
}
SDNode *Select_ISD_Constant_i64(const SDValue &N) {

  // Pattern: (imm:i64)<<P:Predicate_immSExt16>>:$val
  // Emits: (ILr64:i64 (imm:i64):$val)
  // Pattern complexity = 4  cost = 1  size = 0
  if (Predicate_immSExt16(N.getNode())) {
    SDNode *Result = Emit_56(N, SPU::ILr64, MVT::i64);
    return Result;
  }

  // Pattern: (imm:i64)<<P:Predicate_hi16>><<X:HI16>>:$val
  // Emits: (ILHUr64:i64 (HI16:i64 (imm:i64):$val))
  // Pattern complexity = 4  cost = 1  size = 0
  if (Predicate_hi16(N.getNode())) {
    SDNode *Result = Emit_57(N, SPU::ILHUr64, MVT::i64);
    return Result;
  }

  // Pattern: (imm:i64)<<P:Predicate_imm18>>:$val
  // Emits: (ILAr64:i64 (imm:i64):$val)
  // Pattern complexity = 4  cost = 1  size = 0
  if (Predicate_imm18(N.getNode())) {
    SDNode *Result = Emit_56(N, SPU::ILAr64, MVT::i64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_58(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue Tmp0 = CurDAG->getTargetConstantFP(*cast<ConstantFPSDNode>(N)->getConstantFPValue(), cast<ConstantFPSDNode>(N)->getValueType(0));
  SDValue Tmp1 = Transform_FPimm_sext16(Tmp0.getNode());
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, Tmp1);
}
SDNode *Emit_59(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue Tmp0 = CurDAG->getTargetConstantFP(*cast<ConstantFPSDNode>(N)->getConstantFPValue(), cast<ConstantFPSDNode>(N)->getValueType(0));
  SDValue Tmp1 = Transform_HI16_f32(Tmp0.getNode());
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, Tmp1);
}
SDNode *Emit_60(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue Tmp0 = CurDAG->getTargetConstantFP(*cast<ConstantFPSDNode>(N)->getConstantFPValue(), cast<ConstantFPSDNode>(N)->getValueType(0));
  SDValue Tmp1 = Transform_FPimm_u18(Tmp0.getNode());
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, Tmp1);
}
SDNode *Emit_61(const SDValue &N, unsigned Opc0, unsigned Opc1, MVT VT0, MVT VT1) DISABLE_INLINE {
  SDValue Tmp0 = CurDAG->getTargetConstantFP(*cast<ConstantFPSDNode>(N)->getConstantFPValue(), cast<ConstantFPSDNode>(N)->getValueType(0));
  SDValue Tmp1 = Transform_HI16_f32(Tmp0.getNode());
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, Tmp1), 0);
  SDValue Tmp3 = Transform_LO16_f32(Tmp0.getNode());
  return CurDAG->SelectNodeTo(N.getNode(), Opc1, VT1, Tmp2, Tmp3);
}
SDNode *Select_ISD_ConstantFP_f32(const SDValue &N) {

  // Pattern: (fpimm:f32)<<P:Predicate_fpimmSExt16>><<X:FPimm_sext16>>:$val
  // Emits: (ILf32:f32 (FPimm_sext16:f32 (fpimm:f32):$val))
  // Pattern complexity = 4  cost = 1  size = 0
  if (Predicate_fpimmSExt16(N.getNode())) {
    SDNode *Result = Emit_58(N, SPU::ILf32, MVT::f32);
    return Result;
  }

  // Pattern: (fpimm:f32)<<P:Predicate_hi16_f32>><<X:HI16_f32>>:$val
  // Emits: (ILHUf32:f32 (HI16_f32:f32 (fpimm:f32):$val))
  // Pattern complexity = 4  cost = 1  size = 0
  if (Predicate_hi16_f32(N.getNode())) {
    SDNode *Result = Emit_59(N, SPU::ILHUf32, MVT::f32);
    return Result;
  }

  // Pattern: (fpimm:f32)<<P:Predicate_fpimm18>><<X:FPimm_u18>>:$val
  // Emits: (ILAf32:f32 (FPimm_u18:f32 (fpimm:f32):$val))
  // Pattern complexity = 4  cost = 1  size = 0
  if (Predicate_fpimm18(N.getNode())) {
    SDNode *Result = Emit_60(N, SPU::ILAf32, MVT::f32);
    return Result;
  }

  // Pattern: (fpimm:f32):$imm
  // Emits: (IOHLf32:f32 (ILHUf32:f32 (HI16_f32:f32 (fpimm:f32):$imm)), (LO16_f32:f32 (fpimm:f32):$imm))
  // Pattern complexity = 3  cost = 2  size = 0
  SDNode *Result = Emit_61(N, SPU::ILHUf32, SPU::IOHLf32, MVT::f32, MVT::f32);
  return Result;
}

SDNode *Select_ISD_ConstantFP_f64(const SDValue &N) {

  // Pattern: (fpimm:f64)<<P:Predicate_fpimmSExt16>><<X:FPimm_sext16>>:$val
  // Emits: (ILf64:f64 (FPimm_sext16:f64 (fpimm:f64):$val))
  // Pattern complexity = 4  cost = 1  size = 0
  if (Predicate_fpimmSExt16(N.getNode())) {
    SDNode *Result = Emit_58(N, SPU::ILf64, MVT::f64);
    return Result;
  }

  // Pattern: (fpimm:f64)<<P:Predicate_fpimm18>><<X:FPimm_u18>>:$val
  // Emits: (ILAf64:f64 (FPimm_u18:f64 (fpimm:f64):$val))
  // Pattern complexity = 4  cost = 1  size = 0
  if (Predicate_fpimm18(N.getNode())) {
    SDNode *Result = Emit_60(N, SPU::ILAf64, MVT::f64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_62(const SDValue &N, unsigned Opc0) DISABLE_INLINE {
  SDValue Chain = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue N3 = N.getOperand(3);
  SDValue Tmp0 = CurDAG->getTargetConstant(((unsigned) cast<ConstantSDNode>(N1)->getZExtValue()), MVT::i32);
  SDValue Tmp1 = CurDAG->getTargetConstant(((unsigned) cast<ConstantSDNode>(N2)->getZExtValue()), MVT::i32);
  SDValue Tmp2 = CurDAG->getTargetConstant(((unsigned) cast<ConstantSDNode>(N3)->getZExtValue()), MVT::i32);
  SDValue Ops0[] = { Tmp0, Tmp1, Tmp2, Chain };
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, MVT::Other, Ops0, 4);
}
SDNode *Select_ISD_DEBUG_LOC(const SDValue &N) {
  SDValue Chain = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getOpcode() == ISD::Constant) {
    SDValue N2 = N.getOperand(2);
    if (N2.getOpcode() == ISD::Constant) {
      SDValue N3 = N.getOperand(3);
      if (N3.getOpcode() == ISD::Constant &&
          N1.getNode()->getValueType(0) == MVT::i32 &&
          N2.getNode()->getValueType(0) == MVT::i32 &&
          N3.getNode()->getValueType(0) == MVT::i32) {
        SDNode *Result = Emit_62(N, SPU::DWARF_LOC);
        return Result;
      }
    }
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_63(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, MVT VT0, MVT VT1, MVT VT2) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue Tmp1 = CurDAG->getTargetConstant(0x7FFFULL, MVT::i32);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, Tmp1), 0);
  SDValue Tmp3 = CurDAG->getTargetConstant(0xFFFFULL, MVT::i32);
  SDValue Tmp4(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, Tmp2, Tmp3), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc2, VT2, N0, Tmp4);
}
SDNode *Select_ISD_FABS_f32(const SDValue &N) {
  SDNode *Result = Emit_63(N, SPU::ILHUr32, SPU::IOHLr32, SPU::ANDfabs32, MVT::i32, MVT::i32, MVT::f32);
  return Result;
}

SDNode *Emit_64(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, MVT VT0, MVT VT1, MVT VT2) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue Tmp1 = CurDAG->getTargetConstant(0xFFFFULL, MVT::i16);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, Tmp1), 0);
  SDValue Tmp3 = CurDAG->getTargetConstant(0x7FULL, MVT::i16);
  SDValue Tmp4(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, Tmp2, Tmp3), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc2, VT2, N0, Tmp4);
}
SDNode *Select_ISD_FABS_f64(const SDValue &N) {
  SDNode *Result = Emit_64(N, SPU::FSMBIv16i8, SPU::ANDBIv16i8, SPU::ANDfabs64, MVT::v16i8, MVT::v16i8, MVT::f64);
  return Result;
}

SDNode *Select_ISD_FABS_v4f32(const SDValue &N) {
  SDNode *Result = Emit_64(N, SPU::FSMBIv16i8, SPU::ANDBIv16i8, SPU::ANDfabsvec, MVT::v16i8, MVT::v4f32, MVT::v4f32);
  return Result;
}

SDNode *Select_ISD_FABS_v2f64(const SDValue &N) {
  SDNode *Result = Emit_64(N, SPU::FSMBIv16i8, SPU::ANDBIv16i8, SPU::ANDfabsvec, MVT::v16i8, MVT::v2f64, MVT::v2f64);
  return Result;
}

SDNode *Emit_65(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N10, N11, N0);
}
SDNode *Emit_66(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N1 = N.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N00, N01, N1);
}
SDNode *Select_ISD_FADD_f32(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);

    // Pattern: (fadd:f32 R32FP:f32:$rC, (fmul:f32 R32FP:f32:$rA, R32FP:f32:$rB))
    // Emits: (FMAf32:f32 R32FP:f32:$rA, R32FP:f32:$rB, R32FP:f32:$rC)
    // Pattern complexity = 6  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::FMUL) {
        SDNode *Result = Emit_65(N, SPU::FMAf32, MVT::f32);
        return Result;
      }
    }

    // Pattern: (fadd:f32 (fmul:f32 R32FP:f32:$rA, R32FP:f32:$rB), R32FP:f32:$rC)
    // Emits: (FMAf32:f32 R32FP:f32:$rA, R32FP:f32:$rB, R32FP:f32:$rC)
    // Pattern complexity = 6  cost = 1  size = 0
    if (N0.getOpcode() == ISD::FMUL) {
      SDNode *Result = Emit_66(N, SPU::FMAf32, MVT::f32);
      return Result;
    }
  }

  // Pattern: (fadd:f32 R32FP:f32:$rA, R32FP:f32:$rB)
  // Emits: (FAf32:f32 R32FP:f32:$rA, R32FP:f32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::FAf32, MVT::f32);
  return Result;
}

SDNode *Select_ISD_FADD_f64(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);

    // Pattern: (fadd:f64 R64FP:f64:$rC, (fmul:f64 R64FP:f64:$rA, R64FP:f64:$rB))
    // Emits: (FMAf64:f64 R64FP:f64:$rA, R64FP:f64:$rB, R64FP:f64:$rC)
    // Pattern complexity = 6  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::FMUL) {
        SDNode *Result = Emit_65(N, SPU::FMAf64, MVT::f64);
        return Result;
      }
    }

    // Pattern: (fadd:f64 (fmul:f64 R64FP:f64:$rA, R64FP:f64:$rB), R64FP:f64:$rC)
    // Emits: (FMAf64:f64 R64FP:f64:$rA, R64FP:f64:$rB, R64FP:f64:$rC)
    // Pattern complexity = 6  cost = 1  size = 0
    if (N0.getOpcode() == ISD::FMUL) {
      SDNode *Result = Emit_66(N, SPU::FMAf64, MVT::f64);
      return Result;
    }
  }

  // Pattern: (fadd:f64 R64FP:f64:$rA, R64FP:f64:$rB)
  // Emits: (FAf64:f64 R64FP:f64:$rA, R64FP:f64:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::FAf64, MVT::f64);
  return Result;
}

SDNode *Select_ISD_FADD_v4f32(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);

    // Pattern: (fadd:v4f32 VECREG:v4f32:$rC, (fmul:v4f32 VECREG:v4f32:$rA, VECREG:v4f32:$rB))
    // Emits: (FMAv4f32:v4f32 VECREG:v4f32:$rA, VECREG:v4f32:$rB, VECREG:v4f32:$rC)
    // Pattern complexity = 6  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::FMUL) {
        SDNode *Result = Emit_65(N, SPU::FMAv4f32, MVT::v4f32);
        return Result;
      }
    }

    // Pattern: (fadd:v4f32 (fmul:v4f32 VECREG:v4f32:$rA, VECREG:v4f32:$rB), VECREG:v4f32:$rC)
    // Emits: (FMAv4f32:v4f32 VECREG:v4f32:$rA, VECREG:v4f32:$rB, VECREG:v4f32:$rC)
    // Pattern complexity = 6  cost = 1  size = 0
    if (N0.getOpcode() == ISD::FMUL) {
      SDNode *Result = Emit_66(N, SPU::FMAv4f32, MVT::v4f32);
      return Result;
    }
  }

  // Pattern: (fadd:v4f32 VECREG:v4f32:$rA, VECREG:v4f32:$rB)
  // Emits: (FAv4f32:v4f32 VECREG:v4f32:$rA, VECREG:v4f32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::FAv4f32, MVT::v4f32);
  return Result;
}

SDNode *Select_ISD_FADD_v2f64(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);

    // Pattern: (fadd:v2f64 VECREG:v2f64:$rC, (fmul:v2f64 VECREG:v2f64:$rA, VECREG:v2f64:$rB))
    // Emits: (FMAv2f64:v2f64 VECREG:v2f64:$rA, VECREG:v2f64:$rB, VECREG:v2f64:$rC)
    // Pattern complexity = 6  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::FMUL) {
        SDNode *Result = Emit_65(N, SPU::FMAv2f64, MVT::v2f64);
        return Result;
      }
    }

    // Pattern: (fadd:v2f64 (fmul:v2f64 VECREG:v2f64:$rA, VECREG:v2f64:$rB), VECREG:v2f64:$rC)
    // Emits: (FMAv2f64:v2f64 VECREG:v2f64:$rA, VECREG:v2f64:$rB, VECREG:v2f64:$rC)
    // Pattern complexity = 6  cost = 1  size = 0
    if (N0.getOpcode() == ISD::FMUL) {
      SDNode *Result = Emit_66(N, SPU::FMAv2f64, MVT::v2f64);
      return Result;
    }
  }

  // Pattern: (fadd:v2f64 VECREG:v2f64:$rA, VECREG:v2f64:$rB)
  // Emits: (FAv2f64:v2f64 VECREG:v2f64:$rA, VECREG:v2f64:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::FAv2f64, MVT::v2f64);
  return Result;
}

SDNode *Emit_67(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, unsigned Opc4, unsigned Opc5, unsigned Opc6, unsigned Opc7, unsigned Opc8, unsigned Opc9, unsigned Opc10, unsigned Opc11, unsigned Opc12, unsigned Opc13, unsigned Opc14, unsigned Opc15, unsigned Opc16, unsigned Opc17, unsigned Opc18, unsigned Opc19, unsigned Opc20, unsigned Opc21, unsigned Opc22, unsigned Opc23, unsigned Opc24, unsigned Opc25, unsigned Opc26, unsigned Opc27, unsigned Opc28, unsigned Opc29, unsigned Opc30, unsigned Opc31, unsigned Opc32, unsigned Opc33, unsigned Opc34, MVT VT0, MVT VT1, MVT VT2, MVT VT3, MVT VT4, MVT VT5, MVT VT6, MVT VT7, MVT VT8, MVT VT9, MVT VT10, MVT VT11, MVT VT12, MVT VT13, MVT VT14, MVT VT15, MVT VT16, MVT VT17, MVT VT18, MVT VT19, MVT VT20, MVT VT21, MVT VT22, MVT VT23, MVT VT24, MVT VT25, MVT VT26, MVT VT27, MVT VT28, MVT VT29, MVT VT30, MVT VT31, MVT VT32, MVT VT33, MVT VT34) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue Tmp3(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N1), 0);
  SDValue Tmp4(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N1, Tmp3), 0);
  SDValue Tmp5(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, N0, Tmp4), 0);
  SDValue Tmp8(CurDAG->getTargetNode(Opc3, N.getDebugLoc(), VT3, Tmp5, N1, N0), 0);
  SDValue Tmp11(CurDAG->getTargetNode(Opc4, N.getDebugLoc(), VT4, N1), 0);
  SDValue Tmp12(CurDAG->getTargetNode(Opc5, N.getDebugLoc(), VT5, N1, Tmp11), 0);
  SDValue Tmp16(CurDAG->getTargetNode(Opc6, N.getDebugLoc(), VT6, N1), 0);
  SDValue Tmp17(CurDAG->getTargetNode(Opc7, N.getDebugLoc(), VT7, N1, Tmp16), 0);
  SDValue Tmp18(CurDAG->getTargetNode(Opc8, N.getDebugLoc(), VT8, N0, Tmp17), 0);
  SDValue Tmp19(CurDAG->getTargetNode(Opc9, N.getDebugLoc(), VT9, Tmp8, Tmp12, Tmp18), 0);
  SDValue Tmp23(CurDAG->getTargetNode(Opc10, N.getDebugLoc(), VT10, N1), 0);
  SDValue Tmp24(CurDAG->getTargetNode(Opc11, N.getDebugLoc(), VT11, N1, Tmp23), 0);
  SDValue Tmp25(CurDAG->getTargetNode(Opc12, N.getDebugLoc(), VT12, N0, Tmp24), 0);
  SDValue Tmp28(CurDAG->getTargetNode(Opc13, N.getDebugLoc(), VT13, Tmp25, N1, N0), 0);
  SDValue Tmp31(CurDAG->getTargetNode(Opc14, N.getDebugLoc(), VT14, N1), 0);
  SDValue Tmp32(CurDAG->getTargetNode(Opc15, N.getDebugLoc(), VT15, N1, Tmp31), 0);
  SDValue Tmp36(CurDAG->getTargetNode(Opc16, N.getDebugLoc(), VT16, N1), 0);
  SDValue Tmp37(CurDAG->getTargetNode(Opc17, N.getDebugLoc(), VT17, N1, Tmp36), 0);
  SDValue Tmp38(CurDAG->getTargetNode(Opc18, N.getDebugLoc(), VT18, N0, Tmp37), 0);
  SDValue Tmp39(CurDAG->getTargetNode(Opc19, N.getDebugLoc(), VT19, Tmp28, Tmp32, Tmp38), 0);
  SDValue Tmp40 = CurDAG->getTargetConstant(0x1ULL, MVT::i32);
  SDValue Tmp41(CurDAG->getTargetNode(Opc20, N.getDebugLoc(), VT20, Tmp39, Tmp40), 0);
  SDValue Tmp46(CurDAG->getTargetNode(Opc21, N.getDebugLoc(), VT21, N1), 0);
  SDValue Tmp47(CurDAG->getTargetNode(Opc22, N.getDebugLoc(), VT22, N1, Tmp46), 0);
  SDValue Tmp48(CurDAG->getTargetNode(Opc23, N.getDebugLoc(), VT23, N0, Tmp47), 0);
  SDValue Tmp51(CurDAG->getTargetNode(Opc24, N.getDebugLoc(), VT24, Tmp48, N1, N0), 0);
  SDValue Tmp54(CurDAG->getTargetNode(Opc25, N.getDebugLoc(), VT25, N1), 0);
  SDValue Tmp55(CurDAG->getTargetNode(Opc26, N.getDebugLoc(), VT26, N1, Tmp54), 0);
  SDValue Tmp59(CurDAG->getTargetNode(Opc27, N.getDebugLoc(), VT27, N1), 0);
  SDValue Tmp60(CurDAG->getTargetNode(Opc28, N.getDebugLoc(), VT28, N1, Tmp59), 0);
  SDValue Tmp61(CurDAG->getTargetNode(Opc29, N.getDebugLoc(), VT29, N0, Tmp60), 0);
  SDValue Tmp62(CurDAG->getTargetNode(Opc30, N.getDebugLoc(), VT30, Tmp51, Tmp55, Tmp61), 0);
  SDValue Tmp63 = CurDAG->getTargetConstant(0x1ULL, MVT::i32);
  SDValue Tmp64(CurDAG->getTargetNode(Opc31, N.getDebugLoc(), VT31, Tmp62, Tmp63), 0);
  SDValue Tmp66(CurDAG->getTargetNode(Opc32, N.getDebugLoc(), VT32, N1, Tmp64, N0), 0);
  SDValue Tmp67 = CurDAG->getTargetConstant(0xFFFFFFFFFFFFFFFFULL, MVT::i32);
  SDValue Tmp68(CurDAG->getTargetNode(Opc33, N.getDebugLoc(), VT33, Tmp66, Tmp67), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc34, VT34, Tmp19, Tmp41, Tmp68);
}
SDNode *Select_ISD_FDIV_f32(const SDValue &N) {
  SDNode *Result = Emit_67(N, SPU::FRESTf32, SPU::FIf32, SPU::FMf32, SPU::FNMSf32, SPU::FRESTf32, SPU::FIf32, SPU::FRESTf32, SPU::FIf32, SPU::FMf32, SPU::FMAf32, SPU::FRESTf32, SPU::FIf32, SPU::FMf32, SPU::FNMSf32, SPU::FRESTf32, SPU::FIf32, SPU::FRESTf32, SPU::FIf32, SPU::FMf32, SPU::FMAf32, SPU::AIf32, SPU::FRESTf32, SPU::FIf32, SPU::FMf32, SPU::FNMSf32, SPU::FRESTf32, SPU::FIf32, SPU::FRESTf32, SPU::FIf32, SPU::FMf32, SPU::FMAf32, SPU::AIf32, SPU::FNMSf32, SPU::CGTIf32, SPU::SELBf32_cond, MVT::f32, MVT::f32, MVT::f32, MVT::f32, MVT::f32, MVT::f32, MVT::f32, MVT::f32, MVT::f32, MVT::f32, MVT::f32, MVT::f32, MVT::f32, MVT::f32, MVT::f32, MVT::f32, MVT::f32, MVT::f32, MVT::f32, MVT::f32, MVT::f32, MVT::f32, MVT::f32, MVT::f32, MVT::f32, MVT::f32, MVT::f32, MVT::f32, MVT::f32, MVT::f32, MVT::f32, MVT::f32, MVT::f32, MVT::i32, MVT::f32);
  return Result;
}

SDNode *Emit_68(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, unsigned Opc4, unsigned Opc5, unsigned Opc6, unsigned Opc7, unsigned Opc8, unsigned Opc9, unsigned Opc10, unsigned Opc11, unsigned Opc12, unsigned Opc13, unsigned Opc14, unsigned Opc15, unsigned Opc16, unsigned Opc17, unsigned Opc18, unsigned Opc19, unsigned Opc20, unsigned Opc21, unsigned Opc22, unsigned Opc23, unsigned Opc24, unsigned Opc25, unsigned Opc26, unsigned Opc27, unsigned Opc28, unsigned Opc29, unsigned Opc30, unsigned Opc31, unsigned Opc32, unsigned Opc33, unsigned Opc34, MVT VT0, MVT VT1, MVT VT2, MVT VT3, MVT VT4, MVT VT5, MVT VT6, MVT VT7, MVT VT8, MVT VT9, MVT VT10, MVT VT11, MVT VT12, MVT VT13, MVT VT14, MVT VT15, MVT VT16, MVT VT17, MVT VT18, MVT VT19, MVT VT20, MVT VT21, MVT VT22, MVT VT23, MVT VT24, MVT VT25, MVT VT26, MVT VT27, MVT VT28, MVT VT29, MVT VT30, MVT VT31, MVT VT32, MVT VT33, MVT VT34) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue Tmp3(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N1), 0);
  SDValue Tmp4(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N1, Tmp3), 0);
  SDValue Tmp5(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, N0, Tmp4), 0);
  SDValue Tmp8(CurDAG->getTargetNode(Opc3, N.getDebugLoc(), VT3, Tmp5, N1, N0), 0);
  SDValue Tmp11(CurDAG->getTargetNode(Opc4, N.getDebugLoc(), VT4, N1), 0);
  SDValue Tmp12(CurDAG->getTargetNode(Opc5, N.getDebugLoc(), VT5, N1, Tmp11), 0);
  SDValue Tmp16(CurDAG->getTargetNode(Opc6, N.getDebugLoc(), VT6, N1), 0);
  SDValue Tmp17(CurDAG->getTargetNode(Opc7, N.getDebugLoc(), VT7, N1, Tmp16), 0);
  SDValue Tmp18(CurDAG->getTargetNode(Opc8, N.getDebugLoc(), VT8, N0, Tmp17), 0);
  SDValue Tmp19(CurDAG->getTargetNode(Opc9, N.getDebugLoc(), VT9, Tmp8, Tmp12, Tmp18), 0);
  SDValue Tmp23(CurDAG->getTargetNode(Opc10, N.getDebugLoc(), VT10, N1), 0);
  SDValue Tmp24(CurDAG->getTargetNode(Opc11, N.getDebugLoc(), VT11, N1, Tmp23), 0);
  SDValue Tmp25(CurDAG->getTargetNode(Opc12, N.getDebugLoc(), VT12, N0, Tmp24), 0);
  SDValue Tmp28(CurDAG->getTargetNode(Opc13, N.getDebugLoc(), VT13, Tmp25, N1, N0), 0);
  SDValue Tmp31(CurDAG->getTargetNode(Opc14, N.getDebugLoc(), VT14, N1), 0);
  SDValue Tmp32(CurDAG->getTargetNode(Opc15, N.getDebugLoc(), VT15, N1, Tmp31), 0);
  SDValue Tmp36(CurDAG->getTargetNode(Opc16, N.getDebugLoc(), VT16, N1), 0);
  SDValue Tmp37(CurDAG->getTargetNode(Opc17, N.getDebugLoc(), VT17, N1, Tmp36), 0);
  SDValue Tmp38(CurDAG->getTargetNode(Opc18, N.getDebugLoc(), VT18, N0, Tmp37), 0);
  SDValue Tmp39(CurDAG->getTargetNode(Opc19, N.getDebugLoc(), VT19, Tmp28, Tmp32, Tmp38), 0);
  SDValue Tmp40 = CurDAG->getTargetConstant(0x1ULL, MVT::i16);
  SDValue Tmp41(CurDAG->getTargetNode(Opc20, N.getDebugLoc(), VT20, Tmp39, Tmp40), 0);
  SDValue Tmp46(CurDAG->getTargetNode(Opc21, N.getDebugLoc(), VT21, N1), 0);
  SDValue Tmp47(CurDAG->getTargetNode(Opc22, N.getDebugLoc(), VT22, N1, Tmp46), 0);
  SDValue Tmp48(CurDAG->getTargetNode(Opc23, N.getDebugLoc(), VT23, N0, Tmp47), 0);
  SDValue Tmp51(CurDAG->getTargetNode(Opc24, N.getDebugLoc(), VT24, Tmp48, N1, N0), 0);
  SDValue Tmp54(CurDAG->getTargetNode(Opc25, N.getDebugLoc(), VT25, N1), 0);
  SDValue Tmp55(CurDAG->getTargetNode(Opc26, N.getDebugLoc(), VT26, N1, Tmp54), 0);
  SDValue Tmp59(CurDAG->getTargetNode(Opc27, N.getDebugLoc(), VT27, N1), 0);
  SDValue Tmp60(CurDAG->getTargetNode(Opc28, N.getDebugLoc(), VT28, N1, Tmp59), 0);
  SDValue Tmp61(CurDAG->getTargetNode(Opc29, N.getDebugLoc(), VT29, N0, Tmp60), 0);
  SDValue Tmp62(CurDAG->getTargetNode(Opc30, N.getDebugLoc(), VT30, Tmp51, Tmp55, Tmp61), 0);
  SDValue Tmp63 = CurDAG->getTargetConstant(0x1ULL, MVT::i16);
  SDValue Tmp64(CurDAG->getTargetNode(Opc31, N.getDebugLoc(), VT31, Tmp62, Tmp63), 0);
  SDValue Tmp66(CurDAG->getTargetNode(Opc32, N.getDebugLoc(), VT32, N1, Tmp64, N0), 0);
  SDValue Tmp67 = CurDAG->getTargetConstant(0xFFFFFFFFFFFFFFFFULL, MVT::i16);
  SDValue Tmp68(CurDAG->getTargetNode(Opc33, N.getDebugLoc(), VT33, Tmp66, Tmp67), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc34, VT34, Tmp19, Tmp41, Tmp68);
}
SDNode *Select_ISD_FDIV_v4f32(const SDValue &N) {
  SDNode *Result = Emit_68(N, SPU::FRESTv4f32, SPU::FIv4f32, SPU::FMv4f32, SPU::FNMSv4f32, SPU::FRESTv4f32, SPU::FIv4f32, SPU::FRESTv4f32, SPU::FIv4f32, SPU::FMv4f32, SPU::FMAv4f32, SPU::FRESTv4f32, SPU::FIv4f32, SPU::FMv4f32, SPU::FNMSv4f32, SPU::FRESTv4f32, SPU::FIv4f32, SPU::FRESTv4f32, SPU::FIv4f32, SPU::FMv4f32, SPU::FMAv4f32, SPU::AIv4f32, SPU::FRESTv4f32, SPU::FIv4f32, SPU::FMv4f32, SPU::FNMSv4f32, SPU::FRESTv4f32, SPU::FIv4f32, SPU::FRESTv4f32, SPU::FIv4f32, SPU::FMv4f32, SPU::FMAv4f32, SPU::AIv4f32, SPU::FNMSv4f32, SPU::CGTIv4f32, SPU::SELBv4f32_cond, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v4f32);
  return Result;
}

SDNode *Select_ISD_FMUL_f32(const SDValue &N) {
  SDNode *Result = Emit_0(N, SPU::FMf32, MVT::f32);
  return Result;
}

SDNode *Select_ISD_FMUL_f64(const SDValue &N) {
  SDNode *Result = Emit_0(N, SPU::FMf64, MVT::f64);
  return Result;
}

SDNode *Select_ISD_FMUL_v4f32(const SDValue &N) {
  SDNode *Result = Emit_0(N, SPU::FMv4f32, MVT::v4f32);
  return Result;
}

SDNode *Select_ISD_FMUL_v2f64(const SDValue &N) {
  SDNode *Result = Emit_0(N, SPU::FMv2f64, MVT::v2f64);
  return Result;
}

SDNode *Emit_69(const SDValue &N, unsigned Opc0, unsigned Opc1, MVT VT0, MVT VT1) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue Tmp1 = CurDAG->getTargetConstant(0x8000ULL, MVT::i32);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, Tmp1), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc1, VT1, N0, Tmp2);
}
SDNode *Select_ISD_FNEG_f32(const SDValue &N) {
  SDNode *Result = Emit_69(N, SPU::ILHUr32, SPU::XORfneg32, MVT::i32, MVT::f32);
  return Result;
}

SDNode *Emit_70(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N010 = N01.getOperand(0);
  SDValue N011 = N01.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N010, N011, N00);
}
SDNode *Emit_71(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N000 = N00.getOperand(0);
  SDValue N001 = N00.getOperand(1);
  SDValue N01 = N0.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N000, N001, N01);
}
SDNode *Emit_72(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, MVT VT0, MVT VT1, MVT VT2) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue Tmp1 = CurDAG->getTargetConstant(0x8080ULL, MVT::i16);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, Tmp1), 0);
  SDValue Tmp3 = CurDAG->getTargetConstant(0x80ULL, MVT::i16);
  SDValue Tmp4(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, Tmp2, Tmp3), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc2, VT2, N0, Tmp4);
}
SDNode *Select_ISD_FNEG_f64(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);

    // Pattern: (fneg:f64 (fadd:f64 R64FP:f64:$rC, (fmul:f64 R64FP:f64:$rA, R64FP:f64:$rB)))
    // Emits: (FNMAf64:f64 R64FP:f64:$rA, R64FP:f64:$rB, R64FP:f64:$rC)
    // Pattern complexity = 9  cost = 1  size = 0
    if (N0.getOpcode() == ISD::FADD) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);
      if (N01.getOpcode() == ISD::FMUL) {
        SDNode *Result = Emit_70(N, SPU::FNMAf64, MVT::f64);
        return Result;
      }
    }

    // Pattern: (fneg:f64 (fsub:f64 (fmul:f64 R64FP:f64:$rA, R64FP:f64:$rB), R64FP:f64:$rC))
    // Emits: (FNMSf64:f64 R64FP:f64:$rA, R64FP:f64:$rB, R64FP:f64:$rC)
    // Pattern complexity = 9  cost = 1  size = 0
    if (N0.getOpcode() == ISD::FSUB) {
      SDValue N00 = N0.getOperand(0);
      if (N00.getOpcode() == ISD::FMUL) {
        SDNode *Result = Emit_71(N, SPU::FNMSf64, MVT::f64);
        return Result;
      }
    }

    // Pattern: (fneg:f64 (fadd:f64 (fmul:f64 R64FP:f64:$rA, R64FP:f64:$rB), R64FP:f64:$rC))
    // Emits: (FNMAf64:f64 R64FP:f64:$rA, R64FP:f64:$rB, R64FP:f64:$rC)
    // Pattern complexity = 9  cost = 1  size = 0
    if (N0.getOpcode() == ISD::FADD) {
      SDValue N00 = N0.getOperand(0);
      if (N00.getOpcode() == ISD::FMUL) {
        SDNode *Result = Emit_71(N, SPU::FNMAf64, MVT::f64);
        return Result;
      }
    }
  }

  // Pattern: (fneg:f64 R64FP:f64:$rA)
  // Emits: (XORfneg64:f64 R64FP:f64:$rA, (ANDBIv16i8:v16i8 (FSMBIv16i8:v16i8 32896:i16), 128:i16))
  // Pattern complexity = 3  cost = 3  size = 0
  SDNode *Result = Emit_72(N, SPU::FSMBIv16i8, SPU::ANDBIv16i8, SPU::XORfneg64, MVT::v16i8, MVT::v16i8, MVT::f64);
  return Result;
}

SDNode *Select_ISD_FNEG_v4f32(const SDValue &N) {
  SDNode *Result = Emit_69(N, SPU::ILHUv4i32, SPU::XORfnegvec, MVT::v4f32, MVT::v4f32);
  return Result;
}

SDNode *Select_ISD_FNEG_v2f64(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);

    // Pattern: (fneg:v2f64 (fadd:v2f64 VECREG:v2f64:$rC, (fmul:v2f64 VECREG:v2f64:$rA, VECREG:v2f64:$rB)))
    // Emits: (FNMAv2f64:v2f64 VECREG:v2f64:$rA, VECREG:v2f64:$rB, VECREG:v2f64:$rC)
    // Pattern complexity = 9  cost = 1  size = 0
    if (N0.getOpcode() == ISD::FADD) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);
      if (N01.getOpcode() == ISD::FMUL) {
        SDNode *Result = Emit_70(N, SPU::FNMAv2f64, MVT::v2f64);
        return Result;
      }
    }

    // Pattern: (fneg:v2f64 (fsub:v2f64 (fmul:v2f64 VECREG:v2f64:$rA, VECREG:v2f64:$rB), VECREG:v2f64:$rC))
    // Emits: (FNMSv2f64:v2f64 VECREG:v16i8:$rA, VECREG:v16i8:$rB, VECREG:v16i8:$rC)
    // Pattern complexity = 9  cost = 1  size = 0
    if (N0.getOpcode() == ISD::FSUB) {
      SDValue N00 = N0.getOperand(0);
      if (N00.getOpcode() == ISD::FMUL) {
        SDNode *Result = Emit_71(N, SPU::FNMSv2f64, MVT::v2f64);
        return Result;
      }
    }

    // Pattern: (fneg:v2f64 (fadd:v2f64 (fmul:v2f64 VECREG:v2f64:$rA, VECREG:v2f64:$rB), VECREG:v2f64:$rC))
    // Emits: (FNMAv2f64:v2f64 VECREG:v2f64:$rA, VECREG:v2f64:$rB, VECREG:v2f64:$rC)
    // Pattern complexity = 9  cost = 1  size = 0
    if (N0.getOpcode() == ISD::FADD) {
      SDValue N00 = N0.getOperand(0);
      if (N00.getOpcode() == ISD::FMUL) {
        SDNode *Result = Emit_71(N, SPU::FNMAv2f64, MVT::v2f64);
        return Result;
      }
    }
  }

  // Pattern: (fneg:v2f64 VECREG:v2f64:$rA)
  // Emits: (XORfnegvec:v2f64 VECREG:v2f64:$rA, (ANDBIv16i8:v2f64 (FSMBIv16i8:v16i8 32896:i16), 128:i16))
  // Pattern complexity = 3  cost = 3  size = 0
  SDNode *Result = Emit_72(N, SPU::FSMBIv16i8, SPU::ANDBIv16i8, SPU::XORfnegvec, MVT::v16i8, MVT::v2f64, MVT::v2f64);
  return Result;
}

SDNode *Select_ISD_FP_EXTEND_f64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::f32) {
    SDNode *Result = Emit_31(N, SPU::FESDf32, MVT::f64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_FP_EXTEND_v2f64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::v4f32) {
    SDNode *Result = Emit_31(N, SPU::FESDvec, MVT::v2f64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_FP_ROUND_f32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::f64) {
    SDNode *Result = Emit_31(N, SPU::FRDSf64, MVT::f32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_FP_TO_SINT_i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::f32) {
    SDNode *Result = Emit_31(N, SPU::CFSif32, MVT::i32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_FP_TO_SINT_v4i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::v4f32) {
    SDNode *Result = Emit_31(N, SPU::CFSiv4f32, MVT::v4i32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_FP_TO_UINT_i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::f32) {
    SDNode *Result = Emit_31(N, SPU::CFUif32, MVT::i32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_FP_TO_UINT_v4i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::v4f32) {
    SDNode *Result = Emit_31(N, SPU::CFUiv4f32, MVT::v4i32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_FSUB_f32(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);

    // Pattern: (fsub:f32 (fmul:f32 R32FP:f32:$rA, R32FP:f32:$rB), R32FP:f32:$rC)
    // Emits: (FMSf32:f32 R32FP:f32:$rA, R32FP:f32:$rB, R32FP:f32:$rC)
    // Pattern complexity = 6  cost = 1  size = 0
    if (N0.getOpcode() == ISD::FMUL) {
      SDNode *Result = Emit_66(N, SPU::FMSf32, MVT::f32);
      return Result;
    }

    // Pattern: (fsub:f32 R32FP:f32:$rC, (fmul:f32 R32FP:f32:$rA, R32FP:f32:$rB))
    // Emits: (FNMSf32:f32 R32FP:f32:$rA, R32FP:f32:$rB, R32FP:f32:$rC)
    // Pattern complexity = 6  cost = 1  size = 0
    SDValue N1 = N.getOperand(1);
    if (N1.getOpcode() == ISD::FMUL) {
      SDNode *Result = Emit_65(N, SPU::FNMSf32, MVT::f32);
      return Result;
    }
  }

  // Pattern: (fsub:f32 R32FP:f32:$rA, R32FP:f32:$rB)
  // Emits: (FSf32:f32 R32FP:f32:$rA, R32FP:f32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::FSf32, MVT::f32);
  return Result;
}

SDNode *Select_ISD_FSUB_f64(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);

    // Pattern: (fsub:f64 (fmul:f64 R64FP:f64:$rA, R64FP:f64:$rB), R64FP:f64:$rC)
    // Emits: (FMSf64:f64 R64FP:f64:$rA, R64FP:f64:$rB, R64FP:f64:$rC)
    // Pattern complexity = 6  cost = 1  size = 0
    if (N0.getOpcode() == ISD::FMUL) {
      SDNode *Result = Emit_66(N, SPU::FMSf64, MVT::f64);
      return Result;
    }

    // Pattern: (fsub:f64 R64FP:f64:$rC, (fmul:f64 R64FP:f64:$rA, R64FP:f64:$rB))
    // Emits: (FNMSf64:f64 R64FP:f64:$rA, R64FP:f64:$rB, R64FP:f64:$rC)
    // Pattern complexity = 6  cost = 1  size = 0
    SDValue N1 = N.getOperand(1);
    if (N1.getOpcode() == ISD::FMUL) {
      SDNode *Result = Emit_65(N, SPU::FNMSf64, MVT::f64);
      return Result;
    }
  }

  // Pattern: (fsub:f64 R64FP:f64:$rA, R64FP:f64:$rB)
  // Emits: (FSf64:f64 R64FP:f64:$rA, R64FP:f64:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::FSf64, MVT::f64);
  return Result;
}

SDNode *Select_ISD_FSUB_v4f32(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);

    // Pattern: (fsub:v4f32 (fmul:v4f32 VECREG:v4f32:$rA, VECREG:v4f32:$rB), VECREG:v4f32:$rC)
    // Emits: (FMSv4f32:v4f32 VECREG:v4f32:$rA, VECREG:v4f32:$rB, VECREG:v4f32:$rC)
    // Pattern complexity = 6  cost = 1  size = 0
    if (N0.getOpcode() == ISD::FMUL) {
      SDNode *Result = Emit_66(N, SPU::FMSv4f32, MVT::v4f32);
      return Result;
    }

    // Pattern: (fsub:v4f32 VECREG:v4f32:$rC, (fmul:v4f32 VECREG:v4f32:$rA, VECREG:v4f32:$rB))
    // Emits: (FNMSv4f32:v4f32 VECREG:v4f32:$rA, VECREG:v4f32:$rB, VECREG:v4f32:$rC)
    // Pattern complexity = 6  cost = 1  size = 0
    SDValue N1 = N.getOperand(1);
    if (N1.getOpcode() == ISD::FMUL) {
      SDNode *Result = Emit_65(N, SPU::FNMSv4f32, MVT::v4f32);
      return Result;
    }
  }

  // Pattern: (fsub:v4f32 VECREG:v4f32:$rA, VECREG:v4f32:$rB)
  // Emits: (FSv4f32:v4f32 VECREG:v4f32:$rA, VECREG:v4f32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::FSv4f32, MVT::v4f32);
  return Result;
}

SDNode *Select_ISD_FSUB_v2f64(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);

    // Pattern: (fsub:v2f64 (fmul:v2f64 VECREG:v2f64:$rA, VECREG:v2f64:$rB), VECREG:v2f64:$rC)
    // Emits: (FMSv2f64:v2f64 VECREG:v2f64:$rA, VECREG:v2f64:$rB, VECREG:v2f64:$rC)
    // Pattern complexity = 6  cost = 1  size = 0
    if (N0.getOpcode() == ISD::FMUL) {
      SDNode *Result = Emit_66(N, SPU::FMSv2f64, MVT::v2f64);
      return Result;
    }

    // Pattern: (fsub:v2f64 VECREG:v2f64:$rC, (fmul:v2f64 VECREG:v2f64:$rA, VECREG:v2f64:$rB))
    // Emits: (FNMSv2f64:v2f64 VECREG:v2f64:$rA, VECREG:v2f64:$rB, VECREG:v2f64:$rC)
    // Pattern complexity = 6  cost = 1  size = 0
    SDValue N1 = N.getOperand(1);
    if (N1.getOpcode() == ISD::FMUL) {
      SDNode *Result = Emit_65(N, SPU::FNMSv2f64, MVT::v2f64);
      return Result;
    }
  }

  // Pattern: (fsub:v2f64 VECREG:v2f64:$rA, VECREG:v2f64:$rB)
  // Emits: (FSv2f64:v2f64 VECREG:v2f64:$rA, VECREG:v2f64:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::FSv2f64, MVT::v2f64);
  return Result;
}

SDNode *Emit_73(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp3 = CurDAG->getTargetConstant(((unsigned char) cast<ConstantSDNode>(N2)->getZExtValue()), MVT::i8);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N1, Tmp3);
}
SDNode *Emit_74(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N1, N2);
}
SDNode *Emit_75(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp3 = CurDAG->getTargetConstant(((unsigned) cast<ConstantSDNode>(N2)->getZExtValue()), MVT::i32);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N1, Tmp3);
}
SDNode *Select_ISD_INTRINSIC_WO_CHAIN_v16i8(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  ConstantSDNode *Tmp0 = dyn_cast<ConstantSDNode>(N0);
  if (Tmp0) {
    int64_t CN1 = Tmp0->getSExtValue();

    // Pattern: (intrinsic_wo_chain:v16i8 237:iPTR, VECREG:v16i8:$rA, (imm:i8)<<P:Predicate_immU8>>:$val)
    // Emits: (CellSDKandbi:v16i8 VECREG:v16i8:$rA, (imm:i8):$val)
    // Pattern complexity = 12  cost = 1  size = 0
    if (CN1 == INT64_C(237)) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::Constant &&
          Predicate_immU8(N2.getNode())) {
        SDNode *Result = Emit_73(N, SPU::CellSDKandbi, MVT::v16i8);
        return Result;
      }
    }

    // Pattern: (intrinsic_wo_chain:v16i8 295:iPTR, VECREG:v16i8:$rA, (imm:i8)<<P:Predicate_immU8>>:$val)
    // Emits: (CellSDKorbi:v16i8 VECREG:v16i8:$rA, (imm:i8):$val)
    // Pattern complexity = 12  cost = 1  size = 0
    if (CN1 == INT64_C(295)) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::Constant &&
          Predicate_immU8(N2.getNode())) {
        SDNode *Result = Emit_73(N, SPU::CellSDKorbi, MVT::v16i8);
        return Result;
      }
    }

    // Pattern: (intrinsic_wo_chain:v16i8 310:iPTR, VECREG:v16i8:$rA, (imm:i8)<<P:Predicate_immU8>>:$val)
    // Emits: (CellSDKxorbi:v16i8 VECREG:v16i8:$rA, (imm:i8):$val)
    // Pattern complexity = 12  cost = 1  size = 0
    if (CN1 == INT64_C(310)) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::Constant &&
          Predicate_immU8(N2.getNode())) {
        SDNode *Result = Emit_73(N, SPU::CellSDKxorbi, MVT::v16i8);
        return Result;
      }
    }

    // Pattern: (intrinsic_wo_chain:v16i8 245:iPTR, VECREG:v16i8:$rA, (imm:i8)<<P:Predicate_immU8>>:$val)
    // Emits: (CellSDKceqbi:v16i8 VECREG:v16i8:$rA, (imm:i8):$val)
    // Pattern complexity = 12  cost = 1  size = 0
    if (CN1 == INT64_C(245)) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::Constant &&
          Predicate_immU8(N2.getNode())) {
        SDNode *Result = Emit_73(N, SPU::CellSDKceqbi, MVT::v16i8);
        return Result;
      }
    }

    // Pattern: (intrinsic_wo_chain:v16i8 252:iPTR, VECREG:v16i8:$rA, (imm:i8)<<P:Predicate_immU8>>:$val)
    // Emits: (CellSDKcgtbi:v16i8 VECREG:v16i8:$rA, (imm:i8):$val)
    // Pattern complexity = 12  cost = 1  size = 0
    if (CN1 == INT64_C(252)) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::Constant &&
          Predicate_immU8(N2.getNode())) {
        SDNode *Result = Emit_73(N, SPU::CellSDKcgtbi, MVT::v16i8);
        return Result;
      }
    }

    // Pattern: (intrinsic_wo_chain:v16i8 259:iPTR, VECREG:v16i8:$rA, (imm:i8)<<P:Predicate_immU8>>:$val)
    // Emits: (CellSDKclgtbi:v16i8 VECREG:v16i8:$rA, (imm:i8):$val)
    // Pattern complexity = 12  cost = 1  size = 0
    if (CN1 == INT64_C(259)) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::Constant &&
          Predicate_immU8(N2.getNode())) {
        SDNode *Result = Emit_73(N, SPU::CellSDKclgtbi, MVT::v16i8);
        return Result;
      }
    }

    // Pattern: (intrinsic_wo_chain:v16i8 308:iPTR, VECREG:v16i8:$rA, (imm:i8)<<P:Predicate_uimm7>>:$val)
    // Emits: (SHLQBYIv16i8:v16i8 VECREG:v16i8:$rA, (imm:i32)<<P:Predicate_uimm7>>:$val)
    // Pattern complexity = 12  cost = 1  size = 0
    if (CN1 == INT64_C(308)) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::Constant &&
          Predicate_uimm7(N2.getNode())) {
        SDNode *Result = Emit_75(N, SPU::SHLQBYIv16i8, MVT::v16i8);
        return Result;
      }
    }

    // Pattern: (intrinsic_wo_chain:v16i8 306:iPTR, VECREG:v16i8:$rA, (imm:i8)<<P:Predicate_uimm7>>:$val)
    // Emits: (SHLQBIIv16i8:v16i8 VECREG:v16i8:$rA, (imm:i32)<<P:Predicate_uimm7>>:$val)
    // Pattern complexity = 12  cost = 1  size = 0
    if (CN1 == INT64_C(306)) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::Constant &&
          Predicate_uimm7(N2.getNode())) {
        SDNode *Result = Emit_75(N, SPU::SHLQBIIv16i8, MVT::v16i8);
        return Result;
      }
    }

    // Pattern: (intrinsic_wo_chain:v16i8 244:iPTR, VECREG:v16i8:$rA, VECREG:v16i8:$rB)
    // Emits: (CellSDKceqb:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(244)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKceqb, MVT::v16i8);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v16i8 251:iPTR, VECREG:v16i8:$rA, VECREG:v16i8:$rB)
    // Emits: (CellSDKcgtb:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(251)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKcgtb, MVT::v16i8);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v16i8 258:iPTR, VECREG:v16i8:$rA, VECREG:v16i8:$rB)
    // Emits: (CellSDKclgtb:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(258)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKclgtb, MVT::v16i8);
      return Result;
    }
  }

  CannotYetSelectIntrinsic(N);
  return NULL;
}

SDNode *Emit_76(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp2 = CurDAG->getTargetConstant(((unsigned short) cast<ConstantSDNode>(N2)->getZExtValue()), MVT::i16);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, Tmp2, N1);
}
SDNode *Emit_77(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp3 = CurDAG->getTargetConstant(((unsigned short) cast<ConstantSDNode>(N2)->getZExtValue()), MVT::i16);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N1, Tmp3);
}
SDNode *Select_ISD_INTRINSIC_WO_CHAIN_v8i16(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  ConstantSDNode *Tmp0 = dyn_cast<ConstantSDNode>(N0);
  if (Tmp0) {
    int64_t CN1 = Tmp0->getSExtValue();

    // Pattern: (intrinsic_wo_chain:v8i16 234:iPTR, VECREG:v8i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val)
    // Emits: (CellSDKahi:v8i16 (imm:i16):$val, VECREG:v8i16:$rA)
    // Pattern complexity = 12  cost = 1  size = 0
    if (CN1 == INT64_C(234)) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::Constant &&
          Predicate_i16ImmSExt10(N2.getNode())) {
        SDNode *Result = Emit_76(N, SPU::CellSDKahi, MVT::v8i16);
        return Result;
      }
    }

    // Pattern: (intrinsic_wo_chain:v8i16 301:iPTR, VECREG:v8i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val)
    // Emits: (CellSDKsfhi:v8i16 (imm:i16):$val, VECREG:v8i16:$rA)
    // Pattern complexity = 12  cost = 1  size = 0
    if (CN1 == INT64_C(301)) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::Constant &&
          Predicate_i16ImmSExt10(N2.getNode())) {
        SDNode *Result = Emit_76(N, SPU::CellSDKsfhi, MVT::v8i16);
        return Result;
      }
    }

    // Pattern: (intrinsic_wo_chain:v8i16 239:iPTR, VECREG:v8i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val)
    // Emits: (CellSDKandhi:v8i16 VECREG:v8i16:$rA, (imm:i16):$val)
    // Pattern complexity = 12  cost = 1  size = 0
    if (CN1 == INT64_C(239)) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::Constant &&
          Predicate_i16ImmSExt10(N2.getNode())) {
        SDNode *Result = Emit_77(N, SPU::CellSDKandhi, MVT::v8i16);
        return Result;
      }
    }

    // Pattern: (intrinsic_wo_chain:v8i16 297:iPTR, VECREG:v8i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val)
    // Emits: (CellSDKorhi:v8i16 VECREG:v8i16:$rA, (imm:i16):$val)
    // Pattern complexity = 12  cost = 1  size = 0
    if (CN1 == INT64_C(297)) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::Constant &&
          Predicate_i16ImmSExt10(N2.getNode())) {
        SDNode *Result = Emit_77(N, SPU::CellSDKorhi, MVT::v8i16);
        return Result;
      }
    }

    // Pattern: (intrinsic_wo_chain:v8i16 311:iPTR, VECREG:v8i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val)
    // Emits: (CellSDKxorhi:v8i16 VECREG:v8i16:$rA, (imm:i16):$val)
    // Pattern complexity = 12  cost = 1  size = 0
    if (CN1 == INT64_C(311)) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::Constant &&
          Predicate_i16ImmSExt10(N2.getNode())) {
        SDNode *Result = Emit_77(N, SPU::CellSDKxorhi, MVT::v8i16);
        return Result;
      }
    }

    // Pattern: (intrinsic_wo_chain:v8i16 247:iPTR, VECREG:v8i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val)
    // Emits: (CellSDKceqhi:v8i16 VECREG:v8i16:$rA, (imm:i16):$val)
    // Pattern complexity = 12  cost = 1  size = 0
    if (CN1 == INT64_C(247)) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::Constant &&
          Predicate_i16ImmSExt10(N2.getNode())) {
        SDNode *Result = Emit_77(N, SPU::CellSDKceqhi, MVT::v8i16);
        return Result;
      }
    }

    // Pattern: (intrinsic_wo_chain:v8i16 254:iPTR, VECREG:v8i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val)
    // Emits: (CellSDKcgthi:v8i16 VECREG:v8i16:$rA, (imm:i16):$val)
    // Pattern complexity = 12  cost = 1  size = 0
    if (CN1 == INT64_C(254)) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::Constant &&
          Predicate_i16ImmSExt10(N2.getNode())) {
        SDNode *Result = Emit_77(N, SPU::CellSDKcgthi, MVT::v8i16);
        return Result;
      }
    }

    // Pattern: (intrinsic_wo_chain:v8i16 261:iPTR, VECREG:v8i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val)
    // Emits: (CellSDKclgthi:v8i16 VECREG:v8i16:$rA, (imm:i16):$val)
    // Pattern complexity = 12  cost = 1  size = 0
    if (CN1 == INT64_C(261)) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::Constant &&
          Predicate_i16ImmSExt10(N2.getNode())) {
        SDNode *Result = Emit_77(N, SPU::CellSDKclgthi, MVT::v8i16);
        return Result;
      }
    }
    if (CN1 == INT64_C(233)) {

      // Pattern: (intrinsic_wo_chain:v8i16 233:iPTR, VECREG:v8i16:$rA, VECREG:v8i16:$rB)
      // Emits: (AHv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
      // Pattern complexity = 8  cost = 1  size = 0
      {
        SDNode *Result = Emit_74(N, SPU::AHv8i16, MVT::v8i16);
        return Result;
      }

      // Pattern: (intrinsic_wo_chain:v8i16 233:iPTR, VECREG:v8i16:$rA, VECREG:v8i16:$rB)
      // Emits: (CellSDKah:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
      // Pattern complexity = 8  cost = 1  size = 0
      SDNode *Result = Emit_74(N, SPU::CellSDKah, MVT::v8i16);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v8i16 300:iPTR, VECREG:v8i16:$rA, VECREG:v8i16:$rB)
    // Emits: (CellSDKsfh:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(300)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKsfh, MVT::v8i16);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v8i16 246:iPTR, VECREG:v8i16:$rA, VECREG:v8i16:$rB)
    // Emits: (CellSDKceqh:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(246)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKceqh, MVT::v8i16);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v8i16 253:iPTR, VECREG:v8i16:$rA, VECREG:v8i16:$rB)
    // Emits: (CellSDKcgth:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(253)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKcgth, MVT::v8i16);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v8i16 260:iPTR, VECREG:v8i16:$rA, VECREG:v8i16:$rB)
    // Emits: (CellSDKclgth:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(260)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKclgth, MVT::v8i16);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v8i16 305:iPTR, VECREG:v8i16:$rA, R32C:i32:$rB)
    // Emits: (SHLQBIv16i8:v8i16 VECREG:v16i8:$rA, R32C:i32:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(305)) {
      SDNode *Result = Emit_74(N, SPU::SHLQBIv16i8, MVT::v8i16);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v8i16 307:iPTR, VECREG:v8i16:$rA, R32C:i32:$rB)
    // Emits: (SHLQBYv16i8:v8i16 VECREG:v16i8:$rA, R32C:i32:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(307)) {
      SDNode *Result = Emit_74(N, SPU::SHLQBYv16i8, MVT::v8i16);
      return Result;
    }
  }

  CannotYetSelectIntrinsic(N);
  return NULL;
}

SDNode *Emit_78(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue N3 = N.getOperand(3);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N1, N2, N3);
}
SDNode *Select_ISD_INTRINSIC_WO_CHAIN_v4i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  ConstantSDNode *Tmp0 = dyn_cast<ConstantSDNode>(N0);
  if (Tmp0) {
    int64_t CN1 = Tmp0->getSExtValue();

    // Pattern: (intrinsic_wo_chain:v4i32 235:iPTR, VECREG:v4i32:$rA, (imm:i16)<<P:Predicate_i32ImmSExt10>>:$val)
    // Emits: (CellSDKai:v4i32 (imm:i16):$val, VECREG:v4i32:$rA)
    // Pattern complexity = 12  cost = 1  size = 0
    if (CN1 == INT64_C(235)) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::Constant &&
          Predicate_i32ImmSExt10(N2.getNode())) {
        SDNode *Result = Emit_76(N, SPU::CellSDKai, MVT::v4i32);
        return Result;
      }
    }

    // Pattern: (intrinsic_wo_chain:v4i32 302:iPTR, VECREG:v4i32:$rA, (imm:i16)<<P:Predicate_i32ImmSExt10>>:$val)
    // Emits: (CellSDKsfi:v4i32 (imm:i16):$val, VECREG:v4i32:$rA)
    // Pattern complexity = 12  cost = 1  size = 0
    if (CN1 == INT64_C(302)) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::Constant &&
          Predicate_i32ImmSExt10(N2.getNode())) {
        SDNode *Result = Emit_76(N, SPU::CellSDKsfi, MVT::v4i32);
        return Result;
      }
    }

    // Pattern: (intrinsic_wo_chain:v4i32 288:iPTR, VECREG:v8i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val)
    // Emits: (CellSDKmpyi:v4i32 VECREG:v8i16:$rA, (imm:i16):$val)
    // Pattern complexity = 12  cost = 1  size = 0
    if (CN1 == INT64_C(288)) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::Constant &&
          Predicate_i16ImmSExt10(N2.getNode())) {
        SDNode *Result = Emit_77(N, SPU::CellSDKmpyi, MVT::v4i32);
        return Result;
      }
    }

    // Pattern: (intrinsic_wo_chain:v4i32 291:iPTR, VECREG:v8i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val)
    // Emits: (CellSDKmpyui:v4i32 VECREG:v8i16:$rA, (imm:i16):$val)
    // Pattern complexity = 12  cost = 1  size = 0
    if (CN1 == INT64_C(291)) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::Constant &&
          Predicate_i16ImmSExt10(N2.getNode())) {
        SDNode *Result = Emit_77(N, SPU::CellSDKmpyui, MVT::v4i32);
        return Result;
      }
    }

    // Pattern: (intrinsic_wo_chain:v4i32 240:iPTR, VECREG:v4i32:$rA, (imm:i16)<<P:Predicate_i32ImmSExt10>>:$val)
    // Emits: (CellSDKandi:v4i32 VECREG:v4i32:$rA, (imm:i16):$val)
    // Pattern complexity = 12  cost = 1  size = 0
    if (CN1 == INT64_C(240)) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::Constant &&
          Predicate_i32ImmSExt10(N2.getNode())) {
        SDNode *Result = Emit_77(N, SPU::CellSDKandi, MVT::v4i32);
        return Result;
      }
    }

    // Pattern: (intrinsic_wo_chain:v4i32 298:iPTR, VECREG:v4i32:$rA, (imm:i16)<<P:Predicate_i32ImmSExt10>>:$val)
    // Emits: (CellSDKori:v4i32 VECREG:v4i32:$rA, (imm:i16):$val)
    // Pattern complexity = 12  cost = 1  size = 0
    if (CN1 == INT64_C(298)) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::Constant &&
          Predicate_i32ImmSExt10(N2.getNode())) {
        SDNode *Result = Emit_77(N, SPU::CellSDKori, MVT::v4i32);
        return Result;
      }
    }

    // Pattern: (intrinsic_wo_chain:v4i32 312:iPTR, VECREG:v4i32:$rA, (imm:i16)<<P:Predicate_i32ImmSExt10>>:$val)
    // Emits: (CellSDKxori:v4i32 VECREG:v4i32:$rA, (imm:i16):$val)
    // Pattern complexity = 12  cost = 1  size = 0
    if (CN1 == INT64_C(312)) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::Constant &&
          Predicate_i32ImmSExt10(N2.getNode())) {
        SDNode *Result = Emit_77(N, SPU::CellSDKxori, MVT::v4i32);
        return Result;
      }
    }

    // Pattern: (intrinsic_wo_chain:v4i32 248:iPTR, VECREG:v4i32:$rA, (imm:i16)<<P:Predicate_i32ImmSExt10>>:$val)
    // Emits: (CellSDKceqi:v4i32 VECREG:v4i32:$rA, (imm:i16):$val)
    // Pattern complexity = 12  cost = 1  size = 0
    if (CN1 == INT64_C(248)) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::Constant &&
          Predicate_i32ImmSExt10(N2.getNode())) {
        SDNode *Result = Emit_77(N, SPU::CellSDKceqi, MVT::v4i32);
        return Result;
      }
    }

    // Pattern: (intrinsic_wo_chain:v4i32 255:iPTR, VECREG:v4i32:$rA, (imm:i16)<<P:Predicate_i32ImmSExt10>>:$val)
    // Emits: (CellSDKcgti:v4i32 VECREG:v4i32:$rA, (imm:i16):$val)
    // Pattern complexity = 12  cost = 1  size = 0
    if (CN1 == INT64_C(255)) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::Constant &&
          Predicate_i32ImmSExt10(N2.getNode())) {
        SDNode *Result = Emit_77(N, SPU::CellSDKcgti, MVT::v4i32);
        return Result;
      }
    }

    // Pattern: (intrinsic_wo_chain:v4i32 262:iPTR, VECREG:v4i32:$rA, (imm:i16)<<P:Predicate_i32ImmSExt10>>:$val)
    // Emits: (CellSDKclgti:v4i32 VECREG:v4i32:$rA, (imm:i16):$val)
    // Pattern complexity = 12  cost = 1  size = 0
    if (CN1 == INT64_C(262)) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::Constant &&
          Predicate_i32ImmSExt10(N2.getNode())) {
        SDNode *Result = Emit_77(N, SPU::CellSDKclgti, MVT::v4i32);
        return Result;
      }
    }

    // Pattern: (intrinsic_wo_chain:v4i32 304:iPTR, VECREG:v4i32:$rA, (imm:i8)<<P:Predicate_uimm7>>:$val)
    // Emits: (SHLIv4i32:v4i32 VECREG:v16i8:$rA, (imm:i32)<<P:Predicate_uimm7>>:$val)
    // Pattern complexity = 12  cost = 1  size = 0
    if (CN1 == INT64_C(304)) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N2.getOpcode() == ISD::Constant &&
          Predicate_uimm7(N2.getNode())) {
        SDNode *Result = Emit_75(N, SPU::SHLIv4i32, MVT::v4i32);
        return Result;
      }
    }

    // Pattern: (intrinsic_wo_chain:v4i32 231:iPTR, VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Emits: (CellSDKa:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(231)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKa, MVT::v4i32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4i32 299:iPTR, VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Emits: (CellSDKsf:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(299)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKsf, MVT::v4i32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4i32 232:iPTR, VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Emits: (CellSDKaddx:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(232)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKaddx, MVT::v4i32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4i32 249:iPTR, VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Emits: (CellSDKcg:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(249)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKcg, MVT::v4i32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4i32 256:iPTR, VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Emits: (CellSDKcgx:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(256)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKcgx, MVT::v4i32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4i32 303:iPTR, VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Emits: (CellSDKsfx:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(303)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKsfx, MVT::v4i32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4i32 241:iPTR, VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Emits: (CellSDKbg:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(241)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKbg, MVT::v4i32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4i32 242:iPTR, VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Emits: (CellSDKbgx:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(242)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKbgx, MVT::v4i32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4i32 281:iPTR, VECREG:v8i16:$rA, VECREG:v8i16:$rB)
    // Emits: (CellSDKmpy:v4i32 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(281)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKmpy, MVT::v4i32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4i32 290:iPTR, VECREG:v8i16:$rA, VECREG:v8i16:$rB)
    // Emits: (CellSDKmpyu:v4i32 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(290)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKmpyu, MVT::v4i32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4i32 282:iPTR, VECREG:v8i16:$rA, VECREG:v8i16:$rB, VECREG:v8i16:$rC)
    // Emits: (CellSDKmpya:v4i32 VECREG:v8i16:$rA, VECREG:v8i16:$rB, VECREG:v8i16:$rC)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(282)) {
      SDNode *Result = Emit_78(N, SPU::CellSDKmpya, MVT::v4i32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4i32 283:iPTR, VECREG:v4i32:$rA, VECREG:v8i16:$rB)
    // Emits: (CellSDKmpyh:v4i32 VECREG:v4i32:$rA, VECREG:v8i16:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(283)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKmpyh, MVT::v4i32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4i32 289:iPTR, VECREG:v8i16:$rA, VECREG:v8i16:$rB)
    // Emits: (CellSDKmpys:v4i32 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(289)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKmpys, MVT::v4i32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4i32 284:iPTR, VECREG:v8i16:$rA, VECREG:v8i16:$rB)
    // Emits: (CellSDKmpyhh:v4i32 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(284)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKmpyhh, MVT::v4i32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4i32 285:iPTR, VECREG:v8i16:$rA, VECREG:v8i16:$rB)
    // Emits: (CellSDKmpyhha:v4i32 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(285)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKmpyhha, MVT::v4i32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4i32 287:iPTR, VECREG:v8i16:$rA, VECREG:v8i16:$rB)
    // Emits: (CellSDKmpyhhu:v4i32 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(287)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKmpyhhu, MVT::v4i32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4i32 286:iPTR, VECREG:v8i16:$rA, VECREG:v8i16:$rB)
    // Emits: (CellSDKmpyhhau:v4i32 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(286)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKmpyhhau, MVT::v4i32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4i32 236:iPTR, VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Emits: (CellSDKand:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(236)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKand, MVT::v4i32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4i32 238:iPTR, VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Emits: (CellSDKandc:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(238)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKandc, MVT::v4i32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4i32 294:iPTR, VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Emits: (CellSDKor:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(294)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKor, MVT::v4i32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4i32 296:iPTR, VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Emits: (CellSDKorc:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(296)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKorc, MVT::v4i32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4i32 309:iPTR, VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Emits: (CellSDKxor:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(309)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKxor, MVT::v4i32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4i32 293:iPTR, VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Emits: (CellSDKnor:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(293)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKnor, MVT::v4i32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4i32 292:iPTR, VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Emits: (CellSDKnand:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(292)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKnand, MVT::v4i32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4i32 243:iPTR, VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Emits: (CellSDKceq:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(243)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKceq, MVT::v4i32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4i32 250:iPTR, VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Emits: (CellSDKcgt:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(250)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKcgt, MVT::v4i32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4i32 257:iPTR, VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Emits: (CellSDKclgt:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(257)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKclgt, MVT::v4i32);
      return Result;
    }
  }

  CannotYetSelectIntrinsic(N);
  return NULL;
}

SDNode *Select_ISD_INTRINSIC_WO_CHAIN_v4f32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  ConstantSDNode *Tmp0 = dyn_cast<ConstantSDNode>(N0);
  if (Tmp0) {
    int64_t CN1 = Tmp0->getSExtValue();

    // Pattern: (intrinsic_wo_chain:v4f32 270:iPTR, VECREG:v4f32:$rA, VECREG:v4f32:$rB)
    // Emits: (CellSDKfa:v4f32 VECREG:v4f32:$rA, VECREG:v4f32:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(270)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKfa, MVT::v4f32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4f32 279:iPTR, VECREG:v4f32:$rA, VECREG:v4f32:$rB)
    // Emits: (CellSDKfs:v4f32 VECREG:v4f32:$rA, VECREG:v4f32:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(279)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKfs, MVT::v4f32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4f32 275:iPTR, VECREG:v4f32:$rA, VECREG:v4f32:$rB)
    // Emits: (CellSDKfm:v4f32 VECREG:v4f32:$rA, VECREG:v4f32:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(275)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKfm, MVT::v4f32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4f32 271:iPTR, VECREG:v4f32:$rA, VECREG:v4f32:$rB)
    // Emits: (CellSDKfceq:v4f32 VECREG:v4f32:$rA, VECREG:v4f32:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(271)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKfceq, MVT::v4f32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4f32 272:iPTR, VECREG:v4f32:$rA, VECREG:v4f32:$rB)
    // Emits: (CellSDKfcgt:v4f32 VECREG:v4f32:$rA, VECREG:v4f32:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(272)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKfcgt, MVT::v4f32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4f32 273:iPTR, VECREG:v4f32:$rA, VECREG:v4f32:$rB)
    // Emits: (CellSDKfcmeq:v4f32 VECREG:v4f32:$rA, VECREG:v4f32:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(273)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKfcmeq, MVT::v4f32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4f32 274:iPTR, VECREG:v4f32:$rA, VECREG:v4f32:$rB)
    // Emits: (CellSDKfcmgt:v4f32 VECREG:v4f32:$rA, VECREG:v4f32:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(274)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKfcmgt, MVT::v4f32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4f32 276:iPTR, VECREG:v4f32:$rA, VECREG:v4f32:$rB, VECREG:v4f32:$rC)
    // Emits: (CellSDKfma:v4f32 VECREG:v4f32:$rA, VECREG:v4f32:$rB, VECREG:v4f32:$rC)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(276)) {
      SDNode *Result = Emit_78(N, SPU::CellSDKfma, MVT::v4f32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4f32 278:iPTR, VECREG:v4f32:$rA, VECREG:v4f32:$rB, VECREG:v4f32:$rC)
    // Emits: (CellSDKfnms:v4f32 VECREG:v4f32:$rA, VECREG:v4f32:$rB, VECREG:v4f32:$rC)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(278)) {
      SDNode *Result = Emit_78(N, SPU::CellSDKfnms, MVT::v4f32);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v4f32 277:iPTR, VECREG:v4f32:$rA, VECREG:v4f32:$rB, VECREG:v4f32:$rC)
    // Emits: (CellSDKfms:v4f32 VECREG:v4f32:$rA, VECREG:v4f32:$rB, VECREG:v4f32:$rC)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(277)) {
      SDNode *Result = Emit_78(N, SPU::CellSDKfms, MVT::v4f32);
      return Result;
    }
  }

  CannotYetSelectIntrinsic(N);
  return NULL;
}

SDNode *Select_ISD_INTRINSIC_WO_CHAIN_v2f64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  ConstantSDNode *Tmp0 = dyn_cast<ConstantSDNode>(N0);
  if (Tmp0) {
    int64_t CN1 = Tmp0->getSExtValue();

    // Pattern: (intrinsic_wo_chain:v2f64 263:iPTR, VECREG:v2f64:$rA, VECREG:v2f64:$rB)
    // Emits: (CellSDKdfa:v2f64 VECREG:v2f64:$rA, VECREG:v2f64:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(263)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKdfa, MVT::v2f64);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v2f64 269:iPTR, VECREG:v2f64:$rA, VECREG:v2f64:$rB)
    // Emits: (CellSDKdfs:v2f64 VECREG:v2f64:$rA, VECREG:v2f64:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(269)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKdfs, MVT::v2f64);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v2f64 264:iPTR, VECREG:v2f64:$rA, VECREG:v2f64:$rB)
    // Emits: (CellSDKdfm:v2f64 VECREG:v2f64:$rA, VECREG:v2f64:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(264)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKdfm, MVT::v2f64);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v2f64 265:iPTR, VECREG:v2f64:$rA, VECREG:v2f64:$rB)
    // Emits: (CellSDKdfma:v2f64 VECREG:v2f64:$rA, VECREG:v2f64:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(265)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKdfma, MVT::v2f64);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v2f64 267:iPTR, VECREG:v2f64:$rA, VECREG:v2f64:$rB)
    // Emits: (CellSDKdfnma:v2f64 VECREG:v2f64:$rA, VECREG:v2f64:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(267)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKdfnma, MVT::v2f64);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v2f64 268:iPTR, VECREG:v2f64:$rA, VECREG:v2f64:$rB)
    // Emits: (CellSDKdfnms:v2f64 VECREG:v2f64:$rA, VECREG:v2f64:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(268)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKdfnms, MVT::v2f64);
      return Result;
    }

    // Pattern: (intrinsic_wo_chain:v2f64 266:iPTR, VECREG:v2f64:$rA, VECREG:v2f64:$rB)
    // Emits: (CellSDKdfms:v2f64 VECREG:v2f64:$rA, VECREG:v2f64:$rB)
    // Pattern complexity = 8  cost = 1  size = 0
    if (CN1 == INT64_C(266)) {
      SDNode *Result = Emit_74(N, SPU::CellSDKdfms, MVT::v2f64);
      return Result;
    }
  }

  CannotYetSelectIntrinsic(N);
  return NULL;
}

SDNode *Emit_79(const SDValue &N, unsigned Opc0, MVT VT0, SDValue &CPTmpN1_0, SDValue &CPTmpN1_1) DISABLE_INLINE {
  SDValue Chain = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue LSI_N = CurDAG->getMemOperand(cast<MemSDNode>(N)->getMemOperand());
  SDValue Ops0[] = { CPTmpN1_0, CPTmpN1_1, LSI_N, Chain };
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, MVT::Other, Ops0, 4);
}
SDNode *Select_ISD_LOAD_i8(const SDValue &N) {
  SDValue Chain = N.getOperand(0);
  if (Predicate_unindexedload(N.getNode()) &&
      Predicate_load(N.getNode())) {
    SDValue N1 = N.getOperand(1);
    SDValue CPTmpN1_0;
    SDValue CPTmpN1_1;

    // Pattern: (ld:i8 aform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQAr8:i8 aform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectAFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQAr8, MVT::i8, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }

    // Pattern: (ld:i8 dform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQDr8:i8 dform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectDFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQDr8, MVT::i8, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }

    // Pattern: (ld:i8 xform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQXr8:i8 xform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectXFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQXr8, MVT::i8, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_LOAD_i16(const SDValue &N) {
  SDValue Chain = N.getOperand(0);
  if (Predicate_unindexedload(N.getNode()) &&
      Predicate_load(N.getNode())) {
    SDValue N1 = N.getOperand(1);
    SDValue CPTmpN1_0;
    SDValue CPTmpN1_1;

    // Pattern: (ld:i16 aform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQAr16:i16 aform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectAFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQAr16, MVT::i16, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }

    // Pattern: (ld:i16 dform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQDr16:i16 dform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectDFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQDr16, MVT::i16, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }

    // Pattern: (ld:i16 xform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQXr16:i16 xform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectXFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQXr16, MVT::i16, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_LOAD_i32(const SDValue &N) {
  SDValue Chain = N.getOperand(0);
  if (Predicate_unindexedload(N.getNode()) &&
      Predicate_load(N.getNode())) {
    SDValue N1 = N.getOperand(1);
    SDValue CPTmpN1_0;
    SDValue CPTmpN1_1;

    // Pattern: (ld:i32 aform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQAr32:i32 aform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectAFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQAr32, MVT::i32, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }

    // Pattern: (ld:i32 dform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQDr32:i32 dform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectDFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQDr32, MVT::i32, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }

    // Pattern: (ld:i32 xform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQXr32:i32 xform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectXFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQXr32, MVT::i32, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_LOAD_i64(const SDValue &N) {
  SDValue Chain = N.getOperand(0);
  if (Predicate_unindexedload(N.getNode()) &&
      Predicate_load(N.getNode())) {
    SDValue N1 = N.getOperand(1);
    SDValue CPTmpN1_0;
    SDValue CPTmpN1_1;

    // Pattern: (ld:i64 aform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQAr64:i64 aform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectAFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQAr64, MVT::i64, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }

    // Pattern: (ld:i64 dform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQDr64:i64 dform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectDFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQDr64, MVT::i64, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }

    // Pattern: (ld:i64 xform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQXr64:i64 xform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectXFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQXr64, MVT::i64, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_LOAD_i128(const SDValue &N) {
  SDValue Chain = N.getOperand(0);
  if (Predicate_unindexedload(N.getNode()) &&
      Predicate_load(N.getNode())) {
    SDValue N1 = N.getOperand(1);
    SDValue CPTmpN1_0;
    SDValue CPTmpN1_1;

    // Pattern: (ld:i128 aform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQAr128:i128 aform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectAFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQAr128, MVT::i128, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }

    // Pattern: (ld:i128 dform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQDr128:i128 dform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectDFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQDr128, MVT::i128, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }

    // Pattern: (ld:i128 xform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQXr128:i128 xform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectXFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQXr128, MVT::i128, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_LOAD_f32(const SDValue &N) {
  SDValue Chain = N.getOperand(0);
  if (Predicate_unindexedload(N.getNode()) &&
      Predicate_load(N.getNode())) {
    SDValue N1 = N.getOperand(1);
    SDValue CPTmpN1_0;
    SDValue CPTmpN1_1;

    // Pattern: (ld:f32 aform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQAf32:f32 aform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectAFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQAf32, MVT::f32, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }

    // Pattern: (ld:f32 dform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQDf32:f32 dform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectDFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQDf32, MVT::f32, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }

    // Pattern: (ld:f32 xform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQXf32:f32 xform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectXFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQXf32, MVT::f32, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_LOAD_f64(const SDValue &N) {
  SDValue Chain = N.getOperand(0);
  if (Predicate_unindexedload(N.getNode()) &&
      Predicate_load(N.getNode())) {
    SDValue N1 = N.getOperand(1);
    SDValue CPTmpN1_0;
    SDValue CPTmpN1_1;

    // Pattern: (ld:f64 aform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQAf64:f64 aform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectAFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQAf64, MVT::f64, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }

    // Pattern: (ld:f64 dform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQDf64:f64 dform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectDFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQDf64, MVT::f64, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }

    // Pattern: (ld:f64 xform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQXf64:f64 xform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectXFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQXf64, MVT::f64, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_LOAD_v2i32(const SDValue &N) {
  SDValue Chain = N.getOperand(0);
  if (Predicate_unindexedload(N.getNode()) &&
      Predicate_load(N.getNode())) {
    SDValue N1 = N.getOperand(1);
    SDValue CPTmpN1_0;
    SDValue CPTmpN1_1;

    // Pattern: (ld:v2i32 aform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQAv2i32:v2i32 aform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectAFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQAv2i32, MVT::v2i32, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }

    // Pattern: (ld:v2i32 dform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQDv2i32:v2i32 dform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectDFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQDv2i32, MVT::v2i32, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }

    // Pattern: (ld:v2i32 xform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQXv2i32:v2i32 xform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectXFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQXv2i32, MVT::v2i32, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_LOAD_v16i8(const SDValue &N) {
  SDValue Chain = N.getOperand(0);
  if (Predicate_unindexedload(N.getNode()) &&
      Predicate_load(N.getNode())) {
    SDValue N1 = N.getOperand(1);
    SDValue CPTmpN1_0;
    SDValue CPTmpN1_1;

    // Pattern: (ld:v16i8 aform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQAv16i8:v16i8 aform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectAFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQAv16i8, MVT::v16i8, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }

    // Pattern: (ld:v16i8 dform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQDv16i8:v16i8 dform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectDFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQDv16i8, MVT::v16i8, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }

    // Pattern: (ld:v16i8 xform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQXv16i8:v16i8 xform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectXFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQXv16i8, MVT::v16i8, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_LOAD_v8i16(const SDValue &N) {
  SDValue Chain = N.getOperand(0);
  if (Predicate_unindexedload(N.getNode()) &&
      Predicate_load(N.getNode())) {
    SDValue N1 = N.getOperand(1);
    SDValue CPTmpN1_0;
    SDValue CPTmpN1_1;

    // Pattern: (ld:v8i16 aform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQAv8i16:v8i16 aform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectAFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQAv8i16, MVT::v8i16, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }

    // Pattern: (ld:v8i16 dform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQDv8i16:v8i16 dform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectDFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQDv8i16, MVT::v8i16, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }

    // Pattern: (ld:v8i16 xform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQXv8i16:v8i16 xform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectXFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQXv8i16, MVT::v8i16, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_LOAD_v4i32(const SDValue &N) {
  SDValue Chain = N.getOperand(0);
  if (Predicate_unindexedload(N.getNode()) &&
      Predicate_load(N.getNode())) {
    SDValue N1 = N.getOperand(1);
    SDValue CPTmpN1_0;
    SDValue CPTmpN1_1;

    // Pattern: (ld:v4i32 aform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQAv4i32:v4i32 aform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectAFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQAv4i32, MVT::v4i32, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }

    // Pattern: (ld:v4i32 dform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQDv4i32:v4i32 dform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectDFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQDv4i32, MVT::v4i32, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }

    // Pattern: (ld:v4i32 xform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQXv4i32:v4i32 xform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectXFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQXv4i32, MVT::v4i32, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_LOAD_v2i64(const SDValue &N) {
  SDValue Chain = N.getOperand(0);
  if (Predicate_unindexedload(N.getNode()) &&
      Predicate_load(N.getNode())) {
    SDValue N1 = N.getOperand(1);
    SDValue CPTmpN1_0;
    SDValue CPTmpN1_1;

    // Pattern: (ld:v2i64 aform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQAv2i64:v2i64 aform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectAFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQAv2i64, MVT::v2i64, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }

    // Pattern: (ld:v2i64 dform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQDv2i64:v2i64 dform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectDFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQDv2i64, MVT::v2i64, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }

    // Pattern: (ld:v2i64 xform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQXv2i64:v2i64 xform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectXFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQXv2i64, MVT::v2i64, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_LOAD_v4f32(const SDValue &N) {
  SDValue Chain = N.getOperand(0);
  if (Predicate_unindexedload(N.getNode()) &&
      Predicate_load(N.getNode())) {
    SDValue N1 = N.getOperand(1);
    SDValue CPTmpN1_0;
    SDValue CPTmpN1_1;

    // Pattern: (ld:v4f32 aform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQAv4f32:v4f32 aform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectAFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQAv4f32, MVT::v4f32, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }

    // Pattern: (ld:v4f32 dform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQDv4f32:v4f32 dform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectDFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQDv4f32, MVT::v4f32, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }

    // Pattern: (ld:v4f32 xform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQXv4f32:v4f32 xform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectXFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQXv4f32, MVT::v4f32, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_LOAD_v2f64(const SDValue &N) {
  SDValue Chain = N.getOperand(0);
  if (Predicate_unindexedload(N.getNode()) &&
      Predicate_load(N.getNode())) {
    SDValue N1 = N.getOperand(1);
    SDValue CPTmpN1_0;
    SDValue CPTmpN1_1;

    // Pattern: (ld:v2f64 aform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQAv2f64:v2f64 aform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectAFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQAv2f64, MVT::v2f64, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }

    // Pattern: (ld:v2f64 dform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQDv2f64:v2f64 dform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectDFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQDv2f64, MVT::v2f64, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }

    // Pattern: (ld:v2f64 xform_addr:iPTR:$src)<<P:Predicate_unindexedload>><<P:Predicate_load>>
    // Emits: (LQXv2f64:v2f64 xform_addr:iPTR:$src)
    // Pattern complexity = 13  cost = 1  size = 0
    if (SelectXFormAddr(N, N1, CPTmpN1_0, CPTmpN1_1)) {
      SDNode *Result = Emit_79(N, SPU::LQXv2f64, MVT::v2f64, CPTmpN1_0, CPTmpN1_1);
      return Result;
    }
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_MUL_i16(const SDValue &N) {

  // Pattern: (mul:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val)
  // Emits: (MPYIr16:i16 R16C:i16:$rA, (imm:i16):$val)
  // Pattern complexity = 7  cost = 1  size = 0
  {
    SDValue N0 = N.getOperand(0);
    SDValue N1 = N.getOperand(1);
    if (N1.getOpcode() == ISD::Constant &&
        Predicate_i16ImmSExt10(N1.getNode())) {
      SDNode *Result = Emit_1(N, SPU::MPYIr16, MVT::i16);
      return Result;
    }
  }

  // Pattern: (mul:i16 R16C:i16:$rA, R16C:i16:$rB)
  // Emits: (MPYr16:i16 R16C:i16:$rA, R16C:i16:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::MPYr16, MVT::i16);
  return Result;
}

SDNode *Emit_80(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N00, N10);
}
SDNode *Emit_81(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, unsigned Opc4, MVT VT0, MVT VT1, MVT VT2, MVT VT3, MVT VT4) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0, N1), 0);
  SDValue Tmp5(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N1, N0), 0);
  SDValue Tmp6(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, Tmp2, Tmp5), 0);
  SDValue Tmp9(CurDAG->getTargetNode(Opc3, N.getDebugLoc(), VT3, N0, N1), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc4, VT4, Tmp6, Tmp9);
}
SDNode *Select_ISD_MUL_i32(const SDValue &N) {

  // Pattern: (mul:i32 (zext:i32 R16C:i16:$rA), (zext:i32 R16C:i16:$rB))
  // Emits: (MPYUr16:i32 R16C:i16:$rA, R16C:i16:$rB)
  // Pattern complexity = 9  cost = 1  size = 0
  {
    SDValue N0 = N.getOperand(0);
    if (N0.getOpcode() == ISD::ZERO_EXTEND) {
      SDValue N00 = N0.getOperand(0);
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::ZERO_EXTEND) {
        SDValue N10 = N1.getOperand(0);
        if (N00.getNode()->getValueType(0) == MVT::i16 &&
            N10.getNode()->getValueType(0) == MVT::i16) {
          SDNode *Result = Emit_80(N, SPU::MPYUr16, MVT::i32);
          return Result;
        }
      }
    }
  }

  // Pattern: (mul:i32 R32C:i32:$rA, R32C:i32:$rB)
  // Emits: (Ar32:i32 (Ar32:i32 (MPYHr32:i32 R32C:i32:$rA, R32C:i32:$rB), (MPYHr32:i32 R32C:i32:$rB, R32C:i32:$rA)), (MPYUr32:i32 R32C:i32:$rA, R32C:i32:$rB))
  // Pattern complexity = 3  cost = 5  size = 0
  SDNode *Result = Emit_81(N, SPU::MPYHr32, SPU::MPYHr32, SPU::Ar32, SPU::MPYUr32, SPU::Ar32, MVT::i32, MVT::i32, MVT::i32, MVT::i32, MVT::i32);
  return Result;
}

SDNode *Emit_82(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, unsigned Opc4, unsigned Opc5, unsigned Opc6, unsigned Opc7, unsigned Opc8, unsigned Opc9, unsigned Opc10, unsigned Opc11, unsigned Opc12, unsigned Opc13, unsigned Opc14, unsigned Opc15, unsigned Opc16, unsigned Opc17, unsigned Opc18, unsigned Opc19, MVT VT0, MVT VT1, MVT VT2, MVT VT3, MVT VT4, MVT VT5, MVT VT6, MVT VT7, MVT VT8, MVT VT9, MVT VT10, MVT VT11, MVT VT12, MVT VT13, MVT VT14, MVT VT15, MVT VT16, MVT VT17, MVT VT18, MVT VT19) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0, N1), 0);
  SDValue Tmp4 = CurDAG->getTargetConstant(0x8ULL, MVT::i32);
  SDValue Tmp5(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N0, Tmp4), 0);
  SDValue Tmp7 = CurDAG->getTargetConstant(0x8ULL, MVT::i32);
  SDValue Tmp8(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, N1, Tmp7), 0);
  SDValue Tmp9(CurDAG->getTargetNode(Opc3, N.getDebugLoc(), VT3, Tmp5, Tmp8), 0);
  SDValue Tmp10 = CurDAG->getTargetConstant(0x8ULL, MVT::i16);
  SDValue Tmp11(CurDAG->getTargetNode(Opc4, N.getDebugLoc(), VT4, Tmp9, Tmp10), 0);
  SDValue Tmp12 = CurDAG->getTargetConstant(0x2222ULL, MVT::i16);
  SDValue Tmp13(CurDAG->getTargetNode(Opc5, N.getDebugLoc(), VT5, Tmp12), 0);
  SDValue Tmp14(CurDAG->getTargetNode(Opc6, N.getDebugLoc(), VT6, Tmp2, Tmp11, Tmp13), 0);
  SDValue Tmp15 = CurDAG->getTargetConstant(0xFFFFULL, MVT::i32);
  SDValue Tmp16(CurDAG->getTargetNode(Opc7, N.getDebugLoc(), VT7, Tmp15), 0);
  SDValue Tmp17(CurDAG->getTargetNode(Opc8, N.getDebugLoc(), VT8, Tmp14, Tmp16), 0);
  SDValue Tmp19 = CurDAG->getTargetConstant(0x10ULL, MVT::i32);
  SDValue Tmp20(CurDAG->getTargetNode(Opc9, N.getDebugLoc(), VT9, N0, Tmp19), 0);
  SDValue Tmp22 = CurDAG->getTargetConstant(0x10ULL, MVT::i32);
  SDValue Tmp23(CurDAG->getTargetNode(Opc10, N.getDebugLoc(), VT10, N1, Tmp22), 0);
  SDValue Tmp24(CurDAG->getTargetNode(Opc11, N.getDebugLoc(), VT11, Tmp20, Tmp23), 0);
  SDValue Tmp26 = CurDAG->getTargetConstant(0x8ULL, MVT::i32);
  SDValue Tmp27(CurDAG->getTargetNode(Opc12, N.getDebugLoc(), VT12, N0, Tmp26), 0);
  SDValue Tmp29 = CurDAG->getTargetConstant(0x8ULL, MVT::i32);
  SDValue Tmp30(CurDAG->getTargetNode(Opc13, N.getDebugLoc(), VT13, N1, Tmp29), 0);
  SDValue Tmp31(CurDAG->getTargetNode(Opc14, N.getDebugLoc(), VT14, Tmp27, Tmp30), 0);
  SDValue Tmp32 = CurDAG->getTargetConstant(0x8ULL, MVT::i16);
  SDValue Tmp33(CurDAG->getTargetNode(Opc15, N.getDebugLoc(), VT15, Tmp31, Tmp32), 0);
  SDValue Tmp34 = CurDAG->getTargetConstant(0x2222ULL, MVT::i16);
  SDValue Tmp35(CurDAG->getTargetNode(Opc16, N.getDebugLoc(), VT16, Tmp34), 0);
  SDValue Tmp36(CurDAG->getTargetNode(Opc17, N.getDebugLoc(), VT17, Tmp24, Tmp33, Tmp35), 0);
  SDValue Tmp37 = CurDAG->getTargetConstant(0x10ULL, MVT::i32);
  SDValue Tmp38(CurDAG->getTargetNode(Opc18, N.getDebugLoc(), VT18, Tmp36, Tmp37), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc19, VT19, Tmp17, Tmp38);
}
SDNode *Select_ISD_MUL_v16i8(const SDValue &N) {
  SDNode *Result = Emit_82(N, SPU::MPYv8i16, SPU::ROTMAHIv8i16, SPU::ROTMAHIv8i16, SPU::MPYv8i16, SPU::SHLHIv8i16, SPU::FSMBIv8i16, SPU::SELBv4i32, SPU::ILAv4i32, SPU::ANDv4i32, SPU::ROTMAIv4i32_i32, SPU::ROTMAIv4i32_i32, SPU::MPYv8i16, SPU::ROTMAIv4i32_i32, SPU::ROTMAIv4i32_i32, SPU::MPYv8i16, SPU::SHLHIv8i16, SPU::FSMBIv8i16, SPU::SELBv4i32, SPU::SHLIv4i32, SPU::ORv4i32, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8);
  return Result;
}

SDNode *Emit_83(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, unsigned Opc4, MVT VT0, MVT VT1, MVT VT2, MVT VT3, MVT VT4) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0, N1), 0);
  SDValue Tmp5(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N0, N1), 0);
  SDValue Tmp6 = CurDAG->getTargetConstant(0x10ULL, MVT::i32);
  SDValue Tmp7(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, Tmp5, Tmp6), 0);
  SDValue Tmp8 = CurDAG->getTargetConstant(0xCCCCULL, MVT::i16);
  SDValue Tmp9(CurDAG->getTargetNode(Opc3, N.getDebugLoc(), VT3, Tmp8), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc4, VT4, Tmp2, Tmp7, Tmp9);
}
SDNode *Select_ISD_MUL_v8i16(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);

    // Pattern: (mul:v8i16 VECREG:v8i16:$rA, (build_vector:v8i16)<<P:Predicate_v8i16SExt10Imm>><<X:v8i16SExt10Imm_xform>>:$val)
    // Emits: (MPYIvec:v8i16 VECREG:v8i16:$rA, (v8i16SExt10Imm_xform:i16 (build_vector:v8i16):$val))
    // Pattern complexity = 7  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_v8i16SExt10Imm(N1.getNode())) {
        SDNode *Result = Emit_10(N, SPU::MPYIvec, MVT::v8i16);
        return Result;
      }
    }

    // Pattern: (mul:v8i16 (build_vector:v8i16)<<P:Predicate_v8i16SExt10Imm>><<X:v8i16SExt10Imm_xform>>:$val, VECREG:v8i16:$rA)
    // Emits: (MPYIvec:v8i16 VECREG:v8i16:$rA, (v8i16SExt10Imm_xform:i16 (build_vector:v8i16):$val))
    // Pattern complexity = 7  cost = 1  size = 0
    if (N0.getOpcode() == ISD::BUILD_VECTOR &&
        Predicate_v8i16SExt10Imm(N0.getNode())) {
      SDNode *Result = Emit_11(N, SPU::MPYIvec, MVT::v8i16);
      return Result;
    }
  }

  // Pattern: (mul:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
  // Emits: (SELBv8i16:v8i16 (MPYv8i16:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB), (SHLIv4i32:v16i8 (MPYHHv8i16:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB), 16:i32), (FSMBIv8i16:v16i8 52428:i16))
  // Pattern complexity = 3  cost = 5  size = 0
  SDNode *Result = Emit_83(N, SPU::MPYv8i16, SPU::MPYHHv8i16, SPU::SHLIv4i32, SPU::FSMBIv8i16, SPU::SELBv8i16, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v8i16);
  return Result;
}

SDNode *Select_ISD_MUL_v4i32(const SDValue &N) {
  SDNode *Result = Emit_81(N, SPU::MPYHv4i32, SPU::MPYHv4i32, SPU::Av4i32, SPU::MPYUv4i32, SPU::Av4i32, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v4i32);
  return Result;
}

SDNode *Emit_84(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  SDValue N110 = N11.getOperand(0);
  SDValue N111 = N11.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N10, N00, N01);
}
SDNode *Emit_85(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N100 = N10.getOperand(0);
  SDValue N101 = N10.getOperand(1);
  SDValue N11 = N1.getOperand(1);
  SDValue N110 = N11.getOperand(0);
  SDValue N111 = N11.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N00, N01);
}
SDNode *Emit_86(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N100 = N10.getOperand(0);
  SDValue N101 = N10.getOperand(1);
  SDValue N11 = N1.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N00, N01);
}
SDNode *Emit_87(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N100 = N10.getOperand(0);
  SDValue N101 = N10.getOperand(1);
  SDValue N11 = N1.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N11, N00, N01);
}
SDNode *Emit_88(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  SDValue N110 = N11.getOperand(0);
  SDValue N111 = N11.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N10, N01, N00);
}
SDNode *Emit_89(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N100 = N10.getOperand(0);
  SDValue N101 = N10.getOperand(1);
  SDValue N11 = N1.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N11, N01, N00);
}
SDNode *Emit_90(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N010 = N01.getOperand(0);
  SDValue N011 = N01.getOperand(1);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N00, N10, N010);
}
SDNode *Emit_91(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N010 = N01.getOperand(0);
  SDValue N011 = N01.getOperand(1);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N00, N11, N010);
}
SDNode *Emit_92(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N000 = N00.getOperand(0);
  SDValue N001 = N00.getOperand(1);
  SDValue N01 = N0.getOperand(1);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N01, N10, N000);
}
SDNode *Emit_93(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N000 = N00.getOperand(0);
  SDValue N001 = N00.getOperand(1);
  SDValue N01 = N0.getOperand(1);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N01, N11, N000);
}
SDNode *Emit_94(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N100 = N10.getOperand(0);
  SDValue N101 = N10.getOperand(1);
  SDValue N11 = N1.getOperand(1);
  SDValue N110 = N11.getOperand(0);
  SDValue N111 = N11.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N01, N00);
}
SDNode *Emit_95(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N000 = N00.getOperand(0);
  SDValue N001 = N00.getOperand(1);
  SDValue N01 = N0.getOperand(1);
  SDValue N010 = N01.getOperand(0);
  SDValue N011 = N01.getOperand(1);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N000, N010);
}
SDNode *Emit_96(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N000 = N00.getOperand(0);
  SDValue N001 = N00.getOperand(1);
  SDValue N01 = N0.getOperand(1);
  SDValue N010 = N01.getOperand(0);
  SDValue N011 = N01.getOperand(1);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N010, N000);
}
SDNode *Emit_97(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N100 = N10.getOperand(0);
  SDValue N101 = N10.getOperand(1);
  SDValue N11 = N1.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N01, N00);
}
SDNode *Emit_98(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N000 = N00.getOperand(0);
  SDValue N001 = N00.getOperand(1);
  SDValue N01 = N0.getOperand(1);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N000, N001);
}
SDNode *Emit_99(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N000 = N00.getOperand(0);
  SDValue N001 = N00.getOperand(1);
  SDValue N01 = N0.getOperand(1);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N001, N000);
}
SDNode *Select_ISD_OR_i8(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);
    if (N0.getOpcode() == ISD::AND) {
      SDValue N00 = N0.getOperand(0);
      {
        SDValue N01 = N0.getOperand(1);
        SDValue N1 = N.getOperand(1);
        if (N1.getOpcode() == ISD::AND) {
          SDValue N10 = N1.getOperand(0);
          if (N10.getOpcode() == ISD::XOR) {
            SDValue N100 = N10.getOperand(0);

            // Pattern: (or:i8 (and:i8 R8C:i8:$rA, R8C:i8:$rB), (and:i8 (xor:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immAllOnes>>), (xor:i8 R8C:i8:$rB, (imm:i8)<<P:Predicate_immAllOnes>>)))
            // Emits: (EQVr8:i8 R8C:i8:$rA, R8C:i8:$rB)
            // Pattern complexity = 23  cost = 1  size = 0
            if (N00 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::Constant &&
                  Predicate_immAllOnes(N101.getNode())) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);
                  if (N01 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::Constant &&
                        Predicate_immAllOnes(N111.getNode())) {
                      SDNode *Result = Emit_85(N, SPU::EQVr8, MVT::i8);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N01 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::Constant &&
                  Predicate_immAllOnes(N101.getNode())) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);
                  if (N00 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::Constant &&
                        Predicate_immAllOnes(N111.getNode())) {

                      // Pattern: (or:i8 (and:i8 R8C:i8:$rA, R8C:i8:$rB), (and:i8 (xor:i8 R8C:i8:$rB, (imm:i8)<<P:Predicate_immAllOnes>>), (xor:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immAllOnes>>)))
                      // Emits: (EQVr8:i8 R8C:i8:$rA, R8C:i8:$rB)
                      // Pattern complexity = 23  cost = 1  size = 0
                      {
                        SDNode *Result = Emit_85(N, SPU::EQVr8, MVT::i8);
                        return Result;
                      }

                      // Pattern: (or:i8 (and:i8 R8C:i8:$rB, R8C:i8:$rA), (and:i8 (xor:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immAllOnes>>), (xor:i8 R8C:i8:$rB, (imm:i8)<<P:Predicate_immAllOnes>>)))
                      // Emits: (EQVr8:i8 R8C:i8:$rA, R8C:i8:$rB)
                      // Pattern complexity = 23  cost = 1  size = 0
                      SDNode *Result = Emit_94(N, SPU::EQVr8, MVT::i8);
                      return Result;
                    }
                  }
                }
              }
            }

            // Pattern: (or:i8 (and:i8 R8C:i8:$rB, R8C:i8:$rA), (and:i8 (xor:i8 R8C:i8:$rB, (imm:i8)<<P:Predicate_immAllOnes>>), (xor:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immAllOnes>>)))
            // Emits: (EQVr8:i8 R8C:i8:$rA, R8C:i8:$rB)
            // Pattern complexity = 23  cost = 1  size = 0
            if (N00 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::Constant &&
                  Predicate_immAllOnes(N101.getNode())) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);
                  if (N01 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::Constant &&
                        Predicate_immAllOnes(N111.getNode())) {
                      SDNode *Result = Emit_94(N, SPU::EQVr8, MVT::i8);
                      return Result;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (N00.getOpcode() == ISD::XOR) {
        SDValue N000 = N00.getOperand(0);
        SDValue N001 = N00.getOperand(1);
        if (N001.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N001.getNode())) {
          SDValue N01 = N0.getOperand(1);
          if (N01.getOpcode() == ISD::XOR) {
            SDValue N010 = N01.getOperand(0);
            SDValue N011 = N01.getOperand(1);
            if (N011.getOpcode() == ISD::Constant &&
                Predicate_immAllOnes(N011.getNode())) {
              SDValue N1 = N.getOperand(1);
              if (N1.getOpcode() == ISD::AND) {
                SDValue N10 = N1.getOperand(0);

                // Pattern: (or:i8 (and:i8 (xor:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immAllOnes>>), (xor:i8 R8C:i8:$rB, (imm:i8)<<P:Predicate_immAllOnes>>)), (and:i8 R8C:i8:$rA, R8C:i8:$rB))
                // Emits: (EQVr8:i8 R8C:i8:$rA, R8C:i8:$rB)
                // Pattern complexity = 23  cost = 1  size = 0
                if (N000 == N10) {
                  SDValue N11 = N1.getOperand(1);
                  if (N010 == N11) {
                    SDNode *Result = Emit_95(N, SPU::EQVr8, MVT::i8);
                    return Result;
                  }
                }
                if (N010 == N10) {
                  SDValue N11 = N1.getOperand(1);
                  if (N000 == N11) {

                    // Pattern: (or:i8 (and:i8 (xor:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immAllOnes>>), (xor:i8 R8C:i8:$rB, (imm:i8)<<P:Predicate_immAllOnes>>)), (and:i8 R8C:i8:$rB, R8C:i8:$rA))
                    // Emits: (EQVr8:i8 R8C:i8:$rA, R8C:i8:$rB)
                    // Pattern complexity = 23  cost = 1  size = 0
                    {
                      SDNode *Result = Emit_95(N, SPU::EQVr8, MVT::i8);
                      return Result;
                    }

                    // Pattern: (or:i8 (and:i8 (xor:i8 R8C:i8:$rB, (imm:i8)<<P:Predicate_immAllOnes>>), (xor:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immAllOnes>>)), (and:i8 R8C:i8:$rA, R8C:i8:$rB))
                    // Emits: (EQVr8:i8 R8C:i8:$rA, R8C:i8:$rB)
                    // Pattern complexity = 23  cost = 1  size = 0
                    SDNode *Result = Emit_96(N, SPU::EQVr8, MVT::i8);
                    return Result;
                  }
                }

                // Pattern: (or:i8 (and:i8 (xor:i8 R8C:i8:$rB, (imm:i8)<<P:Predicate_immAllOnes>>), (xor:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immAllOnes>>)), (and:i8 R8C:i8:$rB, R8C:i8:$rA))
                // Emits: (EQVr8:i8 R8C:i8:$rA, R8C:i8:$rB)
                // Pattern complexity = 23  cost = 1  size = 0
                if (N000 == N10) {
                  SDValue N11 = N1.getOperand(1);
                  if (N010 == N11) {
                    SDNode *Result = Emit_96(N, SPU::EQVr8, MVT::i8);
                    return Result;
                  }
                }
              }
            }
          }
        }
      }
      {
        SDValue N01 = N0.getOperand(1);
        {
          SDValue N1 = N.getOperand(1);

          // Pattern: (or:i8 (and:i8 R8C:i8:$rB, R8C:i8:$rC), (and:i8 R8C:i8:$rA, (xor:i8 R8C:i8:$rC, (imm:i8)<<P:Predicate_immAllOnes>>)))
          // Emits: (SELBr8:i8 R8C:i8:$rA, R8C:i8:$rB, R8C:i8:$rC)
          // Pattern complexity = 16  cost = 1  size = 0
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);
            SDValue N11 = N1.getOperand(1);
            if (N11.getOpcode() == ISD::XOR) {
              SDValue N110 = N11.getOperand(0);
              if (N01 == N110) {
                SDValue N111 = N11.getOperand(1);
                if (N111.getOpcode() == ISD::Constant &&
                    Predicate_immAllOnes(N111.getNode())) {
                  SDNode *Result = Emit_84(N, SPU::SELBr8, MVT::i8);
                  return Result;
                }
              }
            }
          }

          // Pattern: (or:i8 (and:i8 R8C:i8:$rA, R8C:i8:$rB), (xor:i8 (or:i8 R8C:i8:$rA, R8C:i8:$rB), (imm:i8)<<P:Predicate_immAllOnes>>))
          // Emits: (EQVr8_2:i8 R8C:i8:$rA, R8C:i8:$rB)
          // Pattern complexity = 16  cost = 1  size = 0
          if (N1.getOpcode() == ISD::XOR) {
            SDValue N10 = N1.getOperand(0);
            if (N10.getOpcode() == ISD::OR) {
              SDValue N100 = N10.getOperand(0);
              if (N00 == N100) {
                SDValue N101 = N10.getOperand(1);
                if (N01 == N101) {
                  SDValue N11 = N1.getOperand(1);
                  if (N11.getOpcode() == ISD::Constant &&
                      Predicate_immAllOnes(N11.getNode())) {
                    SDNode *Result = Emit_86(N, SPU::EQVr8_2, MVT::i8);
                    return Result;
                  }
                }
              }
            }
          }
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);

            // Pattern: (or:i8 (and:i8 R8C:i8:$rB, R8C:i8:$rC), (and:i8 (xor:i8 R8C:i8:$rC, (imm:i8)<<P:Predicate_immAllOnes>>), R8C:i8:$rA))
            // Emits: (SELBr8:i8 R8C:i8:$rA, R8C:i8:$rB, R8C:i8:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N10.getOpcode() == ISD::XOR) {
              SDValue N100 = N10.getOperand(0);
              if (N01 == N100) {
                SDValue N101 = N10.getOperand(1);
                if (N101.getOpcode() == ISD::Constant &&
                    Predicate_immAllOnes(N101.getNode())) {
                  SDNode *Result = Emit_87(N, SPU::SELBr8, MVT::i8);
                  return Result;
                }
              }
            }

            // Pattern: (or:i8 (and:i8 R8C:i8:$rC, R8C:i8:$rB), (and:i8 R8C:i8:$rA, (xor:i8 R8C:i8:$rC, (imm:i8)<<P:Predicate_immAllOnes>>)))
            // Emits: (SELBr8:i8 R8C:i8:$rA, R8C:i8:$rB, R8C:i8:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            {
              SDValue N11 = N1.getOperand(1);
              if (N11.getOpcode() == ISD::XOR) {
                SDValue N110 = N11.getOperand(0);
                if (N00 == N110) {
                  SDValue N111 = N11.getOperand(1);
                  if (N111.getOpcode() == ISD::Constant &&
                      Predicate_immAllOnes(N111.getNode())) {
                    SDNode *Result = Emit_88(N, SPU::SELBr8, MVT::i8);
                    return Result;
                  }
                }
              }
            }

            // Pattern: (or:i8 (and:i8 R8C:i8:$rC, R8C:i8:$rB), (and:i8 (xor:i8 R8C:i8:$rC, (imm:i8)<<P:Predicate_immAllOnes>>), R8C:i8:$rA))
            // Emits: (SELBr8:i8 R8C:i8:$rA, R8C:i8:$rB, R8C:i8:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N10.getOpcode() == ISD::XOR) {
              SDValue N100 = N10.getOperand(0);
              if (N00 == N100) {
                SDValue N101 = N10.getOperand(1);
                if (N101.getOpcode() == ISD::Constant &&
                    Predicate_immAllOnes(N101.getNode())) {
                  SDNode *Result = Emit_89(N, SPU::SELBr8, MVT::i8);
                  return Result;
                }
              }
            }
          }
        }
        if (N01.getOpcode() == ISD::XOR) {
          SDValue N010 = N01.getOperand(0);
          SDValue N011 = N01.getOperand(1);
          if (N011.getOpcode() == ISD::Constant &&
              Predicate_immAllOnes(N011.getNode())) {
            SDValue N1 = N.getOperand(1);
            if (N1.getOpcode() == ISD::AND) {
              SDValue N10 = N1.getOperand(0);

              // Pattern: (or:i8 (and:i8 R8C:i8:$rA, (xor:i8 R8C:i8:$rC, (imm:i8)<<P:Predicate_immAllOnes>>)), (and:i8 R8C:i8:$rB, R8C:i8:$rC))
              // Emits: (SELBr8:i8 R8C:i8:$rA, R8C:i8:$rB, R8C:i8:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              {
                SDValue N11 = N1.getOperand(1);
                if (N010 == N11) {
                  SDNode *Result = Emit_90(N, SPU::SELBr8, MVT::i8);
                  return Result;
                }
              }

              // Pattern: (or:i8 (and:i8 R8C:i8:$rA, (xor:i8 R8C:i8:$rC, (imm:i8)<<P:Predicate_immAllOnes>>)), (and:i8 R8C:i8:$rC, R8C:i8:$rB))
              // Emits: (SELBr8:i8 R8C:i8:$rA, R8C:i8:$rB, R8C:i8:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              if (N010 == N10) {
                SDNode *Result = Emit_91(N, SPU::SELBr8, MVT::i8);
                return Result;
              }
            }
          }
        }
      }
      if (N00.getOpcode() == ISD::XOR) {
        SDValue N000 = N00.getOperand(0);
        SDValue N001 = N00.getOperand(1);
        if (N001.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N001.getNode())) {
          SDValue N01 = N0.getOperand(1);
          SDValue N1 = N.getOperand(1);
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);

            // Pattern: (or:i8 (and:i8 (xor:i8 R8C:i8:$rC, (imm:i8)<<P:Predicate_immAllOnes>>), R8C:i8:$rA), (and:i8 R8C:i8:$rB, R8C:i8:$rC))
            // Emits: (SELBr8:i8 R8C:i8:$rA, R8C:i8:$rB, R8C:i8:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            {
              SDValue N11 = N1.getOperand(1);
              if (N000 == N11) {
                SDNode *Result = Emit_92(N, SPU::SELBr8, MVT::i8);
                return Result;
              }
            }

            // Pattern: (or:i8 (and:i8 (xor:i8 R8C:i8:$rC, (imm:i8)<<P:Predicate_immAllOnes>>), R8C:i8:$rA), (and:i8 R8C:i8:$rC, R8C:i8:$rB))
            // Emits: (SELBr8:i8 R8C:i8:$rA, R8C:i8:$rB, R8C:i8:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N000 == N10) {
              SDNode *Result = Emit_93(N, SPU::SELBr8, MVT::i8);
              return Result;
            }
          }
        }
      }
      SDValue N01 = N0.getOperand(1);
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);
        if (N10.getOpcode() == ISD::OR) {
          SDValue N100 = N10.getOperand(0);
          if (N01 == N100) {
            SDValue N101 = N10.getOperand(1);
            if (N00 == N101) {
              SDValue N11 = N1.getOperand(1);
              if (N11.getOpcode() == ISD::Constant &&
                  Predicate_immAllOnes(N11.getNode())) {

                // Pattern: (or:i8 (and:i8 R8C:i8:$rA, R8C:i8:$rB), (xor:i8 (or:i8 R8C:i8:$rB, R8C:i8:$rA), (imm:i8)<<P:Predicate_immAllOnes>>))
                // Emits: (EQVr8_2:i8 R8C:i8:$rA, R8C:i8:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                {
                  SDNode *Result = Emit_86(N, SPU::EQVr8_2, MVT::i8);
                  return Result;
                }

                // Pattern: (or:i8 (and:i8 R8C:i8:$rB, R8C:i8:$rA), (xor:i8 (or:i8 R8C:i8:$rA, R8C:i8:$rB), (imm:i8)<<P:Predicate_immAllOnes>>))
                // Emits: (EQVr8_2:i8 R8C:i8:$rA, R8C:i8:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                SDNode *Result = Emit_97(N, SPU::EQVr8_2, MVT::i8);
                return Result;
              }
            }
          }

          // Pattern: (or:i8 (and:i8 R8C:i8:$rB, R8C:i8:$rA), (xor:i8 (or:i8 R8C:i8:$rB, R8C:i8:$rA), (imm:i8)<<P:Predicate_immAllOnes>>))
          // Emits: (EQVr8_2:i8 R8C:i8:$rA, R8C:i8:$rB)
          // Pattern complexity = 16  cost = 1  size = 0
          if (N00 == N100) {
            SDValue N101 = N10.getOperand(1);
            if (N01 == N101) {
              SDValue N11 = N1.getOperand(1);
              if (N11.getOpcode() == ISD::Constant &&
                  Predicate_immAllOnes(N11.getNode())) {
                SDNode *Result = Emit_97(N, SPU::EQVr8_2, MVT::i8);
                return Result;
              }
            }
          }
        }
      }
    }
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);
      if (N00.getOpcode() == ISD::OR) {
        SDValue N000 = N00.getOperand(0);
        SDValue N001 = N00.getOperand(1);
        SDValue N01 = N0.getOperand(1);
        if (N01.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N01.getNode())) {
          SDValue N1 = N.getOperand(1);
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);

            // Pattern: (or:i8 (xor:i8 (or:i8 R8C:i8:$rA, R8C:i8:$rB), (imm:i8)<<P:Predicate_immAllOnes>>), (and:i8 R8C:i8:$rA, R8C:i8:$rB))
            // Emits: (EQVr8_2:i8 R8C:i8:$rA, R8C:i8:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N000 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N001 == N11) {
                SDNode *Result = Emit_98(N, SPU::EQVr8_2, MVT::i8);
                return Result;
              }
            }
            if (N001 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N000 == N11) {

                // Pattern: (or:i8 (xor:i8 (or:i8 R8C:i8:$rA, R8C:i8:$rB), (imm:i8)<<P:Predicate_immAllOnes>>), (and:i8 R8C:i8:$rB, R8C:i8:$rA))
                // Emits: (EQVr8_2:i8 R8C:i8:$rA, R8C:i8:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                {
                  SDNode *Result = Emit_98(N, SPU::EQVr8_2, MVT::i8);
                  return Result;
                }

                // Pattern: (or:i8 (xor:i8 (or:i8 R8C:i8:$rB, R8C:i8:$rA), (imm:i8)<<P:Predicate_immAllOnes>>), (and:i8 R8C:i8:$rA, R8C:i8:$rB))
                // Emits: (EQVr8_2:i8 R8C:i8:$rA, R8C:i8:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                SDNode *Result = Emit_99(N, SPU::EQVr8_2, MVT::i8);
                return Result;
              }
            }

            // Pattern: (or:i8 (xor:i8 (or:i8 R8C:i8:$rB, R8C:i8:$rA), (imm:i8)<<P:Predicate_immAllOnes>>), (and:i8 R8C:i8:$rB, R8C:i8:$rA))
            // Emits: (EQVr8_2:i8 R8C:i8:$rA, R8C:i8:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N000 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N001 == N11) {
                SDNode *Result = Emit_99(N, SPU::EQVr8_2, MVT::i8);
                return Result;
              }
            }
          }
        }
      }
    }

    // Pattern: (or:i8 R8C:i8:$rA, (xor:i8 R8C:i8:$rB, (imm:i8)<<P:Predicate_immAllOnes>>))
    // Emits: (ORCr8:i8 R8C:i8:$rA, R8C:i8:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);
        SDValue N11 = N1.getOperand(1);
        if (N11.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N11.getNode())) {
          SDNode *Result = Emit_14(N, SPU::ORCr8, MVT::i8);
          return Result;
        }
      }
    }

    // Pattern: (or:i8 (xor:i8 R8C:i8:$rB, (imm:i8)<<P:Predicate_immAllOnes>>), R8C:i8:$rA)
    // Emits: (ORCr8:i8 R8C:i8:$rA, R8C:i8:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);
      if (N01.getOpcode() == ISD::Constant &&
          Predicate_immAllOnes(N01.getNode())) {
        SDNode *Result = Emit_16(N, SPU::ORCr8, MVT::i8);
        return Result;
      }
    }

    // Pattern: (or:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immU8>>:$val)
    // Emits: (ORBIr8:i8 R8C:i8:$rA, (imm:i8):$val)
    // Pattern complexity = 7  cost = 1  size = 0
    SDValue N1 = N.getOperand(1);
    if (N1.getOpcode() == ISD::Constant &&
        Predicate_immU8(N1.getNode())) {
      SDNode *Result = Emit_15(N, SPU::ORBIr8, MVT::i8);
      return Result;
    }
  }

  // Pattern: (or:i8 R8C:i8:$rA, R8C:i8:$rB)
  // Emits: (ORr8:i8 R8C:i8:$rA, R8C:i8:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::ORr8, MVT::i8);
  return Result;
}

SDNode *Select_ISD_OR_i16(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);
    if (N0.getOpcode() == ISD::AND) {
      SDValue N00 = N0.getOperand(0);
      {
        SDValue N01 = N0.getOperand(1);
        SDValue N1 = N.getOperand(1);
        if (N1.getOpcode() == ISD::AND) {
          SDValue N10 = N1.getOperand(0);
          if (N10.getOpcode() == ISD::XOR) {
            SDValue N100 = N10.getOperand(0);

            // Pattern: (or:i16 (and:i16 R16C:i16:$rA, R16C:i16:$rB), (and:i16 (xor:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_immAllOnes>>), (xor:i16 R16C:i16:$rB, (imm:i16)<<P:Predicate_immAllOnes>>)))
            // Emits: (EQVr16:i16 R16C:i16:$rA, R16C:i16:$rB)
            // Pattern complexity = 23  cost = 1  size = 0
            if (N00 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::Constant &&
                  Predicate_immAllOnes(N101.getNode())) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);
                  if (N01 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::Constant &&
                        Predicate_immAllOnes(N111.getNode())) {
                      SDNode *Result = Emit_85(N, SPU::EQVr16, MVT::i16);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N01 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::Constant &&
                  Predicate_immAllOnes(N101.getNode())) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);
                  if (N00 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::Constant &&
                        Predicate_immAllOnes(N111.getNode())) {

                      // Pattern: (or:i16 (and:i16 R16C:i16:$rA, R16C:i16:$rB), (and:i16 (xor:i16 R16C:i16:$rB, (imm:i16)<<P:Predicate_immAllOnes>>), (xor:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_immAllOnes>>)))
                      // Emits: (EQVr16:i16 R16C:i16:$rA, R16C:i16:$rB)
                      // Pattern complexity = 23  cost = 1  size = 0
                      {
                        SDNode *Result = Emit_85(N, SPU::EQVr16, MVT::i16);
                        return Result;
                      }

                      // Pattern: (or:i16 (and:i16 R16C:i16:$rB, R16C:i16:$rA), (and:i16 (xor:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_immAllOnes>>), (xor:i16 R16C:i16:$rB, (imm:i16)<<P:Predicate_immAllOnes>>)))
                      // Emits: (EQVr16:i16 R16C:i16:$rA, R16C:i16:$rB)
                      // Pattern complexity = 23  cost = 1  size = 0
                      SDNode *Result = Emit_94(N, SPU::EQVr16, MVT::i16);
                      return Result;
                    }
                  }
                }
              }
            }

            // Pattern: (or:i16 (and:i16 R16C:i16:$rB, R16C:i16:$rA), (and:i16 (xor:i16 R16C:i16:$rB, (imm:i16)<<P:Predicate_immAllOnes>>), (xor:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_immAllOnes>>)))
            // Emits: (EQVr16:i16 R16C:i16:$rA, R16C:i16:$rB)
            // Pattern complexity = 23  cost = 1  size = 0
            if (N00 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::Constant &&
                  Predicate_immAllOnes(N101.getNode())) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);
                  if (N01 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::Constant &&
                        Predicate_immAllOnes(N111.getNode())) {
                      SDNode *Result = Emit_94(N, SPU::EQVr16, MVT::i16);
                      return Result;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (N00.getOpcode() == ISD::XOR) {
        SDValue N000 = N00.getOperand(0);
        SDValue N001 = N00.getOperand(1);
        if (N001.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N001.getNode())) {
          SDValue N01 = N0.getOperand(1);
          if (N01.getOpcode() == ISD::XOR) {
            SDValue N010 = N01.getOperand(0);
            SDValue N011 = N01.getOperand(1);
            if (N011.getOpcode() == ISD::Constant &&
                Predicate_immAllOnes(N011.getNode())) {
              SDValue N1 = N.getOperand(1);
              if (N1.getOpcode() == ISD::AND) {
                SDValue N10 = N1.getOperand(0);

                // Pattern: (or:i16 (and:i16 (xor:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_immAllOnes>>), (xor:i16 R16C:i16:$rB, (imm:i16)<<P:Predicate_immAllOnes>>)), (and:i16 R16C:i16:$rA, R16C:i16:$rB))
                // Emits: (EQVr16:i16 R16C:i16:$rA, R16C:i16:$rB)
                // Pattern complexity = 23  cost = 1  size = 0
                if (N000 == N10) {
                  SDValue N11 = N1.getOperand(1);
                  if (N010 == N11) {
                    SDNode *Result = Emit_95(N, SPU::EQVr16, MVT::i16);
                    return Result;
                  }
                }
                if (N010 == N10) {
                  SDValue N11 = N1.getOperand(1);
                  if (N000 == N11) {

                    // Pattern: (or:i16 (and:i16 (xor:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_immAllOnes>>), (xor:i16 R16C:i16:$rB, (imm:i16)<<P:Predicate_immAllOnes>>)), (and:i16 R16C:i16:$rB, R16C:i16:$rA))
                    // Emits: (EQVr16:i16 R16C:i16:$rA, R16C:i16:$rB)
                    // Pattern complexity = 23  cost = 1  size = 0
                    {
                      SDNode *Result = Emit_95(N, SPU::EQVr16, MVT::i16);
                      return Result;
                    }

                    // Pattern: (or:i16 (and:i16 (xor:i16 R16C:i16:$rB, (imm:i16)<<P:Predicate_immAllOnes>>), (xor:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_immAllOnes>>)), (and:i16 R16C:i16:$rA, R16C:i16:$rB))
                    // Emits: (EQVr16:i16 R16C:i16:$rA, R16C:i16:$rB)
                    // Pattern complexity = 23  cost = 1  size = 0
                    SDNode *Result = Emit_96(N, SPU::EQVr16, MVT::i16);
                    return Result;
                  }
                }

                // Pattern: (or:i16 (and:i16 (xor:i16 R16C:i16:$rB, (imm:i16)<<P:Predicate_immAllOnes>>), (xor:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_immAllOnes>>)), (and:i16 R16C:i16:$rB, R16C:i16:$rA))
                // Emits: (EQVr16:i16 R16C:i16:$rA, R16C:i16:$rB)
                // Pattern complexity = 23  cost = 1  size = 0
                if (N000 == N10) {
                  SDValue N11 = N1.getOperand(1);
                  if (N010 == N11) {
                    SDNode *Result = Emit_96(N, SPU::EQVr16, MVT::i16);
                    return Result;
                  }
                }
              }
            }
          }
        }
      }
      {
        SDValue N01 = N0.getOperand(1);
        {
          SDValue N1 = N.getOperand(1);

          // Pattern: (or:i16 (and:i16 R16C:i16:$rB, R16C:i16:$rC), (and:i16 R16C:i16:$rA, (xor:i16 R16C:i16:$rC, (imm:i16)<<P:Predicate_immAllOnes>>)))
          // Emits: (SELBr16:i16 R16C:i16:$rA, R16C:i16:$rB, R16C:i16:$rC)
          // Pattern complexity = 16  cost = 1  size = 0
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);
            SDValue N11 = N1.getOperand(1);
            if (N11.getOpcode() == ISD::XOR) {
              SDValue N110 = N11.getOperand(0);
              if (N01 == N110) {
                SDValue N111 = N11.getOperand(1);
                if (N111.getOpcode() == ISD::Constant &&
                    Predicate_immAllOnes(N111.getNode())) {
                  SDNode *Result = Emit_84(N, SPU::SELBr16, MVT::i16);
                  return Result;
                }
              }
            }
          }

          // Pattern: (or:i16 (and:i16 R16C:i16:$rA, R16C:i16:$rB), (xor:i16 (or:i16 R16C:i16:$rA, R16C:i16:$rB), (imm:i16)<<P:Predicate_immAllOnes>>))
          // Emits: (EQVr16_2:i16 R16C:i16:$rA, R16C:i16:$rB)
          // Pattern complexity = 16  cost = 1  size = 0
          if (N1.getOpcode() == ISD::XOR) {
            SDValue N10 = N1.getOperand(0);
            if (N10.getOpcode() == ISD::OR) {
              SDValue N100 = N10.getOperand(0);
              if (N00 == N100) {
                SDValue N101 = N10.getOperand(1);
                if (N01 == N101) {
                  SDValue N11 = N1.getOperand(1);
                  if (N11.getOpcode() == ISD::Constant &&
                      Predicate_immAllOnes(N11.getNode())) {
                    SDNode *Result = Emit_86(N, SPU::EQVr16_2, MVT::i16);
                    return Result;
                  }
                }
              }
            }
          }
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);

            // Pattern: (or:i16 (and:i16 R16C:i16:$rB, R16C:i16:$rC), (and:i16 (xor:i16 R16C:i16:$rC, (imm:i16)<<P:Predicate_immAllOnes>>), R16C:i16:$rA))
            // Emits: (SELBr16:i16 R16C:i16:$rA, R16C:i16:$rB, R16C:i16:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N10.getOpcode() == ISD::XOR) {
              SDValue N100 = N10.getOperand(0);
              if (N01 == N100) {
                SDValue N101 = N10.getOperand(1);
                if (N101.getOpcode() == ISD::Constant &&
                    Predicate_immAllOnes(N101.getNode())) {
                  SDNode *Result = Emit_87(N, SPU::SELBr16, MVT::i16);
                  return Result;
                }
              }
            }

            // Pattern: (or:i16 (and:i16 R16C:i16:$rC, R16C:i16:$rB), (and:i16 R16C:i16:$rA, (xor:i16 R16C:i16:$rC, (imm:i16)<<P:Predicate_immAllOnes>>)))
            // Emits: (SELBr16:i16 R16C:i16:$rA, R16C:i16:$rB, R16C:i16:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            {
              SDValue N11 = N1.getOperand(1);
              if (N11.getOpcode() == ISD::XOR) {
                SDValue N110 = N11.getOperand(0);
                if (N00 == N110) {
                  SDValue N111 = N11.getOperand(1);
                  if (N111.getOpcode() == ISD::Constant &&
                      Predicate_immAllOnes(N111.getNode())) {
                    SDNode *Result = Emit_88(N, SPU::SELBr16, MVT::i16);
                    return Result;
                  }
                }
              }
            }

            // Pattern: (or:i16 (and:i16 R16C:i16:$rC, R16C:i16:$rB), (and:i16 (xor:i16 R16C:i16:$rC, (imm:i16)<<P:Predicate_immAllOnes>>), R16C:i16:$rA))
            // Emits: (SELBr16:i16 R16C:i16:$rA, R16C:i16:$rB, R16C:i16:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N10.getOpcode() == ISD::XOR) {
              SDValue N100 = N10.getOperand(0);
              if (N00 == N100) {
                SDValue N101 = N10.getOperand(1);
                if (N101.getOpcode() == ISD::Constant &&
                    Predicate_immAllOnes(N101.getNode())) {
                  SDNode *Result = Emit_89(N, SPU::SELBr16, MVT::i16);
                  return Result;
                }
              }
            }
          }
        }
        if (N01.getOpcode() == ISD::XOR) {
          SDValue N010 = N01.getOperand(0);
          SDValue N011 = N01.getOperand(1);
          if (N011.getOpcode() == ISD::Constant &&
              Predicate_immAllOnes(N011.getNode())) {
            SDValue N1 = N.getOperand(1);
            if (N1.getOpcode() == ISD::AND) {
              SDValue N10 = N1.getOperand(0);

              // Pattern: (or:i16 (and:i16 R16C:i16:$rA, (xor:i16 R16C:i16:$rC, (imm:i16)<<P:Predicate_immAllOnes>>)), (and:i16 R16C:i16:$rB, R16C:i16:$rC))
              // Emits: (SELBr16:i16 R16C:i16:$rA, R16C:i16:$rB, R16C:i16:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              {
                SDValue N11 = N1.getOperand(1);
                if (N010 == N11) {
                  SDNode *Result = Emit_90(N, SPU::SELBr16, MVT::i16);
                  return Result;
                }
              }

              // Pattern: (or:i16 (and:i16 R16C:i16:$rA, (xor:i16 R16C:i16:$rC, (imm:i16)<<P:Predicate_immAllOnes>>)), (and:i16 R16C:i16:$rC, R16C:i16:$rB))
              // Emits: (SELBr16:i16 R16C:i16:$rA, R16C:i16:$rB, R16C:i16:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              if (N010 == N10) {
                SDNode *Result = Emit_91(N, SPU::SELBr16, MVT::i16);
                return Result;
              }
            }
          }
        }
      }
      if (N00.getOpcode() == ISD::XOR) {
        SDValue N000 = N00.getOperand(0);
        SDValue N001 = N00.getOperand(1);
        if (N001.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N001.getNode())) {
          SDValue N01 = N0.getOperand(1);
          SDValue N1 = N.getOperand(1);
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);

            // Pattern: (or:i16 (and:i16 (xor:i16 R16C:i16:$rC, (imm:i16)<<P:Predicate_immAllOnes>>), R16C:i16:$rA), (and:i16 R16C:i16:$rB, R16C:i16:$rC))
            // Emits: (SELBr16:i16 R16C:i16:$rA, R16C:i16:$rB, R16C:i16:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            {
              SDValue N11 = N1.getOperand(1);
              if (N000 == N11) {
                SDNode *Result = Emit_92(N, SPU::SELBr16, MVT::i16);
                return Result;
              }
            }

            // Pattern: (or:i16 (and:i16 (xor:i16 R16C:i16:$rC, (imm:i16)<<P:Predicate_immAllOnes>>), R16C:i16:$rA), (and:i16 R16C:i16:$rC, R16C:i16:$rB))
            // Emits: (SELBr16:i16 R16C:i16:$rA, R16C:i16:$rB, R16C:i16:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N000 == N10) {
              SDNode *Result = Emit_93(N, SPU::SELBr16, MVT::i16);
              return Result;
            }
          }
        }
      }
      SDValue N01 = N0.getOperand(1);
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);
        if (N10.getOpcode() == ISD::OR) {
          SDValue N100 = N10.getOperand(0);
          if (N01 == N100) {
            SDValue N101 = N10.getOperand(1);
            if (N00 == N101) {
              SDValue N11 = N1.getOperand(1);
              if (N11.getOpcode() == ISD::Constant &&
                  Predicate_immAllOnes(N11.getNode())) {

                // Pattern: (or:i16 (and:i16 R16C:i16:$rA, R16C:i16:$rB), (xor:i16 (or:i16 R16C:i16:$rB, R16C:i16:$rA), (imm:i16)<<P:Predicate_immAllOnes>>))
                // Emits: (EQVr16_2:i16 R16C:i16:$rA, R16C:i16:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                {
                  SDNode *Result = Emit_86(N, SPU::EQVr16_2, MVT::i16);
                  return Result;
                }

                // Pattern: (or:i16 (and:i16 R16C:i16:$rB, R16C:i16:$rA), (xor:i16 (or:i16 R16C:i16:$rA, R16C:i16:$rB), (imm:i16)<<P:Predicate_immAllOnes>>))
                // Emits: (EQVr16_2:i16 R16C:i16:$rA, R16C:i16:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                SDNode *Result = Emit_97(N, SPU::EQVr16_2, MVT::i16);
                return Result;
              }
            }
          }

          // Pattern: (or:i16 (and:i16 R16C:i16:$rB, R16C:i16:$rA), (xor:i16 (or:i16 R16C:i16:$rB, R16C:i16:$rA), (imm:i16)<<P:Predicate_immAllOnes>>))
          // Emits: (EQVr16_2:i16 R16C:i16:$rA, R16C:i16:$rB)
          // Pattern complexity = 16  cost = 1  size = 0
          if (N00 == N100) {
            SDValue N101 = N10.getOperand(1);
            if (N01 == N101) {
              SDValue N11 = N1.getOperand(1);
              if (N11.getOpcode() == ISD::Constant &&
                  Predicate_immAllOnes(N11.getNode())) {
                SDNode *Result = Emit_97(N, SPU::EQVr16_2, MVT::i16);
                return Result;
              }
            }
          }
        }
      }
    }
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);
      if (N00.getOpcode() == ISD::OR) {
        SDValue N000 = N00.getOperand(0);
        SDValue N001 = N00.getOperand(1);
        SDValue N01 = N0.getOperand(1);
        if (N01.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N01.getNode())) {
          SDValue N1 = N.getOperand(1);
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);

            // Pattern: (or:i16 (xor:i16 (or:i16 R16C:i16:$rA, R16C:i16:$rB), (imm:i16)<<P:Predicate_immAllOnes>>), (and:i16 R16C:i16:$rA, R16C:i16:$rB))
            // Emits: (EQVr16_2:i16 R16C:i16:$rA, R16C:i16:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N000 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N001 == N11) {
                SDNode *Result = Emit_98(N, SPU::EQVr16_2, MVT::i16);
                return Result;
              }
            }
            if (N001 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N000 == N11) {

                // Pattern: (or:i16 (xor:i16 (or:i16 R16C:i16:$rA, R16C:i16:$rB), (imm:i16)<<P:Predicate_immAllOnes>>), (and:i16 R16C:i16:$rB, R16C:i16:$rA))
                // Emits: (EQVr16_2:i16 R16C:i16:$rA, R16C:i16:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                {
                  SDNode *Result = Emit_98(N, SPU::EQVr16_2, MVT::i16);
                  return Result;
                }

                // Pattern: (or:i16 (xor:i16 (or:i16 R16C:i16:$rB, R16C:i16:$rA), (imm:i16)<<P:Predicate_immAllOnes>>), (and:i16 R16C:i16:$rA, R16C:i16:$rB))
                // Emits: (EQVr16_2:i16 R16C:i16:$rA, R16C:i16:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                SDNode *Result = Emit_99(N, SPU::EQVr16_2, MVT::i16);
                return Result;
              }
            }

            // Pattern: (or:i16 (xor:i16 (or:i16 R16C:i16:$rB, R16C:i16:$rA), (imm:i16)<<P:Predicate_immAllOnes>>), (and:i16 R16C:i16:$rB, R16C:i16:$rA))
            // Emits: (EQVr16_2:i16 R16C:i16:$rA, R16C:i16:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N000 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N001 == N11) {
                SDNode *Result = Emit_99(N, SPU::EQVr16_2, MVT::i16);
                return Result;
              }
            }
          }
        }
      }
    }

    // Pattern: (or:i16 R16C:i16:$rA, (xor:i16 R16C:i16:$rB, (imm:i16)<<P:Predicate_immAllOnes>>))
    // Emits: (ORCr16:i16 R16C:i16:$rA, R16C:i16:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);
        SDValue N11 = N1.getOperand(1);
        if (N11.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N11.getNode())) {
          SDNode *Result = Emit_14(N, SPU::ORCr16, MVT::i16);
          return Result;
        }
      }
    }

    // Pattern: (or:i16 (anyext:i16 R8C:i8:$rA), (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val)
    // Emits: (ORHIi8i16:i16 R8C:i8:$rA, (imm:i16):$val)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::ANY_EXTEND) {
      SDValue N00 = N0.getOperand(0);
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::Constant &&
          Predicate_i16ImmSExt10(N1.getNode()) &&
          N00.getNode()->getValueType(0) == MVT::i8) {
        SDNode *Result = Emit_17(N, SPU::ORHIi8i16, MVT::i16);
        return Result;
      }
    }

    // Pattern: (or:i16 (xor:i16 R16C:i16:$rB, (imm:i16)<<P:Predicate_immAllOnes>>), R16C:i16:$rA)
    // Emits: (ORCr16:i16 R16C:i16:$rA, R16C:i16:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);
      if (N01.getOpcode() == ISD::Constant &&
          Predicate_immAllOnes(N01.getNode())) {
        SDNode *Result = Emit_16(N, SPU::ORCr16, MVT::i16);
        return Result;
      }
    }

    // Pattern: (or:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmUns10>>:$val)
    // Emits: (ORHIr16:i16 R16C:i16:$rA, (imm:i16):$val)
    // Pattern complexity = 7  cost = 1  size = 0
    SDValue N1 = N.getOperand(1);
    if (N1.getOpcode() == ISD::Constant &&
        Predicate_i16ImmUns10(N1.getNode())) {
      SDNode *Result = Emit_1(N, SPU::ORHIr16, MVT::i16);
      return Result;
    }
  }

  // Pattern: (or:i16 R16C:i16:$rA, R16C:i16:$rB)
  // Emits: (ORr16:i16 R16C:i16:$rA, R16C:i16:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::ORr16, MVT::i16);
  return Result;
}

SDNode *Select_ISD_OR_i32(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);
    if (N0.getOpcode() == ISD::AND) {
      SDValue N00 = N0.getOperand(0);
      {
        SDValue N01 = N0.getOperand(1);
        SDValue N1 = N.getOperand(1);
        if (N1.getOpcode() == ISD::AND) {
          SDValue N10 = N1.getOperand(0);
          if (N10.getOpcode() == ISD::XOR) {
            SDValue N100 = N10.getOperand(0);

            // Pattern: (or:i32 (and:i32 R32C:i32:$rA, R32C:i32:$rB), (and:i32 (xor:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_immAllOnes>>), (xor:i32 R32C:i32:$rB, (imm:i32)<<P:Predicate_immAllOnes>>)))
            // Emits: (EQVr32:i32 R32C:i32:$rA, R32C:i32:$rB)
            // Pattern complexity = 23  cost = 1  size = 0
            if (N00 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::Constant &&
                  Predicate_immAllOnes(N101.getNode())) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);
                  if (N01 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::Constant &&
                        Predicate_immAllOnes(N111.getNode())) {
                      SDNode *Result = Emit_85(N, SPU::EQVr32, MVT::i32);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N01 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::Constant &&
                  Predicate_immAllOnes(N101.getNode())) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);
                  if (N00 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::Constant &&
                        Predicate_immAllOnes(N111.getNode())) {

                      // Pattern: (or:i32 (and:i32 R32C:i32:$rA, R32C:i32:$rB), (and:i32 (xor:i32 R32C:i32:$rB, (imm:i32)<<P:Predicate_immAllOnes>>), (xor:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_immAllOnes>>)))
                      // Emits: (EQVr32:i32 R32C:i32:$rA, R32C:i32:$rB)
                      // Pattern complexity = 23  cost = 1  size = 0
                      {
                        SDNode *Result = Emit_85(N, SPU::EQVr32, MVT::i32);
                        return Result;
                      }

                      // Pattern: (or:i32 (and:i32 R32C:i32:$rB, R32C:i32:$rA), (and:i32 (xor:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_immAllOnes>>), (xor:i32 R32C:i32:$rB, (imm:i32)<<P:Predicate_immAllOnes>>)))
                      // Emits: (EQVr32:i32 R32C:i32:$rA, R32C:i32:$rB)
                      // Pattern complexity = 23  cost = 1  size = 0
                      SDNode *Result = Emit_94(N, SPU::EQVr32, MVT::i32);
                      return Result;
                    }
                  }
                }
              }
            }

            // Pattern: (or:i32 (and:i32 R32C:i32:$rB, R32C:i32:$rA), (and:i32 (xor:i32 R32C:i32:$rB, (imm:i32)<<P:Predicate_immAllOnes>>), (xor:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_immAllOnes>>)))
            // Emits: (EQVr32:i32 R32C:i32:$rA, R32C:i32:$rB)
            // Pattern complexity = 23  cost = 1  size = 0
            if (N00 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::Constant &&
                  Predicate_immAllOnes(N101.getNode())) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);
                  if (N01 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::Constant &&
                        Predicate_immAllOnes(N111.getNode())) {
                      SDNode *Result = Emit_94(N, SPU::EQVr32, MVT::i32);
                      return Result;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (N00.getOpcode() == ISD::XOR) {
        SDValue N000 = N00.getOperand(0);
        SDValue N001 = N00.getOperand(1);
        if (N001.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N001.getNode())) {
          SDValue N01 = N0.getOperand(1);
          if (N01.getOpcode() == ISD::XOR) {
            SDValue N010 = N01.getOperand(0);
            SDValue N011 = N01.getOperand(1);
            if (N011.getOpcode() == ISD::Constant &&
                Predicate_immAllOnes(N011.getNode())) {
              SDValue N1 = N.getOperand(1);
              if (N1.getOpcode() == ISD::AND) {
                SDValue N10 = N1.getOperand(0);

                // Pattern: (or:i32 (and:i32 (xor:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_immAllOnes>>), (xor:i32 R32C:i32:$rB, (imm:i32)<<P:Predicate_immAllOnes>>)), (and:i32 R32C:i32:$rA, R32C:i32:$rB))
                // Emits: (EQVr32:i32 R32C:i32:$rA, R32C:i32:$rB)
                // Pattern complexity = 23  cost = 1  size = 0
                if (N000 == N10) {
                  SDValue N11 = N1.getOperand(1);
                  if (N010 == N11) {
                    SDNode *Result = Emit_95(N, SPU::EQVr32, MVT::i32);
                    return Result;
                  }
                }
                if (N010 == N10) {
                  SDValue N11 = N1.getOperand(1);
                  if (N000 == N11) {

                    // Pattern: (or:i32 (and:i32 (xor:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_immAllOnes>>), (xor:i32 R32C:i32:$rB, (imm:i32)<<P:Predicate_immAllOnes>>)), (and:i32 R32C:i32:$rB, R32C:i32:$rA))
                    // Emits: (EQVr32:i32 R32C:i32:$rA, R32C:i32:$rB)
                    // Pattern complexity = 23  cost = 1  size = 0
                    {
                      SDNode *Result = Emit_95(N, SPU::EQVr32, MVT::i32);
                      return Result;
                    }

                    // Pattern: (or:i32 (and:i32 (xor:i32 R32C:i32:$rB, (imm:i32)<<P:Predicate_immAllOnes>>), (xor:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_immAllOnes>>)), (and:i32 R32C:i32:$rA, R32C:i32:$rB))
                    // Emits: (EQVr32:i32 R32C:i32:$rA, R32C:i32:$rB)
                    // Pattern complexity = 23  cost = 1  size = 0
                    SDNode *Result = Emit_96(N, SPU::EQVr32, MVT::i32);
                    return Result;
                  }
                }

                // Pattern: (or:i32 (and:i32 (xor:i32 R32C:i32:$rB, (imm:i32)<<P:Predicate_immAllOnes>>), (xor:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_immAllOnes>>)), (and:i32 R32C:i32:$rB, R32C:i32:$rA))
                // Emits: (EQVr32:i32 R32C:i32:$rA, R32C:i32:$rB)
                // Pattern complexity = 23  cost = 1  size = 0
                if (N000 == N10) {
                  SDValue N11 = N1.getOperand(1);
                  if (N010 == N11) {
                    SDNode *Result = Emit_96(N, SPU::EQVr32, MVT::i32);
                    return Result;
                  }
                }
              }
            }
          }
        }
      }
      {
        SDValue N01 = N0.getOperand(1);
        {
          SDValue N1 = N.getOperand(1);

          // Pattern: (or:i32 (and:i32 R32C:i32:$rB, R32C:i32:$rC), (and:i32 R32C:i32:$rA, (xor:i32 R32C:i32:$rC, (imm:i32)<<P:Predicate_immAllOnes>>)))
          // Emits: (SELBr32:i32 R32C:i32:$rA, R32C:i32:$rB, R32C:i32:$rC)
          // Pattern complexity = 16  cost = 1  size = 0
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);
            SDValue N11 = N1.getOperand(1);
            if (N11.getOpcode() == ISD::XOR) {
              SDValue N110 = N11.getOperand(0);
              if (N01 == N110) {
                SDValue N111 = N11.getOperand(1);
                if (N111.getOpcode() == ISD::Constant &&
                    Predicate_immAllOnes(N111.getNode())) {
                  SDNode *Result = Emit_84(N, SPU::SELBr32, MVT::i32);
                  return Result;
                }
              }
            }
          }

          // Pattern: (or:i32 (and:i32 R32C:i32:$rA, R32C:i32:$rB), (xor:i32 (or:i32 R32C:i32:$rA, R32C:i32:$rB), (imm:i32)<<P:Predicate_immAllOnes>>))
          // Emits: (EQVr32_2:i32 R32C:i32:$rA, R32C:i32:$rB)
          // Pattern complexity = 16  cost = 1  size = 0
          if (N1.getOpcode() == ISD::XOR) {
            SDValue N10 = N1.getOperand(0);
            if (N10.getOpcode() == ISD::OR) {
              SDValue N100 = N10.getOperand(0);
              if (N00 == N100) {
                SDValue N101 = N10.getOperand(1);
                if (N01 == N101) {
                  SDValue N11 = N1.getOperand(1);
                  if (N11.getOpcode() == ISD::Constant &&
                      Predicate_immAllOnes(N11.getNode())) {
                    SDNode *Result = Emit_86(N, SPU::EQVr32_2, MVT::i32);
                    return Result;
                  }
                }
              }
            }
          }
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);

            // Pattern: (or:i32 (and:i32 R32C:i32:$rB, R32C:i32:$rC), (and:i32 (xor:i32 R32C:i32:$rC, (imm:i32)<<P:Predicate_immAllOnes>>), R32C:i32:$rA))
            // Emits: (SELBr32:i32 R32C:i32:$rA, R32C:i32:$rB, R32C:i32:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N10.getOpcode() == ISD::XOR) {
              SDValue N100 = N10.getOperand(0);
              if (N01 == N100) {
                SDValue N101 = N10.getOperand(1);
                if (N101.getOpcode() == ISD::Constant &&
                    Predicate_immAllOnes(N101.getNode())) {
                  SDNode *Result = Emit_87(N, SPU::SELBr32, MVT::i32);
                  return Result;
                }
              }
            }

            // Pattern: (or:i32 (and:i32 R32C:i32:$rC, R32C:i32:$rB), (and:i32 R32C:i32:$rA, (xor:i32 R32C:i32:$rC, (imm:i32)<<P:Predicate_immAllOnes>>)))
            // Emits: (SELBr32:i32 R32C:i32:$rA, R32C:i32:$rB, R32C:i32:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            {
              SDValue N11 = N1.getOperand(1);
              if (N11.getOpcode() == ISD::XOR) {
                SDValue N110 = N11.getOperand(0);
                if (N00 == N110) {
                  SDValue N111 = N11.getOperand(1);
                  if (N111.getOpcode() == ISD::Constant &&
                      Predicate_immAllOnes(N111.getNode())) {
                    SDNode *Result = Emit_88(N, SPU::SELBr32, MVT::i32);
                    return Result;
                  }
                }
              }
            }

            // Pattern: (or:i32 (and:i32 R32C:i32:$rC, R32C:i32:$rB), (and:i32 (xor:i32 R32C:i32:$rC, (imm:i32)<<P:Predicate_immAllOnes>>), R32C:i32:$rA))
            // Emits: (SELBr32:i32 R32C:i32:$rA, R32C:i32:$rB, R32C:i32:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N10.getOpcode() == ISD::XOR) {
              SDValue N100 = N10.getOperand(0);
              if (N00 == N100) {
                SDValue N101 = N10.getOperand(1);
                if (N101.getOpcode() == ISD::Constant &&
                    Predicate_immAllOnes(N101.getNode())) {
                  SDNode *Result = Emit_89(N, SPU::SELBr32, MVT::i32);
                  return Result;
                }
              }
            }
          }
        }
        if (N01.getOpcode() == ISD::XOR) {
          SDValue N010 = N01.getOperand(0);
          SDValue N011 = N01.getOperand(1);
          if (N011.getOpcode() == ISD::Constant &&
              Predicate_immAllOnes(N011.getNode())) {
            SDValue N1 = N.getOperand(1);
            if (N1.getOpcode() == ISD::AND) {
              SDValue N10 = N1.getOperand(0);

              // Pattern: (or:i32 (and:i32 R32C:i32:$rA, (xor:i32 R32C:i32:$rC, (imm:i32)<<P:Predicate_immAllOnes>>)), (and:i32 R32C:i32:$rB, R32C:i32:$rC))
              // Emits: (SELBr32:i32 R32C:i32:$rA, R32C:i32:$rB, R32C:i32:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              {
                SDValue N11 = N1.getOperand(1);
                if (N010 == N11) {
                  SDNode *Result = Emit_90(N, SPU::SELBr32, MVT::i32);
                  return Result;
                }
              }

              // Pattern: (or:i32 (and:i32 R32C:i32:$rA, (xor:i32 R32C:i32:$rC, (imm:i32)<<P:Predicate_immAllOnes>>)), (and:i32 R32C:i32:$rC, R32C:i32:$rB))
              // Emits: (SELBr32:i32 R32C:i32:$rA, R32C:i32:$rB, R32C:i32:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              if (N010 == N10) {
                SDNode *Result = Emit_91(N, SPU::SELBr32, MVT::i32);
                return Result;
              }
            }
          }
        }
      }
      if (N00.getOpcode() == ISD::XOR) {
        SDValue N000 = N00.getOperand(0);
        SDValue N001 = N00.getOperand(1);
        if (N001.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N001.getNode())) {
          SDValue N01 = N0.getOperand(1);
          SDValue N1 = N.getOperand(1);
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);

            // Pattern: (or:i32 (and:i32 (xor:i32 R32C:i32:$rC, (imm:i32)<<P:Predicate_immAllOnes>>), R32C:i32:$rA), (and:i32 R32C:i32:$rB, R32C:i32:$rC))
            // Emits: (SELBr32:i32 R32C:i32:$rA, R32C:i32:$rB, R32C:i32:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            {
              SDValue N11 = N1.getOperand(1);
              if (N000 == N11) {
                SDNode *Result = Emit_92(N, SPU::SELBr32, MVT::i32);
                return Result;
              }
            }

            // Pattern: (or:i32 (and:i32 (xor:i32 R32C:i32:$rC, (imm:i32)<<P:Predicate_immAllOnes>>), R32C:i32:$rA), (and:i32 R32C:i32:$rC, R32C:i32:$rB))
            // Emits: (SELBr32:i32 R32C:i32:$rA, R32C:i32:$rB, R32C:i32:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N000 == N10) {
              SDNode *Result = Emit_93(N, SPU::SELBr32, MVT::i32);
              return Result;
            }
          }
        }
      }
      SDValue N01 = N0.getOperand(1);
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);
        if (N10.getOpcode() == ISD::OR) {
          SDValue N100 = N10.getOperand(0);
          if (N01 == N100) {
            SDValue N101 = N10.getOperand(1);
            if (N00 == N101) {
              SDValue N11 = N1.getOperand(1);
              if (N11.getOpcode() == ISD::Constant &&
                  Predicate_immAllOnes(N11.getNode())) {

                // Pattern: (or:i32 (and:i32 R32C:i32:$rA, R32C:i32:$rB), (xor:i32 (or:i32 R32C:i32:$rB, R32C:i32:$rA), (imm:i32)<<P:Predicate_immAllOnes>>))
                // Emits: (EQVr32_2:i32 R32C:i32:$rA, R32C:i32:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                {
                  SDNode *Result = Emit_86(N, SPU::EQVr32_2, MVT::i32);
                  return Result;
                }

                // Pattern: (or:i32 (and:i32 R32C:i32:$rB, R32C:i32:$rA), (xor:i32 (or:i32 R32C:i32:$rA, R32C:i32:$rB), (imm:i32)<<P:Predicate_immAllOnes>>))
                // Emits: (EQVr32_2:i32 R32C:i32:$rA, R32C:i32:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                SDNode *Result = Emit_97(N, SPU::EQVr32_2, MVT::i32);
                return Result;
              }
            }
          }

          // Pattern: (or:i32 (and:i32 R32C:i32:$rB, R32C:i32:$rA), (xor:i32 (or:i32 R32C:i32:$rB, R32C:i32:$rA), (imm:i32)<<P:Predicate_immAllOnes>>))
          // Emits: (EQVr32_2:i32 R32C:i32:$rA, R32C:i32:$rB)
          // Pattern complexity = 16  cost = 1  size = 0
          if (N00 == N100) {
            SDValue N101 = N10.getOperand(1);
            if (N01 == N101) {
              SDValue N11 = N1.getOperand(1);
              if (N11.getOpcode() == ISD::Constant &&
                  Predicate_immAllOnes(N11.getNode())) {
                SDNode *Result = Emit_97(N, SPU::EQVr32_2, MVT::i32);
                return Result;
              }
            }
          }
        }
      }
    }
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);
      if (N00.getOpcode() == ISD::OR) {
        SDValue N000 = N00.getOperand(0);
        SDValue N001 = N00.getOperand(1);
        SDValue N01 = N0.getOperand(1);
        if (N01.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N01.getNode())) {
          SDValue N1 = N.getOperand(1);
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);

            // Pattern: (or:i32 (xor:i32 (or:i32 R32C:i32:$rA, R32C:i32:$rB), (imm:i32)<<P:Predicate_immAllOnes>>), (and:i32 R32C:i32:$rA, R32C:i32:$rB))
            // Emits: (EQVr32_2:i32 R32C:i32:$rA, R32C:i32:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N000 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N001 == N11) {
                SDNode *Result = Emit_98(N, SPU::EQVr32_2, MVT::i32);
                return Result;
              }
            }
            if (N001 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N000 == N11) {

                // Pattern: (or:i32 (xor:i32 (or:i32 R32C:i32:$rA, R32C:i32:$rB), (imm:i32)<<P:Predicate_immAllOnes>>), (and:i32 R32C:i32:$rB, R32C:i32:$rA))
                // Emits: (EQVr32_2:i32 R32C:i32:$rA, R32C:i32:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                {
                  SDNode *Result = Emit_98(N, SPU::EQVr32_2, MVT::i32);
                  return Result;
                }

                // Pattern: (or:i32 (xor:i32 (or:i32 R32C:i32:$rB, R32C:i32:$rA), (imm:i32)<<P:Predicate_immAllOnes>>), (and:i32 R32C:i32:$rA, R32C:i32:$rB))
                // Emits: (EQVr32_2:i32 R32C:i32:$rA, R32C:i32:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                SDNode *Result = Emit_99(N, SPU::EQVr32_2, MVT::i32);
                return Result;
              }
            }

            // Pattern: (or:i32 (xor:i32 (or:i32 R32C:i32:$rB, R32C:i32:$rA), (imm:i32)<<P:Predicate_immAllOnes>>), (and:i32 R32C:i32:$rB, R32C:i32:$rA))
            // Emits: (EQVr32_2:i32 R32C:i32:$rA, R32C:i32:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N000 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N001 == N11) {
                SDNode *Result = Emit_99(N, SPU::EQVr32_2, MVT::i32);
                return Result;
              }
            }
          }
        }
      }
    }

    // Pattern: (or:i32 R32C:i32:$rA, (xor:i32 R32C:i32:$rB, (imm:i32)<<P:Predicate_immAllOnes>>))
    // Emits: (ORCr32:i32 R32C:i32:$rA, R32C:i32:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);
        SDValue N11 = N1.getOperand(1);
        if (N11.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N11.getNode())) {
          SDNode *Result = Emit_14(N, SPU::ORCr32, MVT::i32);
          return Result;
        }
      }
    }
    if (N0.getOpcode() == ISD::ANY_EXTEND) {
      SDValue N00 = N0.getOperand(0);
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::Constant &&
          Predicate_i32ImmSExt10(N1.getNode())) {

        // Pattern: (or:i32 (anyext:i32 R16C:i16:$rA), (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val)
        // Emits: (ORIi16i32:i32 R16C:i16:$rA, (imm:i32):$val)
        // Pattern complexity = 10  cost = 1  size = 0
        if (N00.getNode()->getValueType(0) == MVT::i16) {
          SDNode *Result = Emit_19(N, SPU::ORIi16i32, MVT::i32);
          return Result;
        }

        // Pattern: (or:i32 (anyext:i32 R8C:i8:$rA), (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val)
        // Emits: (ORIi8i32:i32 R8C:i8:$rA, (imm:i32):$val)
        // Pattern complexity = 10  cost = 1  size = 0
        if (N00.getNode()->getValueType(0) == MVT::i8) {
          SDNode *Result = Emit_19(N, SPU::ORIi8i32, MVT::i32);
          return Result;
        }
      }
    }

    // Pattern: (or:i32 (xor:i32 R32C:i32:$rB, (imm:i32)<<P:Predicate_immAllOnes>>), R32C:i32:$rA)
    // Emits: (ORCr32:i32 R32C:i32:$rA, R32C:i32:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);
      if (N01.getOpcode() == ISD::Constant &&
          Predicate_immAllOnes(N01.getNode())) {
        SDNode *Result = Emit_16(N, SPU::ORCr32, MVT::i32);
        return Result;
      }
    }

    // Pattern: (or:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmUns10>>:$val)
    // Emits: (ORIr32:i32 R32C:i32:$rA, (imm:i32):$val)
    // Pattern complexity = 7  cost = 1  size = 0
    SDValue N1 = N.getOperand(1);
    if (N1.getOpcode() == ISD::Constant &&
        Predicate_i32ImmUns10(N1.getNode())) {
      SDNode *Result = Emit_2(N, SPU::ORIr32, MVT::i32);
      return Result;
    }
  }

  // Pattern: (or:i32 R32C:i32:$rA, R32C:i32:$rB)
  // Emits: (ORr32:i32 R32C:i32:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::ORr32, MVT::i32);
  return Result;
}

SDNode *Select_ISD_OR_i64(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);
    if (N0.getOpcode() == ISD::AND) {
      SDValue N00 = N0.getOperand(0);
      {
        SDValue N01 = N0.getOperand(1);
        SDValue N1 = N.getOperand(1);
        if (N1.getOpcode() == ISD::AND) {
          SDValue N10 = N1.getOperand(0);
          if (N10.getOpcode() == ISD::XOR) {
            SDValue N100 = N10.getOperand(0);

            // Pattern: (or:i64 (and:i64 R64C:i64:$rA, R64C:i64:$rB), (and:i64 (xor:i64 R64C:i64:$rA, (imm:i64)<<P:Predicate_immAllOnes>>), (xor:i64 R64C:i64:$rB, (imm:i64)<<P:Predicate_immAllOnes>>)))
            // Emits: (EQVr64:i64 R64C:i64:$rA, R64C:i64:$rB)
            // Pattern complexity = 23  cost = 1  size = 0
            if (N00 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::Constant &&
                  Predicate_immAllOnes(N101.getNode())) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);
                  if (N01 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::Constant &&
                        Predicate_immAllOnes(N111.getNode())) {
                      SDNode *Result = Emit_85(N, SPU::EQVr64, MVT::i64);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N01 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::Constant &&
                  Predicate_immAllOnes(N101.getNode())) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);
                  if (N00 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::Constant &&
                        Predicate_immAllOnes(N111.getNode())) {

                      // Pattern: (or:i64 (and:i64 R64C:i64:$rA, R64C:i64:$rB), (and:i64 (xor:i64 R64C:i64:$rB, (imm:i64)<<P:Predicate_immAllOnes>>), (xor:i64 R64C:i64:$rA, (imm:i64)<<P:Predicate_immAllOnes>>)))
                      // Emits: (EQVr64:i64 R64C:i64:$rA, R64C:i64:$rB)
                      // Pattern complexity = 23  cost = 1  size = 0
                      {
                        SDNode *Result = Emit_85(N, SPU::EQVr64, MVT::i64);
                        return Result;
                      }

                      // Pattern: (or:i64 (and:i64 R64C:i64:$rB, R64C:i64:$rA), (and:i64 (xor:i64 R64C:i64:$rA, (imm:i64)<<P:Predicate_immAllOnes>>), (xor:i64 R64C:i64:$rB, (imm:i64)<<P:Predicate_immAllOnes>>)))
                      // Emits: (EQVr64:i64 R64C:i64:$rA, R64C:i64:$rB)
                      // Pattern complexity = 23  cost = 1  size = 0
                      SDNode *Result = Emit_94(N, SPU::EQVr64, MVT::i64);
                      return Result;
                    }
                  }
                }
              }
            }

            // Pattern: (or:i64 (and:i64 R64C:i64:$rB, R64C:i64:$rA), (and:i64 (xor:i64 R64C:i64:$rB, (imm:i64)<<P:Predicate_immAllOnes>>), (xor:i64 R64C:i64:$rA, (imm:i64)<<P:Predicate_immAllOnes>>)))
            // Emits: (EQVr64:i64 R64C:i64:$rA, R64C:i64:$rB)
            // Pattern complexity = 23  cost = 1  size = 0
            if (N00 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::Constant &&
                  Predicate_immAllOnes(N101.getNode())) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);
                  if (N01 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::Constant &&
                        Predicate_immAllOnes(N111.getNode())) {
                      SDNode *Result = Emit_94(N, SPU::EQVr64, MVT::i64);
                      return Result;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (N00.getOpcode() == ISD::XOR) {
        SDValue N000 = N00.getOperand(0);
        SDValue N001 = N00.getOperand(1);
        if (N001.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N001.getNode())) {
          SDValue N01 = N0.getOperand(1);
          if (N01.getOpcode() == ISD::XOR) {
            SDValue N010 = N01.getOperand(0);
            SDValue N011 = N01.getOperand(1);
            if (N011.getOpcode() == ISD::Constant &&
                Predicate_immAllOnes(N011.getNode())) {
              SDValue N1 = N.getOperand(1);
              if (N1.getOpcode() == ISD::AND) {
                SDValue N10 = N1.getOperand(0);

                // Pattern: (or:i64 (and:i64 (xor:i64 R64C:i64:$rA, (imm:i64)<<P:Predicate_immAllOnes>>), (xor:i64 R64C:i64:$rB, (imm:i64)<<P:Predicate_immAllOnes>>)), (and:i64 R64C:i64:$rA, R64C:i64:$rB))
                // Emits: (EQVr64:i64 R64C:i64:$rA, R64C:i64:$rB)
                // Pattern complexity = 23  cost = 1  size = 0
                if (N000 == N10) {
                  SDValue N11 = N1.getOperand(1);
                  if (N010 == N11) {
                    SDNode *Result = Emit_95(N, SPU::EQVr64, MVT::i64);
                    return Result;
                  }
                }
                if (N010 == N10) {
                  SDValue N11 = N1.getOperand(1);
                  if (N000 == N11) {

                    // Pattern: (or:i64 (and:i64 (xor:i64 R64C:i64:$rA, (imm:i64)<<P:Predicate_immAllOnes>>), (xor:i64 R64C:i64:$rB, (imm:i64)<<P:Predicate_immAllOnes>>)), (and:i64 R64C:i64:$rB, R64C:i64:$rA))
                    // Emits: (EQVr64:i64 R64C:i64:$rA, R64C:i64:$rB)
                    // Pattern complexity = 23  cost = 1  size = 0
                    {
                      SDNode *Result = Emit_95(N, SPU::EQVr64, MVT::i64);
                      return Result;
                    }

                    // Pattern: (or:i64 (and:i64 (xor:i64 R64C:i64:$rB, (imm:i64)<<P:Predicate_immAllOnes>>), (xor:i64 R64C:i64:$rA, (imm:i64)<<P:Predicate_immAllOnes>>)), (and:i64 R64C:i64:$rA, R64C:i64:$rB))
                    // Emits: (EQVr64:i64 R64C:i64:$rA, R64C:i64:$rB)
                    // Pattern complexity = 23  cost = 1  size = 0
                    SDNode *Result = Emit_96(N, SPU::EQVr64, MVT::i64);
                    return Result;
                  }
                }

                // Pattern: (or:i64 (and:i64 (xor:i64 R64C:i64:$rB, (imm:i64)<<P:Predicate_immAllOnes>>), (xor:i64 R64C:i64:$rA, (imm:i64)<<P:Predicate_immAllOnes>>)), (and:i64 R64C:i64:$rB, R64C:i64:$rA))
                // Emits: (EQVr64:i64 R64C:i64:$rA, R64C:i64:$rB)
                // Pattern complexity = 23  cost = 1  size = 0
                if (N000 == N10) {
                  SDValue N11 = N1.getOperand(1);
                  if (N010 == N11) {
                    SDNode *Result = Emit_96(N, SPU::EQVr64, MVT::i64);
                    return Result;
                  }
                }
              }
            }
          }
        }
      }
      {
        SDValue N01 = N0.getOperand(1);
        {
          SDValue N1 = N.getOperand(1);

          // Pattern: (or:i64 (and:i64 R64C:i64:$rB, R64C:i64:$rC), (and:i64 R64C:i64:$rA, (xor:i64 R64C:i64:$rC, (imm:i64)<<P:Predicate_immAllOnes>>)))
          // Emits: (SELBr64:i64 R64C:i64:$rA, R64C:i64:$rB, R64C:i64:$rC)
          // Pattern complexity = 16  cost = 1  size = 0
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);
            SDValue N11 = N1.getOperand(1);
            if (N11.getOpcode() == ISD::XOR) {
              SDValue N110 = N11.getOperand(0);
              if (N01 == N110) {
                SDValue N111 = N11.getOperand(1);
                if (N111.getOpcode() == ISD::Constant &&
                    Predicate_immAllOnes(N111.getNode())) {
                  SDNode *Result = Emit_84(N, SPU::SELBr64, MVT::i64);
                  return Result;
                }
              }
            }
          }

          // Pattern: (or:i64 (and:i64 R64C:i64:$rA, R64C:i64:$rB), (xor:i64 (or:i64 R64C:i64:$rA, R64C:i64:$rB), (imm:i64)<<P:Predicate_immAllOnes>>))
          // Emits: (EQVr64_2:i64 R64C:i64:$rA, R64C:i64:$rB)
          // Pattern complexity = 16  cost = 1  size = 0
          if (N1.getOpcode() == ISD::XOR) {
            SDValue N10 = N1.getOperand(0);
            if (N10.getOpcode() == ISD::OR) {
              SDValue N100 = N10.getOperand(0);
              if (N00 == N100) {
                SDValue N101 = N10.getOperand(1);
                if (N01 == N101) {
                  SDValue N11 = N1.getOperand(1);
                  if (N11.getOpcode() == ISD::Constant &&
                      Predicate_immAllOnes(N11.getNode())) {
                    SDNode *Result = Emit_86(N, SPU::EQVr64_2, MVT::i64);
                    return Result;
                  }
                }
              }
            }
          }
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);

            // Pattern: (or:i64 (and:i64 R64C:i64:$rB, R64C:i64:$rC), (and:i64 (xor:i64 R64C:i64:$rC, (imm:i64)<<P:Predicate_immAllOnes>>), R64C:i64:$rA))
            // Emits: (SELBr64:i64 R64C:i64:$rA, R64C:i64:$rB, R64C:i64:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N10.getOpcode() == ISD::XOR) {
              SDValue N100 = N10.getOperand(0);
              if (N01 == N100) {
                SDValue N101 = N10.getOperand(1);
                if (N101.getOpcode() == ISD::Constant &&
                    Predicate_immAllOnes(N101.getNode())) {
                  SDNode *Result = Emit_87(N, SPU::SELBr64, MVT::i64);
                  return Result;
                }
              }
            }

            // Pattern: (or:i64 (and:i64 R64C:i64:$rC, R64C:i64:$rB), (and:i64 R64C:i64:$rA, (xor:i64 R64C:i64:$rC, (imm:i64)<<P:Predicate_immAllOnes>>)))
            // Emits: (SELBr64:i64 R64C:i64:$rA, R64C:i64:$rB, R64C:i64:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            {
              SDValue N11 = N1.getOperand(1);
              if (N11.getOpcode() == ISD::XOR) {
                SDValue N110 = N11.getOperand(0);
                if (N00 == N110) {
                  SDValue N111 = N11.getOperand(1);
                  if (N111.getOpcode() == ISD::Constant &&
                      Predicate_immAllOnes(N111.getNode())) {
                    SDNode *Result = Emit_88(N, SPU::SELBr64, MVT::i64);
                    return Result;
                  }
                }
              }
            }

            // Pattern: (or:i64 (and:i64 R64C:i64:$rC, R64C:i64:$rB), (and:i64 (xor:i64 R64C:i64:$rC, (imm:i64)<<P:Predicate_immAllOnes>>), R64C:i64:$rA))
            // Emits: (SELBr64:i64 R64C:i64:$rA, R64C:i64:$rB, R64C:i64:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N10.getOpcode() == ISD::XOR) {
              SDValue N100 = N10.getOperand(0);
              if (N00 == N100) {
                SDValue N101 = N10.getOperand(1);
                if (N101.getOpcode() == ISD::Constant &&
                    Predicate_immAllOnes(N101.getNode())) {
                  SDNode *Result = Emit_89(N, SPU::SELBr64, MVT::i64);
                  return Result;
                }
              }
            }
          }
        }
        if (N01.getOpcode() == ISD::XOR) {
          SDValue N010 = N01.getOperand(0);
          SDValue N011 = N01.getOperand(1);
          if (N011.getOpcode() == ISD::Constant &&
              Predicate_immAllOnes(N011.getNode())) {
            SDValue N1 = N.getOperand(1);
            if (N1.getOpcode() == ISD::AND) {
              SDValue N10 = N1.getOperand(0);

              // Pattern: (or:i64 (and:i64 R64C:i64:$rA, (xor:i64 R64C:i64:$rC, (imm:i64)<<P:Predicate_immAllOnes>>)), (and:i64 R64C:i64:$rB, R64C:i64:$rC))
              // Emits: (SELBr64:i64 R64C:i64:$rA, R64C:i64:$rB, R64C:i64:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              {
                SDValue N11 = N1.getOperand(1);
                if (N010 == N11) {
                  SDNode *Result = Emit_90(N, SPU::SELBr64, MVT::i64);
                  return Result;
                }
              }

              // Pattern: (or:i64 (and:i64 R64C:i64:$rA, (xor:i64 R64C:i64:$rC, (imm:i64)<<P:Predicate_immAllOnes>>)), (and:i64 R64C:i64:$rC, R64C:i64:$rB))
              // Emits: (SELBr64:i64 R64C:i64:$rA, R64C:i64:$rB, R64C:i64:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              if (N010 == N10) {
                SDNode *Result = Emit_91(N, SPU::SELBr64, MVT::i64);
                return Result;
              }
            }
          }
        }
      }
      if (N00.getOpcode() == ISD::XOR) {
        SDValue N000 = N00.getOperand(0);
        SDValue N001 = N00.getOperand(1);
        if (N001.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N001.getNode())) {
          SDValue N01 = N0.getOperand(1);
          SDValue N1 = N.getOperand(1);
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);

            // Pattern: (or:i64 (and:i64 (xor:i64 R64C:i64:$rC, (imm:i64)<<P:Predicate_immAllOnes>>), R64C:i64:$rA), (and:i64 R64C:i64:$rB, R64C:i64:$rC))
            // Emits: (SELBr64:i64 R64C:i64:$rA, R64C:i64:$rB, R64C:i64:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            {
              SDValue N11 = N1.getOperand(1);
              if (N000 == N11) {
                SDNode *Result = Emit_92(N, SPU::SELBr64, MVT::i64);
                return Result;
              }
            }

            // Pattern: (or:i64 (and:i64 (xor:i64 R64C:i64:$rC, (imm:i64)<<P:Predicate_immAllOnes>>), R64C:i64:$rA), (and:i64 R64C:i64:$rC, R64C:i64:$rB))
            // Emits: (SELBr64:i64 R64C:i64:$rA, R64C:i64:$rB, R64C:i64:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N000 == N10) {
              SDNode *Result = Emit_93(N, SPU::SELBr64, MVT::i64);
              return Result;
            }
          }
        }
      }
      SDValue N01 = N0.getOperand(1);
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);
        if (N10.getOpcode() == ISD::OR) {
          SDValue N100 = N10.getOperand(0);
          if (N01 == N100) {
            SDValue N101 = N10.getOperand(1);
            if (N00 == N101) {
              SDValue N11 = N1.getOperand(1);
              if (N11.getOpcode() == ISD::Constant &&
                  Predicate_immAllOnes(N11.getNode())) {

                // Pattern: (or:i64 (and:i64 R64C:i64:$rA, R64C:i64:$rB), (xor:i64 (or:i64 R64C:i64:$rB, R64C:i64:$rA), (imm:i64)<<P:Predicate_immAllOnes>>))
                // Emits: (EQVr64_2:i64 R64C:i64:$rA, R64C:i64:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                {
                  SDNode *Result = Emit_86(N, SPU::EQVr64_2, MVT::i64);
                  return Result;
                }

                // Pattern: (or:i64 (and:i64 R64C:i64:$rB, R64C:i64:$rA), (xor:i64 (or:i64 R64C:i64:$rA, R64C:i64:$rB), (imm:i64)<<P:Predicate_immAllOnes>>))
                // Emits: (EQVr64_2:i64 R64C:i64:$rA, R64C:i64:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                SDNode *Result = Emit_97(N, SPU::EQVr64_2, MVT::i64);
                return Result;
              }
            }
          }

          // Pattern: (or:i64 (and:i64 R64C:i64:$rB, R64C:i64:$rA), (xor:i64 (or:i64 R64C:i64:$rB, R64C:i64:$rA), (imm:i64)<<P:Predicate_immAllOnes>>))
          // Emits: (EQVr64_2:i64 R64C:i64:$rA, R64C:i64:$rB)
          // Pattern complexity = 16  cost = 1  size = 0
          if (N00 == N100) {
            SDValue N101 = N10.getOperand(1);
            if (N01 == N101) {
              SDValue N11 = N1.getOperand(1);
              if (N11.getOpcode() == ISD::Constant &&
                  Predicate_immAllOnes(N11.getNode())) {
                SDNode *Result = Emit_97(N, SPU::EQVr64_2, MVT::i64);
                return Result;
              }
            }
          }
        }
      }
    }
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);
      if (N00.getOpcode() == ISD::OR) {
        SDValue N000 = N00.getOperand(0);
        SDValue N001 = N00.getOperand(1);
        SDValue N01 = N0.getOperand(1);
        if (N01.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N01.getNode())) {
          SDValue N1 = N.getOperand(1);
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);

            // Pattern: (or:i64 (xor:i64 (or:i64 R64C:i64:$rA, R64C:i64:$rB), (imm:i64)<<P:Predicate_immAllOnes>>), (and:i64 R64C:i64:$rA, R64C:i64:$rB))
            // Emits: (EQVr64_2:i64 R64C:i64:$rA, R64C:i64:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N000 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N001 == N11) {
                SDNode *Result = Emit_98(N, SPU::EQVr64_2, MVT::i64);
                return Result;
              }
            }
            if (N001 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N000 == N11) {

                // Pattern: (or:i64 (xor:i64 (or:i64 R64C:i64:$rA, R64C:i64:$rB), (imm:i64)<<P:Predicate_immAllOnes>>), (and:i64 R64C:i64:$rB, R64C:i64:$rA))
                // Emits: (EQVr64_2:i64 R64C:i64:$rA, R64C:i64:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                {
                  SDNode *Result = Emit_98(N, SPU::EQVr64_2, MVT::i64);
                  return Result;
                }

                // Pattern: (or:i64 (xor:i64 (or:i64 R64C:i64:$rB, R64C:i64:$rA), (imm:i64)<<P:Predicate_immAllOnes>>), (and:i64 R64C:i64:$rA, R64C:i64:$rB))
                // Emits: (EQVr64_2:i64 R64C:i64:$rA, R64C:i64:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                SDNode *Result = Emit_99(N, SPU::EQVr64_2, MVT::i64);
                return Result;
              }
            }

            // Pattern: (or:i64 (xor:i64 (or:i64 R64C:i64:$rB, R64C:i64:$rA), (imm:i64)<<P:Predicate_immAllOnes>>), (and:i64 R64C:i64:$rB, R64C:i64:$rA))
            // Emits: (EQVr64_2:i64 R64C:i64:$rA, R64C:i64:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N000 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N001 == N11) {
                SDNode *Result = Emit_99(N, SPU::EQVr64_2, MVT::i64);
                return Result;
              }
            }
          }
        }
      }
    }

    // Pattern: (or:i64 R64C:i64:$rA, (xor:i64 R64C:i64:$rB, (imm:i64)<<P:Predicate_immAllOnes>>))
    // Emits: (ORCr64:i64 R64C:i64:$rA, R64C:i64:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);
        SDValue N11 = N1.getOperand(1);
        if (N11.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N11.getNode())) {
          SDNode *Result = Emit_14(N, SPU::ORCr64, MVT::i64);
          return Result;
        }
      }
    }

    // Pattern: (or:i64 (xor:i64 R64C:i64:$rB, (imm:i64)<<P:Predicate_immAllOnes>>), R64C:i64:$rA)
    // Emits: (ORCr64:i64 R64C:i64:$rA, R64C:i64:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);
      if (N01.getOpcode() == ISD::Constant &&
          Predicate_immAllOnes(N01.getNode())) {
        SDNode *Result = Emit_16(N, SPU::ORCr64, MVT::i64);
        return Result;
      }
    }
  }

  // Pattern: (or:i64 R64C:i64:$rA, R64C:i64:$rB)
  // Emits: (ORr64:i64 R64C:i64:$rA, R64C:i64:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::ORr64, MVT::i64);
  return Result;
}

SDNode *Select_ISD_OR_i128(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);
    if (N0.getOpcode() == ISD::AND) {
      SDValue N00 = N0.getOperand(0);
      {
        SDValue N01 = N0.getOperand(1);
        SDValue N1 = N.getOperand(1);
        if (N1.getOpcode() == ISD::AND) {
          SDValue N10 = N1.getOperand(0);
          if (N10.getOpcode() == ISD::XOR) {
            SDValue N100 = N10.getOperand(0);

            // Pattern: (or:i128 (and:i128 GPRC:i128:$rA, GPRC:i128:$rB), (and:i128 (xor:i128 GPRC:i128:$rA, (imm:i128)<<P:Predicate_immAllOnes>>), (xor:i128 GPRC:i128:$rB, (imm:i128)<<P:Predicate_immAllOnes>>)))
            // Emits: (EQVr128:i128 GPRC:i128:$rA, GPRC:i128:$rB)
            // Pattern complexity = 23  cost = 1  size = 0
            if (N00 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::Constant &&
                  Predicate_immAllOnes(N101.getNode())) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);
                  if (N01 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::Constant &&
                        Predicate_immAllOnes(N111.getNode())) {
                      SDNode *Result = Emit_85(N, SPU::EQVr128, MVT::i128);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N01 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::Constant &&
                  Predicate_immAllOnes(N101.getNode())) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);
                  if (N00 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::Constant &&
                        Predicate_immAllOnes(N111.getNode())) {

                      // Pattern: (or:i128 (and:i128 GPRC:i128:$rA, GPRC:i128:$rB), (and:i128 (xor:i128 GPRC:i128:$rB, (imm:i128)<<P:Predicate_immAllOnes>>), (xor:i128 GPRC:i128:$rA, (imm:i128)<<P:Predicate_immAllOnes>>)))
                      // Emits: (EQVr128:i128 GPRC:i128:$rA, GPRC:i128:$rB)
                      // Pattern complexity = 23  cost = 1  size = 0
                      {
                        SDNode *Result = Emit_85(N, SPU::EQVr128, MVT::i128);
                        return Result;
                      }

                      // Pattern: (or:i128 (and:i128 GPRC:i128:$rB, GPRC:i128:$rA), (and:i128 (xor:i128 GPRC:i128:$rA, (imm:i128)<<P:Predicate_immAllOnes>>), (xor:i128 GPRC:i128:$rB, (imm:i128)<<P:Predicate_immAllOnes>>)))
                      // Emits: (EQVr128:i128 GPRC:i128:$rA, GPRC:i128:$rB)
                      // Pattern complexity = 23  cost = 1  size = 0
                      SDNode *Result = Emit_94(N, SPU::EQVr128, MVT::i128);
                      return Result;
                    }
                  }
                }
              }
            }

            // Pattern: (or:i128 (and:i128 GPRC:i128:$rB, GPRC:i128:$rA), (and:i128 (xor:i128 GPRC:i128:$rB, (imm:i128)<<P:Predicate_immAllOnes>>), (xor:i128 GPRC:i128:$rA, (imm:i128)<<P:Predicate_immAllOnes>>)))
            // Emits: (EQVr128:i128 GPRC:i128:$rA, GPRC:i128:$rB)
            // Pattern complexity = 23  cost = 1  size = 0
            if (N00 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::Constant &&
                  Predicate_immAllOnes(N101.getNode())) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);
                  if (N01 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::Constant &&
                        Predicate_immAllOnes(N111.getNode())) {
                      SDNode *Result = Emit_94(N, SPU::EQVr128, MVT::i128);
                      return Result;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (N00.getOpcode() == ISD::XOR) {
        SDValue N000 = N00.getOperand(0);
        SDValue N001 = N00.getOperand(1);
        if (N001.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N001.getNode())) {
          SDValue N01 = N0.getOperand(1);
          if (N01.getOpcode() == ISD::XOR) {
            SDValue N010 = N01.getOperand(0);
            SDValue N011 = N01.getOperand(1);
            if (N011.getOpcode() == ISD::Constant &&
                Predicate_immAllOnes(N011.getNode())) {
              SDValue N1 = N.getOperand(1);
              if (N1.getOpcode() == ISD::AND) {
                SDValue N10 = N1.getOperand(0);

                // Pattern: (or:i128 (and:i128 (xor:i128 GPRC:i128:$rA, (imm:i128)<<P:Predicate_immAllOnes>>), (xor:i128 GPRC:i128:$rB, (imm:i128)<<P:Predicate_immAllOnes>>)), (and:i128 GPRC:i128:$rA, GPRC:i128:$rB))
                // Emits: (EQVr128:i128 GPRC:i128:$rA, GPRC:i128:$rB)
                // Pattern complexity = 23  cost = 1  size = 0
                if (N000 == N10) {
                  SDValue N11 = N1.getOperand(1);
                  if (N010 == N11) {
                    SDNode *Result = Emit_95(N, SPU::EQVr128, MVT::i128);
                    return Result;
                  }
                }
                if (N010 == N10) {
                  SDValue N11 = N1.getOperand(1);
                  if (N000 == N11) {

                    // Pattern: (or:i128 (and:i128 (xor:i128 GPRC:i128:$rA, (imm:i128)<<P:Predicate_immAllOnes>>), (xor:i128 GPRC:i128:$rB, (imm:i128)<<P:Predicate_immAllOnes>>)), (and:i128 GPRC:i128:$rB, GPRC:i128:$rA))
                    // Emits: (EQVr128:i128 GPRC:i128:$rA, GPRC:i128:$rB)
                    // Pattern complexity = 23  cost = 1  size = 0
                    {
                      SDNode *Result = Emit_95(N, SPU::EQVr128, MVT::i128);
                      return Result;
                    }

                    // Pattern: (or:i128 (and:i128 (xor:i128 GPRC:i128:$rB, (imm:i128)<<P:Predicate_immAllOnes>>), (xor:i128 GPRC:i128:$rA, (imm:i128)<<P:Predicate_immAllOnes>>)), (and:i128 GPRC:i128:$rA, GPRC:i128:$rB))
                    // Emits: (EQVr128:i128 GPRC:i128:$rA, GPRC:i128:$rB)
                    // Pattern complexity = 23  cost = 1  size = 0
                    SDNode *Result = Emit_96(N, SPU::EQVr128, MVT::i128);
                    return Result;
                  }
                }

                // Pattern: (or:i128 (and:i128 (xor:i128 GPRC:i128:$rB, (imm:i128)<<P:Predicate_immAllOnes>>), (xor:i128 GPRC:i128:$rA, (imm:i128)<<P:Predicate_immAllOnes>>)), (and:i128 GPRC:i128:$rB, GPRC:i128:$rA))
                // Emits: (EQVr128:i128 GPRC:i128:$rA, GPRC:i128:$rB)
                // Pattern complexity = 23  cost = 1  size = 0
                if (N000 == N10) {
                  SDValue N11 = N1.getOperand(1);
                  if (N010 == N11) {
                    SDNode *Result = Emit_96(N, SPU::EQVr128, MVT::i128);
                    return Result;
                  }
                }
              }
            }
          }
        }
      }
      {
        SDValue N01 = N0.getOperand(1);
        {
          SDValue N1 = N.getOperand(1);

          // Pattern: (or:i128 (and:i128 GPRC:i128:$rB, GPRC:i128:$rC), (and:i128 GPRC:i128:$rA, (xor:i128 GPRC:i128:$rC, (imm:i128)<<P:Predicate_immAllOnes>>)))
          // Emits: (SELBr128:i128 GPRC:i128:$rA, GPRC:i128:$rB, GPRC:i128:$rC)
          // Pattern complexity = 16  cost = 1  size = 0
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);
            SDValue N11 = N1.getOperand(1);
            if (N11.getOpcode() == ISD::XOR) {
              SDValue N110 = N11.getOperand(0);
              if (N01 == N110) {
                SDValue N111 = N11.getOperand(1);
                if (N111.getOpcode() == ISD::Constant &&
                    Predicate_immAllOnes(N111.getNode())) {
                  SDNode *Result = Emit_84(N, SPU::SELBr128, MVT::i128);
                  return Result;
                }
              }
            }
          }

          // Pattern: (or:i128 (and:i128 GPRC:i128:$rA, GPRC:i128:$rB), (xor:i128 (or:i128 GPRC:i128:$rA, GPRC:i128:$rB), (imm:i128)<<P:Predicate_immAllOnes>>))
          // Emits: (EQVr128_2:i128 GPRC:i128:$rA, GPRC:i128:$rB)
          // Pattern complexity = 16  cost = 1  size = 0
          if (N1.getOpcode() == ISD::XOR) {
            SDValue N10 = N1.getOperand(0);
            if (N10.getOpcode() == ISD::OR) {
              SDValue N100 = N10.getOperand(0);
              if (N00 == N100) {
                SDValue N101 = N10.getOperand(1);
                if (N01 == N101) {
                  SDValue N11 = N1.getOperand(1);
                  if (N11.getOpcode() == ISD::Constant &&
                      Predicate_immAllOnes(N11.getNode())) {
                    SDNode *Result = Emit_86(N, SPU::EQVr128_2, MVT::i128);
                    return Result;
                  }
                }
              }
            }
          }
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);

            // Pattern: (or:i128 (and:i128 GPRC:i128:$rB, GPRC:i128:$rC), (and:i128 (xor:i128 GPRC:i128:$rC, (imm:i128)<<P:Predicate_immAllOnes>>), GPRC:i128:$rA))
            // Emits: (SELBr128:i128 GPRC:i128:$rA, GPRC:i128:$rB, GPRC:i128:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N10.getOpcode() == ISD::XOR) {
              SDValue N100 = N10.getOperand(0);
              if (N01 == N100) {
                SDValue N101 = N10.getOperand(1);
                if (N101.getOpcode() == ISD::Constant &&
                    Predicate_immAllOnes(N101.getNode())) {
                  SDNode *Result = Emit_87(N, SPU::SELBr128, MVT::i128);
                  return Result;
                }
              }
            }

            // Pattern: (or:i128 (and:i128 GPRC:i128:$rC, GPRC:i128:$rB), (and:i128 GPRC:i128:$rA, (xor:i128 GPRC:i128:$rC, (imm:i128)<<P:Predicate_immAllOnes>>)))
            // Emits: (SELBr128:i128 GPRC:i128:$rA, GPRC:i128:$rB, GPRC:i128:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            {
              SDValue N11 = N1.getOperand(1);
              if (N11.getOpcode() == ISD::XOR) {
                SDValue N110 = N11.getOperand(0);
                if (N00 == N110) {
                  SDValue N111 = N11.getOperand(1);
                  if (N111.getOpcode() == ISD::Constant &&
                      Predicate_immAllOnes(N111.getNode())) {
                    SDNode *Result = Emit_88(N, SPU::SELBr128, MVT::i128);
                    return Result;
                  }
                }
              }
            }

            // Pattern: (or:i128 (and:i128 GPRC:i128:$rC, GPRC:i128:$rB), (and:i128 (xor:i128 GPRC:i128:$rC, (imm:i128)<<P:Predicate_immAllOnes>>), GPRC:i128:$rA))
            // Emits: (SELBr128:i128 GPRC:i128:$rA, GPRC:i128:$rB, GPRC:i128:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N10.getOpcode() == ISD::XOR) {
              SDValue N100 = N10.getOperand(0);
              if (N00 == N100) {
                SDValue N101 = N10.getOperand(1);
                if (N101.getOpcode() == ISD::Constant &&
                    Predicate_immAllOnes(N101.getNode())) {
                  SDNode *Result = Emit_89(N, SPU::SELBr128, MVT::i128);
                  return Result;
                }
              }
            }
          }
        }
        if (N01.getOpcode() == ISD::XOR) {
          SDValue N010 = N01.getOperand(0);
          SDValue N011 = N01.getOperand(1);
          if (N011.getOpcode() == ISD::Constant &&
              Predicate_immAllOnes(N011.getNode())) {
            SDValue N1 = N.getOperand(1);
            if (N1.getOpcode() == ISD::AND) {
              SDValue N10 = N1.getOperand(0);

              // Pattern: (or:i128 (and:i128 GPRC:i128:$rA, (xor:i128 GPRC:i128:$rC, (imm:i128)<<P:Predicate_immAllOnes>>)), (and:i128 GPRC:i128:$rB, GPRC:i128:$rC))
              // Emits: (SELBr128:i128 GPRC:i128:$rA, GPRC:i128:$rB, GPRC:i128:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              {
                SDValue N11 = N1.getOperand(1);
                if (N010 == N11) {
                  SDNode *Result = Emit_90(N, SPU::SELBr128, MVT::i128);
                  return Result;
                }
              }

              // Pattern: (or:i128 (and:i128 GPRC:i128:$rA, (xor:i128 GPRC:i128:$rC, (imm:i128)<<P:Predicate_immAllOnes>>)), (and:i128 GPRC:i128:$rC, GPRC:i128:$rB))
              // Emits: (SELBr128:i128 GPRC:i128:$rA, GPRC:i128:$rB, GPRC:i128:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              if (N010 == N10) {
                SDNode *Result = Emit_91(N, SPU::SELBr128, MVT::i128);
                return Result;
              }
            }
          }
        }
      }
      if (N00.getOpcode() == ISD::XOR) {
        SDValue N000 = N00.getOperand(0);
        SDValue N001 = N00.getOperand(1);
        if (N001.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N001.getNode())) {
          SDValue N01 = N0.getOperand(1);
          SDValue N1 = N.getOperand(1);
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);

            // Pattern: (or:i128 (and:i128 (xor:i128 GPRC:i128:$rC, (imm:i128)<<P:Predicate_immAllOnes>>), GPRC:i128:$rA), (and:i128 GPRC:i128:$rB, GPRC:i128:$rC))
            // Emits: (SELBr128:i128 GPRC:i128:$rA, GPRC:i128:$rB, GPRC:i128:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            {
              SDValue N11 = N1.getOperand(1);
              if (N000 == N11) {
                SDNode *Result = Emit_92(N, SPU::SELBr128, MVT::i128);
                return Result;
              }
            }

            // Pattern: (or:i128 (and:i128 (xor:i128 GPRC:i128:$rC, (imm:i128)<<P:Predicate_immAllOnes>>), GPRC:i128:$rA), (and:i128 GPRC:i128:$rC, GPRC:i128:$rB))
            // Emits: (SELBr128:i128 GPRC:i128:$rA, GPRC:i128:$rB, GPRC:i128:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N000 == N10) {
              SDNode *Result = Emit_93(N, SPU::SELBr128, MVT::i128);
              return Result;
            }
          }
        }
      }
      SDValue N01 = N0.getOperand(1);
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);
        if (N10.getOpcode() == ISD::OR) {
          SDValue N100 = N10.getOperand(0);
          if (N01 == N100) {
            SDValue N101 = N10.getOperand(1);
            if (N00 == N101) {
              SDValue N11 = N1.getOperand(1);
              if (N11.getOpcode() == ISD::Constant &&
                  Predicate_immAllOnes(N11.getNode())) {

                // Pattern: (or:i128 (and:i128 GPRC:i128:$rA, GPRC:i128:$rB), (xor:i128 (or:i128 GPRC:i128:$rB, GPRC:i128:$rA), (imm:i128)<<P:Predicate_immAllOnes>>))
                // Emits: (EQVr128_2:i128 GPRC:i128:$rA, GPRC:i128:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                {
                  SDNode *Result = Emit_86(N, SPU::EQVr128_2, MVT::i128);
                  return Result;
                }

                // Pattern: (or:i128 (and:i128 GPRC:i128:$rB, GPRC:i128:$rA), (xor:i128 (or:i128 GPRC:i128:$rA, GPRC:i128:$rB), (imm:i128)<<P:Predicate_immAllOnes>>))
                // Emits: (EQVr128_2:i128 GPRC:i128:$rA, GPRC:i128:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                SDNode *Result = Emit_97(N, SPU::EQVr128_2, MVT::i128);
                return Result;
              }
            }
          }

          // Pattern: (or:i128 (and:i128 GPRC:i128:$rB, GPRC:i128:$rA), (xor:i128 (or:i128 GPRC:i128:$rB, GPRC:i128:$rA), (imm:i128)<<P:Predicate_immAllOnes>>))
          // Emits: (EQVr128_2:i128 GPRC:i128:$rA, GPRC:i128:$rB)
          // Pattern complexity = 16  cost = 1  size = 0
          if (N00 == N100) {
            SDValue N101 = N10.getOperand(1);
            if (N01 == N101) {
              SDValue N11 = N1.getOperand(1);
              if (N11.getOpcode() == ISD::Constant &&
                  Predicate_immAllOnes(N11.getNode())) {
                SDNode *Result = Emit_97(N, SPU::EQVr128_2, MVT::i128);
                return Result;
              }
            }
          }
        }
      }
    }
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);
      if (N00.getOpcode() == ISD::OR) {
        SDValue N000 = N00.getOperand(0);
        SDValue N001 = N00.getOperand(1);
        SDValue N01 = N0.getOperand(1);
        if (N01.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N01.getNode())) {
          SDValue N1 = N.getOperand(1);
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);

            // Pattern: (or:i128 (xor:i128 (or:i128 GPRC:i128:$rA, GPRC:i128:$rB), (imm:i128)<<P:Predicate_immAllOnes>>), (and:i128 GPRC:i128:$rA, GPRC:i128:$rB))
            // Emits: (EQVr128_2:i128 GPRC:i128:$rA, GPRC:i128:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N000 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N001 == N11) {
                SDNode *Result = Emit_98(N, SPU::EQVr128_2, MVT::i128);
                return Result;
              }
            }
            if (N001 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N000 == N11) {

                // Pattern: (or:i128 (xor:i128 (or:i128 GPRC:i128:$rA, GPRC:i128:$rB), (imm:i128)<<P:Predicate_immAllOnes>>), (and:i128 GPRC:i128:$rB, GPRC:i128:$rA))
                // Emits: (EQVr128_2:i128 GPRC:i128:$rA, GPRC:i128:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                {
                  SDNode *Result = Emit_98(N, SPU::EQVr128_2, MVT::i128);
                  return Result;
                }

                // Pattern: (or:i128 (xor:i128 (or:i128 GPRC:i128:$rB, GPRC:i128:$rA), (imm:i128)<<P:Predicate_immAllOnes>>), (and:i128 GPRC:i128:$rA, GPRC:i128:$rB))
                // Emits: (EQVr128_2:i128 GPRC:i128:$rA, GPRC:i128:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                SDNode *Result = Emit_99(N, SPU::EQVr128_2, MVT::i128);
                return Result;
              }
            }

            // Pattern: (or:i128 (xor:i128 (or:i128 GPRC:i128:$rB, GPRC:i128:$rA), (imm:i128)<<P:Predicate_immAllOnes>>), (and:i128 GPRC:i128:$rB, GPRC:i128:$rA))
            // Emits: (EQVr128_2:i128 GPRC:i128:$rA, GPRC:i128:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N000 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N001 == N11) {
                SDNode *Result = Emit_99(N, SPU::EQVr128_2, MVT::i128);
                return Result;
              }
            }
          }
        }
      }
    }
  }

  // Pattern: (or:i128 GPRC:i128:$rA, GPRC:i128:$rB)
  // Emits: (ORr128:i128 GPRC:i128:$rA, GPRC:i128:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::ORr128, MVT::i128);
  return Result;
}

SDNode *Emit_100(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N000 = N00.getOperand(0);
  SDValue N001 = N00.getOperand(1);
  SDValue N01 = N0.getOperand(1);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N01, N11, N001);
}
SDNode *Emit_101(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N000 = N00.getOperand(0);
  SDValue N001 = N00.getOperand(1);
  SDValue N01 = N0.getOperand(1);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N01, N10, N001);
}
SDNode *Emit_102(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N010 = N01.getOperand(0);
  SDValue N011 = N01.getOperand(1);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N00, N11, N011);
}
SDNode *Emit_103(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N010 = N01.getOperand(0);
  SDValue N011 = N01.getOperand(1);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N00, N10, N011);
}
SDNode *Emit_104(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N000 = N00.getOperand(0);
  SDValue N001 = N00.getOperand(1);
  SDValue N01 = N0.getOperand(1);
  SDValue N010 = N01.getOperand(0);
  SDValue N011 = N01.getOperand(1);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N000, N011);
}
SDNode *Emit_105(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N000 = N00.getOperand(0);
  SDValue N001 = N00.getOperand(1);
  SDValue N01 = N0.getOperand(1);
  SDValue N010 = N01.getOperand(0);
  SDValue N011 = N01.getOperand(1);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N001, N010);
}
SDNode *Emit_106(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N000 = N00.getOperand(0);
  SDValue N001 = N00.getOperand(1);
  SDValue N01 = N0.getOperand(1);
  SDValue N010 = N01.getOperand(0);
  SDValue N011 = N01.getOperand(1);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N001, N011);
}
SDNode *Emit_107(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N000 = N00.getOperand(0);
  SDValue N001 = N00.getOperand(1);
  SDValue N01 = N0.getOperand(1);
  SDValue N010 = N01.getOperand(0);
  SDValue N011 = N01.getOperand(1);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N011, N000);
}
SDNode *Emit_108(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N000 = N00.getOperand(0);
  SDValue N001 = N00.getOperand(1);
  SDValue N01 = N0.getOperand(1);
  SDValue N010 = N01.getOperand(0);
  SDValue N011 = N01.getOperand(1);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N010, N001);
}
SDNode *Emit_109(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N000 = N00.getOperand(0);
  SDValue N001 = N00.getOperand(1);
  SDValue N01 = N0.getOperand(1);
  SDValue N010 = N01.getOperand(0);
  SDValue N011 = N01.getOperand(1);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N011, N001);
}
SDNode *Emit_110(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  SDValue N110 = N11.getOperand(0);
  SDValue N111 = N11.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N00, N01);
}
SDNode *Emit_111(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  SDValue N110 = N11.getOperand(0);
  SDValue N111 = N11.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N01, N00);
}
SDNode *Emit_112(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N010 = N01.getOperand(0);
  SDValue N011 = N01.getOperand(1);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N010, N011);
}
SDNode *Emit_113(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N010 = N01.getOperand(0);
  SDValue N011 = N01.getOperand(1);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N011, N010);
}
SDNode *Select_ISD_OR_v16i8(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);
    if (N0.getOpcode() == ISD::AND) {
      SDValue N00 = N0.getOperand(0);
      {
        SDValue N01 = N0.getOperand(1);
        SDValue N1 = N.getOperand(1);
        if (N1.getOpcode() == ISD::AND) {
          SDValue N10 = N1.getOperand(0);
          if (N10.getOpcode() == ISD::XOR) {
            SDValue N100 = N10.getOperand(0);
            if (N00 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N101.getNode())) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB), (and:v16i8 (xor:v16i8 VECREG:v16i8:$rA, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>), (xor:v16i8 VECREG:v16i8:$rB, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N01 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_85(N, SPU::EQVv16i8, MVT::v16i8);
                      return Result;
                    }
                  }

                  // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB), (and:v16i8 (xor:v16i8 VECREG:v16i8:$rA, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>), (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rB)))
                  // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N01 == N111) {
                      SDNode *Result = Emit_85(N, SPU::EQVv16i8, MVT::v16i8);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N100.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N100.getNode())) {
              SDValue N101 = N10.getOperand(1);
              if (N00 == N101) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB), (and:v16i8 (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rA), (xor:v16i8 VECREG:v16i8:$rB, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N01 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_85(N, SPU::EQVv16i8, MVT::v16i8);
                      return Result;
                    }
                  }

                  // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB), (and:v16i8 (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rA), (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rB)))
                  // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N01 == N111) {
                      SDNode *Result = Emit_85(N, SPU::EQVv16i8, MVT::v16i8);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N01 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N101.getNode())) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB), (and:v16i8 (xor:v16i8 VECREG:v16i8:$rB, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>), (xor:v16i8 VECREG:v16i8:$rA, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N00 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_85(N, SPU::EQVv16i8, MVT::v16i8);
                      return Result;
                    }
                  }

                  // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB), (and:v16i8 (xor:v16i8 VECREG:v16i8:$rB, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>), (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rA)))
                  // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N00 == N111) {
                      SDNode *Result = Emit_85(N, SPU::EQVv16i8, MVT::v16i8);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N100.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N100.getNode())) {
              SDValue N101 = N10.getOperand(1);
              if (N01 == N101) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB), (and:v16i8 (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rB), (xor:v16i8 VECREG:v16i8:$rA, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N00 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_85(N, SPU::EQVv16i8, MVT::v16i8);
                      return Result;
                    }
                  }

                  // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB), (and:v16i8 (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rB), (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rA)))
                  // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N00 == N111) {
                      SDNode *Result = Emit_85(N, SPU::EQVv16i8, MVT::v16i8);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N01 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N101.getNode())) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA), (and:v16i8 (xor:v16i8 VECREG:v16i8:$rA, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>), (xor:v16i8 VECREG:v16i8:$rB, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N00 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_94(N, SPU::EQVv16i8, MVT::v16i8);
                      return Result;
                    }
                  }

                  // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA), (and:v16i8 (xor:v16i8 VECREG:v16i8:$rA, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>), (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rB)))
                  // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N00 == N111) {
                      SDNode *Result = Emit_94(N, SPU::EQVv16i8, MVT::v16i8);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N100.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N100.getNode())) {
              SDValue N101 = N10.getOperand(1);
              if (N01 == N101) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA), (and:v16i8 (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rA), (xor:v16i8 VECREG:v16i8:$rB, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N00 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_94(N, SPU::EQVv16i8, MVT::v16i8);
                      return Result;
                    }
                  }

                  // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA), (and:v16i8 (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rA), (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rB)))
                  // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N00 == N111) {
                      SDNode *Result = Emit_94(N, SPU::EQVv16i8, MVT::v16i8);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N00 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N101.getNode())) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA), (and:v16i8 (xor:v16i8 VECREG:v16i8:$rB, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>), (xor:v16i8 VECREG:v16i8:$rA, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N01 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_94(N, SPU::EQVv16i8, MVT::v16i8);
                      return Result;
                    }
                  }

                  // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA), (and:v16i8 (xor:v16i8 VECREG:v16i8:$rB, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>), (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rA)))
                  // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N01 == N111) {
                      SDNode *Result = Emit_94(N, SPU::EQVv16i8, MVT::v16i8);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N100.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N100.getNode())) {
              SDValue N101 = N10.getOperand(1);
              if (N00 == N101) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA), (and:v16i8 (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rB), (xor:v16i8 VECREG:v16i8:$rA, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N01 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_94(N, SPU::EQVv16i8, MVT::v16i8);
                      return Result;
                    }
                  }

                  // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA), (and:v16i8 (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rB), (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rA)))
                  // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N01 == N111) {
                      SDNode *Result = Emit_94(N, SPU::EQVv16i8, MVT::v16i8);
                      return Result;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (N00.getOpcode() == ISD::XOR) {
        SDValue N000 = N00.getOperand(0);
        {
          SDValue N001 = N00.getOperand(1);
          if (N001.getOpcode() == ISD::BUILD_VECTOR &&
              Predicate_immAllOnesV(N001.getNode())) {
            SDValue N01 = N0.getOperand(1);
            if (N01.getOpcode() == ISD::XOR) {
              SDValue N010 = N01.getOperand(0);
              {
                SDValue N011 = N01.getOperand(1);
                if (N011.getOpcode() == ISD::BUILD_VECTOR &&
                    Predicate_immAllOnesV(N011.getNode())) {
                  SDValue N1 = N.getOperand(1);
                  if (N1.getOpcode() == ISD::AND) {
                    SDValue N10 = N1.getOperand(0);

                    // Pattern: (or:v16i8 (and:v16i8 (xor:v16i8 VECREG:v16i8:$rA, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>), (xor:v16i8 VECREG:v16i8:$rB, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>)), (and:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB))
                    // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                    // Pattern complexity = 23  cost = 1  size = 0
                    if (N000 == N10) {
                      SDValue N11 = N1.getOperand(1);
                      if (N010 == N11) {
                        SDNode *Result = Emit_95(N, SPU::EQVv16i8, MVT::v16i8);
                        return Result;
                      }
                    }

                    // Pattern: (or:v16i8 (and:v16i8 (xor:v16i8 VECREG:v16i8:$rA, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>), (xor:v16i8 VECREG:v16i8:$rB, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>)), (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA))
                    // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                    // Pattern complexity = 23  cost = 1  size = 0
                    if (N010 == N10) {
                      SDValue N11 = N1.getOperand(1);
                      if (N000 == N11) {
                        SDNode *Result = Emit_95(N, SPU::EQVv16i8, MVT::v16i8);
                        return Result;
                      }
                    }
                  }
                }
              }
              if (N010.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N010.getNode())) {
                SDValue N011 = N01.getOperand(1);
                SDValue N1 = N.getOperand(1);
                if (N1.getOpcode() == ISD::AND) {
                  SDValue N10 = N1.getOperand(0);

                  // Pattern: (or:v16i8 (and:v16i8 (xor:v16i8 VECREG:v16i8:$rA, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>), (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rB)), (and:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB))
                  // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N000 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N011 == N11) {
                      SDNode *Result = Emit_104(N, SPU::EQVv16i8, MVT::v16i8);
                      return Result;
                    }
                  }

                  // Pattern: (or:v16i8 (and:v16i8 (xor:v16i8 VECREG:v16i8:$rA, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>), (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rB)), (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA))
                  // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N011 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N000 == N11) {
                      SDNode *Result = Emit_104(N, SPU::EQVv16i8, MVT::v16i8);
                      return Result;
                    }
                  }
                }
              }
            }
          }
        }
        if (N000.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N000.getNode())) {
          SDValue N001 = N00.getOperand(1);
          SDValue N01 = N0.getOperand(1);
          if (N01.getOpcode() == ISD::XOR) {
            SDValue N010 = N01.getOperand(0);
            {
              SDValue N011 = N01.getOperand(1);
              if (N011.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N011.getNode())) {
                SDValue N1 = N.getOperand(1);
                if (N1.getOpcode() == ISD::AND) {
                  SDValue N10 = N1.getOperand(0);

                  // Pattern: (or:v16i8 (and:v16i8 (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rA), (xor:v16i8 VECREG:v16i8:$rB, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>)), (and:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB))
                  // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N001 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N010 == N11) {
                      SDNode *Result = Emit_105(N, SPU::EQVv16i8, MVT::v16i8);
                      return Result;
                    }
                  }

                  // Pattern: (or:v16i8 (and:v16i8 (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rA), (xor:v16i8 VECREG:v16i8:$rB, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>)), (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA))
                  // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N010 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N001 == N11) {
                      SDNode *Result = Emit_105(N, SPU::EQVv16i8, MVT::v16i8);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N010.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N010.getNode())) {
              SDValue N011 = N01.getOperand(1);
              SDValue N1 = N.getOperand(1);
              if (N1.getOpcode() == ISD::AND) {
                SDValue N10 = N1.getOperand(0);

                // Pattern: (or:v16i8 (and:v16i8 (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rA), (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rB)), (and:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB))
                // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                // Pattern complexity = 23  cost = 1  size = 0
                if (N001 == N10) {
                  SDValue N11 = N1.getOperand(1);
                  if (N011 == N11) {
                    SDNode *Result = Emit_106(N, SPU::EQVv16i8, MVT::v16i8);
                    return Result;
                  }
                }

                // Pattern: (or:v16i8 (and:v16i8 (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rA), (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rB)), (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA))
                // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                // Pattern complexity = 23  cost = 1  size = 0
                if (N011 == N10) {
                  SDValue N11 = N1.getOperand(1);
                  if (N001 == N11) {
                    SDNode *Result = Emit_106(N, SPU::EQVv16i8, MVT::v16i8);
                    return Result;
                  }
                }
              }
            }
          }
        }
        {
          SDValue N001 = N00.getOperand(1);
          if (N001.getOpcode() == ISD::BUILD_VECTOR &&
              Predicate_immAllOnesV(N001.getNode())) {
            SDValue N01 = N0.getOperand(1);
            if (N01.getOpcode() == ISD::XOR) {
              SDValue N010 = N01.getOperand(0);
              {
                SDValue N011 = N01.getOperand(1);
                if (N011.getOpcode() == ISD::BUILD_VECTOR &&
                    Predicate_immAllOnesV(N011.getNode())) {
                  SDValue N1 = N.getOperand(1);
                  if (N1.getOpcode() == ISD::AND) {
                    SDValue N10 = N1.getOperand(0);

                    // Pattern: (or:v16i8 (and:v16i8 (xor:v16i8 VECREG:v16i8:$rB, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>), (xor:v16i8 VECREG:v16i8:$rA, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>)), (and:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB))
                    // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                    // Pattern complexity = 23  cost = 1  size = 0
                    if (N010 == N10) {
                      SDValue N11 = N1.getOperand(1);
                      if (N000 == N11) {
                        SDNode *Result = Emit_96(N, SPU::EQVv16i8, MVT::v16i8);
                        return Result;
                      }
                    }

                    // Pattern: (or:v16i8 (and:v16i8 (xor:v16i8 VECREG:v16i8:$rB, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>), (xor:v16i8 VECREG:v16i8:$rA, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>)), (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA))
                    // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                    // Pattern complexity = 23  cost = 1  size = 0
                    if (N000 == N10) {
                      SDValue N11 = N1.getOperand(1);
                      if (N010 == N11) {
                        SDNode *Result = Emit_96(N, SPU::EQVv16i8, MVT::v16i8);
                        return Result;
                      }
                    }
                  }
                }
              }
              if (N010.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N010.getNode())) {
                SDValue N011 = N01.getOperand(1);
                SDValue N1 = N.getOperand(1);
                if (N1.getOpcode() == ISD::AND) {
                  SDValue N10 = N1.getOperand(0);

                  // Pattern: (or:v16i8 (and:v16i8 (xor:v16i8 VECREG:v16i8:$rB, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>), (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rA)), (and:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB))
                  // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N011 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N000 == N11) {
                      SDNode *Result = Emit_107(N, SPU::EQVv16i8, MVT::v16i8);
                      return Result;
                    }
                  }

                  // Pattern: (or:v16i8 (and:v16i8 (xor:v16i8 VECREG:v16i8:$rB, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>), (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rA)), (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA))
                  // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N000 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N011 == N11) {
                      SDNode *Result = Emit_107(N, SPU::EQVv16i8, MVT::v16i8);
                      return Result;
                    }
                  }
                }
              }
            }
          }
        }
        if (N000.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N000.getNode())) {
          SDValue N001 = N00.getOperand(1);
          SDValue N01 = N0.getOperand(1);
          if (N01.getOpcode() == ISD::XOR) {
            SDValue N010 = N01.getOperand(0);
            {
              SDValue N011 = N01.getOperand(1);
              if (N011.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N011.getNode())) {
                SDValue N1 = N.getOperand(1);
                if (N1.getOpcode() == ISD::AND) {
                  SDValue N10 = N1.getOperand(0);

                  // Pattern: (or:v16i8 (and:v16i8 (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rB), (xor:v16i8 VECREG:v16i8:$rA, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>)), (and:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB))
                  // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N010 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N001 == N11) {
                      SDNode *Result = Emit_108(N, SPU::EQVv16i8, MVT::v16i8);
                      return Result;
                    }
                  }

                  // Pattern: (or:v16i8 (and:v16i8 (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rB), (xor:v16i8 VECREG:v16i8:$rA, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>)), (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA))
                  // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N001 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N010 == N11) {
                      SDNode *Result = Emit_108(N, SPU::EQVv16i8, MVT::v16i8);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N010.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N010.getNode())) {
              SDValue N011 = N01.getOperand(1);
              SDValue N1 = N.getOperand(1);
              if (N1.getOpcode() == ISD::AND) {
                SDValue N10 = N1.getOperand(0);

                // Pattern: (or:v16i8 (and:v16i8 (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rB), (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rA)), (and:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB))
                // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                // Pattern complexity = 23  cost = 1  size = 0
                if (N011 == N10) {
                  SDValue N11 = N1.getOperand(1);
                  if (N001 == N11) {
                    SDNode *Result = Emit_109(N, SPU::EQVv16i8, MVT::v16i8);
                    return Result;
                  }
                }

                // Pattern: (or:v16i8 (and:v16i8 (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rB), (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rA)), (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA))
                // Emits: (EQVv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                // Pattern complexity = 23  cost = 1  size = 0
                if (N001 == N10) {
                  SDValue N11 = N1.getOperand(1);
                  if (N011 == N11) {
                    SDNode *Result = Emit_109(N, SPU::EQVv16i8, MVT::v16i8);
                    return Result;
                  }
                }
              }
            }
          }
        }
      }
      {
        SDValue N01 = N0.getOperand(1);
        SDValue N1 = N.getOperand(1);

        // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rC, VECREG:v16i8:$rB), (and:v16i8 (xor:v16i8 VECREG:v16i8:$rC, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>), VECREG:v16i8:$rA))
        // Emits: (SELBv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB, VECREG:v16i8:$rC)
        // Pattern complexity = 16  cost = 1  size = 0
        if (N1.getOpcode() == ISD::AND) {
          SDValue N10 = N1.getOperand(0);
          if (N10.getOpcode() == ISD::XOR) {
            SDValue N100 = N10.getOperand(0);
            if (N00 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N101.getNode())) {
                SDNode *Result = Emit_89(N, SPU::SELBv16i8, MVT::v16i8);
                return Result;
              }
            }
          }
        }

        // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB), (xor:v16i8 (or:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB), (build_vector:v16i8)<<P:Predicate_immAllOnesV>>))
        // Emits: (EQVv16i8_2:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
        // Pattern complexity = 16  cost = 1  size = 0
        if (N1.getOpcode() == ISD::XOR) {
          SDValue N10 = N1.getOperand(0);
          if (N10.getOpcode() == ISD::OR) {
            SDValue N100 = N10.getOperand(0);
            if (N00 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N01 == N101) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::BUILD_VECTOR &&
                    Predicate_immAllOnesV(N11.getNode())) {
                  SDNode *Result = Emit_86(N, SPU::EQVv16i8_2, MVT::v16i8);
                  return Result;
                }
              }
            }
          }
        }
        if (N1.getOpcode() == ISD::AND) {
          SDValue N10 = N1.getOperand(0);

          // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rC, VECREG:v16i8:$rB), (and:v16i8 (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rC), VECREG:v16i8:$rA))
          // Emits: (SELBv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB, VECREG:v16i8:$rC)
          // Pattern complexity = 16  cost = 1  size = 0
          if (N10.getOpcode() == ISD::XOR) {
            SDValue N100 = N10.getOperand(0);
            if (N100.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N100.getNode())) {
              SDValue N101 = N10.getOperand(1);
              if (N00 == N101) {
                SDNode *Result = Emit_89(N, SPU::SELBv16i8, MVT::v16i8);
                return Result;
              }
            }
          }
          {
            SDValue N11 = N1.getOperand(1);
            if (N11.getOpcode() == ISD::XOR) {
              SDValue N110 = N11.getOperand(0);

              // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rC, VECREG:v16i8:$rB), (and:v16i8 VECREG:v16i8:$rA, (xor:v16i8 VECREG:v16i8:$rC, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>)))
              // Emits: (SELBv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB, VECREG:v16i8:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              if (N00 == N110) {
                SDValue N111 = N11.getOperand(1);
                if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                    Predicate_immAllOnesV(N111.getNode())) {
                  SDNode *Result = Emit_88(N, SPU::SELBv16i8, MVT::v16i8);
                  return Result;
                }
              }

              // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rC, VECREG:v16i8:$rB), (and:v16i8 VECREG:v16i8:$rA, (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rC)))
              // Emits: (SELBv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB, VECREG:v16i8:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N110.getNode())) {
                SDValue N111 = N11.getOperand(1);
                if (N00 == N111) {
                  SDNode *Result = Emit_88(N, SPU::SELBv16i8, MVT::v16i8);
                  return Result;
                }
              }
            }
          }
          if (N10.getOpcode() == ISD::XOR) {
            SDValue N100 = N10.getOperand(0);

            // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rC), (and:v16i8 (xor:v16i8 VECREG:v16i8:$rC, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>), VECREG:v16i8:$rA))
            // Emits: (SELBv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB, VECREG:v16i8:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N01 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N101.getNode())) {
                SDNode *Result = Emit_87(N, SPU::SELBv16i8, MVT::v16i8);
                return Result;
              }
            }

            // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rC), (and:v16i8 (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rC), VECREG:v16i8:$rA))
            // Emits: (SELBv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB, VECREG:v16i8:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N100.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N100.getNode())) {
              SDValue N101 = N10.getOperand(1);
              if (N01 == N101) {
                SDNode *Result = Emit_87(N, SPU::SELBv16i8, MVT::v16i8);
                return Result;
              }
            }
          }
          SDValue N11 = N1.getOperand(1);
          if (N11.getOpcode() == ISD::XOR) {
            SDValue N110 = N11.getOperand(0);

            // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rC), (and:v16i8 VECREG:v16i8:$rA, (xor:v16i8 VECREG:v16i8:$rC, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>)))
            // Emits: (SELBv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB, VECREG:v16i8:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N01 == N110) {
              SDValue N111 = N11.getOperand(1);
              if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N111.getNode())) {
                SDNode *Result = Emit_84(N, SPU::SELBv16i8, MVT::v16i8);
                return Result;
              }
            }

            // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rC), (and:v16i8 VECREG:v16i8:$rA, (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rC)))
            // Emits: (SELBv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB, VECREG:v16i8:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N110.getNode())) {
              SDValue N111 = N11.getOperand(1);
              if (N01 == N111) {
                SDNode *Result = Emit_84(N, SPU::SELBv16i8, MVT::v16i8);
                return Result;
              }
            }
          }
        }
      }
      if (N00.getOpcode() == ISD::XOR) {
        SDValue N000 = N00.getOperand(0);
        {
          SDValue N001 = N00.getOperand(1);
          if (N001.getOpcode() == ISD::BUILD_VECTOR &&
              Predicate_immAllOnesV(N001.getNode())) {
            SDValue N01 = N0.getOperand(1);
            SDValue N1 = N.getOperand(1);
            if (N1.getOpcode() == ISD::AND) {
              SDValue N10 = N1.getOperand(0);

              // Pattern: (or:v16i8 (and:v16i8 (xor:v16i8 VECREG:v16i8:$rC, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>), VECREG:v16i8:$rA), (and:v16i8 VECREG:v16i8:$rC, VECREG:v16i8:$rB))
              // Emits: (SELBv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB, VECREG:v16i8:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              if (N000 == N10) {
                SDNode *Result = Emit_93(N, SPU::SELBv16i8, MVT::v16i8);
                return Result;
              }

              // Pattern: (or:v16i8 (and:v16i8 (xor:v16i8 VECREG:v16i8:$rC, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>), VECREG:v16i8:$rA), (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rC))
              // Emits: (SELBv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB, VECREG:v16i8:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              SDValue N11 = N1.getOperand(1);
              if (N000 == N11) {
                SDNode *Result = Emit_92(N, SPU::SELBv16i8, MVT::v16i8);
                return Result;
              }
            }
          }
        }
        if (N000.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N000.getNode())) {
          SDValue N001 = N00.getOperand(1);
          SDValue N01 = N0.getOperand(1);
          SDValue N1 = N.getOperand(1);
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);

            // Pattern: (or:v16i8 (and:v16i8 (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rC), VECREG:v16i8:$rA), (and:v16i8 VECREG:v16i8:$rC, VECREG:v16i8:$rB))
            // Emits: (SELBv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB, VECREG:v16i8:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N001 == N10) {
              SDNode *Result = Emit_100(N, SPU::SELBv16i8, MVT::v16i8);
              return Result;
            }

            // Pattern: (or:v16i8 (and:v16i8 (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rC), VECREG:v16i8:$rA), (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rC))
            // Emits: (SELBv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB, VECREG:v16i8:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            SDValue N11 = N1.getOperand(1);
            if (N001 == N11) {
              SDNode *Result = Emit_101(N, SPU::SELBv16i8, MVT::v16i8);
              return Result;
            }
          }
        }
      }
      SDValue N01 = N0.getOperand(1);
      if (N01.getOpcode() == ISD::XOR) {
        SDValue N010 = N01.getOperand(0);
        {
          SDValue N011 = N01.getOperand(1);
          if (N011.getOpcode() == ISD::BUILD_VECTOR &&
              Predicate_immAllOnesV(N011.getNode())) {
            SDValue N1 = N.getOperand(1);
            if (N1.getOpcode() == ISD::AND) {
              SDValue N10 = N1.getOperand(0);

              // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rA, (xor:v16i8 VECREG:v16i8:$rC, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>)), (and:v16i8 VECREG:v16i8:$rC, VECREG:v16i8:$rB))
              // Emits: (SELBv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB, VECREG:v16i8:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              if (N010 == N10) {
                SDNode *Result = Emit_91(N, SPU::SELBv16i8, MVT::v16i8);
                return Result;
              }

              // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rA, (xor:v16i8 VECREG:v16i8:$rC, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>)), (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rC))
              // Emits: (SELBv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB, VECREG:v16i8:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              SDValue N11 = N1.getOperand(1);
              if (N010 == N11) {
                SDNode *Result = Emit_90(N, SPU::SELBv16i8, MVT::v16i8);
                return Result;
              }
            }
          }
        }
        if (N010.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N010.getNode())) {
          SDValue N011 = N01.getOperand(1);
          SDValue N1 = N.getOperand(1);
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);

            // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rA, (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rC)), (and:v16i8 VECREG:v16i8:$rC, VECREG:v16i8:$rB))
            // Emits: (SELBv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB, VECREG:v16i8:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N011 == N10) {
              SDNode *Result = Emit_102(N, SPU::SELBv16i8, MVT::v16i8);
              return Result;
            }

            // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rA, (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rC)), (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rC))
            // Emits: (SELBv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB, VECREG:v16i8:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            SDValue N11 = N1.getOperand(1);
            if (N011 == N11) {
              SDNode *Result = Emit_103(N, SPU::SELBv16i8, MVT::v16i8);
              return Result;
            }
          }
        }
      }
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);

        // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB), (xor:v16i8 (or:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA), (build_vector:v16i8)<<P:Predicate_immAllOnesV>>))
        // Emits: (EQVv16i8_2:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
        // Pattern complexity = 16  cost = 1  size = 0
        if (N10.getOpcode() == ISD::OR) {
          SDValue N100 = N10.getOperand(0);
          if (N01 == N100) {
            SDValue N101 = N10.getOperand(1);
            if (N00 == N101) {
              SDValue N11 = N1.getOperand(1);
              if (N11.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N11.getNode())) {
                SDNode *Result = Emit_86(N, SPU::EQVv16i8_2, MVT::v16i8);
                return Result;
              }
            }
          }
        }
        if (N10.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N10.getNode())) {
          SDValue N11 = N1.getOperand(1);
          if (N11.getOpcode() == ISD::OR) {
            SDValue N110 = N11.getOperand(0);

            // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB), (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, (or:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)))
            // Emits: (EQVv16i8_2:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N00 == N110) {
              SDValue N111 = N11.getOperand(1);
              if (N01 == N111) {
                SDNode *Result = Emit_110(N, SPU::EQVv16i8_2, MVT::v16i8);
                return Result;
              }
            }

            // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB), (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, (or:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA)))
            // Emits: (EQVv16i8_2:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N01 == N110) {
              SDValue N111 = N11.getOperand(1);
              if (N00 == N111) {
                SDNode *Result = Emit_110(N, SPU::EQVv16i8_2, MVT::v16i8);
                return Result;
              }
            }
          }
        }
        if (N10.getOpcode() == ISD::OR) {
          SDValue N100 = N10.getOperand(0);

          // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA), (xor:v16i8 (or:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB), (build_vector:v16i8)<<P:Predicate_immAllOnesV>>))
          // Emits: (EQVv16i8_2:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
          // Pattern complexity = 16  cost = 1  size = 0
          if (N01 == N100) {
            SDValue N101 = N10.getOperand(1);
            if (N00 == N101) {
              SDValue N11 = N1.getOperand(1);
              if (N11.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N11.getNode())) {
                SDNode *Result = Emit_97(N, SPU::EQVv16i8_2, MVT::v16i8);
                return Result;
              }
            }
          }

          // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA), (xor:v16i8 (or:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA), (build_vector:v16i8)<<P:Predicate_immAllOnesV>>))
          // Emits: (EQVv16i8_2:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
          // Pattern complexity = 16  cost = 1  size = 0
          if (N00 == N100) {
            SDValue N101 = N10.getOperand(1);
            if (N01 == N101) {
              SDValue N11 = N1.getOperand(1);
              if (N11.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N11.getNode())) {
                SDNode *Result = Emit_97(N, SPU::EQVv16i8_2, MVT::v16i8);
                return Result;
              }
            }
          }
        }
        if (N10.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N10.getNode())) {
          SDValue N11 = N1.getOperand(1);
          if (N11.getOpcode() == ISD::OR) {
            SDValue N110 = N11.getOperand(0);

            // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA), (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, (or:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)))
            // Emits: (EQVv16i8_2:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N01 == N110) {
              SDValue N111 = N11.getOperand(1);
              if (N00 == N111) {
                SDNode *Result = Emit_111(N, SPU::EQVv16i8_2, MVT::v16i8);
                return Result;
              }
            }

            // Pattern: (or:v16i8 (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA), (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, (or:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA)))
            // Emits: (EQVv16i8_2:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N00 == N110) {
              SDValue N111 = N11.getOperand(1);
              if (N01 == N111) {
                SDNode *Result = Emit_111(N, SPU::EQVv16i8_2, MVT::v16i8);
                return Result;
              }
            }
          }
        }
      }
    }
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);
      if (N00.getOpcode() == ISD::OR) {
        SDValue N000 = N00.getOperand(0);
        SDValue N001 = N00.getOperand(1);
        SDValue N01 = N0.getOperand(1);
        if (N01.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N01.getNode())) {
          SDValue N1 = N.getOperand(1);
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);

            // Pattern: (or:v16i8 (xor:v16i8 (or:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB), (build_vector:v16i8)<<P:Predicate_immAllOnesV>>), (and:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB))
            // Emits: (EQVv16i8_2:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N000 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N001 == N11) {
                SDNode *Result = Emit_98(N, SPU::EQVv16i8_2, MVT::v16i8);
                return Result;
              }
            }
            if (N001 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N000 == N11) {

                // Pattern: (or:v16i8 (xor:v16i8 (or:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB), (build_vector:v16i8)<<P:Predicate_immAllOnesV>>), (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA))
                // Emits: (EQVv16i8_2:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                {
                  SDNode *Result = Emit_98(N, SPU::EQVv16i8_2, MVT::v16i8);
                  return Result;
                }

                // Pattern: (or:v16i8 (xor:v16i8 (or:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA), (build_vector:v16i8)<<P:Predicate_immAllOnesV>>), (and:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB))
                // Emits: (EQVv16i8_2:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                SDNode *Result = Emit_99(N, SPU::EQVv16i8_2, MVT::v16i8);
                return Result;
              }
            }

            // Pattern: (or:v16i8 (xor:v16i8 (or:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA), (build_vector:v16i8)<<P:Predicate_immAllOnesV>>), (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA))
            // Emits: (EQVv16i8_2:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N000 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N001 == N11) {
                SDNode *Result = Emit_99(N, SPU::EQVv16i8_2, MVT::v16i8);
                return Result;
              }
            }
          }
        }
      }
      if (N00.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_immAllOnesV(N00.getNode())) {
        SDValue N01 = N0.getOperand(1);
        if (N01.getOpcode() == ISD::OR) {
          SDValue N010 = N01.getOperand(0);
          SDValue N011 = N01.getOperand(1);
          SDValue N1 = N.getOperand(1);
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);

            // Pattern: (or:v16i8 (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, (or:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)), (and:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB))
            // Emits: (EQVv16i8_2:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N010 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N011 == N11) {
                SDNode *Result = Emit_112(N, SPU::EQVv16i8_2, MVT::v16i8);
                return Result;
              }
            }
            if (N011 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N010 == N11) {

                // Pattern: (or:v16i8 (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, (or:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)), (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA))
                // Emits: (EQVv16i8_2:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                {
                  SDNode *Result = Emit_112(N, SPU::EQVv16i8_2, MVT::v16i8);
                  return Result;
                }

                // Pattern: (or:v16i8 (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, (or:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA)), (and:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB))
                // Emits: (EQVv16i8_2:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                SDNode *Result = Emit_113(N, SPU::EQVv16i8_2, MVT::v16i8);
                return Result;
              }
            }

            // Pattern: (or:v16i8 (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, (or:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA)), (and:v16i8 VECREG:v16i8:$rB, VECREG:v16i8:$rA))
            // Emits: (EQVv16i8_2:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N010 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N011 == N11) {
                SDNode *Result = Emit_113(N, SPU::EQVv16i8_2, MVT::v16i8);
                return Result;
              }
            }
          }
        }
      }
    }
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);

        // Pattern: (or:v16i8 VECREG:v16i8:$rA, (xor:v16i8 VECREG:v16i8:$rB, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>))
        // Emits: (ORCv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
        // Pattern complexity = 10  cost = 1  size = 0
        {
          SDValue N11 = N1.getOperand(1);
          if (N11.getOpcode() == ISD::BUILD_VECTOR &&
              Predicate_immAllOnesV(N11.getNode())) {
            SDNode *Result = Emit_14(N, SPU::ORCv16i8, MVT::v16i8);
            return Result;
          }
        }

        // Pattern: (or:v16i8 VECREG:v16i8:$rA, (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rB))
        // Emits: (ORCv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
        // Pattern complexity = 10  cost = 1  size = 0
        if (N10.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N10.getNode())) {
          SDNode *Result = Emit_22(N, SPU::ORCv16i8, MVT::v16i8);
          return Result;
        }
      }
    }
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);

      // Pattern: (or:v16i8 (xor:v16i8 VECREG:v16i8:$rB, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>), VECREG:v16i8:$rA)
      // Emits: (ORCv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      {
        SDValue N01 = N0.getOperand(1);
        if (N01.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N01.getNode())) {
          SDNode *Result = Emit_16(N, SPU::ORCv16i8, MVT::v16i8);
          return Result;
        }
      }

      // Pattern: (or:v16i8 (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rB), VECREG:v16i8:$rA)
      // Emits: (ORCv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      if (N00.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_immAllOnesV(N00.getNode())) {
        SDNode *Result = Emit_23(N, SPU::ORCv16i8, MVT::v16i8);
        return Result;
      }
    }

    // Pattern: (or:v16i8 VECREG:v16i8:$rA, (build_vector:v16i8)<<P:Predicate_v16i8U8Imm>><<X:v16i8U8Imm_xform>>:$val)
    // Emits: (ORBIv16i8:v16i8 VECREG:v16i8:$rA, (v16i8U8Imm_xform:i16 (build_vector:v16i8):$val))
    // Pattern complexity = 7  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_v16i8U8Imm(N1.getNode())) {
        SDNode *Result = Emit_21(N, SPU::ORBIv16i8, MVT::v16i8);
        return Result;
      }
    }

    // Pattern: (or:v16i8 (build_vector:v16i8)<<P:Predicate_v16i8U8Imm>><<X:v16i8U8Imm_xform>>:$val, VECREG:v16i8:$rA)
    // Emits: (ORBIv16i8:v16i8 VECREG:v16i8:$rA, (v16i8U8Imm_xform:i16 (build_vector:v16i8):$val))
    // Pattern complexity = 7  cost = 1  size = 0
    if (N0.getOpcode() == ISD::BUILD_VECTOR &&
        Predicate_v16i8U8Imm(N0.getNode())) {
      SDNode *Result = Emit_24(N, SPU::ORBIv16i8, MVT::v16i8);
      return Result;
    }
  }

  // Pattern: (or:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
  // Emits: (ORv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::ORv16i8, MVT::v16i8);
  return Result;
}

SDNode *Emit_114(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue Tmp2 = Transform_v8i16Uns10Imm_xform(N1.getNode());
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N0, Tmp2);
}
SDNode *Emit_115(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue Tmp2 = Transform_v8i16Uns10Imm_xform(N0.getNode());
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N1, Tmp2);
}
SDNode *Select_ISD_OR_v8i16(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);
    if (N0.getOpcode() == ISD::AND) {
      SDValue N00 = N0.getOperand(0);
      {
        SDValue N01 = N0.getOperand(1);
        SDValue N1 = N.getOperand(1);
        if (N1.getOpcode() == ISD::AND) {
          SDValue N10 = N1.getOperand(0);
          if (N10.getOpcode() == ISD::XOR) {
            SDValue N100 = N10.getOperand(0);
            if (N00 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N101.getNode())) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB), (and:v8i16 (xor:v8i16 VECREG:v8i16:$rA, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>), (xor:v8i16 VECREG:v8i16:$rB, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N01 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_85(N, SPU::EQVv8i16, MVT::v8i16);
                      return Result;
                    }
                  }

                  // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB), (and:v8i16 (xor:v8i16 VECREG:v8i16:$rA, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>), (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rB)))
                  // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N01 == N111) {
                      SDNode *Result = Emit_85(N, SPU::EQVv8i16, MVT::v8i16);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N100.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N100.getNode())) {
              SDValue N101 = N10.getOperand(1);
              if (N00 == N101) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB), (and:v8i16 (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rA), (xor:v8i16 VECREG:v8i16:$rB, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N01 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_85(N, SPU::EQVv8i16, MVT::v8i16);
                      return Result;
                    }
                  }

                  // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB), (and:v8i16 (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rA), (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rB)))
                  // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N01 == N111) {
                      SDNode *Result = Emit_85(N, SPU::EQVv8i16, MVT::v8i16);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N01 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N101.getNode())) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB), (and:v8i16 (xor:v8i16 VECREG:v8i16:$rB, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>), (xor:v8i16 VECREG:v8i16:$rA, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N00 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_85(N, SPU::EQVv8i16, MVT::v8i16);
                      return Result;
                    }
                  }

                  // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB), (and:v8i16 (xor:v8i16 VECREG:v8i16:$rB, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>), (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rA)))
                  // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N00 == N111) {
                      SDNode *Result = Emit_85(N, SPU::EQVv8i16, MVT::v8i16);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N100.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N100.getNode())) {
              SDValue N101 = N10.getOperand(1);
              if (N01 == N101) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB), (and:v8i16 (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rB), (xor:v8i16 VECREG:v8i16:$rA, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N00 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_85(N, SPU::EQVv8i16, MVT::v8i16);
                      return Result;
                    }
                  }

                  // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB), (and:v8i16 (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rB), (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rA)))
                  // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N00 == N111) {
                      SDNode *Result = Emit_85(N, SPU::EQVv8i16, MVT::v8i16);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N01 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N101.getNode())) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA), (and:v8i16 (xor:v8i16 VECREG:v8i16:$rA, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>), (xor:v8i16 VECREG:v8i16:$rB, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N00 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_94(N, SPU::EQVv8i16, MVT::v8i16);
                      return Result;
                    }
                  }

                  // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA), (and:v8i16 (xor:v8i16 VECREG:v8i16:$rA, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>), (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rB)))
                  // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N00 == N111) {
                      SDNode *Result = Emit_94(N, SPU::EQVv8i16, MVT::v8i16);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N100.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N100.getNode())) {
              SDValue N101 = N10.getOperand(1);
              if (N01 == N101) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA), (and:v8i16 (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rA), (xor:v8i16 VECREG:v8i16:$rB, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N00 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_94(N, SPU::EQVv8i16, MVT::v8i16);
                      return Result;
                    }
                  }

                  // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA), (and:v8i16 (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rA), (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rB)))
                  // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N00 == N111) {
                      SDNode *Result = Emit_94(N, SPU::EQVv8i16, MVT::v8i16);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N00 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N101.getNode())) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA), (and:v8i16 (xor:v8i16 VECREG:v8i16:$rB, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>), (xor:v8i16 VECREG:v8i16:$rA, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N01 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_94(N, SPU::EQVv8i16, MVT::v8i16);
                      return Result;
                    }
                  }

                  // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA), (and:v8i16 (xor:v8i16 VECREG:v8i16:$rB, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>), (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rA)))
                  // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N01 == N111) {
                      SDNode *Result = Emit_94(N, SPU::EQVv8i16, MVT::v8i16);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N100.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N100.getNode())) {
              SDValue N101 = N10.getOperand(1);
              if (N00 == N101) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA), (and:v8i16 (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rB), (xor:v8i16 VECREG:v8i16:$rA, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N01 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_94(N, SPU::EQVv8i16, MVT::v8i16);
                      return Result;
                    }
                  }

                  // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA), (and:v8i16 (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rB), (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rA)))
                  // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N01 == N111) {
                      SDNode *Result = Emit_94(N, SPU::EQVv8i16, MVT::v8i16);
                      return Result;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (N00.getOpcode() == ISD::XOR) {
        SDValue N000 = N00.getOperand(0);
        {
          SDValue N001 = N00.getOperand(1);
          if (N001.getOpcode() == ISD::BUILD_VECTOR &&
              Predicate_immAllOnesV(N001.getNode())) {
            SDValue N01 = N0.getOperand(1);
            if (N01.getOpcode() == ISD::XOR) {
              SDValue N010 = N01.getOperand(0);
              {
                SDValue N011 = N01.getOperand(1);
                if (N011.getOpcode() == ISD::BUILD_VECTOR &&
                    Predicate_immAllOnesV(N011.getNode())) {
                  SDValue N1 = N.getOperand(1);
                  if (N1.getOpcode() == ISD::AND) {
                    SDValue N10 = N1.getOperand(0);

                    // Pattern: (or:v8i16 (and:v8i16 (xor:v8i16 VECREG:v8i16:$rA, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>), (xor:v8i16 VECREG:v8i16:$rB, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>)), (and:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB))
                    // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                    // Pattern complexity = 23  cost = 1  size = 0
                    if (N000 == N10) {
                      SDValue N11 = N1.getOperand(1);
                      if (N010 == N11) {
                        SDNode *Result = Emit_95(N, SPU::EQVv8i16, MVT::v8i16);
                        return Result;
                      }
                    }

                    // Pattern: (or:v8i16 (and:v8i16 (xor:v8i16 VECREG:v8i16:$rA, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>), (xor:v8i16 VECREG:v8i16:$rB, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>)), (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA))
                    // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                    // Pattern complexity = 23  cost = 1  size = 0
                    if (N010 == N10) {
                      SDValue N11 = N1.getOperand(1);
                      if (N000 == N11) {
                        SDNode *Result = Emit_95(N, SPU::EQVv8i16, MVT::v8i16);
                        return Result;
                      }
                    }
                  }
                }
              }
              if (N010.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N010.getNode())) {
                SDValue N011 = N01.getOperand(1);
                SDValue N1 = N.getOperand(1);
                if (N1.getOpcode() == ISD::AND) {
                  SDValue N10 = N1.getOperand(0);

                  // Pattern: (or:v8i16 (and:v8i16 (xor:v8i16 VECREG:v8i16:$rA, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>), (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rB)), (and:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB))
                  // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N000 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N011 == N11) {
                      SDNode *Result = Emit_104(N, SPU::EQVv8i16, MVT::v8i16);
                      return Result;
                    }
                  }

                  // Pattern: (or:v8i16 (and:v8i16 (xor:v8i16 VECREG:v8i16:$rA, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>), (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rB)), (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA))
                  // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N011 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N000 == N11) {
                      SDNode *Result = Emit_104(N, SPU::EQVv8i16, MVT::v8i16);
                      return Result;
                    }
                  }
                }
              }
            }
          }
        }
        if (N000.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N000.getNode())) {
          SDValue N001 = N00.getOperand(1);
          SDValue N01 = N0.getOperand(1);
          if (N01.getOpcode() == ISD::XOR) {
            SDValue N010 = N01.getOperand(0);
            {
              SDValue N011 = N01.getOperand(1);
              if (N011.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N011.getNode())) {
                SDValue N1 = N.getOperand(1);
                if (N1.getOpcode() == ISD::AND) {
                  SDValue N10 = N1.getOperand(0);

                  // Pattern: (or:v8i16 (and:v8i16 (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rA), (xor:v8i16 VECREG:v8i16:$rB, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>)), (and:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB))
                  // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N001 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N010 == N11) {
                      SDNode *Result = Emit_105(N, SPU::EQVv8i16, MVT::v8i16);
                      return Result;
                    }
                  }

                  // Pattern: (or:v8i16 (and:v8i16 (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rA), (xor:v8i16 VECREG:v8i16:$rB, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>)), (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA))
                  // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N010 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N001 == N11) {
                      SDNode *Result = Emit_105(N, SPU::EQVv8i16, MVT::v8i16);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N010.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N010.getNode())) {
              SDValue N011 = N01.getOperand(1);
              SDValue N1 = N.getOperand(1);
              if (N1.getOpcode() == ISD::AND) {
                SDValue N10 = N1.getOperand(0);

                // Pattern: (or:v8i16 (and:v8i16 (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rA), (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rB)), (and:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB))
                // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                // Pattern complexity = 23  cost = 1  size = 0
                if (N001 == N10) {
                  SDValue N11 = N1.getOperand(1);
                  if (N011 == N11) {
                    SDNode *Result = Emit_106(N, SPU::EQVv8i16, MVT::v8i16);
                    return Result;
                  }
                }

                // Pattern: (or:v8i16 (and:v8i16 (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rA), (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rB)), (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA))
                // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                // Pattern complexity = 23  cost = 1  size = 0
                if (N011 == N10) {
                  SDValue N11 = N1.getOperand(1);
                  if (N001 == N11) {
                    SDNode *Result = Emit_106(N, SPU::EQVv8i16, MVT::v8i16);
                    return Result;
                  }
                }
              }
            }
          }
        }
        {
          SDValue N001 = N00.getOperand(1);
          if (N001.getOpcode() == ISD::BUILD_VECTOR &&
              Predicate_immAllOnesV(N001.getNode())) {
            SDValue N01 = N0.getOperand(1);
            if (N01.getOpcode() == ISD::XOR) {
              SDValue N010 = N01.getOperand(0);
              {
                SDValue N011 = N01.getOperand(1);
                if (N011.getOpcode() == ISD::BUILD_VECTOR &&
                    Predicate_immAllOnesV(N011.getNode())) {
                  SDValue N1 = N.getOperand(1);
                  if (N1.getOpcode() == ISD::AND) {
                    SDValue N10 = N1.getOperand(0);

                    // Pattern: (or:v8i16 (and:v8i16 (xor:v8i16 VECREG:v8i16:$rB, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>), (xor:v8i16 VECREG:v8i16:$rA, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>)), (and:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB))
                    // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                    // Pattern complexity = 23  cost = 1  size = 0
                    if (N010 == N10) {
                      SDValue N11 = N1.getOperand(1);
                      if (N000 == N11) {
                        SDNode *Result = Emit_96(N, SPU::EQVv8i16, MVT::v8i16);
                        return Result;
                      }
                    }

                    // Pattern: (or:v8i16 (and:v8i16 (xor:v8i16 VECREG:v8i16:$rB, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>), (xor:v8i16 VECREG:v8i16:$rA, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>)), (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA))
                    // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                    // Pattern complexity = 23  cost = 1  size = 0
                    if (N000 == N10) {
                      SDValue N11 = N1.getOperand(1);
                      if (N010 == N11) {
                        SDNode *Result = Emit_96(N, SPU::EQVv8i16, MVT::v8i16);
                        return Result;
                      }
                    }
                  }
                }
              }
              if (N010.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N010.getNode())) {
                SDValue N011 = N01.getOperand(1);
                SDValue N1 = N.getOperand(1);
                if (N1.getOpcode() == ISD::AND) {
                  SDValue N10 = N1.getOperand(0);

                  // Pattern: (or:v8i16 (and:v8i16 (xor:v8i16 VECREG:v8i16:$rB, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>), (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rA)), (and:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB))
                  // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N011 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N000 == N11) {
                      SDNode *Result = Emit_107(N, SPU::EQVv8i16, MVT::v8i16);
                      return Result;
                    }
                  }

                  // Pattern: (or:v8i16 (and:v8i16 (xor:v8i16 VECREG:v8i16:$rB, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>), (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rA)), (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA))
                  // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N000 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N011 == N11) {
                      SDNode *Result = Emit_107(N, SPU::EQVv8i16, MVT::v8i16);
                      return Result;
                    }
                  }
                }
              }
            }
          }
        }
        if (N000.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N000.getNode())) {
          SDValue N001 = N00.getOperand(1);
          SDValue N01 = N0.getOperand(1);
          if (N01.getOpcode() == ISD::XOR) {
            SDValue N010 = N01.getOperand(0);
            {
              SDValue N011 = N01.getOperand(1);
              if (N011.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N011.getNode())) {
                SDValue N1 = N.getOperand(1);
                if (N1.getOpcode() == ISD::AND) {
                  SDValue N10 = N1.getOperand(0);

                  // Pattern: (or:v8i16 (and:v8i16 (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rB), (xor:v8i16 VECREG:v8i16:$rA, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>)), (and:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB))
                  // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N010 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N001 == N11) {
                      SDNode *Result = Emit_108(N, SPU::EQVv8i16, MVT::v8i16);
                      return Result;
                    }
                  }

                  // Pattern: (or:v8i16 (and:v8i16 (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rB), (xor:v8i16 VECREG:v8i16:$rA, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>)), (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA))
                  // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N001 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N010 == N11) {
                      SDNode *Result = Emit_108(N, SPU::EQVv8i16, MVT::v8i16);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N010.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N010.getNode())) {
              SDValue N011 = N01.getOperand(1);
              SDValue N1 = N.getOperand(1);
              if (N1.getOpcode() == ISD::AND) {
                SDValue N10 = N1.getOperand(0);

                // Pattern: (or:v8i16 (and:v8i16 (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rB), (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rA)), (and:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB))
                // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                // Pattern complexity = 23  cost = 1  size = 0
                if (N011 == N10) {
                  SDValue N11 = N1.getOperand(1);
                  if (N001 == N11) {
                    SDNode *Result = Emit_109(N, SPU::EQVv8i16, MVT::v8i16);
                    return Result;
                  }
                }

                // Pattern: (or:v8i16 (and:v8i16 (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rB), (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rA)), (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA))
                // Emits: (EQVv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                // Pattern complexity = 23  cost = 1  size = 0
                if (N001 == N10) {
                  SDValue N11 = N1.getOperand(1);
                  if (N011 == N11) {
                    SDNode *Result = Emit_109(N, SPU::EQVv8i16, MVT::v8i16);
                    return Result;
                  }
                }
              }
            }
          }
        }
      }
      {
        SDValue N01 = N0.getOperand(1);
        SDValue N1 = N.getOperand(1);

        // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rC, VECREG:v8i16:$rB), (and:v8i16 (xor:v8i16 VECREG:v8i16:$rC, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>), VECREG:v8i16:$rA))
        // Emits: (SELBv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB, VECREG:v8i16:$rC)
        // Pattern complexity = 16  cost = 1  size = 0
        if (N1.getOpcode() == ISD::AND) {
          SDValue N10 = N1.getOperand(0);
          if (N10.getOpcode() == ISD::XOR) {
            SDValue N100 = N10.getOperand(0);
            if (N00 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N101.getNode())) {
                SDNode *Result = Emit_89(N, SPU::SELBv8i16, MVT::v8i16);
                return Result;
              }
            }
          }
        }

        // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB), (xor:v8i16 (or:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB), (build_vector:v8i16)<<P:Predicate_immAllOnesV>>))
        // Emits: (EQVv8i16_2:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
        // Pattern complexity = 16  cost = 1  size = 0
        if (N1.getOpcode() == ISD::XOR) {
          SDValue N10 = N1.getOperand(0);
          if (N10.getOpcode() == ISD::OR) {
            SDValue N100 = N10.getOperand(0);
            if (N00 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N01 == N101) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::BUILD_VECTOR &&
                    Predicate_immAllOnesV(N11.getNode())) {
                  SDNode *Result = Emit_86(N, SPU::EQVv8i16_2, MVT::v8i16);
                  return Result;
                }
              }
            }
          }
        }
        if (N1.getOpcode() == ISD::AND) {
          SDValue N10 = N1.getOperand(0);

          // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rC, VECREG:v8i16:$rB), (and:v8i16 (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rC), VECREG:v8i16:$rA))
          // Emits: (SELBv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB, VECREG:v8i16:$rC)
          // Pattern complexity = 16  cost = 1  size = 0
          if (N10.getOpcode() == ISD::XOR) {
            SDValue N100 = N10.getOperand(0);
            if (N100.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N100.getNode())) {
              SDValue N101 = N10.getOperand(1);
              if (N00 == N101) {
                SDNode *Result = Emit_89(N, SPU::SELBv8i16, MVT::v8i16);
                return Result;
              }
            }
          }
          {
            SDValue N11 = N1.getOperand(1);
            if (N11.getOpcode() == ISD::XOR) {
              SDValue N110 = N11.getOperand(0);

              // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rC, VECREG:v8i16:$rB), (and:v8i16 VECREG:v8i16:$rA, (xor:v8i16 VECREG:v8i16:$rC, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>)))
              // Emits: (SELBv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB, VECREG:v8i16:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              if (N00 == N110) {
                SDValue N111 = N11.getOperand(1);
                if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                    Predicate_immAllOnesV(N111.getNode())) {
                  SDNode *Result = Emit_88(N, SPU::SELBv8i16, MVT::v8i16);
                  return Result;
                }
              }

              // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rC, VECREG:v8i16:$rB), (and:v8i16 VECREG:v8i16:$rA, (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rC)))
              // Emits: (SELBv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB, VECREG:v8i16:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N110.getNode())) {
                SDValue N111 = N11.getOperand(1);
                if (N00 == N111) {
                  SDNode *Result = Emit_88(N, SPU::SELBv8i16, MVT::v8i16);
                  return Result;
                }
              }
            }
          }
          if (N10.getOpcode() == ISD::XOR) {
            SDValue N100 = N10.getOperand(0);

            // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rC), (and:v8i16 (xor:v8i16 VECREG:v8i16:$rC, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>), VECREG:v8i16:$rA))
            // Emits: (SELBv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB, VECREG:v8i16:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N01 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N101.getNode())) {
                SDNode *Result = Emit_87(N, SPU::SELBv8i16, MVT::v8i16);
                return Result;
              }
            }

            // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rC), (and:v8i16 (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rC), VECREG:v8i16:$rA))
            // Emits: (SELBv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB, VECREG:v8i16:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N100.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N100.getNode())) {
              SDValue N101 = N10.getOperand(1);
              if (N01 == N101) {
                SDNode *Result = Emit_87(N, SPU::SELBv8i16, MVT::v8i16);
                return Result;
              }
            }
          }
          SDValue N11 = N1.getOperand(1);
          if (N11.getOpcode() == ISD::XOR) {
            SDValue N110 = N11.getOperand(0);

            // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rC), (and:v8i16 VECREG:v8i16:$rA, (xor:v8i16 VECREG:v8i16:$rC, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>)))
            // Emits: (SELBv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB, VECREG:v8i16:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N01 == N110) {
              SDValue N111 = N11.getOperand(1);
              if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N111.getNode())) {
                SDNode *Result = Emit_84(N, SPU::SELBv8i16, MVT::v8i16);
                return Result;
              }
            }

            // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rC), (and:v8i16 VECREG:v8i16:$rA, (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rC)))
            // Emits: (SELBv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB, VECREG:v8i16:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N110.getNode())) {
              SDValue N111 = N11.getOperand(1);
              if (N01 == N111) {
                SDNode *Result = Emit_84(N, SPU::SELBv8i16, MVT::v8i16);
                return Result;
              }
            }
          }
        }
      }
      if (N00.getOpcode() == ISD::XOR) {
        SDValue N000 = N00.getOperand(0);
        {
          SDValue N001 = N00.getOperand(1);
          if (N001.getOpcode() == ISD::BUILD_VECTOR &&
              Predicate_immAllOnesV(N001.getNode())) {
            SDValue N01 = N0.getOperand(1);
            SDValue N1 = N.getOperand(1);
            if (N1.getOpcode() == ISD::AND) {
              SDValue N10 = N1.getOperand(0);

              // Pattern: (or:v8i16 (and:v8i16 (xor:v8i16 VECREG:v8i16:$rC, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>), VECREG:v8i16:$rA), (and:v8i16 VECREG:v8i16:$rC, VECREG:v8i16:$rB))
              // Emits: (SELBv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB, VECREG:v8i16:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              if (N000 == N10) {
                SDNode *Result = Emit_93(N, SPU::SELBv8i16, MVT::v8i16);
                return Result;
              }

              // Pattern: (or:v8i16 (and:v8i16 (xor:v8i16 VECREG:v8i16:$rC, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>), VECREG:v8i16:$rA), (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rC))
              // Emits: (SELBv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB, VECREG:v8i16:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              SDValue N11 = N1.getOperand(1);
              if (N000 == N11) {
                SDNode *Result = Emit_92(N, SPU::SELBv8i16, MVT::v8i16);
                return Result;
              }
            }
          }
        }
        if (N000.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N000.getNode())) {
          SDValue N001 = N00.getOperand(1);
          SDValue N01 = N0.getOperand(1);
          SDValue N1 = N.getOperand(1);
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);

            // Pattern: (or:v8i16 (and:v8i16 (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rC), VECREG:v8i16:$rA), (and:v8i16 VECREG:v8i16:$rC, VECREG:v8i16:$rB))
            // Emits: (SELBv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB, VECREG:v8i16:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N001 == N10) {
              SDNode *Result = Emit_100(N, SPU::SELBv8i16, MVT::v8i16);
              return Result;
            }

            // Pattern: (or:v8i16 (and:v8i16 (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rC), VECREG:v8i16:$rA), (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rC))
            // Emits: (SELBv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB, VECREG:v8i16:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            SDValue N11 = N1.getOperand(1);
            if (N001 == N11) {
              SDNode *Result = Emit_101(N, SPU::SELBv8i16, MVT::v8i16);
              return Result;
            }
          }
        }
      }
      SDValue N01 = N0.getOperand(1);
      if (N01.getOpcode() == ISD::XOR) {
        SDValue N010 = N01.getOperand(0);
        {
          SDValue N011 = N01.getOperand(1);
          if (N011.getOpcode() == ISD::BUILD_VECTOR &&
              Predicate_immAllOnesV(N011.getNode())) {
            SDValue N1 = N.getOperand(1);
            if (N1.getOpcode() == ISD::AND) {
              SDValue N10 = N1.getOperand(0);

              // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rA, (xor:v8i16 VECREG:v8i16:$rC, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>)), (and:v8i16 VECREG:v8i16:$rC, VECREG:v8i16:$rB))
              // Emits: (SELBv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB, VECREG:v8i16:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              if (N010 == N10) {
                SDNode *Result = Emit_91(N, SPU::SELBv8i16, MVT::v8i16);
                return Result;
              }

              // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rA, (xor:v8i16 VECREG:v8i16:$rC, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>)), (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rC))
              // Emits: (SELBv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB, VECREG:v8i16:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              SDValue N11 = N1.getOperand(1);
              if (N010 == N11) {
                SDNode *Result = Emit_90(N, SPU::SELBv8i16, MVT::v8i16);
                return Result;
              }
            }
          }
        }
        if (N010.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N010.getNode())) {
          SDValue N011 = N01.getOperand(1);
          SDValue N1 = N.getOperand(1);
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);

            // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rA, (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rC)), (and:v8i16 VECREG:v8i16:$rC, VECREG:v8i16:$rB))
            // Emits: (SELBv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB, VECREG:v8i16:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N011 == N10) {
              SDNode *Result = Emit_102(N, SPU::SELBv8i16, MVT::v8i16);
              return Result;
            }

            // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rA, (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rC)), (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rC))
            // Emits: (SELBv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB, VECREG:v8i16:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            SDValue N11 = N1.getOperand(1);
            if (N011 == N11) {
              SDNode *Result = Emit_103(N, SPU::SELBv8i16, MVT::v8i16);
              return Result;
            }
          }
        }
      }
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);

        // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB), (xor:v8i16 (or:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA), (build_vector:v8i16)<<P:Predicate_immAllOnesV>>))
        // Emits: (EQVv8i16_2:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
        // Pattern complexity = 16  cost = 1  size = 0
        if (N10.getOpcode() == ISD::OR) {
          SDValue N100 = N10.getOperand(0);
          if (N01 == N100) {
            SDValue N101 = N10.getOperand(1);
            if (N00 == N101) {
              SDValue N11 = N1.getOperand(1);
              if (N11.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N11.getNode())) {
                SDNode *Result = Emit_86(N, SPU::EQVv8i16_2, MVT::v8i16);
                return Result;
              }
            }
          }
        }
        if (N10.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N10.getNode())) {
          SDValue N11 = N1.getOperand(1);
          if (N11.getOpcode() == ISD::OR) {
            SDValue N110 = N11.getOperand(0);

            // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB), (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, (or:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)))
            // Emits: (EQVv8i16_2:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N00 == N110) {
              SDValue N111 = N11.getOperand(1);
              if (N01 == N111) {
                SDNode *Result = Emit_110(N, SPU::EQVv8i16_2, MVT::v8i16);
                return Result;
              }
            }

            // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB), (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, (or:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA)))
            // Emits: (EQVv8i16_2:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N01 == N110) {
              SDValue N111 = N11.getOperand(1);
              if (N00 == N111) {
                SDNode *Result = Emit_110(N, SPU::EQVv8i16_2, MVT::v8i16);
                return Result;
              }
            }
          }
        }
        if (N10.getOpcode() == ISD::OR) {
          SDValue N100 = N10.getOperand(0);

          // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA), (xor:v8i16 (or:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB), (build_vector:v8i16)<<P:Predicate_immAllOnesV>>))
          // Emits: (EQVv8i16_2:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
          // Pattern complexity = 16  cost = 1  size = 0
          if (N01 == N100) {
            SDValue N101 = N10.getOperand(1);
            if (N00 == N101) {
              SDValue N11 = N1.getOperand(1);
              if (N11.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N11.getNode())) {
                SDNode *Result = Emit_97(N, SPU::EQVv8i16_2, MVT::v8i16);
                return Result;
              }
            }
          }

          // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA), (xor:v8i16 (or:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA), (build_vector:v8i16)<<P:Predicate_immAllOnesV>>))
          // Emits: (EQVv8i16_2:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
          // Pattern complexity = 16  cost = 1  size = 0
          if (N00 == N100) {
            SDValue N101 = N10.getOperand(1);
            if (N01 == N101) {
              SDValue N11 = N1.getOperand(1);
              if (N11.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N11.getNode())) {
                SDNode *Result = Emit_97(N, SPU::EQVv8i16_2, MVT::v8i16);
                return Result;
              }
            }
          }
        }
        if (N10.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N10.getNode())) {
          SDValue N11 = N1.getOperand(1);
          if (N11.getOpcode() == ISD::OR) {
            SDValue N110 = N11.getOperand(0);

            // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA), (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, (or:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)))
            // Emits: (EQVv8i16_2:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N01 == N110) {
              SDValue N111 = N11.getOperand(1);
              if (N00 == N111) {
                SDNode *Result = Emit_111(N, SPU::EQVv8i16_2, MVT::v8i16);
                return Result;
              }
            }

            // Pattern: (or:v8i16 (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA), (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, (or:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA)))
            // Emits: (EQVv8i16_2:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N00 == N110) {
              SDValue N111 = N11.getOperand(1);
              if (N01 == N111) {
                SDNode *Result = Emit_111(N, SPU::EQVv8i16_2, MVT::v8i16);
                return Result;
              }
            }
          }
        }
      }
    }
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);
      if (N00.getOpcode() == ISD::OR) {
        SDValue N000 = N00.getOperand(0);
        SDValue N001 = N00.getOperand(1);
        SDValue N01 = N0.getOperand(1);
        if (N01.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N01.getNode())) {
          SDValue N1 = N.getOperand(1);
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);

            // Pattern: (or:v8i16 (xor:v8i16 (or:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB), (build_vector:v8i16)<<P:Predicate_immAllOnesV>>), (and:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB))
            // Emits: (EQVv8i16_2:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N000 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N001 == N11) {
                SDNode *Result = Emit_98(N, SPU::EQVv8i16_2, MVT::v8i16);
                return Result;
              }
            }
            if (N001 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N000 == N11) {

                // Pattern: (or:v8i16 (xor:v8i16 (or:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB), (build_vector:v8i16)<<P:Predicate_immAllOnesV>>), (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA))
                // Emits: (EQVv8i16_2:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                {
                  SDNode *Result = Emit_98(N, SPU::EQVv8i16_2, MVT::v8i16);
                  return Result;
                }

                // Pattern: (or:v8i16 (xor:v8i16 (or:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA), (build_vector:v8i16)<<P:Predicate_immAllOnesV>>), (and:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB))
                // Emits: (EQVv8i16_2:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                SDNode *Result = Emit_99(N, SPU::EQVv8i16_2, MVT::v8i16);
                return Result;
              }
            }

            // Pattern: (or:v8i16 (xor:v8i16 (or:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA), (build_vector:v8i16)<<P:Predicate_immAllOnesV>>), (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA))
            // Emits: (EQVv8i16_2:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N000 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N001 == N11) {
                SDNode *Result = Emit_99(N, SPU::EQVv8i16_2, MVT::v8i16);
                return Result;
              }
            }
          }
        }
      }
      if (N00.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_immAllOnesV(N00.getNode())) {
        SDValue N01 = N0.getOperand(1);
        if (N01.getOpcode() == ISD::OR) {
          SDValue N010 = N01.getOperand(0);
          SDValue N011 = N01.getOperand(1);
          SDValue N1 = N.getOperand(1);
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);

            // Pattern: (or:v8i16 (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, (or:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)), (and:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB))
            // Emits: (EQVv8i16_2:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N010 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N011 == N11) {
                SDNode *Result = Emit_112(N, SPU::EQVv8i16_2, MVT::v8i16);
                return Result;
              }
            }
            if (N011 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N010 == N11) {

                // Pattern: (or:v8i16 (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, (or:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)), (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA))
                // Emits: (EQVv8i16_2:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                {
                  SDNode *Result = Emit_112(N, SPU::EQVv8i16_2, MVT::v8i16);
                  return Result;
                }

                // Pattern: (or:v8i16 (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, (or:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA)), (and:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB))
                // Emits: (EQVv8i16_2:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                SDNode *Result = Emit_113(N, SPU::EQVv8i16_2, MVT::v8i16);
                return Result;
              }
            }

            // Pattern: (or:v8i16 (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, (or:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA)), (and:v8i16 VECREG:v8i16:$rB, VECREG:v8i16:$rA))
            // Emits: (EQVv8i16_2:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N010 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N011 == N11) {
                SDNode *Result = Emit_113(N, SPU::EQVv8i16_2, MVT::v8i16);
                return Result;
              }
            }
          }
        }
      }
    }
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);

        // Pattern: (or:v8i16 VECREG:v8i16:$rA, (xor:v8i16 VECREG:v8i16:$rB, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>))
        // Emits: (ORCv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
        // Pattern complexity = 10  cost = 1  size = 0
        {
          SDValue N11 = N1.getOperand(1);
          if (N11.getOpcode() == ISD::BUILD_VECTOR &&
              Predicate_immAllOnesV(N11.getNode())) {
            SDNode *Result = Emit_14(N, SPU::ORCv8i16, MVT::v8i16);
            return Result;
          }
        }

        // Pattern: (or:v8i16 VECREG:v8i16:$rA, (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rB))
        // Emits: (ORCv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
        // Pattern complexity = 10  cost = 1  size = 0
        if (N10.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N10.getNode())) {
          SDNode *Result = Emit_22(N, SPU::ORCv8i16, MVT::v8i16);
          return Result;
        }
      }
    }
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);

      // Pattern: (or:v8i16 (xor:v8i16 VECREG:v8i16:$rB, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>), VECREG:v8i16:$rA)
      // Emits: (ORCv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      {
        SDValue N01 = N0.getOperand(1);
        if (N01.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N01.getNode())) {
          SDNode *Result = Emit_16(N, SPU::ORCv8i16, MVT::v8i16);
          return Result;
        }
      }

      // Pattern: (or:v8i16 (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rB), VECREG:v8i16:$rA)
      // Emits: (ORCv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      if (N00.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_immAllOnesV(N00.getNode())) {
        SDNode *Result = Emit_23(N, SPU::ORCv8i16, MVT::v8i16);
        return Result;
      }
    }

    // Pattern: (or:v8i16 VECREG:v8i16:$rA, (build_vector:v8i16)<<P:Predicate_v8i16Uns10Imm>><<X:v8i16Uns10Imm_xform>>:$val)
    // Emits: (ORHIv8i16:v8i16 VECREG:v8i16:$rA, (v8i16Uns10Imm_xform:i16 (build_vector:v8i16):$val))
    // Pattern complexity = 7  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_v8i16Uns10Imm(N1.getNode())) {
        SDNode *Result = Emit_114(N, SPU::ORHIv8i16, MVT::v8i16);
        return Result;
      }
    }

    // Pattern: (or:v8i16 (build_vector:v8i16)<<P:Predicate_v8i16Uns10Imm>><<X:v8i16Uns10Imm_xform>>:$val, VECREG:v8i16:$rA)
    // Emits: (ORHIv8i16:v8i16 VECREG:v8i16:$rA, (v8i16Uns10Imm_xform:i16 (build_vector:v8i16):$val))
    // Pattern complexity = 7  cost = 1  size = 0
    if (N0.getOpcode() == ISD::BUILD_VECTOR &&
        Predicate_v8i16Uns10Imm(N0.getNode())) {
      SDNode *Result = Emit_115(N, SPU::ORHIv8i16, MVT::v8i16);
      return Result;
    }
  }

  // Pattern: (or:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
  // Emits: (ORv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::ORv8i16, MVT::v8i16);
  return Result;
}

SDNode *Emit_116(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue Tmp2 = Transform_v4i32Uns10Imm_xform(N1.getNode());
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N0, Tmp2);
}
SDNode *Emit_117(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue Tmp2 = Transform_v4i32Uns10Imm_xform(N0.getNode());
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N1, Tmp2);
}
SDNode *Select_ISD_OR_v4i32(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);
    if (N0.getOpcode() == ISD::AND) {
      SDValue N00 = N0.getOperand(0);
      {
        SDValue N01 = N0.getOperand(1);
        SDValue N1 = N.getOperand(1);
        if (N1.getOpcode() == ISD::AND) {
          SDValue N10 = N1.getOperand(0);
          if (N10.getOpcode() == ISD::XOR) {
            SDValue N100 = N10.getOperand(0);
            if (N00 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N101.getNode())) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB), (and:v4i32 (xor:v4i32 VECREG:v4i32:$rA, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>), (xor:v4i32 VECREG:v4i32:$rB, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N01 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_85(N, SPU::EQVv4i32, MVT::v4i32);
                      return Result;
                    }
                  }

                  // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB), (and:v4i32 (xor:v4i32 VECREG:v4i32:$rA, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>), (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rB)))
                  // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N01 == N111) {
                      SDNode *Result = Emit_85(N, SPU::EQVv4i32, MVT::v4i32);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N100.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N100.getNode())) {
              SDValue N101 = N10.getOperand(1);
              if (N00 == N101) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB), (and:v4i32 (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rA), (xor:v4i32 VECREG:v4i32:$rB, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N01 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_85(N, SPU::EQVv4i32, MVT::v4i32);
                      return Result;
                    }
                  }

                  // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB), (and:v4i32 (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rA), (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rB)))
                  // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N01 == N111) {
                      SDNode *Result = Emit_85(N, SPU::EQVv4i32, MVT::v4i32);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N01 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N101.getNode())) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB), (and:v4i32 (xor:v4i32 VECREG:v4i32:$rB, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>), (xor:v4i32 VECREG:v4i32:$rA, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N00 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_85(N, SPU::EQVv4i32, MVT::v4i32);
                      return Result;
                    }
                  }

                  // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB), (and:v4i32 (xor:v4i32 VECREG:v4i32:$rB, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>), (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rA)))
                  // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N00 == N111) {
                      SDNode *Result = Emit_85(N, SPU::EQVv4i32, MVT::v4i32);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N100.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N100.getNode())) {
              SDValue N101 = N10.getOperand(1);
              if (N01 == N101) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB), (and:v4i32 (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rB), (xor:v4i32 VECREG:v4i32:$rA, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N00 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_85(N, SPU::EQVv4i32, MVT::v4i32);
                      return Result;
                    }
                  }

                  // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB), (and:v4i32 (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rB), (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rA)))
                  // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N00 == N111) {
                      SDNode *Result = Emit_85(N, SPU::EQVv4i32, MVT::v4i32);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N01 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N101.getNode())) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA), (and:v4i32 (xor:v4i32 VECREG:v4i32:$rA, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>), (xor:v4i32 VECREG:v4i32:$rB, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N00 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_94(N, SPU::EQVv4i32, MVT::v4i32);
                      return Result;
                    }
                  }

                  // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA), (and:v4i32 (xor:v4i32 VECREG:v4i32:$rA, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>), (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rB)))
                  // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N00 == N111) {
                      SDNode *Result = Emit_94(N, SPU::EQVv4i32, MVT::v4i32);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N100.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N100.getNode())) {
              SDValue N101 = N10.getOperand(1);
              if (N01 == N101) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA), (and:v4i32 (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rA), (xor:v4i32 VECREG:v4i32:$rB, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N00 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_94(N, SPU::EQVv4i32, MVT::v4i32);
                      return Result;
                    }
                  }

                  // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA), (and:v4i32 (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rA), (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rB)))
                  // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N00 == N111) {
                      SDNode *Result = Emit_94(N, SPU::EQVv4i32, MVT::v4i32);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N00 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N101.getNode())) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA), (and:v4i32 (xor:v4i32 VECREG:v4i32:$rB, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>), (xor:v4i32 VECREG:v4i32:$rA, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N01 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_94(N, SPU::EQVv4i32, MVT::v4i32);
                      return Result;
                    }
                  }

                  // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA), (and:v4i32 (xor:v4i32 VECREG:v4i32:$rB, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>), (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rA)))
                  // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N01 == N111) {
                      SDNode *Result = Emit_94(N, SPU::EQVv4i32, MVT::v4i32);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N100.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N100.getNode())) {
              SDValue N101 = N10.getOperand(1);
              if (N00 == N101) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA), (and:v4i32 (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rB), (xor:v4i32 VECREG:v4i32:$rA, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N01 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_94(N, SPU::EQVv4i32, MVT::v4i32);
                      return Result;
                    }
                  }

                  // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA), (and:v4i32 (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rB), (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rA)))
                  // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N01 == N111) {
                      SDNode *Result = Emit_94(N, SPU::EQVv4i32, MVT::v4i32);
                      return Result;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (N00.getOpcode() == ISD::XOR) {
        SDValue N000 = N00.getOperand(0);
        {
          SDValue N001 = N00.getOperand(1);
          if (N001.getOpcode() == ISD::BUILD_VECTOR &&
              Predicate_immAllOnesV(N001.getNode())) {
            SDValue N01 = N0.getOperand(1);
            if (N01.getOpcode() == ISD::XOR) {
              SDValue N010 = N01.getOperand(0);
              {
                SDValue N011 = N01.getOperand(1);
                if (N011.getOpcode() == ISD::BUILD_VECTOR &&
                    Predicate_immAllOnesV(N011.getNode())) {
                  SDValue N1 = N.getOperand(1);
                  if (N1.getOpcode() == ISD::AND) {
                    SDValue N10 = N1.getOperand(0);

                    // Pattern: (or:v4i32 (and:v4i32 (xor:v4i32 VECREG:v4i32:$rA, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>), (xor:v4i32 VECREG:v4i32:$rB, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>)), (and:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB))
                    // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                    // Pattern complexity = 23  cost = 1  size = 0
                    if (N000 == N10) {
                      SDValue N11 = N1.getOperand(1);
                      if (N010 == N11) {
                        SDNode *Result = Emit_95(N, SPU::EQVv4i32, MVT::v4i32);
                        return Result;
                      }
                    }

                    // Pattern: (or:v4i32 (and:v4i32 (xor:v4i32 VECREG:v4i32:$rA, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>), (xor:v4i32 VECREG:v4i32:$rB, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>)), (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA))
                    // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                    // Pattern complexity = 23  cost = 1  size = 0
                    if (N010 == N10) {
                      SDValue N11 = N1.getOperand(1);
                      if (N000 == N11) {
                        SDNode *Result = Emit_95(N, SPU::EQVv4i32, MVT::v4i32);
                        return Result;
                      }
                    }
                  }
                }
              }
              if (N010.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N010.getNode())) {
                SDValue N011 = N01.getOperand(1);
                SDValue N1 = N.getOperand(1);
                if (N1.getOpcode() == ISD::AND) {
                  SDValue N10 = N1.getOperand(0);

                  // Pattern: (or:v4i32 (and:v4i32 (xor:v4i32 VECREG:v4i32:$rA, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>), (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rB)), (and:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB))
                  // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N000 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N011 == N11) {
                      SDNode *Result = Emit_104(N, SPU::EQVv4i32, MVT::v4i32);
                      return Result;
                    }
                  }

                  // Pattern: (or:v4i32 (and:v4i32 (xor:v4i32 VECREG:v4i32:$rA, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>), (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rB)), (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA))
                  // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N011 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N000 == N11) {
                      SDNode *Result = Emit_104(N, SPU::EQVv4i32, MVT::v4i32);
                      return Result;
                    }
                  }
                }
              }
            }
          }
        }
        if (N000.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N000.getNode())) {
          SDValue N001 = N00.getOperand(1);
          SDValue N01 = N0.getOperand(1);
          if (N01.getOpcode() == ISD::XOR) {
            SDValue N010 = N01.getOperand(0);
            {
              SDValue N011 = N01.getOperand(1);
              if (N011.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N011.getNode())) {
                SDValue N1 = N.getOperand(1);
                if (N1.getOpcode() == ISD::AND) {
                  SDValue N10 = N1.getOperand(0);

                  // Pattern: (or:v4i32 (and:v4i32 (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rA), (xor:v4i32 VECREG:v4i32:$rB, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>)), (and:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB))
                  // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N001 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N010 == N11) {
                      SDNode *Result = Emit_105(N, SPU::EQVv4i32, MVT::v4i32);
                      return Result;
                    }
                  }

                  // Pattern: (or:v4i32 (and:v4i32 (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rA), (xor:v4i32 VECREG:v4i32:$rB, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>)), (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA))
                  // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N010 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N001 == N11) {
                      SDNode *Result = Emit_105(N, SPU::EQVv4i32, MVT::v4i32);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N010.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N010.getNode())) {
              SDValue N011 = N01.getOperand(1);
              SDValue N1 = N.getOperand(1);
              if (N1.getOpcode() == ISD::AND) {
                SDValue N10 = N1.getOperand(0);

                // Pattern: (or:v4i32 (and:v4i32 (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rA), (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rB)), (and:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB))
                // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                // Pattern complexity = 23  cost = 1  size = 0
                if (N001 == N10) {
                  SDValue N11 = N1.getOperand(1);
                  if (N011 == N11) {
                    SDNode *Result = Emit_106(N, SPU::EQVv4i32, MVT::v4i32);
                    return Result;
                  }
                }

                // Pattern: (or:v4i32 (and:v4i32 (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rA), (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rB)), (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA))
                // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                // Pattern complexity = 23  cost = 1  size = 0
                if (N011 == N10) {
                  SDValue N11 = N1.getOperand(1);
                  if (N001 == N11) {
                    SDNode *Result = Emit_106(N, SPU::EQVv4i32, MVT::v4i32);
                    return Result;
                  }
                }
              }
            }
          }
        }
        {
          SDValue N001 = N00.getOperand(1);
          if (N001.getOpcode() == ISD::BUILD_VECTOR &&
              Predicate_immAllOnesV(N001.getNode())) {
            SDValue N01 = N0.getOperand(1);
            if (N01.getOpcode() == ISD::XOR) {
              SDValue N010 = N01.getOperand(0);
              {
                SDValue N011 = N01.getOperand(1);
                if (N011.getOpcode() == ISD::BUILD_VECTOR &&
                    Predicate_immAllOnesV(N011.getNode())) {
                  SDValue N1 = N.getOperand(1);
                  if (N1.getOpcode() == ISD::AND) {
                    SDValue N10 = N1.getOperand(0);

                    // Pattern: (or:v4i32 (and:v4i32 (xor:v4i32 VECREG:v4i32:$rB, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>), (xor:v4i32 VECREG:v4i32:$rA, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>)), (and:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB))
                    // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                    // Pattern complexity = 23  cost = 1  size = 0
                    if (N010 == N10) {
                      SDValue N11 = N1.getOperand(1);
                      if (N000 == N11) {
                        SDNode *Result = Emit_96(N, SPU::EQVv4i32, MVT::v4i32);
                        return Result;
                      }
                    }

                    // Pattern: (or:v4i32 (and:v4i32 (xor:v4i32 VECREG:v4i32:$rB, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>), (xor:v4i32 VECREG:v4i32:$rA, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>)), (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA))
                    // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                    // Pattern complexity = 23  cost = 1  size = 0
                    if (N000 == N10) {
                      SDValue N11 = N1.getOperand(1);
                      if (N010 == N11) {
                        SDNode *Result = Emit_96(N, SPU::EQVv4i32, MVT::v4i32);
                        return Result;
                      }
                    }
                  }
                }
              }
              if (N010.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N010.getNode())) {
                SDValue N011 = N01.getOperand(1);
                SDValue N1 = N.getOperand(1);
                if (N1.getOpcode() == ISD::AND) {
                  SDValue N10 = N1.getOperand(0);

                  // Pattern: (or:v4i32 (and:v4i32 (xor:v4i32 VECREG:v4i32:$rB, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>), (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rA)), (and:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB))
                  // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N011 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N000 == N11) {
                      SDNode *Result = Emit_107(N, SPU::EQVv4i32, MVT::v4i32);
                      return Result;
                    }
                  }

                  // Pattern: (or:v4i32 (and:v4i32 (xor:v4i32 VECREG:v4i32:$rB, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>), (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rA)), (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA))
                  // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N000 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N011 == N11) {
                      SDNode *Result = Emit_107(N, SPU::EQVv4i32, MVT::v4i32);
                      return Result;
                    }
                  }
                }
              }
            }
          }
        }
        if (N000.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N000.getNode())) {
          SDValue N001 = N00.getOperand(1);
          SDValue N01 = N0.getOperand(1);
          if (N01.getOpcode() == ISD::XOR) {
            SDValue N010 = N01.getOperand(0);
            {
              SDValue N011 = N01.getOperand(1);
              if (N011.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N011.getNode())) {
                SDValue N1 = N.getOperand(1);
                if (N1.getOpcode() == ISD::AND) {
                  SDValue N10 = N1.getOperand(0);

                  // Pattern: (or:v4i32 (and:v4i32 (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rB), (xor:v4i32 VECREG:v4i32:$rA, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>)), (and:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB))
                  // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N010 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N001 == N11) {
                      SDNode *Result = Emit_108(N, SPU::EQVv4i32, MVT::v4i32);
                      return Result;
                    }
                  }

                  // Pattern: (or:v4i32 (and:v4i32 (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rB), (xor:v4i32 VECREG:v4i32:$rA, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>)), (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA))
                  // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N001 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N010 == N11) {
                      SDNode *Result = Emit_108(N, SPU::EQVv4i32, MVT::v4i32);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N010.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N010.getNode())) {
              SDValue N011 = N01.getOperand(1);
              SDValue N1 = N.getOperand(1);
              if (N1.getOpcode() == ISD::AND) {
                SDValue N10 = N1.getOperand(0);

                // Pattern: (or:v4i32 (and:v4i32 (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rB), (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rA)), (and:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB))
                // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                // Pattern complexity = 23  cost = 1  size = 0
                if (N011 == N10) {
                  SDValue N11 = N1.getOperand(1);
                  if (N001 == N11) {
                    SDNode *Result = Emit_109(N, SPU::EQVv4i32, MVT::v4i32);
                    return Result;
                  }
                }

                // Pattern: (or:v4i32 (and:v4i32 (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rB), (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rA)), (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA))
                // Emits: (EQVv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                // Pattern complexity = 23  cost = 1  size = 0
                if (N001 == N10) {
                  SDValue N11 = N1.getOperand(1);
                  if (N011 == N11) {
                    SDNode *Result = Emit_109(N, SPU::EQVv4i32, MVT::v4i32);
                    return Result;
                  }
                }
              }
            }
          }
        }
      }
      {
        SDValue N01 = N0.getOperand(1);
        SDValue N1 = N.getOperand(1);

        // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rC, VECREG:v4i32:$rB), (and:v4i32 (xor:v4i32 VECREG:v4i32:$rC, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>), VECREG:v4i32:$rA))
        // Emits: (SELBv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB, VECREG:v4i32:$rC)
        // Pattern complexity = 16  cost = 1  size = 0
        if (N1.getOpcode() == ISD::AND) {
          SDValue N10 = N1.getOperand(0);
          if (N10.getOpcode() == ISD::XOR) {
            SDValue N100 = N10.getOperand(0);
            if (N00 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N101.getNode())) {
                SDNode *Result = Emit_89(N, SPU::SELBv4i32, MVT::v4i32);
                return Result;
              }
            }
          }
        }

        // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB), (xor:v4i32 (or:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB), (build_vector:v4i32)<<P:Predicate_immAllOnesV>>))
        // Emits: (EQVv4i32_2:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
        // Pattern complexity = 16  cost = 1  size = 0
        if (N1.getOpcode() == ISD::XOR) {
          SDValue N10 = N1.getOperand(0);
          if (N10.getOpcode() == ISD::OR) {
            SDValue N100 = N10.getOperand(0);
            if (N00 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N01 == N101) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::BUILD_VECTOR &&
                    Predicate_immAllOnesV(N11.getNode())) {
                  SDNode *Result = Emit_86(N, SPU::EQVv4i32_2, MVT::v4i32);
                  return Result;
                }
              }
            }
          }
        }
        if (N1.getOpcode() == ISD::AND) {
          SDValue N10 = N1.getOperand(0);

          // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rC, VECREG:v4i32:$rB), (and:v4i32 (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rC), VECREG:v4i32:$rA))
          // Emits: (SELBv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB, VECREG:v4i32:$rC)
          // Pattern complexity = 16  cost = 1  size = 0
          if (N10.getOpcode() == ISD::XOR) {
            SDValue N100 = N10.getOperand(0);
            if (N100.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N100.getNode())) {
              SDValue N101 = N10.getOperand(1);
              if (N00 == N101) {
                SDNode *Result = Emit_89(N, SPU::SELBv4i32, MVT::v4i32);
                return Result;
              }
            }
          }
          {
            SDValue N11 = N1.getOperand(1);
            if (N11.getOpcode() == ISD::XOR) {
              SDValue N110 = N11.getOperand(0);

              // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rC, VECREG:v4i32:$rB), (and:v4i32 VECREG:v4i32:$rA, (xor:v4i32 VECREG:v4i32:$rC, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>)))
              // Emits: (SELBv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB, VECREG:v4i32:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              if (N00 == N110) {
                SDValue N111 = N11.getOperand(1);
                if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                    Predicate_immAllOnesV(N111.getNode())) {
                  SDNode *Result = Emit_88(N, SPU::SELBv4i32, MVT::v4i32);
                  return Result;
                }
              }

              // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rC, VECREG:v4i32:$rB), (and:v4i32 VECREG:v4i32:$rA, (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rC)))
              // Emits: (SELBv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB, VECREG:v4i32:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N110.getNode())) {
                SDValue N111 = N11.getOperand(1);
                if (N00 == N111) {
                  SDNode *Result = Emit_88(N, SPU::SELBv4i32, MVT::v4i32);
                  return Result;
                }
              }
            }
          }
          if (N10.getOpcode() == ISD::XOR) {
            SDValue N100 = N10.getOperand(0);

            // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rC), (and:v4i32 (xor:v4i32 VECREG:v4i32:$rC, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>), VECREG:v4i32:$rA))
            // Emits: (SELBv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB, VECREG:v4i32:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N01 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N101.getNode())) {
                SDNode *Result = Emit_87(N, SPU::SELBv4i32, MVT::v4i32);
                return Result;
              }
            }

            // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rC), (and:v4i32 (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rC), VECREG:v4i32:$rA))
            // Emits: (SELBv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB, VECREG:v4i32:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N100.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N100.getNode())) {
              SDValue N101 = N10.getOperand(1);
              if (N01 == N101) {
                SDNode *Result = Emit_87(N, SPU::SELBv4i32, MVT::v4i32);
                return Result;
              }
            }
          }
          SDValue N11 = N1.getOperand(1);
          if (N11.getOpcode() == ISD::XOR) {
            SDValue N110 = N11.getOperand(0);

            // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rC), (and:v4i32 VECREG:v4i32:$rA, (xor:v4i32 VECREG:v4i32:$rC, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>)))
            // Emits: (SELBv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB, VECREG:v4i32:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N01 == N110) {
              SDValue N111 = N11.getOperand(1);
              if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N111.getNode())) {
                SDNode *Result = Emit_84(N, SPU::SELBv4i32, MVT::v4i32);
                return Result;
              }
            }

            // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rC), (and:v4i32 VECREG:v4i32:$rA, (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rC)))
            // Emits: (SELBv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB, VECREG:v4i32:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N110.getNode())) {
              SDValue N111 = N11.getOperand(1);
              if (N01 == N111) {
                SDNode *Result = Emit_84(N, SPU::SELBv4i32, MVT::v4i32);
                return Result;
              }
            }
          }
        }
      }
      if (N00.getOpcode() == ISD::XOR) {
        SDValue N000 = N00.getOperand(0);
        {
          SDValue N001 = N00.getOperand(1);
          if (N001.getOpcode() == ISD::BUILD_VECTOR &&
              Predicate_immAllOnesV(N001.getNode())) {
            SDValue N01 = N0.getOperand(1);
            SDValue N1 = N.getOperand(1);
            if (N1.getOpcode() == ISD::AND) {
              SDValue N10 = N1.getOperand(0);

              // Pattern: (or:v4i32 (and:v4i32 (xor:v4i32 VECREG:v4i32:$rC, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>), VECREG:v4i32:$rA), (and:v4i32 VECREG:v4i32:$rC, VECREG:v4i32:$rB))
              // Emits: (SELBv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB, VECREG:v4i32:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              if (N000 == N10) {
                SDNode *Result = Emit_93(N, SPU::SELBv4i32, MVT::v4i32);
                return Result;
              }

              // Pattern: (or:v4i32 (and:v4i32 (xor:v4i32 VECREG:v4i32:$rC, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>), VECREG:v4i32:$rA), (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rC))
              // Emits: (SELBv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB, VECREG:v4i32:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              SDValue N11 = N1.getOperand(1);
              if (N000 == N11) {
                SDNode *Result = Emit_92(N, SPU::SELBv4i32, MVT::v4i32);
                return Result;
              }
            }
          }
        }
        if (N000.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N000.getNode())) {
          SDValue N001 = N00.getOperand(1);
          SDValue N01 = N0.getOperand(1);
          SDValue N1 = N.getOperand(1);
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);

            // Pattern: (or:v4i32 (and:v4i32 (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rC), VECREG:v4i32:$rA), (and:v4i32 VECREG:v4i32:$rC, VECREG:v4i32:$rB))
            // Emits: (SELBv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB, VECREG:v4i32:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N001 == N10) {
              SDNode *Result = Emit_100(N, SPU::SELBv4i32, MVT::v4i32);
              return Result;
            }

            // Pattern: (or:v4i32 (and:v4i32 (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rC), VECREG:v4i32:$rA), (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rC))
            // Emits: (SELBv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB, VECREG:v4i32:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            SDValue N11 = N1.getOperand(1);
            if (N001 == N11) {
              SDNode *Result = Emit_101(N, SPU::SELBv4i32, MVT::v4i32);
              return Result;
            }
          }
        }
      }
      SDValue N01 = N0.getOperand(1);
      if (N01.getOpcode() == ISD::XOR) {
        SDValue N010 = N01.getOperand(0);
        {
          SDValue N011 = N01.getOperand(1);
          if (N011.getOpcode() == ISD::BUILD_VECTOR &&
              Predicate_immAllOnesV(N011.getNode())) {
            SDValue N1 = N.getOperand(1);
            if (N1.getOpcode() == ISD::AND) {
              SDValue N10 = N1.getOperand(0);

              // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rA, (xor:v4i32 VECREG:v4i32:$rC, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>)), (and:v4i32 VECREG:v4i32:$rC, VECREG:v4i32:$rB))
              // Emits: (SELBv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB, VECREG:v4i32:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              if (N010 == N10) {
                SDNode *Result = Emit_91(N, SPU::SELBv4i32, MVT::v4i32);
                return Result;
              }

              // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rA, (xor:v4i32 VECREG:v4i32:$rC, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>)), (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rC))
              // Emits: (SELBv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB, VECREG:v4i32:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              SDValue N11 = N1.getOperand(1);
              if (N010 == N11) {
                SDNode *Result = Emit_90(N, SPU::SELBv4i32, MVT::v4i32);
                return Result;
              }
            }
          }
        }
        if (N010.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N010.getNode())) {
          SDValue N011 = N01.getOperand(1);
          SDValue N1 = N.getOperand(1);
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);

            // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rA, (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rC)), (and:v4i32 VECREG:v4i32:$rC, VECREG:v4i32:$rB))
            // Emits: (SELBv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB, VECREG:v4i32:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N011 == N10) {
              SDNode *Result = Emit_102(N, SPU::SELBv4i32, MVT::v4i32);
              return Result;
            }

            // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rA, (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rC)), (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rC))
            // Emits: (SELBv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB, VECREG:v4i32:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            SDValue N11 = N1.getOperand(1);
            if (N011 == N11) {
              SDNode *Result = Emit_103(N, SPU::SELBv4i32, MVT::v4i32);
              return Result;
            }
          }
        }
      }
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);

        // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB), (xor:v4i32 (or:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA), (build_vector:v4i32)<<P:Predicate_immAllOnesV>>))
        // Emits: (EQVv4i32_2:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
        // Pattern complexity = 16  cost = 1  size = 0
        if (N10.getOpcode() == ISD::OR) {
          SDValue N100 = N10.getOperand(0);
          if (N01 == N100) {
            SDValue N101 = N10.getOperand(1);
            if (N00 == N101) {
              SDValue N11 = N1.getOperand(1);
              if (N11.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N11.getNode())) {
                SDNode *Result = Emit_86(N, SPU::EQVv4i32_2, MVT::v4i32);
                return Result;
              }
            }
          }
        }
        if (N10.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N10.getNode())) {
          SDValue N11 = N1.getOperand(1);
          if (N11.getOpcode() == ISD::OR) {
            SDValue N110 = N11.getOperand(0);

            // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB), (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, (or:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)))
            // Emits: (EQVv4i32_2:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N00 == N110) {
              SDValue N111 = N11.getOperand(1);
              if (N01 == N111) {
                SDNode *Result = Emit_110(N, SPU::EQVv4i32_2, MVT::v4i32);
                return Result;
              }
            }

            // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB), (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, (or:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA)))
            // Emits: (EQVv4i32_2:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N01 == N110) {
              SDValue N111 = N11.getOperand(1);
              if (N00 == N111) {
                SDNode *Result = Emit_110(N, SPU::EQVv4i32_2, MVT::v4i32);
                return Result;
              }
            }
          }
        }
        if (N10.getOpcode() == ISD::OR) {
          SDValue N100 = N10.getOperand(0);

          // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA), (xor:v4i32 (or:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB), (build_vector:v4i32)<<P:Predicate_immAllOnesV>>))
          // Emits: (EQVv4i32_2:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
          // Pattern complexity = 16  cost = 1  size = 0
          if (N01 == N100) {
            SDValue N101 = N10.getOperand(1);
            if (N00 == N101) {
              SDValue N11 = N1.getOperand(1);
              if (N11.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N11.getNode())) {
                SDNode *Result = Emit_97(N, SPU::EQVv4i32_2, MVT::v4i32);
                return Result;
              }
            }
          }

          // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA), (xor:v4i32 (or:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA), (build_vector:v4i32)<<P:Predicate_immAllOnesV>>))
          // Emits: (EQVv4i32_2:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
          // Pattern complexity = 16  cost = 1  size = 0
          if (N00 == N100) {
            SDValue N101 = N10.getOperand(1);
            if (N01 == N101) {
              SDValue N11 = N1.getOperand(1);
              if (N11.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N11.getNode())) {
                SDNode *Result = Emit_97(N, SPU::EQVv4i32_2, MVT::v4i32);
                return Result;
              }
            }
          }
        }
        if (N10.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N10.getNode())) {
          SDValue N11 = N1.getOperand(1);
          if (N11.getOpcode() == ISD::OR) {
            SDValue N110 = N11.getOperand(0);

            // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA), (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, (or:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)))
            // Emits: (EQVv4i32_2:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N01 == N110) {
              SDValue N111 = N11.getOperand(1);
              if (N00 == N111) {
                SDNode *Result = Emit_111(N, SPU::EQVv4i32_2, MVT::v4i32);
                return Result;
              }
            }

            // Pattern: (or:v4i32 (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA), (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, (or:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA)))
            // Emits: (EQVv4i32_2:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N00 == N110) {
              SDValue N111 = N11.getOperand(1);
              if (N01 == N111) {
                SDNode *Result = Emit_111(N, SPU::EQVv4i32_2, MVT::v4i32);
                return Result;
              }
            }
          }
        }
      }
    }
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);
      if (N00.getOpcode() == ISD::OR) {
        SDValue N000 = N00.getOperand(0);
        SDValue N001 = N00.getOperand(1);
        SDValue N01 = N0.getOperand(1);
        if (N01.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N01.getNode())) {
          SDValue N1 = N.getOperand(1);
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);

            // Pattern: (or:v4i32 (xor:v4i32 (or:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB), (build_vector:v4i32)<<P:Predicate_immAllOnesV>>), (and:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB))
            // Emits: (EQVv4i32_2:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N000 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N001 == N11) {
                SDNode *Result = Emit_98(N, SPU::EQVv4i32_2, MVT::v4i32);
                return Result;
              }
            }
            if (N001 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N000 == N11) {

                // Pattern: (or:v4i32 (xor:v4i32 (or:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB), (build_vector:v4i32)<<P:Predicate_immAllOnesV>>), (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA))
                // Emits: (EQVv4i32_2:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                {
                  SDNode *Result = Emit_98(N, SPU::EQVv4i32_2, MVT::v4i32);
                  return Result;
                }

                // Pattern: (or:v4i32 (xor:v4i32 (or:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA), (build_vector:v4i32)<<P:Predicate_immAllOnesV>>), (and:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB))
                // Emits: (EQVv4i32_2:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                SDNode *Result = Emit_99(N, SPU::EQVv4i32_2, MVT::v4i32);
                return Result;
              }
            }

            // Pattern: (or:v4i32 (xor:v4i32 (or:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA), (build_vector:v4i32)<<P:Predicate_immAllOnesV>>), (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA))
            // Emits: (EQVv4i32_2:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N000 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N001 == N11) {
                SDNode *Result = Emit_99(N, SPU::EQVv4i32_2, MVT::v4i32);
                return Result;
              }
            }
          }
        }
      }
      if (N00.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_immAllOnesV(N00.getNode())) {
        SDValue N01 = N0.getOperand(1);
        if (N01.getOpcode() == ISD::OR) {
          SDValue N010 = N01.getOperand(0);
          SDValue N011 = N01.getOperand(1);
          SDValue N1 = N.getOperand(1);
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);

            // Pattern: (or:v4i32 (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, (or:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)), (and:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB))
            // Emits: (EQVv4i32_2:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N010 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N011 == N11) {
                SDNode *Result = Emit_112(N, SPU::EQVv4i32_2, MVT::v4i32);
                return Result;
              }
            }
            if (N011 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N010 == N11) {

                // Pattern: (or:v4i32 (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, (or:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)), (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA))
                // Emits: (EQVv4i32_2:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                {
                  SDNode *Result = Emit_112(N, SPU::EQVv4i32_2, MVT::v4i32);
                  return Result;
                }

                // Pattern: (or:v4i32 (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, (or:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA)), (and:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB))
                // Emits: (EQVv4i32_2:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                SDNode *Result = Emit_113(N, SPU::EQVv4i32_2, MVT::v4i32);
                return Result;
              }
            }

            // Pattern: (or:v4i32 (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, (or:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA)), (and:v4i32 VECREG:v4i32:$rB, VECREG:v4i32:$rA))
            // Emits: (EQVv4i32_2:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N010 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N011 == N11) {
                SDNode *Result = Emit_113(N, SPU::EQVv4i32_2, MVT::v4i32);
                return Result;
              }
            }
          }
        }
      }
    }
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);

        // Pattern: (or:v4i32 VECREG:v4i32:$rA, (xor:v4i32 VECREG:v4i32:$rB, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>))
        // Emits: (ORCv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
        // Pattern complexity = 10  cost = 1  size = 0
        {
          SDValue N11 = N1.getOperand(1);
          if (N11.getOpcode() == ISD::BUILD_VECTOR &&
              Predicate_immAllOnesV(N11.getNode())) {
            SDNode *Result = Emit_14(N, SPU::ORCv4i32, MVT::v4i32);
            return Result;
          }
        }

        // Pattern: (or:v4i32 VECREG:v4i32:$rA, (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rB))
        // Emits: (ORCv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
        // Pattern complexity = 10  cost = 1  size = 0
        if (N10.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N10.getNode())) {
          SDNode *Result = Emit_22(N, SPU::ORCv4i32, MVT::v4i32);
          return Result;
        }
      }
    }
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);

      // Pattern: (or:v4i32 (xor:v4i32 VECREG:v4i32:$rB, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>), VECREG:v4i32:$rA)
      // Emits: (ORCv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      {
        SDValue N01 = N0.getOperand(1);
        if (N01.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N01.getNode())) {
          SDNode *Result = Emit_16(N, SPU::ORCv4i32, MVT::v4i32);
          return Result;
        }
      }

      // Pattern: (or:v4i32 (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rB), VECREG:v4i32:$rA)
      // Emits: (ORCv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      if (N00.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_immAllOnesV(N00.getNode())) {
        SDNode *Result = Emit_23(N, SPU::ORCv4i32, MVT::v4i32);
        return Result;
      }
    }

    // Pattern: (or:v4i32 VECREG:v4i32:$rA, (build_vector:v4i32)<<P:Predicate_v4i32Uns10Imm>><<X:v4i32Uns10Imm_xform>>:$val)
    // Emits: (ORIv4i32:v4i32 VECREG:v4i32:$rA, (v4i32Uns10Imm_xform:i16 (build_vector:v4i32):$val))
    // Pattern complexity = 7  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_v4i32Uns10Imm(N1.getNode())) {
        SDNode *Result = Emit_116(N, SPU::ORIv4i32, MVT::v4i32);
        return Result;
      }
    }

    // Pattern: (or:v4i32 (build_vector:v4i32)<<P:Predicate_v4i32Uns10Imm>><<X:v4i32Uns10Imm_xform>>:$val, VECREG:v4i32:$rA)
    // Emits: (ORIv4i32:v4i32 VECREG:v4i32:$rA, (v4i32Uns10Imm_xform:i16 (build_vector:v4i32):$val))
    // Pattern complexity = 7  cost = 1  size = 0
    if (N0.getOpcode() == ISD::BUILD_VECTOR &&
        Predicate_v4i32Uns10Imm(N0.getNode())) {
      SDNode *Result = Emit_117(N, SPU::ORIv4i32, MVT::v4i32);
      return Result;
    }
  }

  // Pattern: (or:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
  // Emits: (ORv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::ORv4i32, MVT::v4i32);
  return Result;
}

SDNode *Select_ISD_OR_v2i64(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);
    if (N0.getOpcode() == ISD::AND) {
      SDValue N00 = N0.getOperand(0);
      {
        SDValue N01 = N0.getOperand(1);
        SDValue N1 = N.getOperand(1);
        if (N1.getOpcode() == ISD::AND) {
          SDValue N10 = N1.getOperand(0);
          if (N10.getOpcode() == ISD::XOR) {
            SDValue N100 = N10.getOperand(0);
            if (N00 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N101.getNode())) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB), (and:v2i64 (xor:v2i64 VECREG:v2i64:$rA, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>), (xor:v2i64 VECREG:v2i64:$rB, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N01 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_85(N, SPU::EQVv2i64, MVT::v2i64);
                      return Result;
                    }
                  }

                  // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB), (and:v2i64 (xor:v2i64 VECREG:v2i64:$rA, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>), (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rB)))
                  // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N01 == N111) {
                      SDNode *Result = Emit_85(N, SPU::EQVv2i64, MVT::v2i64);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N100.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N100.getNode())) {
              SDValue N101 = N10.getOperand(1);
              if (N00 == N101) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB), (and:v2i64 (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rA), (xor:v2i64 VECREG:v2i64:$rB, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N01 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_85(N, SPU::EQVv2i64, MVT::v2i64);
                      return Result;
                    }
                  }

                  // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB), (and:v2i64 (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rA), (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rB)))
                  // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N01 == N111) {
                      SDNode *Result = Emit_85(N, SPU::EQVv2i64, MVT::v2i64);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N01 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N101.getNode())) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB), (and:v2i64 (xor:v2i64 VECREG:v2i64:$rB, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>), (xor:v2i64 VECREG:v2i64:$rA, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N00 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_85(N, SPU::EQVv2i64, MVT::v2i64);
                      return Result;
                    }
                  }

                  // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB), (and:v2i64 (xor:v2i64 VECREG:v2i64:$rB, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>), (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rA)))
                  // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N00 == N111) {
                      SDNode *Result = Emit_85(N, SPU::EQVv2i64, MVT::v2i64);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N100.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N100.getNode())) {
              SDValue N101 = N10.getOperand(1);
              if (N01 == N101) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB), (and:v2i64 (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rB), (xor:v2i64 VECREG:v2i64:$rA, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N00 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_85(N, SPU::EQVv2i64, MVT::v2i64);
                      return Result;
                    }
                  }

                  // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB), (and:v2i64 (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rB), (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rA)))
                  // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N00 == N111) {
                      SDNode *Result = Emit_85(N, SPU::EQVv2i64, MVT::v2i64);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N01 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N101.getNode())) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA), (and:v2i64 (xor:v2i64 VECREG:v2i64:$rA, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>), (xor:v2i64 VECREG:v2i64:$rB, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N00 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_94(N, SPU::EQVv2i64, MVT::v2i64);
                      return Result;
                    }
                  }

                  // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA), (and:v2i64 (xor:v2i64 VECREG:v2i64:$rA, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>), (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rB)))
                  // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N00 == N111) {
                      SDNode *Result = Emit_94(N, SPU::EQVv2i64, MVT::v2i64);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N100.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N100.getNode())) {
              SDValue N101 = N10.getOperand(1);
              if (N01 == N101) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA), (and:v2i64 (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rA), (xor:v2i64 VECREG:v2i64:$rB, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N00 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_94(N, SPU::EQVv2i64, MVT::v2i64);
                      return Result;
                    }
                  }

                  // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA), (and:v2i64 (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rA), (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rB)))
                  // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N00 == N111) {
                      SDNode *Result = Emit_94(N, SPU::EQVv2i64, MVT::v2i64);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N00 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N101.getNode())) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA), (and:v2i64 (xor:v2i64 VECREG:v2i64:$rB, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>), (xor:v2i64 VECREG:v2i64:$rA, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N01 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_94(N, SPU::EQVv2i64, MVT::v2i64);
                      return Result;
                    }
                  }

                  // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA), (and:v2i64 (xor:v2i64 VECREG:v2i64:$rB, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>), (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rA)))
                  // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N01 == N111) {
                      SDNode *Result = Emit_94(N, SPU::EQVv2i64, MVT::v2i64);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N100.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N100.getNode())) {
              SDValue N101 = N10.getOperand(1);
              if (N00 == N101) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::XOR) {
                  SDValue N110 = N11.getOperand(0);

                  // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA), (and:v2i64 (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rB), (xor:v2i64 VECREG:v2i64:$rA, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>)))
                  // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N01 == N110) {
                    SDValue N111 = N11.getOperand(1);
                    if (N111.getOpcode() == ISD::BUILD_VECTOR &&
                        Predicate_immAllOnesV(N111.getNode())) {
                      SDNode *Result = Emit_94(N, SPU::EQVv2i64, MVT::v2i64);
                      return Result;
                    }
                  }

                  // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA), (and:v2i64 (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rB), (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rA)))
                  // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N110.getOpcode() == ISD::BUILD_VECTOR &&
                      Predicate_immAllOnesV(N110.getNode())) {
                    SDValue N111 = N11.getOperand(1);
                    if (N01 == N111) {
                      SDNode *Result = Emit_94(N, SPU::EQVv2i64, MVT::v2i64);
                      return Result;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (N00.getOpcode() == ISD::XOR) {
        SDValue N000 = N00.getOperand(0);
        {
          SDValue N001 = N00.getOperand(1);
          if (N001.getOpcode() == ISD::BUILD_VECTOR &&
              Predicate_immAllOnesV(N001.getNode())) {
            SDValue N01 = N0.getOperand(1);
            if (N01.getOpcode() == ISD::XOR) {
              SDValue N010 = N01.getOperand(0);
              {
                SDValue N011 = N01.getOperand(1);
                if (N011.getOpcode() == ISD::BUILD_VECTOR &&
                    Predicate_immAllOnesV(N011.getNode())) {
                  SDValue N1 = N.getOperand(1);
                  if (N1.getOpcode() == ISD::AND) {
                    SDValue N10 = N1.getOperand(0);

                    // Pattern: (or:v2i64 (and:v2i64 (xor:v2i64 VECREG:v2i64:$rA, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>), (xor:v2i64 VECREG:v2i64:$rB, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>)), (and:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB))
                    // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                    // Pattern complexity = 23  cost = 1  size = 0
                    if (N000 == N10) {
                      SDValue N11 = N1.getOperand(1);
                      if (N010 == N11) {
                        SDNode *Result = Emit_95(N, SPU::EQVv2i64, MVT::v2i64);
                        return Result;
                      }
                    }

                    // Pattern: (or:v2i64 (and:v2i64 (xor:v2i64 VECREG:v2i64:$rA, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>), (xor:v2i64 VECREG:v2i64:$rB, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>)), (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA))
                    // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                    // Pattern complexity = 23  cost = 1  size = 0
                    if (N010 == N10) {
                      SDValue N11 = N1.getOperand(1);
                      if (N000 == N11) {
                        SDNode *Result = Emit_95(N, SPU::EQVv2i64, MVT::v2i64);
                        return Result;
                      }
                    }
                  }
                }
              }
              if (N010.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N010.getNode())) {
                SDValue N011 = N01.getOperand(1);
                SDValue N1 = N.getOperand(1);
                if (N1.getOpcode() == ISD::AND) {
                  SDValue N10 = N1.getOperand(0);

                  // Pattern: (or:v2i64 (and:v2i64 (xor:v2i64 VECREG:v2i64:$rA, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>), (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rB)), (and:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB))
                  // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N000 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N011 == N11) {
                      SDNode *Result = Emit_104(N, SPU::EQVv2i64, MVT::v2i64);
                      return Result;
                    }
                  }

                  // Pattern: (or:v2i64 (and:v2i64 (xor:v2i64 VECREG:v2i64:$rA, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>), (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rB)), (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA))
                  // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N011 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N000 == N11) {
                      SDNode *Result = Emit_104(N, SPU::EQVv2i64, MVT::v2i64);
                      return Result;
                    }
                  }
                }
              }
            }
          }
        }
        if (N000.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N000.getNode())) {
          SDValue N001 = N00.getOperand(1);
          SDValue N01 = N0.getOperand(1);
          if (N01.getOpcode() == ISD::XOR) {
            SDValue N010 = N01.getOperand(0);
            {
              SDValue N011 = N01.getOperand(1);
              if (N011.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N011.getNode())) {
                SDValue N1 = N.getOperand(1);
                if (N1.getOpcode() == ISD::AND) {
                  SDValue N10 = N1.getOperand(0);

                  // Pattern: (or:v2i64 (and:v2i64 (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rA), (xor:v2i64 VECREG:v2i64:$rB, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>)), (and:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB))
                  // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N001 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N010 == N11) {
                      SDNode *Result = Emit_105(N, SPU::EQVv2i64, MVT::v2i64);
                      return Result;
                    }
                  }

                  // Pattern: (or:v2i64 (and:v2i64 (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rA), (xor:v2i64 VECREG:v2i64:$rB, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>)), (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA))
                  // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N010 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N001 == N11) {
                      SDNode *Result = Emit_105(N, SPU::EQVv2i64, MVT::v2i64);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N010.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N010.getNode())) {
              SDValue N011 = N01.getOperand(1);
              SDValue N1 = N.getOperand(1);
              if (N1.getOpcode() == ISD::AND) {
                SDValue N10 = N1.getOperand(0);

                // Pattern: (or:v2i64 (and:v2i64 (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rA), (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rB)), (and:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB))
                // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                // Pattern complexity = 23  cost = 1  size = 0
                if (N001 == N10) {
                  SDValue N11 = N1.getOperand(1);
                  if (N011 == N11) {
                    SDNode *Result = Emit_106(N, SPU::EQVv2i64, MVT::v2i64);
                    return Result;
                  }
                }

                // Pattern: (or:v2i64 (and:v2i64 (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rA), (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rB)), (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA))
                // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                // Pattern complexity = 23  cost = 1  size = 0
                if (N011 == N10) {
                  SDValue N11 = N1.getOperand(1);
                  if (N001 == N11) {
                    SDNode *Result = Emit_106(N, SPU::EQVv2i64, MVT::v2i64);
                    return Result;
                  }
                }
              }
            }
          }
        }
        {
          SDValue N001 = N00.getOperand(1);
          if (N001.getOpcode() == ISD::BUILD_VECTOR &&
              Predicate_immAllOnesV(N001.getNode())) {
            SDValue N01 = N0.getOperand(1);
            if (N01.getOpcode() == ISD::XOR) {
              SDValue N010 = N01.getOperand(0);
              {
                SDValue N011 = N01.getOperand(1);
                if (N011.getOpcode() == ISD::BUILD_VECTOR &&
                    Predicate_immAllOnesV(N011.getNode())) {
                  SDValue N1 = N.getOperand(1);
                  if (N1.getOpcode() == ISD::AND) {
                    SDValue N10 = N1.getOperand(0);

                    // Pattern: (or:v2i64 (and:v2i64 (xor:v2i64 VECREG:v2i64:$rB, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>), (xor:v2i64 VECREG:v2i64:$rA, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>)), (and:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB))
                    // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                    // Pattern complexity = 23  cost = 1  size = 0
                    if (N010 == N10) {
                      SDValue N11 = N1.getOperand(1);
                      if (N000 == N11) {
                        SDNode *Result = Emit_96(N, SPU::EQVv2i64, MVT::v2i64);
                        return Result;
                      }
                    }

                    // Pattern: (or:v2i64 (and:v2i64 (xor:v2i64 VECREG:v2i64:$rB, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>), (xor:v2i64 VECREG:v2i64:$rA, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>)), (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA))
                    // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                    // Pattern complexity = 23  cost = 1  size = 0
                    if (N000 == N10) {
                      SDValue N11 = N1.getOperand(1);
                      if (N010 == N11) {
                        SDNode *Result = Emit_96(N, SPU::EQVv2i64, MVT::v2i64);
                        return Result;
                      }
                    }
                  }
                }
              }
              if (N010.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N010.getNode())) {
                SDValue N011 = N01.getOperand(1);
                SDValue N1 = N.getOperand(1);
                if (N1.getOpcode() == ISD::AND) {
                  SDValue N10 = N1.getOperand(0);

                  // Pattern: (or:v2i64 (and:v2i64 (xor:v2i64 VECREG:v2i64:$rB, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>), (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rA)), (and:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB))
                  // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N011 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N000 == N11) {
                      SDNode *Result = Emit_107(N, SPU::EQVv2i64, MVT::v2i64);
                      return Result;
                    }
                  }

                  // Pattern: (or:v2i64 (and:v2i64 (xor:v2i64 VECREG:v2i64:$rB, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>), (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rA)), (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA))
                  // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N000 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N011 == N11) {
                      SDNode *Result = Emit_107(N, SPU::EQVv2i64, MVT::v2i64);
                      return Result;
                    }
                  }
                }
              }
            }
          }
        }
        if (N000.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N000.getNode())) {
          SDValue N001 = N00.getOperand(1);
          SDValue N01 = N0.getOperand(1);
          if (N01.getOpcode() == ISD::XOR) {
            SDValue N010 = N01.getOperand(0);
            {
              SDValue N011 = N01.getOperand(1);
              if (N011.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N011.getNode())) {
                SDValue N1 = N.getOperand(1);
                if (N1.getOpcode() == ISD::AND) {
                  SDValue N10 = N1.getOperand(0);

                  // Pattern: (or:v2i64 (and:v2i64 (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rB), (xor:v2i64 VECREG:v2i64:$rA, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>)), (and:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB))
                  // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N010 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N001 == N11) {
                      SDNode *Result = Emit_108(N, SPU::EQVv2i64, MVT::v2i64);
                      return Result;
                    }
                  }

                  // Pattern: (or:v2i64 (and:v2i64 (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rB), (xor:v2i64 VECREG:v2i64:$rA, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>)), (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA))
                  // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                  // Pattern complexity = 23  cost = 1  size = 0
                  if (N001 == N10) {
                    SDValue N11 = N1.getOperand(1);
                    if (N010 == N11) {
                      SDNode *Result = Emit_108(N, SPU::EQVv2i64, MVT::v2i64);
                      return Result;
                    }
                  }
                }
              }
            }
            if (N010.getOpcode() == ISD::BUILD_VECTOR &&
                Predicate_immAllOnesV(N010.getNode())) {
              SDValue N011 = N01.getOperand(1);
              SDValue N1 = N.getOperand(1);
              if (N1.getOpcode() == ISD::AND) {
                SDValue N10 = N1.getOperand(0);

                // Pattern: (or:v2i64 (and:v2i64 (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rB), (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rA)), (and:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB))
                // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                // Pattern complexity = 23  cost = 1  size = 0
                if (N011 == N10) {
                  SDValue N11 = N1.getOperand(1);
                  if (N001 == N11) {
                    SDNode *Result = Emit_109(N, SPU::EQVv2i64, MVT::v2i64);
                    return Result;
                  }
                }

                // Pattern: (or:v2i64 (and:v2i64 (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rB), (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rA)), (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA))
                // Emits: (EQVv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                // Pattern complexity = 23  cost = 1  size = 0
                if (N001 == N10) {
                  SDValue N11 = N1.getOperand(1);
                  if (N011 == N11) {
                    SDNode *Result = Emit_109(N, SPU::EQVv2i64, MVT::v2i64);
                    return Result;
                  }
                }
              }
            }
          }
        }
      }
      {
        SDValue N01 = N0.getOperand(1);
        SDValue N1 = N.getOperand(1);

        // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rC, VECREG:v2i64:$rB), (and:v2i64 (xor:v2i64 VECREG:v2i64:$rC, (bitconvert:v2i64)<<P:Predicate_immAllOnesV_bc>>), VECREG:v2i64:$rA))
        // Emits: (SELBv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB, VECREG:v2i64:$rC)
        // Pattern complexity = 16  cost = 1  size = 0
        if (N1.getOpcode() == ISD::AND) {
          SDValue N10 = N1.getOperand(0);
          if (N10.getOpcode() == ISD::XOR) {
            SDValue N100 = N10.getOperand(0);
            if (N00 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::BIT_CONVERT &&
                  Predicate_immAllOnesV_bc(N101.getNode())) {
                SDNode *Result = Emit_89(N, SPU::SELBv2i64, MVT::v2i64);
                return Result;
              }
            }
          }
        }

        // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB), (xor:v2i64 (or:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB), (build_vector:v2i64)<<P:Predicate_immAllOnesV>>))
        // Emits: (EQVv2i64_2:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
        // Pattern complexity = 16  cost = 1  size = 0
        if (N1.getOpcode() == ISD::XOR) {
          SDValue N10 = N1.getOperand(0);
          if (N10.getOpcode() == ISD::OR) {
            SDValue N100 = N10.getOperand(0);
            if (N00 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N01 == N101) {
                SDValue N11 = N1.getOperand(1);
                if (N11.getOpcode() == ISD::BUILD_VECTOR &&
                    Predicate_immAllOnesV(N11.getNode())) {
                  SDNode *Result = Emit_86(N, SPU::EQVv2i64_2, MVT::v2i64);
                  return Result;
                }
              }
            }
          }
        }
        if (N1.getOpcode() == ISD::AND) {
          SDValue N10 = N1.getOperand(0);

          // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rC, VECREG:v2i64:$rB), (and:v2i64 (xor:v2i64 (bitconvert:v2i64)<<P:Predicate_immAllOnesV_bc>>, VECREG:v2i64:$rC), VECREG:v2i64:$rA))
          // Emits: (SELBv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB, VECREG:v2i64:$rC)
          // Pattern complexity = 16  cost = 1  size = 0
          if (N10.getOpcode() == ISD::XOR) {
            SDValue N100 = N10.getOperand(0);
            if (N100.getOpcode() == ISD::BIT_CONVERT &&
                Predicate_immAllOnesV_bc(N100.getNode())) {
              SDValue N101 = N10.getOperand(1);
              if (N00 == N101) {
                SDNode *Result = Emit_89(N, SPU::SELBv2i64, MVT::v2i64);
                return Result;
              }
            }
          }
          {
            SDValue N11 = N1.getOperand(1);
            if (N11.getOpcode() == ISD::XOR) {
              SDValue N110 = N11.getOperand(0);

              // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rC, VECREG:v2i64:$rB), (and:v2i64 VECREG:v2i64:$rA, (xor:v2i64 VECREG:v2i64:$rC, (bitconvert:v2i64)<<P:Predicate_immAllOnesV_bc>>)))
              // Emits: (SELBv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB, VECREG:v2i64:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              if (N00 == N110) {
                SDValue N111 = N11.getOperand(1);
                if (N111.getOpcode() == ISD::BIT_CONVERT &&
                    Predicate_immAllOnesV_bc(N111.getNode())) {
                  SDNode *Result = Emit_88(N, SPU::SELBv2i64, MVT::v2i64);
                  return Result;
                }
              }

              // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rC, VECREG:v2i64:$rB), (and:v2i64 VECREG:v2i64:$rA, (xor:v2i64 (bitconvert:v2i64)<<P:Predicate_immAllOnesV_bc>>, VECREG:v2i64:$rC)))
              // Emits: (SELBv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB, VECREG:v2i64:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              if (N110.getOpcode() == ISD::BIT_CONVERT &&
                  Predicate_immAllOnesV_bc(N110.getNode())) {
                SDValue N111 = N11.getOperand(1);
                if (N00 == N111) {
                  SDNode *Result = Emit_88(N, SPU::SELBv2i64, MVT::v2i64);
                  return Result;
                }
              }
            }
          }
          if (N10.getOpcode() == ISD::XOR) {
            SDValue N100 = N10.getOperand(0);

            // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rC), (and:v2i64 (xor:v2i64 VECREG:v2i64:$rC, (bitconvert:v2i64)<<P:Predicate_immAllOnesV_bc>>), VECREG:v2i64:$rA))
            // Emits: (SELBv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB, VECREG:v2i64:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N01 == N100) {
              SDValue N101 = N10.getOperand(1);
              if (N101.getOpcode() == ISD::BIT_CONVERT &&
                  Predicate_immAllOnesV_bc(N101.getNode())) {
                SDNode *Result = Emit_87(N, SPU::SELBv2i64, MVT::v2i64);
                return Result;
              }
            }

            // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rC), (and:v2i64 (xor:v2i64 (bitconvert:v2i64)<<P:Predicate_immAllOnesV_bc>>, VECREG:v2i64:$rC), VECREG:v2i64:$rA))
            // Emits: (SELBv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB, VECREG:v2i64:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N100.getOpcode() == ISD::BIT_CONVERT &&
                Predicate_immAllOnesV_bc(N100.getNode())) {
              SDValue N101 = N10.getOperand(1);
              if (N01 == N101) {
                SDNode *Result = Emit_87(N, SPU::SELBv2i64, MVT::v2i64);
                return Result;
              }
            }
          }
          SDValue N11 = N1.getOperand(1);
          if (N11.getOpcode() == ISD::XOR) {
            SDValue N110 = N11.getOperand(0);

            // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rC), (and:v2i64 VECREG:v2i64:$rA, (xor:v2i64 VECREG:v2i64:$rC, (bitconvert:v2i64)<<P:Predicate_immAllOnesV_bc>>)))
            // Emits: (SELBv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB, VECREG:v2i64:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N01 == N110) {
              SDValue N111 = N11.getOperand(1);
              if (N111.getOpcode() == ISD::BIT_CONVERT &&
                  Predicate_immAllOnesV_bc(N111.getNode())) {
                SDNode *Result = Emit_84(N, SPU::SELBv2i64, MVT::v2i64);
                return Result;
              }
            }

            // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rC), (and:v2i64 VECREG:v2i64:$rA, (xor:v2i64 (bitconvert:v2i64)<<P:Predicate_immAllOnesV_bc>>, VECREG:v2i64:$rC)))
            // Emits: (SELBv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB, VECREG:v2i64:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N110.getOpcode() == ISD::BIT_CONVERT &&
                Predicate_immAllOnesV_bc(N110.getNode())) {
              SDValue N111 = N11.getOperand(1);
              if (N01 == N111) {
                SDNode *Result = Emit_84(N, SPU::SELBv2i64, MVT::v2i64);
                return Result;
              }
            }
          }
        }
      }
      if (N00.getOpcode() == ISD::XOR) {
        SDValue N000 = N00.getOperand(0);
        {
          SDValue N001 = N00.getOperand(1);
          if (N001.getOpcode() == ISD::BIT_CONVERT &&
              Predicate_immAllOnesV_bc(N001.getNode())) {
            SDValue N01 = N0.getOperand(1);
            SDValue N1 = N.getOperand(1);
            if (N1.getOpcode() == ISD::AND) {
              SDValue N10 = N1.getOperand(0);

              // Pattern: (or:v2i64 (and:v2i64 (xor:v2i64 VECREG:v2i64:$rC, (bitconvert:v2i64)<<P:Predicate_immAllOnesV_bc>>), VECREG:v2i64:$rA), (and:v2i64 VECREG:v2i64:$rC, VECREG:v2i64:$rB))
              // Emits: (SELBv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB, VECREG:v2i64:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              if (N000 == N10) {
                SDNode *Result = Emit_93(N, SPU::SELBv2i64, MVT::v2i64);
                return Result;
              }

              // Pattern: (or:v2i64 (and:v2i64 (xor:v2i64 VECREG:v2i64:$rC, (bitconvert:v2i64)<<P:Predicate_immAllOnesV_bc>>), VECREG:v2i64:$rA), (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rC))
              // Emits: (SELBv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB, VECREG:v2i64:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              SDValue N11 = N1.getOperand(1);
              if (N000 == N11) {
                SDNode *Result = Emit_92(N, SPU::SELBv2i64, MVT::v2i64);
                return Result;
              }
            }
          }
        }
        if (N000.getOpcode() == ISD::BIT_CONVERT &&
            Predicate_immAllOnesV_bc(N000.getNode())) {
          SDValue N001 = N00.getOperand(1);
          SDValue N01 = N0.getOperand(1);
          SDValue N1 = N.getOperand(1);
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);

            // Pattern: (or:v2i64 (and:v2i64 (xor:v2i64 (bitconvert:v2i64)<<P:Predicate_immAllOnesV_bc>>, VECREG:v2i64:$rC), VECREG:v2i64:$rA), (and:v2i64 VECREG:v2i64:$rC, VECREG:v2i64:$rB))
            // Emits: (SELBv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB, VECREG:v2i64:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N001 == N10) {
              SDNode *Result = Emit_100(N, SPU::SELBv2i64, MVT::v2i64);
              return Result;
            }

            // Pattern: (or:v2i64 (and:v2i64 (xor:v2i64 (bitconvert:v2i64)<<P:Predicate_immAllOnesV_bc>>, VECREG:v2i64:$rC), VECREG:v2i64:$rA), (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rC))
            // Emits: (SELBv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB, VECREG:v2i64:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            SDValue N11 = N1.getOperand(1);
            if (N001 == N11) {
              SDNode *Result = Emit_101(N, SPU::SELBv2i64, MVT::v2i64);
              return Result;
            }
          }
        }
      }
      SDValue N01 = N0.getOperand(1);
      if (N01.getOpcode() == ISD::XOR) {
        SDValue N010 = N01.getOperand(0);
        {
          SDValue N011 = N01.getOperand(1);
          if (N011.getOpcode() == ISD::BIT_CONVERT &&
              Predicate_immAllOnesV_bc(N011.getNode())) {
            SDValue N1 = N.getOperand(1);
            if (N1.getOpcode() == ISD::AND) {
              SDValue N10 = N1.getOperand(0);

              // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rA, (xor:v2i64 VECREG:v2i64:$rC, (bitconvert:v2i64)<<P:Predicate_immAllOnesV_bc>>)), (and:v2i64 VECREG:v2i64:$rC, VECREG:v2i64:$rB))
              // Emits: (SELBv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB, VECREG:v2i64:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              if (N010 == N10) {
                SDNode *Result = Emit_91(N, SPU::SELBv2i64, MVT::v2i64);
                return Result;
              }

              // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rA, (xor:v2i64 VECREG:v2i64:$rC, (bitconvert:v2i64)<<P:Predicate_immAllOnesV_bc>>)), (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rC))
              // Emits: (SELBv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB, VECREG:v2i64:$rC)
              // Pattern complexity = 16  cost = 1  size = 0
              SDValue N11 = N1.getOperand(1);
              if (N010 == N11) {
                SDNode *Result = Emit_90(N, SPU::SELBv2i64, MVT::v2i64);
                return Result;
              }
            }
          }
        }
        if (N010.getOpcode() == ISD::BIT_CONVERT &&
            Predicate_immAllOnesV_bc(N010.getNode())) {
          SDValue N011 = N01.getOperand(1);
          SDValue N1 = N.getOperand(1);
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);

            // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rA, (xor:v2i64 (bitconvert:v2i64)<<P:Predicate_immAllOnesV_bc>>, VECREG:v2i64:$rC)), (and:v2i64 VECREG:v2i64:$rC, VECREG:v2i64:$rB))
            // Emits: (SELBv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB, VECREG:v2i64:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N011 == N10) {
              SDNode *Result = Emit_102(N, SPU::SELBv2i64, MVT::v2i64);
              return Result;
            }

            // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rA, (xor:v2i64 (bitconvert:v2i64)<<P:Predicate_immAllOnesV_bc>>, VECREG:v2i64:$rC)), (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rC))
            // Emits: (SELBv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB, VECREG:v2i64:$rC)
            // Pattern complexity = 16  cost = 1  size = 0
            SDValue N11 = N1.getOperand(1);
            if (N011 == N11) {
              SDNode *Result = Emit_103(N, SPU::SELBv2i64, MVT::v2i64);
              return Result;
            }
          }
        }
      }
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);

        // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB), (xor:v2i64 (or:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA), (build_vector:v2i64)<<P:Predicate_immAllOnesV>>))
        // Emits: (EQVv2i64_2:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
        // Pattern complexity = 16  cost = 1  size = 0
        if (N10.getOpcode() == ISD::OR) {
          SDValue N100 = N10.getOperand(0);
          if (N01 == N100) {
            SDValue N101 = N10.getOperand(1);
            if (N00 == N101) {
              SDValue N11 = N1.getOperand(1);
              if (N11.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N11.getNode())) {
                SDNode *Result = Emit_86(N, SPU::EQVv2i64_2, MVT::v2i64);
                return Result;
              }
            }
          }
        }
        if (N10.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N10.getNode())) {
          SDValue N11 = N1.getOperand(1);
          if (N11.getOpcode() == ISD::OR) {
            SDValue N110 = N11.getOperand(0);

            // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB), (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, (or:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)))
            // Emits: (EQVv2i64_2:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N00 == N110) {
              SDValue N111 = N11.getOperand(1);
              if (N01 == N111) {
                SDNode *Result = Emit_110(N, SPU::EQVv2i64_2, MVT::v2i64);
                return Result;
              }
            }

            // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB), (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, (or:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA)))
            // Emits: (EQVv2i64_2:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N01 == N110) {
              SDValue N111 = N11.getOperand(1);
              if (N00 == N111) {
                SDNode *Result = Emit_110(N, SPU::EQVv2i64_2, MVT::v2i64);
                return Result;
              }
            }
          }
        }
        if (N10.getOpcode() == ISD::OR) {
          SDValue N100 = N10.getOperand(0);

          // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA), (xor:v2i64 (or:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB), (build_vector:v2i64)<<P:Predicate_immAllOnesV>>))
          // Emits: (EQVv2i64_2:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
          // Pattern complexity = 16  cost = 1  size = 0
          if (N01 == N100) {
            SDValue N101 = N10.getOperand(1);
            if (N00 == N101) {
              SDValue N11 = N1.getOperand(1);
              if (N11.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N11.getNode())) {
                SDNode *Result = Emit_97(N, SPU::EQVv2i64_2, MVT::v2i64);
                return Result;
              }
            }
          }

          // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA), (xor:v2i64 (or:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA), (build_vector:v2i64)<<P:Predicate_immAllOnesV>>))
          // Emits: (EQVv2i64_2:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
          // Pattern complexity = 16  cost = 1  size = 0
          if (N00 == N100) {
            SDValue N101 = N10.getOperand(1);
            if (N01 == N101) {
              SDValue N11 = N1.getOperand(1);
              if (N11.getOpcode() == ISD::BUILD_VECTOR &&
                  Predicate_immAllOnesV(N11.getNode())) {
                SDNode *Result = Emit_97(N, SPU::EQVv2i64_2, MVT::v2i64);
                return Result;
              }
            }
          }
        }
        if (N10.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N10.getNode())) {
          SDValue N11 = N1.getOperand(1);
          if (N11.getOpcode() == ISD::OR) {
            SDValue N110 = N11.getOperand(0);

            // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA), (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, (or:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)))
            // Emits: (EQVv2i64_2:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N01 == N110) {
              SDValue N111 = N11.getOperand(1);
              if (N00 == N111) {
                SDNode *Result = Emit_111(N, SPU::EQVv2i64_2, MVT::v2i64);
                return Result;
              }
            }

            // Pattern: (or:v2i64 (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA), (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, (or:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA)))
            // Emits: (EQVv2i64_2:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N00 == N110) {
              SDValue N111 = N11.getOperand(1);
              if (N01 == N111) {
                SDNode *Result = Emit_111(N, SPU::EQVv2i64_2, MVT::v2i64);
                return Result;
              }
            }
          }
        }
      }
    }
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);
      if (N00.getOpcode() == ISD::OR) {
        SDValue N000 = N00.getOperand(0);
        SDValue N001 = N00.getOperand(1);
        SDValue N01 = N0.getOperand(1);
        if (N01.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N01.getNode())) {
          SDValue N1 = N.getOperand(1);
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);

            // Pattern: (or:v2i64 (xor:v2i64 (or:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB), (build_vector:v2i64)<<P:Predicate_immAllOnesV>>), (and:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB))
            // Emits: (EQVv2i64_2:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N000 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N001 == N11) {
                SDNode *Result = Emit_98(N, SPU::EQVv2i64_2, MVT::v2i64);
                return Result;
              }
            }
            if (N001 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N000 == N11) {

                // Pattern: (or:v2i64 (xor:v2i64 (or:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB), (build_vector:v2i64)<<P:Predicate_immAllOnesV>>), (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA))
                // Emits: (EQVv2i64_2:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                {
                  SDNode *Result = Emit_98(N, SPU::EQVv2i64_2, MVT::v2i64);
                  return Result;
                }

                // Pattern: (or:v2i64 (xor:v2i64 (or:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA), (build_vector:v2i64)<<P:Predicate_immAllOnesV>>), (and:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB))
                // Emits: (EQVv2i64_2:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                SDNode *Result = Emit_99(N, SPU::EQVv2i64_2, MVT::v2i64);
                return Result;
              }
            }

            // Pattern: (or:v2i64 (xor:v2i64 (or:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA), (build_vector:v2i64)<<P:Predicate_immAllOnesV>>), (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA))
            // Emits: (EQVv2i64_2:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N000 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N001 == N11) {
                SDNode *Result = Emit_99(N, SPU::EQVv2i64_2, MVT::v2i64);
                return Result;
              }
            }
          }
        }
      }
      if (N00.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_immAllOnesV(N00.getNode())) {
        SDValue N01 = N0.getOperand(1);
        if (N01.getOpcode() == ISD::OR) {
          SDValue N010 = N01.getOperand(0);
          SDValue N011 = N01.getOperand(1);
          SDValue N1 = N.getOperand(1);
          if (N1.getOpcode() == ISD::AND) {
            SDValue N10 = N1.getOperand(0);

            // Pattern: (or:v2i64 (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, (or:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)), (and:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB))
            // Emits: (EQVv2i64_2:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N010 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N011 == N11) {
                SDNode *Result = Emit_112(N, SPU::EQVv2i64_2, MVT::v2i64);
                return Result;
              }
            }
            if (N011 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N010 == N11) {

                // Pattern: (or:v2i64 (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, (or:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)), (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA))
                // Emits: (EQVv2i64_2:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                {
                  SDNode *Result = Emit_112(N, SPU::EQVv2i64_2, MVT::v2i64);
                  return Result;
                }

                // Pattern: (or:v2i64 (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, (or:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA)), (and:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB))
                // Emits: (EQVv2i64_2:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
                // Pattern complexity = 16  cost = 1  size = 0
                SDNode *Result = Emit_113(N, SPU::EQVv2i64_2, MVT::v2i64);
                return Result;
              }
            }

            // Pattern: (or:v2i64 (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, (or:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA)), (and:v2i64 VECREG:v2i64:$rB, VECREG:v2i64:$rA))
            // Emits: (EQVv2i64_2:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
            // Pattern complexity = 16  cost = 1  size = 0
            if (N010 == N10) {
              SDValue N11 = N1.getOperand(1);
              if (N011 == N11) {
                SDNode *Result = Emit_113(N, SPU::EQVv2i64_2, MVT::v2i64);
                return Result;
              }
            }
          }
        }
      }
    }
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);

        // Pattern: (or:v2i64 VECREG:v2i64:$rA, (xor:v2i64 VECREG:v2i64:$rB, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>))
        // Emits: (ORCv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
        // Pattern complexity = 10  cost = 1  size = 0
        {
          SDValue N11 = N1.getOperand(1);
          if (N11.getOpcode() == ISD::BUILD_VECTOR &&
              Predicate_immAllOnesV(N11.getNode())) {
            SDNode *Result = Emit_14(N, SPU::ORCv2i64, MVT::v2i64);
            return Result;
          }
        }

        // Pattern: (or:v2i64 VECREG:v2i64:$rA, (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rB))
        // Emits: (ORCv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
        // Pattern complexity = 10  cost = 1  size = 0
        if (N10.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N10.getNode())) {
          SDNode *Result = Emit_22(N, SPU::ORCv2i64, MVT::v2i64);
          return Result;
        }
      }
    }
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);

      // Pattern: (or:v2i64 (xor:v2i64 VECREG:v2i64:$rB, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>), VECREG:v2i64:$rA)
      // Emits: (ORCv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      {
        SDValue N01 = N0.getOperand(1);
        if (N01.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N01.getNode())) {
          SDNode *Result = Emit_16(N, SPU::ORCv2i64, MVT::v2i64);
          return Result;
        }
      }

      // Pattern: (or:v2i64 (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rB), VECREG:v2i64:$rA)
      // Emits: (ORCv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      if (N00.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_immAllOnesV(N00.getNode())) {
        SDNode *Result = Emit_23(N, SPU::ORCv2i64, MVT::v2i64);
        return Result;
      }
    }
  }

  // Pattern: (or:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
  // Emits: (ORv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::ORv2i64, MVT::v2i64);
  return Result;
}

SDNode *Emit_118(const SDValue &N, unsigned Opc0) DISABLE_INLINE {
  SDValue Chain = N.getOperand(0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, MVT::Other, Chain);
}
SDNode *Select_ISD_RET(const SDValue &N) {
  SDNode *Result = Emit_118(N, SPU::RET);
  return Result;
}

SDNode *Select_ISD_ROTL_i16(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_uimm7(N1.getNode())) {

    // Pattern: (rotl:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_uimm7>>:$val)
    // Emits: (ROTHIr16:i16 R16C:i16:$rA, (imm:i16):$val)
    // Pattern complexity = 7  cost = 1  size = 0
    if (N1.getNode()->getValueType(0) == MVT::i16) {
      SDNode *Result = Emit_1(N, SPU::ROTHIr16, MVT::i16);
      return Result;
    }

    // Pattern: (rotl:i16 R16C:i16:$rA, (imm:i32)<<P:Predicate_uimm7>>:$val)
    // Emits: (ROTHIr16_r32:i16 R16C:i16:$rA, (imm:i32):$val)
    // Pattern complexity = 7  cost = 1  size = 0
    if (N1.getNode()->getValueType(0) == MVT::i32) {
      SDNode *Result = Emit_2(N, SPU::ROTHIr16_r32, MVT::i16);
      return Result;
    }
  }

  // Pattern: (rotl:i16 R16C:i16:$rA, R16C:i16:$rB)
  // Emits: (ROTHr16:i16 R16C:i16:$rA, R16C:i16:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_0(N, SPU::ROTHr16, MVT::i16);
    return Result;
  }

  // Pattern: (rotl:i16 R16C:i16:$rA, R32C:i32:$rB)
  // Emits: (ROTHr16_r32:i16 R16C:i16:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_0(N, SPU::ROTHr16_r32, MVT::i16);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_119(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N0, N10);
}
SDNode *Select_ISD_ROTL_i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_uimm7(N1.getNode())) {

    // Pattern: (rotl:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_uimm7>>:$val)
    // Emits: (ROTIr32:i32 R32C:i32:$rA, (imm:i32):$val)
    // Pattern complexity = 7  cost = 1  size = 0
    if (N1.getNode()->getValueType(0) == MVT::i32) {
      SDNode *Result = Emit_2(N, SPU::ROTIr32, MVT::i32);
      return Result;
    }

    // Pattern: (rotl:i32 R32C:i32:$rA, (imm:i16)<<P:Predicate_uimm7>>:$val)
    // Emits: (ROTIr32_i16:i32 R32C:i32:$rA, (imm:i16):$val)
    // Pattern complexity = 7  cost = 1  size = 0
    if (N1.getNode()->getValueType(0) == MVT::i16) {
      SDNode *Result = Emit_1(N, SPU::ROTIr32_i16, MVT::i32);
      return Result;
    }

    // Pattern: (rotl:i32 R32C:i32:$rA, (imm:i8)<<P:Predicate_uimm7>>:$val)
    // Emits: (ROTIr32_i8:i32 R32C:i32:$rA, (imm:i8):$val)
    // Pattern complexity = 7  cost = 1  size = 0
    if (N1.getNode()->getValueType(0) == MVT::i8) {
      SDNode *Result = Emit_15(N, SPU::ROTIr32_i8, MVT::i32);
      return Result;
    }
  }
  if (N1.getOpcode() == ISD::ANY_EXTEND) {
    SDValue N10 = N1.getOperand(0);
    if (N1.getNode()->getValueType(0) == MVT::i32) {

      // Pattern: (rotl:i32 R32C:i32:$rA, (anyext:i32 R16C:i16:$rB))
      // Emits: (ROTr32_r16_anyext:i32 R32C:i32:$rA, R16C:i16:$rB)
      // Pattern complexity = 6  cost = 1  size = 0
      if (N10.getNode()->getValueType(0) == MVT::i16) {
        SDNode *Result = Emit_119(N, SPU::ROTr32_r16_anyext, MVT::i32);
        return Result;
      }

      // Pattern: (rotl:i32 R32C:i32:$rA, (anyext:i32 R8C:i8:$rB))
      // Emits: (ROTr32_r8_anyext:i32 R32C:i32:$rA, R8C:i8:$rB)
      // Pattern complexity = 6  cost = 1  size = 0
      if (N10.getNode()->getValueType(0) == MVT::i8) {
        SDNode *Result = Emit_119(N, SPU::ROTr32_r8_anyext, MVT::i32);
        return Result;
      }
    }
  }

  // Pattern: (rotl:i32 R32C:i32:$rA, (zext:i32 R16C:i16:$rB))
  // Emits: (ROTr32_r16_anyext:i32 R32C:i32:$rA, R16C:i16:$rB)
  // Pattern complexity = 6  cost = 1  size = 0
  if (N1.getOpcode() == ISD::ZERO_EXTEND) {
    SDValue N10 = N1.getOperand(0);
    if (N1.getNode()->getValueType(0) == MVT::i32 &&
        N10.getNode()->getValueType(0) == MVT::i16) {
      SDNode *Result = Emit_119(N, SPU::ROTr32_r16_anyext, MVT::i32);
      return Result;
    }
  }

  // Pattern: (rotl:i32 R32C:i32:$rA, (sext:i32 R16C:i16:$rB))
  // Emits: (ROTr32_r16_anyext:i32 R32C:i32:$rA, R16C:i16:$rB)
  // Pattern complexity = 6  cost = 1  size = 0
  if (N1.getOpcode() == ISD::SIGN_EXTEND) {
    SDValue N10 = N1.getOperand(0);
    if (N1.getNode()->getValueType(0) == MVT::i32 &&
        N10.getNode()->getValueType(0) == MVT::i16) {
      SDNode *Result = Emit_119(N, SPU::ROTr32_r16_anyext, MVT::i32);
      return Result;
    }
  }

  // Pattern: (rotl:i32 R32C:i32:$rA, (zext:i32 R8C:i8:$rB))
  // Emits: (ROTr32_r8_anyext:i32 R32C:i32:$rA, R8C:i8:$rB)
  // Pattern complexity = 6  cost = 1  size = 0
  if (N1.getOpcode() == ISD::ZERO_EXTEND) {
    SDValue N10 = N1.getOperand(0);
    if (N1.getNode()->getValueType(0) == MVT::i32 &&
        N10.getNode()->getValueType(0) == MVT::i8) {
      SDNode *Result = Emit_119(N, SPU::ROTr32_r8_anyext, MVT::i32);
      return Result;
    }
  }

  // Pattern: (rotl:i32 R32C:i32:$rA, (sext:i32 R8C:i8:$rB))
  // Emits: (ROTr32_r8_anyext:i32 R32C:i32:$rA, R8C:i8:$rB)
  // Pattern complexity = 6  cost = 1  size = 0
  if (N1.getOpcode() == ISD::SIGN_EXTEND) {
    SDValue N10 = N1.getOperand(0);
    if (N1.getNode()->getValueType(0) == MVT::i32 &&
        N10.getNode()->getValueType(0) == MVT::i8) {
      SDNode *Result = Emit_119(N, SPU::ROTr32_r8_anyext, MVT::i32);
      return Result;
    }
  }

  // Pattern: (rotl:i32 R32C:i32:$rA, R32C:i32:$rB)
  // Emits: (ROTr32:i32 R32C:i32:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_0(N, SPU::ROTr32, MVT::i32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_120(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N2, N1, N0);
}
SDNode *Emit_121(const SDValue &N, unsigned Opc0, unsigned Opc1, MVT VT0, MVT VT1) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N02 = N0.getOperand(2);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp4(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N00, N01), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc1, VT1, N1, N2, Tmp4);
}
SDNode *Emit_122(const SDValue &N, unsigned Opc0, unsigned Opc1, MVT VT0, MVT VT1) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N02 = N0.getOperand(2);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp3 = CurDAG->getTargetConstant(((unsigned char) cast<ConstantSDNode>(N01)->getZExtValue()), MVT::i8);
  SDValue Tmp4(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N00, Tmp3), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc1, VT1, N1, N2, Tmp4);
}
SDNode *Emit_123(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, MVT VT0, MVT VT1, MVT VT2, MVT VT3) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N02 = N0.getOperand(2);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp4(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N00, N01), 0);
  SDValue Tmp7(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N00, N01), 0);
  SDValue Tmp8(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, Tmp4, Tmp7), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc3, VT3, N2, N1, Tmp8);
}
SDNode *Emit_124(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, MVT VT0, MVT VT1, MVT VT2, MVT VT3) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N02 = N0.getOperand(2);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp3 = CurDAG->getTargetConstant(((unsigned char) cast<ConstantSDNode>(N01)->getZExtValue()), MVT::i8);
  SDValue Tmp4(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N00, Tmp3), 0);
  SDValue Tmp6(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N00, Tmp3), 0);
  SDValue Tmp7(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, Tmp4, Tmp6), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc3, VT3, N2, N1, Tmp7);
}
SDNode *Select_ISD_SELECT_i8(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getOpcode() == ISD::SETCC) {
    SDValue N00 = N0.getOperand(0);
    SDValue N01 = N0.getOperand(1);
    if (N01.getOpcode() == ISD::Constant) {
      if (Predicate_immSExt8(N01.getNode())) {
        SDValue N02 = N0.getOperand(2);

        // Pattern: (select:i8 (setcc:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immSExt8>>:$imm, SETNE:Other), R8C:i8:$rTrue, R8C:i8:$rFalse)
        // Emits: (SELBr8:i8 R8C:i8:$rTrue, R8C:i8:$rFalse, (CEQBIr8:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immSExt8>>:$imm))
        // Pattern complexity = 10  cost = 2  size = 0
        if (cast<CondCodeSDNode>(N02)->get() == ISD::SETNE) {
          SDValue N1 = N.getOperand(1);
          SDValue N2 = N.getOperand(2);
          if (N0.getNode()->getValueType(0) == MVT::i8 &&
              N00.getNode()->getValueType(0) == MVT::i8) {
            SDNode *Result = Emit_122(N, SPU::CEQBIr8, SPU::SELBr8, MVT::i8, MVT::i8);
            return Result;
          }
        }

        // Pattern: (select:i8 (setcc:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immSExt8>>:$imm, SETLE:Other), R8C:i8:$rTrue, R8C:i8:$rFalse)
        // Emits: (SELBr8:i8 R8C:i8:$rTrue, R8C:i8:$rFalse, (CGTBr8:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immSExt8>>:$imm))
        // Pattern complexity = 10  cost = 2  size = 0
        if (cast<CondCodeSDNode>(N02)->get() == ISD::SETLE) {
          SDValue N1 = N.getOperand(1);
          SDValue N2 = N.getOperand(2);
          if (N0.getNode()->getValueType(0) == MVT::i8 &&
              N00.getNode()->getValueType(0) == MVT::i8) {
            SDNode *Result = Emit_122(N, SPU::CGTBr8, SPU::SELBr8, MVT::i8, MVT::i8);
            return Result;
          }
        }
      }

      // Pattern: (select:i8 (setcc:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immU8>>:$imm, SETULE:Other), R8C:i8:$rTrue, R8C:i8:$rFalse)
      // Emits: (SELBr8:i8 R8C:i8:$rTrue, R8C:i8:$rFalse, (CLGTBIr8:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immU8>>:$imm))
      // Pattern complexity = 10  cost = 2  size = 0
      if (Predicate_immU8(N01.getNode())) {
        SDValue N02 = N0.getOperand(2);
        if (cast<CondCodeSDNode>(N02)->get() == ISD::SETULE) {
          SDValue N1 = N.getOperand(1);
          SDValue N2 = N.getOperand(2);
          if (N0.getNode()->getValueType(0) == MVT::i8 &&
              N00.getNode()->getValueType(0) == MVT::i8) {
            SDNode *Result = Emit_122(N, SPU::CLGTBIr8, SPU::SELBr8, MVT::i8, MVT::i8);
            return Result;
          }
        }
      }
      if (Predicate_immSExt8(N01.getNode())) {
        SDValue N02 = N0.getOperand(2);

        // Pattern: (select:i8 (setcc:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immSExt8>>:$imm, SETGE:Other), R8C:i8:$rTrue, R8C:i8:$rFalse)
        // Emits: (SELBr8:i8 R8C:i8:$rFalse, R8C:i8:$rTrue, (ORr8:i8 (CGTBIr8:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immSExt8>>:$imm), (CEQBIr8:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immSExt8>>:$imm)))
        // Pattern complexity = 10  cost = 4  size = 0
        if (cast<CondCodeSDNode>(N02)->get() == ISD::SETGE) {
          SDValue N1 = N.getOperand(1);
          SDValue N2 = N.getOperand(2);
          if (N0.getNode()->getValueType(0) == MVT::i8 &&
              N00.getNode()->getValueType(0) == MVT::i8) {
            SDNode *Result = Emit_124(N, SPU::CGTBIr8, SPU::CEQBIr8, SPU::ORr8, SPU::SELBr8, MVT::i8, MVT::i8, MVT::i8, MVT::i8);
            return Result;
          }
        }

        // Pattern: (select:i8 (setcc:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immSExt8>>:$imm, SETUGE:Other), R8C:i8:$rTrue, R8C:i8:$rFalse)
        // Emits: (SELBr8:i8 R8C:i8:$rFalse, R8C:i8:$rTrue, (ORr8:i8 (CLGTBIr8:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immSExt8>>:$imm), (CEQBIr8:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immSExt8>>:$imm)))
        // Pattern complexity = 10  cost = 4  size = 0
        if (cast<CondCodeSDNode>(N02)->get() == ISD::SETUGE) {
          SDValue N1 = N.getOperand(1);
          SDValue N2 = N.getOperand(2);
          if (N0.getNode()->getValueType(0) == MVT::i8 &&
              N00.getNode()->getValueType(0) == MVT::i8) {
            SDNode *Result = Emit_124(N, SPU::CLGTBIr8, SPU::CEQBIr8, SPU::ORr8, SPU::SELBr8, MVT::i8, MVT::i8, MVT::i8, MVT::i8);
            return Result;
          }
        }
      }
    }
    SDValue N02 = N0.getOperand(2);

    // Pattern: (select:i8 (setcc:i8 R8C:i8:$rA, R8C:i8:$rB, SETNE:Other), R8C:i8:$rTrue, R8C:i8:$rFalse)
    // Emits: (SELBr8:i8 R8C:i8:$rTrue, R8C:i8:$rFalse, (CEQBr8:i8 R8C:i8:$rA, R8C:i8:$rB))
    // Pattern complexity = 6  cost = 2  size = 0
    if (cast<CondCodeSDNode>(N02)->get() == ISD::SETNE) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N0.getNode()->getValueType(0) == MVT::i8 &&
          N00.getNode()->getValueType(0) == MVT::i8) {
        SDNode *Result = Emit_121(N, SPU::CEQBr8, SPU::SELBr8, MVT::i8, MVT::i8);
        return Result;
      }
    }

    // Pattern: (select:i8 (setcc:i8 R8C:i8:$rA, R8C:i8:$rB, SETLE:Other), R8C:i8:$rTrue, R8C:i8:$rFalse)
    // Emits: (SELBr8:i8 R8C:i8:$rTrue, R8C:i8:$rFalse, (CGTBr8:i8 R8C:i8:$rA, R8C:i8:$rB))
    // Pattern complexity = 6  cost = 2  size = 0
    if (cast<CondCodeSDNode>(N02)->get() == ISD::SETLE) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N0.getNode()->getValueType(0) == MVT::i8 &&
          N00.getNode()->getValueType(0) == MVT::i8) {
        SDNode *Result = Emit_121(N, SPU::CGTBr8, SPU::SELBr8, MVT::i8, MVT::i8);
        return Result;
      }
    }

    // Pattern: (select:i8 (setcc:i8 R8C:i8:$rA, R8C:i8:$rB, SETULE:Other), R8C:i8:$rTrue, R8C:i8:$rFalse)
    // Emits: (SELBr8:i8 R8C:i8:$rTrue, R8C:i8:$rFalse, (CLGTBr8:i8 R8C:i8:$rA, R8C:i8:$rB))
    // Pattern complexity = 6  cost = 2  size = 0
    if (cast<CondCodeSDNode>(N02)->get() == ISD::SETULE) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N0.getNode()->getValueType(0) == MVT::i8 &&
          N00.getNode()->getValueType(0) == MVT::i8) {
        SDNode *Result = Emit_121(N, SPU::CLGTBr8, SPU::SELBr8, MVT::i8, MVT::i8);
        return Result;
      }
    }

    // Pattern: (select:i8 (setcc:i8 R8C:i8:$rA, R8C:i8:$rB, SETGE:Other), R8C:i8:$rTrue, R8C:i8:$rFalse)
    // Emits: (SELBr8:i8 R8C:i8:$rFalse, R8C:i8:$rTrue, (ORr8:i8 (CGTBr8:i8 R8C:i8:$rA, R8C:i8:$rB), (CEQBr8:i8 R8C:i8:$rA, R8C:i8:$rB)))
    // Pattern complexity = 6  cost = 4  size = 0
    if (cast<CondCodeSDNode>(N02)->get() == ISD::SETGE) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N0.getNode()->getValueType(0) == MVT::i8 &&
          N00.getNode()->getValueType(0) == MVT::i8) {
        SDNode *Result = Emit_123(N, SPU::CGTBr8, SPU::CEQBr8, SPU::ORr8, SPU::SELBr8, MVT::i8, MVT::i8, MVT::i8, MVT::i8);
        return Result;
      }
    }

    // Pattern: (select:i8 (setcc:i8 R8C:i8:$rA, R8C:i8:$rB, SETUGE:Other), R8C:i8:$rTrue, R8C:i8:$rFalse)
    // Emits: (SELBr8:i8 R8C:i8:$rFalse, R8C:i8:$rTrue, (ORr8:i8 (CLGTBr8:i8 R8C:i8:$rA, R8C:i8:$rB), (CEQBr8:i8 R8C:i8:$rA, R8C:i8:$rB)))
    // Pattern complexity = 6  cost = 4  size = 0
    if (cast<CondCodeSDNode>(N02)->get() == ISD::SETUGE) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N0.getNode()->getValueType(0) == MVT::i8 &&
          N00.getNode()->getValueType(0) == MVT::i8) {
        SDNode *Result = Emit_123(N, SPU::CLGTBr8, SPU::CEQBr8, SPU::ORr8, SPU::SELBr8, MVT::i8, MVT::i8, MVT::i8, MVT::i8);
        return Result;
      }
    }
  }

  // Pattern: (select:i8 R8C:i8:$rC, R8C:i8:$rB, R8C:i8:$rA)
  // Emits: (SELBr8_cond:i8 R8C:i8:$rA, R8C:i8:$rB, R8C:i8:$rC)
  // Pattern complexity = 3  cost = 1  size = 0
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  if (N0.getNode()->getValueType(0) == MVT::i8) {
    SDNode *Result = Emit_120(N, SPU::SELBr8_cond, MVT::i8);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_125(const SDValue &N, unsigned Opc0, unsigned Opc1, MVT VT0, MVT VT1) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N02 = N0.getOperand(2);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp3 = CurDAG->getTargetConstant(((unsigned short) cast<ConstantSDNode>(N01)->getZExtValue()), MVT::i16);
  SDValue Tmp4(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N00, Tmp3), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc1, VT1, N1, N2, Tmp4);
}
SDNode *Emit_126(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, MVT VT0, MVT VT1, MVT VT2, MVT VT3) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N02 = N0.getOperand(2);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp3 = CurDAG->getTargetConstant(((unsigned short) cast<ConstantSDNode>(N01)->getZExtValue()), MVT::i16);
  SDValue Tmp4(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N00, Tmp3), 0);
  SDValue Tmp6(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N00, Tmp3), 0);
  SDValue Tmp7(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, Tmp4, Tmp6), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc3, VT3, N2, N1, Tmp7);
}
SDNode *Select_ISD_SELECT_i16(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getOpcode() == ISD::SETCC) {
    SDValue N00 = N0.getOperand(0);
    SDValue N01 = N0.getOperand(1);
    if (N01.getOpcode() == ISD::Constant) {
      if (Predicate_i16ImmSExt10(N01.getNode())) {
        SDValue N02 = N0.getOperand(2);

        // Pattern: (select:i16 (setcc:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$imm, SETNE:Other), R16C:i16:$rTrue, R16C:i16:$rFalse)
        // Emits: (SELBr16:i16 R16C:i16:$rTrue, R16C:i16:$rFalse, (CEQHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$imm))
        // Pattern complexity = 10  cost = 2  size = 0
        if (cast<CondCodeSDNode>(N02)->get() == ISD::SETNE) {
          SDValue N1 = N.getOperand(1);
          SDValue N2 = N.getOperand(2);
          if (N0.getNode()->getValueType(0) == MVT::i16 &&
              N00.getNode()->getValueType(0) == MVT::i16) {
            SDNode *Result = Emit_125(N, SPU::CEQHIr16, SPU::SELBr16, MVT::i16, MVT::i16);
            return Result;
          }
        }

        // Pattern: (select:i16 (setcc:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$imm, SETLE:Other), R16C:i16:$rTrue, R16C:i16:$rFalse)
        // Emits: (SELBr16:i16 R16C:i16:$rTrue, R16C:i16:$rFalse, (CGTHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$imm))
        // Pattern complexity = 10  cost = 2  size = 0
        if (cast<CondCodeSDNode>(N02)->get() == ISD::SETLE) {
          SDValue N1 = N.getOperand(1);
          SDValue N2 = N.getOperand(2);
          if (N0.getNode()->getValueType(0) == MVT::i16 &&
              N00.getNode()->getValueType(0) == MVT::i16) {
            SDNode *Result = Emit_125(N, SPU::CGTHIr16, SPU::SELBr16, MVT::i16, MVT::i16);
            return Result;
          }
        }

        // Pattern: (select:i16 (setcc:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$imm, SETULE:Other), R16C:i16:$rTrue, R16C:i16:$rFalse)
        // Emits: (SELBr16:i16 R16C:i16:$rTrue, R16C:i16:$rFalse, (CLGTHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$imm))
        // Pattern complexity = 10  cost = 2  size = 0
        if (cast<CondCodeSDNode>(N02)->get() == ISD::SETULE) {
          SDValue N1 = N.getOperand(1);
          SDValue N2 = N.getOperand(2);
          if (N0.getNode()->getValueType(0) == MVT::i16 &&
              N00.getNode()->getValueType(0) == MVT::i16) {
            SDNode *Result = Emit_125(N, SPU::CLGTHIr16, SPU::SELBr16, MVT::i16, MVT::i16);
            return Result;
          }
        }

        // Pattern: (select:i16 (setcc:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$imm, SETGE:Other), R16C:i16:$rTrue, R16C:i16:$rFalse)
        // Emits: (SELBr16:i16 R16C:i16:$rFalse, R16C:i16:$rTrue, (ORr16:i16 (CGTHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$imm), (CEQHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$imm)))
        // Pattern complexity = 10  cost = 4  size = 0
        if (cast<CondCodeSDNode>(N02)->get() == ISD::SETGE) {
          SDValue N1 = N.getOperand(1);
          SDValue N2 = N.getOperand(2);
          if (N0.getNode()->getValueType(0) == MVT::i16 &&
              N00.getNode()->getValueType(0) == MVT::i16) {
            SDNode *Result = Emit_126(N, SPU::CGTHIr16, SPU::CEQHIr16, SPU::ORr16, SPU::SELBr16, MVT::i16, MVT::i16, MVT::i16, MVT::i16);
            return Result;
          }
        }
      }

      // Pattern: (select:i16 (setcc:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmUns10>>:$imm, SETUGE:Other), R16C:i16:$rTrue, R16C:i16:$rFalse)
      // Emits: (SELBr16:i16 R16C:i16:$rFalse, R16C:i16:$rTrue, (ORr16:i16 (CLGTHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmUns10>>:$imm), (CEQHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmUns10>>:$imm)))
      // Pattern complexity = 10  cost = 4  size = 0
      if (Predicate_i16ImmUns10(N01.getNode())) {
        SDValue N02 = N0.getOperand(2);
        if (cast<CondCodeSDNode>(N02)->get() == ISD::SETUGE) {
          SDValue N1 = N.getOperand(1);
          SDValue N2 = N.getOperand(2);
          if (N0.getNode()->getValueType(0) == MVT::i16 &&
              N00.getNode()->getValueType(0) == MVT::i16) {
            SDNode *Result = Emit_126(N, SPU::CLGTHIr16, SPU::CEQHIr16, SPU::ORr16, SPU::SELBr16, MVT::i16, MVT::i16, MVT::i16, MVT::i16);
            return Result;
          }
        }
      }
    }
    SDValue N02 = N0.getOperand(2);

    // Pattern: (select:i16 (setcc:i16 R16C:i16:$rA, R16C:i16:$rB, SETNE:Other), R16C:i16:$rTrue, R16C:i16:$rFalse)
    // Emits: (SELBr16:i16 R16C:i16:$rTrue, R16C:i16:$rFalse, (CEQHr16:i16 R16C:i16:$rA, R16C:i16:$rB))
    // Pattern complexity = 6  cost = 2  size = 0
    if (cast<CondCodeSDNode>(N02)->get() == ISD::SETNE) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N0.getNode()->getValueType(0) == MVT::i16 &&
          N00.getNode()->getValueType(0) == MVT::i16) {
        SDNode *Result = Emit_121(N, SPU::CEQHr16, SPU::SELBr16, MVT::i16, MVT::i16);
        return Result;
      }
    }

    // Pattern: (select:i16 (setcc:i16 R16C:i16:$rA, R16C:i16:$rB, SETLE:Other), R16C:i16:$rTrue, R16C:i16:$rFalse)
    // Emits: (SELBr16:i16 R16C:i16:$rTrue, R16C:i16:$rFalse, (CGTHr16:i16 R16C:i16:$rA, R16C:i16:$rB))
    // Pattern complexity = 6  cost = 2  size = 0
    if (cast<CondCodeSDNode>(N02)->get() == ISD::SETLE) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N0.getNode()->getValueType(0) == MVT::i16 &&
          N00.getNode()->getValueType(0) == MVT::i16) {
        SDNode *Result = Emit_121(N, SPU::CGTHr16, SPU::SELBr16, MVT::i16, MVT::i16);
        return Result;
      }
    }

    // Pattern: (select:i16 (setcc:i16 R16C:i16:$rA, R16C:i16:$rB, SETULE:Other), R16C:i16:$rTrue, R16C:i16:$rFalse)
    // Emits: (SELBr16:i16 R16C:i16:$rTrue, R16C:i16:$rFalse, (CLGTHr16:i16 R16C:i16:$rA, R16C:i16:$rB))
    // Pattern complexity = 6  cost = 2  size = 0
    if (cast<CondCodeSDNode>(N02)->get() == ISD::SETULE) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N0.getNode()->getValueType(0) == MVT::i16 &&
          N00.getNode()->getValueType(0) == MVT::i16) {
        SDNode *Result = Emit_121(N, SPU::CLGTHr16, SPU::SELBr16, MVT::i16, MVT::i16);
        return Result;
      }
    }

    // Pattern: (select:i16 (setcc:i16 R16C:i16:$rA, R16C:i16:$rB, SETGE:Other), R16C:i16:$rTrue, R16C:i16:$rFalse)
    // Emits: (SELBr16:i16 R16C:i16:$rFalse, R16C:i16:$rTrue, (ORr16:i16 (CGTHr16:i16 R16C:i16:$rA, R16C:i16:$rB), (CEQHr16:i16 R16C:i16:$rA, R16C:i16:$rB)))
    // Pattern complexity = 6  cost = 4  size = 0
    if (cast<CondCodeSDNode>(N02)->get() == ISD::SETGE) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N0.getNode()->getValueType(0) == MVT::i16 &&
          N00.getNode()->getValueType(0) == MVT::i16) {
        SDNode *Result = Emit_123(N, SPU::CGTHr16, SPU::CEQHr16, SPU::ORr16, SPU::SELBr16, MVT::i16, MVT::i16, MVT::i16, MVT::i16);
        return Result;
      }
    }

    // Pattern: (select:i16 (setcc:i16 R16C:i16:$rA, R16C:i16:$rB, SETUGE:Other), R16C:i16:$rTrue, R16C:i16:$rFalse)
    // Emits: (SELBr16:i16 R16C:i16:$rFalse, R16C:i16:$rTrue, (ORr16:i16 (CLGTHr16:i16 R16C:i16:$rA, R16C:i16:$rB), (CEQHr16:i16 R16C:i16:$rA, R16C:i16:$rB)))
    // Pattern complexity = 6  cost = 4  size = 0
    if (cast<CondCodeSDNode>(N02)->get() == ISD::SETUGE) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N0.getNode()->getValueType(0) == MVT::i16 &&
          N00.getNode()->getValueType(0) == MVT::i16) {
        SDNode *Result = Emit_123(N, SPU::CLGTHr16, SPU::CEQHr16, SPU::ORr16, SPU::SELBr16, MVT::i16, MVT::i16, MVT::i16, MVT::i16);
        return Result;
      }
    }
  }

  // Pattern: (select:i16 R16C:i16:$rC, R16C:i16:$rB, R16C:i16:$rA)
  // Emits: (SELBr16_cond:i16 R16C:i16:$rA, R16C:i16:$rB, R16C:i16:$rC)
  // Pattern complexity = 3  cost = 1  size = 0
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  if (N0.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_120(N, SPU::SELBr16_cond, MVT::i16);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_127(const SDValue &N, unsigned Opc0, unsigned Opc1, MVT VT0, MVT VT1) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N02 = N0.getOperand(2);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp3 = CurDAG->getTargetConstant(((unsigned) cast<ConstantSDNode>(N01)->getZExtValue()), MVT::i32);
  SDValue Tmp4(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N00, Tmp3), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc1, VT1, N1, N2, Tmp4);
}
SDNode *Emit_128(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, MVT VT0, MVT VT1, MVT VT2, MVT VT3) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N02 = N0.getOperand(2);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp3 = CurDAG->getTargetConstant(((unsigned) cast<ConstantSDNode>(N01)->getZExtValue()), MVT::i32);
  SDValue Tmp4(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N00, Tmp3), 0);
  SDValue Tmp6(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N00, Tmp3), 0);
  SDValue Tmp7(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, Tmp4, Tmp6), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc3, VT3, N2, N1, Tmp7);
}
SDNode *Select_ISD_SELECT_i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getOpcode() == ISD::SETCC) {
    SDValue N00 = N0.getOperand(0);
    SDValue N01 = N0.getOperand(1);
    if (N01.getOpcode() == ISD::Constant) {
      if (Predicate_i32ImmSExt10(N01.getNode())) {
        SDValue N02 = N0.getOperand(2);

        // Pattern: (select:i32 (setcc:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$imm, SETNE:Other), R32C:i32:$rTrue, R32C:i32:$rFalse)
        // Emits: (SELBr32:i32 R32C:i32:$rTrue, R32C:i32:$rFalse, (CEQIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$imm))
        // Pattern complexity = 10  cost = 2  size = 0
        if (cast<CondCodeSDNode>(N02)->get() == ISD::SETNE) {
          SDValue N1 = N.getOperand(1);
          SDValue N2 = N.getOperand(2);
          if (N0.getNode()->getValueType(0) == MVT::i32 &&
              N00.getNode()->getValueType(0) == MVT::i32) {
            SDNode *Result = Emit_127(N, SPU::CEQIr32, SPU::SELBr32, MVT::i32, MVT::i32);
            return Result;
          }
        }

        // Pattern: (select:i32 (setcc:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$imm, SETLE:Other), R32C:i32:$rTrue, R32C:i32:$rFalse)
        // Emits: (SELBr32:i32 R32C:i32:$rTrue, R32C:i32:$rFalse, (CGTIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$imm))
        // Pattern complexity = 10  cost = 2  size = 0
        if (cast<CondCodeSDNode>(N02)->get() == ISD::SETLE) {
          SDValue N1 = N.getOperand(1);
          SDValue N2 = N.getOperand(2);
          if (N0.getNode()->getValueType(0) == MVT::i32 &&
              N00.getNode()->getValueType(0) == MVT::i32) {
            SDNode *Result = Emit_127(N, SPU::CGTIr32, SPU::SELBr32, MVT::i32, MVT::i32);
            return Result;
          }
        }

        // Pattern: (select:i32 (setcc:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$imm, SETULE:Other), R32C:i32:$rTrue, R32C:i32:$rFalse)
        // Emits: (SELBr32:i32 R32C:i32:$rTrue, R32C:i32:$rFalse, (CLGTIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$imm))
        // Pattern complexity = 10  cost = 2  size = 0
        if (cast<CondCodeSDNode>(N02)->get() == ISD::SETULE) {
          SDValue N1 = N.getOperand(1);
          SDValue N2 = N.getOperand(2);
          if (N0.getNode()->getValueType(0) == MVT::i32 &&
              N00.getNode()->getValueType(0) == MVT::i32) {
            SDNode *Result = Emit_127(N, SPU::CLGTIr32, SPU::SELBr32, MVT::i32, MVT::i32);
            return Result;
          }
        }

        // Pattern: (select:i32 (setcc:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$imm, SETGE:Other), R32C:i32:$rTrue, R32C:i32:$rFalse)
        // Emits: (SELBr32:i32 R32C:i32:$rFalse, R32C:i32:$rTrue, (ORr32:i32 (CGTIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$imm), (CEQIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$imm)))
        // Pattern complexity = 10  cost = 4  size = 0
        if (cast<CondCodeSDNode>(N02)->get() == ISD::SETGE) {
          SDValue N1 = N.getOperand(1);
          SDValue N2 = N.getOperand(2);
          if (N0.getNode()->getValueType(0) == MVT::i32 &&
              N00.getNode()->getValueType(0) == MVT::i32) {
            SDNode *Result = Emit_128(N, SPU::CGTIr32, SPU::CEQIr32, SPU::ORr32, SPU::SELBr32, MVT::i32, MVT::i32, MVT::i32, MVT::i32);
            return Result;
          }
        }
      }

      // Pattern: (select:i32 (setcc:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmUns10>>:$imm, SETUGE:Other), R32C:i32:$rTrue, R32C:i32:$rFalse)
      // Emits: (SELBr32:i32 R32C:i32:$rFalse, R32C:i32:$rTrue, (ORr32:i32 (CLGTIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmUns10>>:$imm), (CEQIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmUns10>>:$imm)))
      // Pattern complexity = 10  cost = 4  size = 0
      if (Predicate_i32ImmUns10(N01.getNode())) {
        SDValue N02 = N0.getOperand(2);
        if (cast<CondCodeSDNode>(N02)->get() == ISD::SETUGE) {
          SDValue N1 = N.getOperand(1);
          SDValue N2 = N.getOperand(2);
          if (N0.getNode()->getValueType(0) == MVT::i32 &&
              N00.getNode()->getValueType(0) == MVT::i32) {
            SDNode *Result = Emit_128(N, SPU::CLGTIr32, SPU::CEQIr32, SPU::ORr32, SPU::SELBr32, MVT::i32, MVT::i32, MVT::i32, MVT::i32);
            return Result;
          }
        }
      }
    }
    SDValue N02 = N0.getOperand(2);

    // Pattern: (select:i32 (setcc:i32 R32C:i32:$rA, R32C:i32:$rB, SETNE:Other), R32C:i32:$rTrue, R32C:i32:$rFalse)
    // Emits: (SELBr32:i32 R32C:i32:$rTrue, R32C:i32:$rFalse, (CEQr32:i32 R32C:i32:$rA, R32C:i32:$rB))
    // Pattern complexity = 6  cost = 2  size = 0
    if (cast<CondCodeSDNode>(N02)->get() == ISD::SETNE) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N0.getNode()->getValueType(0) == MVT::i32 &&
          N00.getNode()->getValueType(0) == MVT::i32) {
        SDNode *Result = Emit_121(N, SPU::CEQr32, SPU::SELBr32, MVT::i32, MVT::i32);
        return Result;
      }
    }

    // Pattern: (select:i32 (setcc:i32 R32C:i32:$rA, R32C:i32:$rB, SETLE:Other), R32C:i32:$rTrue, R32C:i32:$rFalse)
    // Emits: (SELBr32:i32 R32C:i32:$rTrue, R32C:i32:$rFalse, (CGTr32:i32 R32C:i32:$rA, R32C:i32:$rB))
    // Pattern complexity = 6  cost = 2  size = 0
    if (cast<CondCodeSDNode>(N02)->get() == ISD::SETLE) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N0.getNode()->getValueType(0) == MVT::i32 &&
          N00.getNode()->getValueType(0) == MVT::i32) {
        SDNode *Result = Emit_121(N, SPU::CGTr32, SPU::SELBr32, MVT::i32, MVT::i32);
        return Result;
      }
    }

    // Pattern: (select:i32 (setcc:i32 R32C:i32:$rA, R32C:i32:$rB, SETULE:Other), R32C:i32:$rTrue, R32C:i32:$rFalse)
    // Emits: (SELBr32:i32 R32C:i32:$rTrue, R32C:i32:$rFalse, (CLGTr32:i32 R32C:i32:$rA, R32C:i32:$rB))
    // Pattern complexity = 6  cost = 2  size = 0
    if (cast<CondCodeSDNode>(N02)->get() == ISD::SETULE) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N0.getNode()->getValueType(0) == MVT::i32 &&
          N00.getNode()->getValueType(0) == MVT::i32) {
        SDNode *Result = Emit_121(N, SPU::CLGTr32, SPU::SELBr32, MVT::i32, MVT::i32);
        return Result;
      }
    }

    // Pattern: (select:i32 (setcc:i32 R32C:i32:$rA, R32C:i32:$rB, SETGE:Other), R32C:i32:$rTrue, R32C:i32:$rFalse)
    // Emits: (SELBr32:i32 R32C:i32:$rFalse, R32C:i32:$rTrue, (ORr32:i32 (CGTr32:i32 R32C:i32:$rA, R32C:i32:$rB), (CEQr32:i32 R32C:i32:$rA, R32C:i32:$rB)))
    // Pattern complexity = 6  cost = 4  size = 0
    if (cast<CondCodeSDNode>(N02)->get() == ISD::SETGE) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N0.getNode()->getValueType(0) == MVT::i32 &&
          N00.getNode()->getValueType(0) == MVT::i32) {
        SDNode *Result = Emit_123(N, SPU::CGTr32, SPU::CEQr32, SPU::ORr32, SPU::SELBr32, MVT::i32, MVT::i32, MVT::i32, MVT::i32);
        return Result;
      }
    }

    // Pattern: (select:i32 (setcc:i32 R32C:i32:$rA, R32C:i32:$rB, SETUGE:Other), R32C:i32:$rTrue, R32C:i32:$rFalse)
    // Emits: (SELBr32:i32 R32C:i32:$rFalse, R32C:i32:$rTrue, (ORr32:i32 (CLGTr32:i32 R32C:i32:$rA, R32C:i32:$rB), (CEQr32:i32 R32C:i32:$rA, R32C:i32:$rB)))
    // Pattern complexity = 6  cost = 4  size = 0
    if (cast<CondCodeSDNode>(N02)->get() == ISD::SETUGE) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N0.getNode()->getValueType(0) == MVT::i32 &&
          N00.getNode()->getValueType(0) == MVT::i32) {
        SDNode *Result = Emit_123(N, SPU::CLGTr32, SPU::CEQr32, SPU::ORr32, SPU::SELBr32, MVT::i32, MVT::i32, MVT::i32, MVT::i32);
        return Result;
      }
    }
  }

  // Pattern: (select:i32 R32C:i32:$rC, R32C:i32:$rB, R32C:i32:$rA)
  // Emits: (SELBr32_cond:i32 R32C:i32:$rA, R32C:i32:$rB, R32C:i32:$rC)
  // Pattern complexity = 3  cost = 1  size = 0
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  if (N0.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_120(N, SPU::SELBr32_cond, MVT::i32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_129(const SDValue &N, unsigned Opc0, unsigned Opc1, MVT VT0, MVT VT1) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp3(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc1, VT1, N2, N1, Tmp3);
}
SDNode *Emit_130(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, unsigned Opc4, unsigned Opc5, unsigned Opc6, unsigned Opc7, MVT VT0, MVT VT1, MVT VT2, MVT VT3, MVT VT4, MVT VT5, MVT VT6, MVT VT7) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N02 = N0.getOperand(2);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp3(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N00), 0);
  SDValue Tmp5(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N01), 0);
  SDValue Tmp6(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, Tmp3, Tmp5), 0);
  SDValue Tmp7(CurDAG->getTargetNode(Opc3, N.getDebugLoc(), VT3, Tmp6), 0);
  SDValue Tmp8 = CurDAG->getTargetConstant(0xBULL, MVT::i16);
  SDValue Tmp9(CurDAG->getTargetNode(Opc4, N.getDebugLoc(), VT4, Tmp7, Tmp8), 0);
  SDValue Tmp10(CurDAG->getTargetNode(Opc5, N.getDebugLoc(), VT5, Tmp9), 0);
  SDValue Tmp11(CurDAG->getTargetNode(Opc6, N.getDebugLoc(), VT6, Tmp10), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc7, VT7, N1, N2, Tmp11);
}
SDNode *Emit_131(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, unsigned Opc4, unsigned Opc5, unsigned Opc6, unsigned Opc7, unsigned Opc8, unsigned Opc9, unsigned Opc10, unsigned Opc11, unsigned Opc12, unsigned Opc13, MVT VT0, MVT VT1, MVT VT2, MVT VT3, MVT VT4, MVT VT5, MVT VT6, MVT VT7, MVT VT8, MVT VT9, MVT VT10, MVT VT11, MVT VT12, MVT VT13) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N02 = N0.getOperand(2);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp3(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N00), 0);
  SDValue Tmp5(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N01), 0);
  SDValue Tmp6(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, Tmp3, Tmp5), 0);
  SDValue Tmp8(CurDAG->getTargetNode(Opc3, N.getDebugLoc(), VT3, N00), 0);
  SDValue Tmp10(CurDAG->getTargetNode(Opc4, N.getDebugLoc(), VT4, N01), 0);
  SDValue Tmp11(CurDAG->getTargetNode(Opc5, N.getDebugLoc(), VT5, Tmp8, Tmp10), 0);
  SDValue Tmp12(CurDAG->getTargetNode(Opc6, N.getDebugLoc(), VT6, Tmp11), 0);
  SDValue Tmp14(CurDAG->getTargetNode(Opc7, N.getDebugLoc(), VT7, N00), 0);
  SDValue Tmp16(CurDAG->getTargetNode(Opc8, N.getDebugLoc(), VT8, N01), 0);
  SDValue Tmp17(CurDAG->getTargetNode(Opc9, N.getDebugLoc(), VT9, Tmp14, Tmp16), 0);
  SDValue Tmp18(CurDAG->getTargetNode(Opc10, N.getDebugLoc(), VT10, Tmp6, Tmp12, Tmp17), 0);
  SDValue Tmp19(CurDAG->getTargetNode(Opc11, N.getDebugLoc(), VT11, Tmp18), 0);
  SDValue Tmp20(CurDAG->getTargetNode(Opc12, N.getDebugLoc(), VT12, Tmp19), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc13, VT13, N1, N2, Tmp20);
}
SDNode *Emit_132(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, unsigned Opc4, unsigned Opc5, unsigned Opc6, unsigned Opc7, unsigned Opc8, unsigned Opc9, unsigned Opc10, unsigned Opc11, MVT VT0, MVT VT1, MVT VT2, MVT VT3, MVT VT4, MVT VT5, MVT VT6, MVT VT7, MVT VT8, MVT VT9, MVT VT10, MVT VT11) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N02 = N0.getOperand(2);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp3(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N00), 0);
  SDValue Tmp5(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N01), 0);
  SDValue Tmp6(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, Tmp3, Tmp5), 0);
  SDValue Tmp8(CurDAG->getTargetNode(Opc3, N.getDebugLoc(), VT3, N00), 0);
  SDValue Tmp10(CurDAG->getTargetNode(Opc4, N.getDebugLoc(), VT4, N01), 0);
  SDValue Tmp11(CurDAG->getTargetNode(Opc5, N.getDebugLoc(), VT5, Tmp8, Tmp10), 0);
  SDValue Tmp12(CurDAG->getTargetNode(Opc6, N.getDebugLoc(), VT6, Tmp6, Tmp11), 0);
  SDValue Tmp13(CurDAG->getTargetNode(Opc7, N.getDebugLoc(), VT7, Tmp12), 0);
  SDValue Tmp14 = CurDAG->getTargetConstant(0xBULL, MVT::i16);
  SDValue Tmp15(CurDAG->getTargetNode(Opc8, N.getDebugLoc(), VT8, Tmp13, Tmp14), 0);
  SDValue Tmp16(CurDAG->getTargetNode(Opc9, N.getDebugLoc(), VT9, Tmp15), 0);
  SDValue Tmp17(CurDAG->getTargetNode(Opc10, N.getDebugLoc(), VT10, Tmp16), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc11, VT11, N1, N2, Tmp17);
}
SDNode *Select_ISD_SELECT_i64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getOpcode() == ISD::SETCC) {
    SDValue N00 = N0.getOperand(0);
    SDValue N01 = N0.getOperand(1);
    SDValue N02 = N0.getOperand(2);

    // Pattern: (select:i64 (setcc:i32 R64C:i64:$rA, R64C:i64:$rB, SETNE:Other), R64C:i64:$rTrue, R64C:i64:$rFalse)
    // Emits: (SELBr64_cond:i64 R64C:i64:$rTrue, R64C:i64:$rFalse, (FSMr32:v16i8 (ORi32_v4i32:i32 (CGTIv4i32:v16i8 (GBv4i32:v16i8 (CEQv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB))), 11:i16))))
    // Pattern complexity = 6  cost = 8  size = 0
    if (cast<CondCodeSDNode>(N02)->get() == ISD::SETNE) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N0.getNode()->getValueType(0) == MVT::i32 &&
          N00.getNode()->getValueType(0) == MVT::i64) {
        SDNode *Result = Emit_130(N, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CEQv4i32, SPU::GBv4i32, SPU::CGTIv4i32, SPU::ORi32_v4i32, SPU::FSMr32, SPU::SELBr64_cond, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::i32, MVT::v16i8, MVT::i64);
        return Result;
      }
    }

    // Pattern: (select:i64 (setcc:i32 R64C:i64:$rA, R64C:i64:$rB, SETULT:Other), R64C:i64:$rTrue, R64C:i64:$rFalse)
    // Emits: (SELBr64_cond:i64 R64C:i64:$rTrue, R64C:i64:$rFalse, (FSMr32:v16i8 (ORi32_v4i32:i32 (CGTIv4i32:v16i8 (GBv4i32:v16i8 (ORv4i32:v16i8 (CLGTv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB)), (CEQv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB)))), 11:i16))))
    // Pattern complexity = 6  cost = 12  size = 0
    if (cast<CondCodeSDNode>(N02)->get() == ISD::SETULT) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N0.getNode()->getValueType(0) == MVT::i32 &&
          N00.getNode()->getValueType(0) == MVT::i64) {
        SDNode *Result = Emit_132(N, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CLGTv4i32, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CEQv4i32, SPU::ORv4i32, SPU::GBv4i32, SPU::CGTIv4i32, SPU::ORi32_v4i32, SPU::FSMr32, SPU::SELBr64_cond, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::i32, MVT::v16i8, MVT::i64);
        return Result;
      }
    }

    // Pattern: (select:i64 (setcc:i32 R64C:i64:$rA, R64C:i64:$rB, SETLT:Other), R64C:i64:$rTrue, R64C:i64:$rFalse)
    // Emits: (SELBr64_cond:i64 R64C:i64:$rTrue, R64C:i64:$rFalse, (FSMr32:v16i8 (ORi32_v4i32:i32 (CGTIv4i32:v16i8 (GBv4i32:v16i8 (ORv4i32:v16i8 (CGTv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB)), (CEQv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB)))), 11:i16))))
    // Pattern complexity = 6  cost = 12  size = 0
    if (cast<CondCodeSDNode>(N02)->get() == ISD::SETLT) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N0.getNode()->getValueType(0) == MVT::i32 &&
          N00.getNode()->getValueType(0) == MVT::i64) {
        SDNode *Result = Emit_132(N, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CGTv4i32, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CEQv4i32, SPU::ORv4i32, SPU::GBv4i32, SPU::CGTIv4i32, SPU::ORi32_v4i32, SPU::FSMr32, SPU::SELBr64_cond, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::i32, MVT::v16i8, MVT::i64);
        return Result;
      }
    }

    // Pattern: (select:i64 (setcc:i32 R64C:i64:$rA, R64C:i64:$rB, SETULE:Other), R64C:i64:$rTrue, R64C:i64:$rFalse)
    // Emits: (SELBr64_cond:i64 R64C:i64:$rTrue, R64C:i64:$rFalse, (FSMr32:v16i8 (ORi32_v4i32:i32 (SELBv2i64:v16i8 (CLGTv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB)), (XSWDv2i64:v16i8 (CLGTv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB))), (CEQv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB))))))
    // Pattern complexity = 6  cost = 14  size = 0
    if (cast<CondCodeSDNode>(N02)->get() == ISD::SETULE) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N0.getNode()->getValueType(0) == MVT::i32 &&
          N00.getNode()->getValueType(0) == MVT::i64) {
        SDNode *Result = Emit_131(N, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CLGTv4i32, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CLGTv4i32, SPU::XSWDv2i64, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CEQv4i32, SPU::SELBv2i64, SPU::ORi32_v4i32, SPU::FSMr32, SPU::SELBr64_cond, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::i32, MVT::v16i8, MVT::i64);
        return Result;
      }
    }

    // Pattern: (select:i64 (setcc:i32 R64C:i64:$rA, R64C:i64:$rB, SETLE:Other), R64C:i64:$rTrue, R64C:i64:$rFalse)
    // Emits: (SELBr64_cond:i64 R64C:i64:$rTrue, R64C:i64:$rFalse, (FSMr32:v16i8 (ORi32_v4i32:i32 (SELBv2i64:v16i8 (CLGTv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB)), (XSWDv2i64:v16i8 (CLGTv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB))), (CEQv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB))))))
    // Pattern complexity = 6  cost = 14  size = 0
    if (cast<CondCodeSDNode>(N02)->get() == ISD::SETLE) {
      SDValue N1 = N.getOperand(1);
      SDValue N2 = N.getOperand(2);
      if (N0.getNode()->getValueType(0) == MVT::i32 &&
          N00.getNode()->getValueType(0) == MVT::i64) {
        SDNode *Result = Emit_131(N, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CLGTv4i32, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CLGTv4i32, SPU::XSWDv2i64, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CEQv4i32, SPU::SELBv2i64, SPU::ORi32_v4i32, SPU::FSMr32, SPU::SELBr64_cond, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::i32, MVT::v16i8, MVT::i64);
        return Result;
      }
    }
  }

  // Pattern: (select:i64 R32C:i32:$rCond, R64C:i64:$rFalse, R64C:i64:$rTrue)
  // Emits: (SELBr64_cond:i64 R64C:i64:$rTrue, R64C:i64:$rFalse, (FSMr32:v16i8 R32C:i32:$rCond))
  // Pattern complexity = 3  cost = 2  size = 0
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  if (N0.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_129(N, SPU::FSMr32, SPU::SELBr64_cond, MVT::v16i8, MVT::i64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_SELECT_f32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  if (N0.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_120(N, SPU::SELBf32_cond, MVT::f32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_SELECT_f64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  if (N0.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_120(N, SPU::SELBf64_cond, MVT::f64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_SELECT_v16i8(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  if (N0.getNode()->getValueType(0) == MVT::i32) {

    // Pattern: (select:v16i8 R32C:i32:$rC, VECREG:v16i8:$rB, VECREG:v16i8:$rA)
    // Emits: (SELBv16i8_cond:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB, R32C:i32:$rC)
    // Pattern complexity = 3  cost = 1  size = 0
    {
      SDNode *Result = Emit_120(N, SPU::SELBv16i8_cond, MVT::v16i8);
      return Result;
    }

    // Pattern: (select:v16i8 R32C:i32:$rC, VECREG:v16i8:$rB, VECREG:v16i8:$rA)
    // Emits: (SELBv16i8_vcond:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB, R32C:i32:$rC)
    // Pattern complexity = 3  cost = 1  size = 0
    SDNode *Result = Emit_120(N, SPU::SELBv16i8_vcond, MVT::v16i8);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_SELECT_v8i16(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  if (N0.getNode()->getValueType(0) == MVT::i32) {

    // Pattern: (select:v8i16 R32C:i32:$rC, VECREG:v8i16:$rB, VECREG:v8i16:$rA)
    // Emits: (SELBv8i16_cond:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB, R32C:i32:$rC)
    // Pattern complexity = 3  cost = 1  size = 0
    {
      SDNode *Result = Emit_120(N, SPU::SELBv8i16_cond, MVT::v8i16);
      return Result;
    }

    // Pattern: (select:v8i16 R32C:i32:$rC, VECREG:v8i16:$rB, VECREG:v8i16:$rA)
    // Emits: (SELBv8i16_vcond:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB, R32C:i32:$rC)
    // Pattern complexity = 3  cost = 1  size = 0
    SDNode *Result = Emit_120(N, SPU::SELBv8i16_vcond, MVT::v8i16);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_SELECT_v4i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  if (N0.getNode()->getValueType(0) == MVT::i32) {

    // Pattern: (select:v4i32 R32C:i32:$rC, VECREG:v4i32:$rB, VECREG:v4i32:$rA)
    // Emits: (SELBv4i32_cond:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB, R32C:i32:$rC)
    // Pattern complexity = 3  cost = 1  size = 0
    {
      SDNode *Result = Emit_120(N, SPU::SELBv4i32_cond, MVT::v4i32);
      return Result;
    }

    // Pattern: (select:v4i32 R32C:i32:$rC, VECREG:v4i32:$rB, VECREG:v4i32:$rA)
    // Emits: (SELBv4i32_vcond:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB, R32C:i32:$rC)
    // Pattern complexity = 3  cost = 1  size = 0
    SDNode *Result = Emit_120(N, SPU::SELBv4i32_vcond, MVT::v4i32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_SELECT_v2i64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  if (N0.getNode()->getValueType(0) == MVT::i32) {

    // Pattern: (select:v2i64 R32C:i32:$rC, VECREG:v2i64:$rB, VECREG:v2i64:$rA)
    // Emits: (SELBv2i64_cond:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB, R32C:i32:$rC)
    // Pattern complexity = 3  cost = 1  size = 0
    {
      SDNode *Result = Emit_120(N, SPU::SELBv2i64_cond, MVT::v2i64);
      return Result;
    }

    // Pattern: (select:v2i64 R32C:i32:$rC, VECREG:v2i64:$rB, VECREG:v2i64:$rA)
    // Emits: (SELBv2i64_vcond:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB, R32C:i32:$rC)
    // Pattern complexity = 3  cost = 1  size = 0
    SDNode *Result = Emit_120(N, SPU::SELBv2i64_vcond, MVT::v2i64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_SELECT_v4f32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  if (N0.getNode()->getValueType(0) == MVT::v4i32) {
    SDNode *Result = Emit_120(N, SPU::SELBv4f32_cond, MVT::v4f32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_133(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N0, N1);
}
SDNode *Emit_134(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp1 = CurDAG->getTargetConstant(((unsigned char) cast<ConstantSDNode>(N1)->getZExtValue()), MVT::i8);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N0, Tmp1);
}
SDNode *Emit_135(const SDValue &N, unsigned Opc0, unsigned Opc1, MVT VT0, MVT VT1) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0, N1), 0);
  SDValue Tmp3 = CurDAG->getTargetConstant(0xFFFFFFFFFFFFFFFFULL, MVT::i8);
  return CurDAG->SelectNodeTo(N.getNode(), Opc1, VT1, Tmp2, Tmp3);
}
SDNode *Emit_136(const SDValue &N, unsigned Opc0, unsigned Opc1, MVT VT0, MVT VT1) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp1 = CurDAG->getTargetConstant(((unsigned char) cast<ConstantSDNode>(N1)->getZExtValue()), MVT::i8);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0, Tmp1), 0);
  SDValue Tmp3 = CurDAG->getTargetConstant(0xFFFFFFFFFFFFFFFFULL, MVT::i8);
  return CurDAG->SelectNodeTo(N.getNode(), Opc1, VT1, Tmp2, Tmp3);
}
SDNode *Emit_137(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, MVT VT0, MVT VT1, MVT VT2) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0, N1), 0);
  SDValue Tmp5(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N0, N1), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc2, VT2, Tmp2, Tmp5);
}
SDNode *Emit_138(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, MVT VT0, MVT VT1, MVT VT2) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp1 = CurDAG->getTargetConstant(((unsigned char) cast<ConstantSDNode>(N1)->getZExtValue()), MVT::i8);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0, Tmp1), 0);
  SDValue Tmp4(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N0, Tmp1), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc2, VT2, Tmp2, Tmp4);
}
SDNode *Emit_139(const SDValue &N, unsigned Opc0, unsigned Opc1, MVT VT0, MVT VT1) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0, N1), 0);
  SDValue Tmp3 = CurDAG->getTargetConstant(0xFFULL, MVT::i8);
  return CurDAG->SelectNodeTo(N.getNode(), Opc1, VT1, Tmp2, Tmp3);
}
SDNode *Emit_140(const SDValue &N, unsigned Opc0, unsigned Opc1, MVT VT0, MVT VT1) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp1 = CurDAG->getTargetConstant(((unsigned char) cast<ConstantSDNode>(N1)->getZExtValue()), MVT::i8);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0, Tmp1), 0);
  SDValue Tmp3 = CurDAG->getTargetConstant(0xFFULL, MVT::i8);
  return CurDAG->SelectNodeTo(N.getNode(), Opc1, VT1, Tmp2, Tmp3);
}
SDNode *Select_ISD_SETCC_i8(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getOpcode() == ISD::Constant) {
    if (Predicate_immSExt8(N1.getNode())) {
      SDValue N2 = N.getOperand(2);

      // Pattern: (setcc:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immSExt8>>:$val, SETEQ:Other)
      // Emits: (CEQBIr8:i8 R8C:i8:$rA, (imm:i8):$val)
      // Pattern complexity = 7  cost = 1  size = 0
      if (cast<CondCodeSDNode>(N2)->get() == ISD::SETEQ &&
          N0.getNode()->getValueType(0) == MVT::i8) {
        SDNode *Result = Emit_134(N, SPU::CEQBIr8, MVT::i8);
        return Result;
      }

      // Pattern: (setcc:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immSExt8>>:$val, SETGT:Other)
      // Emits: (CGTBIr8:i8 R8C:i8:$rA, (imm:i8):$val)
      // Pattern complexity = 7  cost = 1  size = 0
      if (cast<CondCodeSDNode>(N2)->get() == ISD::SETGT &&
          N0.getNode()->getValueType(0) == MVT::i8) {
        SDNode *Result = Emit_134(N, SPU::CGTBIr8, MVT::i8);
        return Result;
      }

      // Pattern: (setcc:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immSExt8>>:$val, SETUGT:Other)
      // Emits: (CLGTBIr8:i8 R8C:i8:$rA, (imm:i8):$val)
      // Pattern complexity = 7  cost = 1  size = 0
      if (cast<CondCodeSDNode>(N2)->get() == ISD::SETUGT &&
          N0.getNode()->getValueType(0) == MVT::i8) {
        SDNode *Result = Emit_134(N, SPU::CLGTBIr8, MVT::i8);
        return Result;
      }

      // Pattern: (setcc:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immSExt8>>:$imm, SETNE:Other)
      // Emits: (XORBIr8:i8 (CEQBIr8:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immSExt8>>:$imm), -1:i8)
      // Pattern complexity = 7  cost = 2  size = 0
      if (cast<CondCodeSDNode>(N2)->get() == ISD::SETNE &&
          N0.getNode()->getValueType(0) == MVT::i8) {
        SDNode *Result = Emit_136(N, SPU::CEQBIr8, SPU::XORBIr8, MVT::i8, MVT::i8);
        return Result;
      }
    }
    if (Predicate_immU8(N1.getNode())) {
      SDValue N2 = N.getOperand(2);

      // Pattern: (setcc:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immU8>>:$imm, SETLE:Other)
      // Emits: (XORBIr8:i8 (CGTBIr8:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immU8>>:$imm), 255:i8)
      // Pattern complexity = 7  cost = 2  size = 0
      if (cast<CondCodeSDNode>(N2)->get() == ISD::SETLE &&
          N0.getNode()->getValueType(0) == MVT::i8) {
        SDNode *Result = Emit_140(N, SPU::CGTBIr8, SPU::XORBIr8, MVT::i8, MVT::i8);
        return Result;
      }

      // Pattern: (setcc:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immU8>>:$imm, SETULE:Other)
      // Emits: (XORBIr8:i8 (CLGTBIr8:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immU8>>:$imm), 255:i8)
      // Pattern complexity = 7  cost = 2  size = 0
      if (cast<CondCodeSDNode>(N2)->get() == ISD::SETULE &&
          N0.getNode()->getValueType(0) == MVT::i8) {
        SDNode *Result = Emit_140(N, SPU::CLGTBIr8, SPU::XORBIr8, MVT::i8, MVT::i8);
        return Result;
      }
    }
    if (Predicate_immSExt8(N1.getNode())) {
      SDValue N2 = N.getOperand(2);

      // Pattern: (setcc:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immSExt8>>:$imm, SETGE:Other)
      // Emits: (ORr8:i8 (CGTBIr8:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immSExt8>>:$imm), (CEQBIr8:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immSExt8>>:$imm))
      // Pattern complexity = 7  cost = 3  size = 0
      if (cast<CondCodeSDNode>(N2)->get() == ISD::SETGE &&
          N0.getNode()->getValueType(0) == MVT::i8) {
        SDNode *Result = Emit_138(N, SPU::CGTBIr8, SPU::CEQBIr8, SPU::ORr8, MVT::i8, MVT::i8, MVT::i8);
        return Result;
      }

      // Pattern: (setcc:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immSExt8>>:$imm, SETLT:Other)
      // Emits: (NORr8:i8 (CGTBIr8:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immSExt8>>:$imm), (CEQBIr8:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immSExt8>>:$imm))
      // Pattern complexity = 7  cost = 3  size = 0
      if (cast<CondCodeSDNode>(N2)->get() == ISD::SETLT &&
          N0.getNode()->getValueType(0) == MVT::i8) {
        SDNode *Result = Emit_138(N, SPU::CGTBIr8, SPU::CEQBIr8, SPU::NORr8, MVT::i8, MVT::i8, MVT::i8);
        return Result;
      }

      // Pattern: (setcc:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immSExt8>>:$imm, SETUGE:Other)
      // Emits: (ORr8:i8 (CLGTBIr8:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immSExt8>>:$imm), (CEQBIr8:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immSExt8>>:$imm))
      // Pattern complexity = 7  cost = 3  size = 0
      if (cast<CondCodeSDNode>(N2)->get() == ISD::SETUGE &&
          N0.getNode()->getValueType(0) == MVT::i8) {
        SDNode *Result = Emit_138(N, SPU::CLGTBIr8, SPU::CEQBIr8, SPU::ORr8, MVT::i8, MVT::i8, MVT::i8);
        return Result;
      }

      // Pattern: (setcc:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immSExt8>>:$imm, SETULT:Other)
      // Emits: (NORr8:i8 (CLGTBIr8:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immSExt8>>:$imm), (CEQBIr8:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immSExt8>>:$imm))
      // Pattern complexity = 7  cost = 3  size = 0
      if (cast<CondCodeSDNode>(N2)->get() == ISD::SETULT &&
          N0.getNode()->getValueType(0) == MVT::i8) {
        SDNode *Result = Emit_138(N, SPU::CLGTBIr8, SPU::CEQBIr8, SPU::NORr8, MVT::i8, MVT::i8, MVT::i8);
        return Result;
      }
    }
  }
  SDValue N2 = N.getOperand(2);

  // Pattern: (setcc:i8 R8C:i8:$rA, R8C:i8:$rB, SETEQ:Other)
  // Emits: (CEQBr8:i8 R8C:i8:$rA, R8C:i8:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETEQ &&
      N0.getNode()->getValueType(0) == MVT::i8) {
    SDNode *Result = Emit_133(N, SPU::CEQBr8, MVT::i8);
    return Result;
  }

  // Pattern: (setcc:i8 R8C:i8:$rA, R8C:i8:$rB, SETGT:Other)
  // Emits: (CGTBr8:i8 R8C:i8:$rA, R8C:i8:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETGT &&
      N0.getNode()->getValueType(0) == MVT::i8) {
    SDNode *Result = Emit_133(N, SPU::CGTBr8, MVT::i8);
    return Result;
  }

  // Pattern: (setcc:i8 R8C:i8:$rA, R8C:i8:$rB, SETUGT:Other)
  // Emits: (CLGTBr8:i8 R8C:i8:$rA, R8C:i8:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETUGT &&
      N0.getNode()->getValueType(0) == MVT::i8) {
    SDNode *Result = Emit_133(N, SPU::CLGTBr8, MVT::i8);
    return Result;
  }

  // Pattern: (setcc:i8 R8C:i8:$rA, R8C:i8:$rB, SETNE:Other)
  // Emits: (XORBIr8:i8 (CEQBr8:i8 R8C:i8:$rA, R8C:i8:$rB), -1:i8)
  // Pattern complexity = 3  cost = 2  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETNE &&
      N0.getNode()->getValueType(0) == MVT::i8) {
    SDNode *Result = Emit_135(N, SPU::CEQBr8, SPU::XORBIr8, MVT::i8, MVT::i8);
    return Result;
  }

  // Pattern: (setcc:i8 R8C:i8:$rA, R8C:i8:$rB, SETLE:Other)
  // Emits: (XORBIr8:i8 (CGTBr8:i8 R8C:i8:$rA, R8C:i8:$rB), 255:i8)
  // Pattern complexity = 3  cost = 2  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETLE &&
      N0.getNode()->getValueType(0) == MVT::i8) {
    SDNode *Result = Emit_139(N, SPU::CGTBr8, SPU::XORBIr8, MVT::i8, MVT::i8);
    return Result;
  }

  // Pattern: (setcc:i8 R8C:i8:$rA, R8C:i8:$rB, SETULE:Other)
  // Emits: (XORBIr8:i8 (CLGTBr8:i8 R8C:i8:$rA, R8C:i8:$rB), 255:i8)
  // Pattern complexity = 3  cost = 2  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETULE &&
      N0.getNode()->getValueType(0) == MVT::i8) {
    SDNode *Result = Emit_139(N, SPU::CLGTBr8, SPU::XORBIr8, MVT::i8, MVT::i8);
    return Result;
  }

  // Pattern: (setcc:i8 R8C:i8:$rA, R8C:i8:$rB, SETGE:Other)
  // Emits: (ORr8:i8 (CGTBr8:i8 R8C:i8:$rA, R8C:i8:$rB), (CEQBr8:i8 R8C:i8:$rA, R8C:i8:$rB))
  // Pattern complexity = 3  cost = 3  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETGE &&
      N0.getNode()->getValueType(0) == MVT::i8) {
    SDNode *Result = Emit_137(N, SPU::CGTBr8, SPU::CEQBr8, SPU::ORr8, MVT::i8, MVT::i8, MVT::i8);
    return Result;
  }

  // Pattern: (setcc:i8 R8C:i8:$rA, R8C:i8:$rB, SETLT:Other)
  // Emits: (NORr8:i8 (CGTBr8:i8 R8C:i8:$rA, R8C:i8:$rB), (CEQBr8:i8 R8C:i8:$rA, R8C:i8:$rB))
  // Pattern complexity = 3  cost = 3  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETLT &&
      N0.getNode()->getValueType(0) == MVT::i8) {
    SDNode *Result = Emit_137(N, SPU::CGTBr8, SPU::CEQBr8, SPU::NORr8, MVT::i8, MVT::i8, MVT::i8);
    return Result;
  }

  // Pattern: (setcc:i8 R8C:i8:$rA, R8C:i8:$rB, SETUGE:Other)
  // Emits: (ORr8:i8 (CLGTBr8:i8 R8C:i8:$rA, R8C:i8:$rB), (CEQBr8:i8 R8C:i8:$rA, R8C:i8:$rB))
  // Pattern complexity = 3  cost = 3  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETUGE &&
      N0.getNode()->getValueType(0) == MVT::i8) {
    SDNode *Result = Emit_137(N, SPU::CLGTBr8, SPU::CEQBr8, SPU::ORr8, MVT::i8, MVT::i8, MVT::i8);
    return Result;
  }

  // Pattern: (setcc:i8 R8C:i8:$rA, R8C:i8:$rB, SETULT:Other)
  // Emits: (NORr8:i8 (CLGTBr8:i8 R8C:i8:$rA, R8C:i8:$rB), (CEQBr8:i8 R8C:i8:$rA, R8C:i8:$rB))
  // Pattern complexity = 3  cost = 3  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETULT &&
      N0.getNode()->getValueType(0) == MVT::i8) {
    SDNode *Result = Emit_137(N, SPU::CLGTBr8, SPU::CEQBr8, SPU::NORr8, MVT::i8, MVT::i8, MVT::i8);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_141(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp1 = CurDAG->getTargetConstant(((unsigned short) cast<ConstantSDNode>(N1)->getZExtValue()), MVT::i16);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N0, Tmp1);
}
SDNode *Emit_142(const SDValue &N, unsigned Opc0, unsigned Opc1, MVT VT0, MVT VT1) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0, N1), 0);
  SDValue Tmp3 = CurDAG->getTargetConstant(0xFFFFULL, MVT::i16);
  return CurDAG->SelectNodeTo(N.getNode(), Opc1, VT1, Tmp2, Tmp3);
}
SDNode *Emit_143(const SDValue &N, unsigned Opc0, unsigned Opc1, MVT VT0, MVT VT1) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp1 = CurDAG->getTargetConstant(((unsigned short) cast<ConstantSDNode>(N1)->getZExtValue()), MVT::i16);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0, Tmp1), 0);
  SDValue Tmp3 = CurDAG->getTargetConstant(0xFFFFULL, MVT::i16);
  return CurDAG->SelectNodeTo(N.getNode(), Opc1, VT1, Tmp2, Tmp3);
}
SDNode *Emit_144(const SDValue &N, unsigned Opc0, unsigned Opc1, MVT VT0, MVT VT1) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0, N1), 0);
  SDValue Tmp3 = CurDAG->getTargetConstant(0xFFFFFFFFFFFFFFFFULL, MVT::i16);
  return CurDAG->SelectNodeTo(N.getNode(), Opc1, VT1, Tmp2, Tmp3);
}
SDNode *Emit_145(const SDValue &N, unsigned Opc0, unsigned Opc1, MVT VT0, MVT VT1) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp1 = CurDAG->getTargetConstant(((unsigned short) cast<ConstantSDNode>(N1)->getZExtValue()), MVT::i16);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0, Tmp1), 0);
  SDValue Tmp3 = CurDAG->getTargetConstant(0xFFFFFFFFFFFFFFFFULL, MVT::i16);
  return CurDAG->SelectNodeTo(N.getNode(), Opc1, VT1, Tmp2, Tmp3);
}
SDNode *Emit_146(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, MVT VT0, MVT VT1, MVT VT2) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp1 = CurDAG->getTargetConstant(((unsigned short) cast<ConstantSDNode>(N1)->getZExtValue()), MVT::i16);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0, Tmp1), 0);
  SDValue Tmp4(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N0, Tmp1), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc2, VT2, Tmp2, Tmp4);
}
SDNode *Select_ISD_SETCC_i16(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_i16ImmSExt10(N1.getNode())) {
    SDValue N2 = N.getOperand(2);

    // Pattern: (setcc:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val, SETEQ:Other)
    // Emits: (CEQHIr16:i16 R16C:i16:$rA, (imm:i16):$val)
    // Pattern complexity = 7  cost = 1  size = 0
    if (cast<CondCodeSDNode>(N2)->get() == ISD::SETEQ &&
        N0.getNode()->getValueType(0) == MVT::i16) {
      SDNode *Result = Emit_141(N, SPU::CEQHIr16, MVT::i16);
      return Result;
    }

    // Pattern: (setcc:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val, SETGT:Other)
    // Emits: (CGTHIr16:i16 R16C:i16:$rA, (imm:i16):$val)
    // Pattern complexity = 7  cost = 1  size = 0
    if (cast<CondCodeSDNode>(N2)->get() == ISD::SETGT &&
        N0.getNode()->getValueType(0) == MVT::i16) {
      SDNode *Result = Emit_141(N, SPU::CGTHIr16, MVT::i16);
      return Result;
    }

    // Pattern: (setcc:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val, SETUGT:Other)
    // Emits: (CLGTHIr16:i16 R16C:i16:$rA, (imm:i16):$val)
    // Pattern complexity = 7  cost = 1  size = 0
    if (cast<CondCodeSDNode>(N2)->get() == ISD::SETUGT &&
        N0.getNode()->getValueType(0) == MVT::i16) {
      SDNode *Result = Emit_141(N, SPU::CLGTHIr16, MVT::i16);
      return Result;
    }

    // Pattern: (setcc:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$imm, SETULE:Other)
    // Emits: (XORHIr16:i16 (CLGTHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$imm), 65535:i16)
    // Pattern complexity = 7  cost = 2  size = 0
    if (cast<CondCodeSDNode>(N2)->get() == ISD::SETULE &&
        N0.getNode()->getValueType(0) == MVT::i16) {
      SDNode *Result = Emit_143(N, SPU::CLGTHIr16, SPU::XORHIr16, MVT::i16, MVT::i16);
      return Result;
    }

    // Pattern: (setcc:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$imm, SETNE:Other)
    // Emits: (XORHIr16:i16 (CEQHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$imm), -1:i16)
    // Pattern complexity = 7  cost = 2  size = 0
    if (cast<CondCodeSDNode>(N2)->get() == ISD::SETNE &&
        N0.getNode()->getValueType(0) == MVT::i16) {
      SDNode *Result = Emit_145(N, SPU::CEQHIr16, SPU::XORHIr16, MVT::i16, MVT::i16);
      return Result;
    }

    // Pattern: (setcc:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$imm, SETLE:Other)
    // Emits: (XORHIr16:i16 (CGTHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$imm), 65535:i16)
    // Pattern complexity = 7  cost = 2  size = 0
    if (cast<CondCodeSDNode>(N2)->get() == ISD::SETLE &&
        N0.getNode()->getValueType(0) == MVT::i16) {
      SDNode *Result = Emit_143(N, SPU::CGTHIr16, SPU::XORHIr16, MVT::i16, MVT::i16);
      return Result;
    }

    // Pattern: (setcc:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$imm, SETGE:Other)
    // Emits: (ORr16:i16 (CGTHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$imm), (CEQHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$imm))
    // Pattern complexity = 7  cost = 3  size = 0
    if (cast<CondCodeSDNode>(N2)->get() == ISD::SETGE &&
        N0.getNode()->getValueType(0) == MVT::i16) {
      SDNode *Result = Emit_146(N, SPU::CGTHIr16, SPU::CEQHIr16, SPU::ORr16, MVT::i16, MVT::i16, MVT::i16);
      return Result;
    }

    // Pattern: (setcc:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$imm, SETLT:Other)
    // Emits: (NORr16:i16 (CGTHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$imm), (CEQHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$imm))
    // Pattern complexity = 7  cost = 3  size = 0
    if (cast<CondCodeSDNode>(N2)->get() == ISD::SETLT &&
        N0.getNode()->getValueType(0) == MVT::i16) {
      SDNode *Result = Emit_146(N, SPU::CGTHIr16, SPU::CEQHIr16, SPU::NORr16, MVT::i16, MVT::i16, MVT::i16);
      return Result;
    }

    // Pattern: (setcc:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$imm, SETUGE:Other)
    // Emits: (ORr16:i16 (CLGTHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$imm), (CEQHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$imm))
    // Pattern complexity = 7  cost = 3  size = 0
    if (cast<CondCodeSDNode>(N2)->get() == ISD::SETUGE &&
        N0.getNode()->getValueType(0) == MVT::i16) {
      SDNode *Result = Emit_146(N, SPU::CLGTHIr16, SPU::CEQHIr16, SPU::ORr16, MVT::i16, MVT::i16, MVT::i16);
      return Result;
    }

    // Pattern: (setcc:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$imm, SETULT:Other)
    // Emits: (NORr16:i16 (CLGTHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$imm), (CEQHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$imm))
    // Pattern complexity = 7  cost = 3  size = 0
    if (cast<CondCodeSDNode>(N2)->get() == ISD::SETULT &&
        N0.getNode()->getValueType(0) == MVT::i16) {
      SDNode *Result = Emit_146(N, SPU::CLGTHIr16, SPU::CEQHIr16, SPU::NORr16, MVT::i16, MVT::i16, MVT::i16);
      return Result;
    }
  }
  SDValue N2 = N.getOperand(2);

  // Pattern: (setcc:i16 R16C:i16:$rA, R16C:i16:$rB, SETEQ:Other)
  // Emits: (CEQHr16:i16 R16C:i16:$rA, R16C:i16:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETEQ &&
      N0.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_133(N, SPU::CEQHr16, MVT::i16);
    return Result;
  }

  // Pattern: (setcc:i16 R16C:i16:$rA, R16C:i16:$rB, SETGT:Other)
  // Emits: (CGTHr16:i16 R16C:i16:$rA, R16C:i16:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETGT &&
      N0.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_133(N, SPU::CGTHr16, MVT::i16);
    return Result;
  }

  // Pattern: (setcc:i16 R16C:i16:$rA, R16C:i16:$rB, SETUGT:Other)
  // Emits: (CLGTHr16:i16 R16C:i16:$rA, R16C:i16:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETUGT &&
      N0.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_133(N, SPU::CLGTHr16, MVT::i16);
    return Result;
  }

  // Pattern: (setcc:i16 R16C:i16:$rA, R16C:i16:$rB, SETULE:Other)
  // Emits: (XORHIr16:i16 (CLGTHr16:i16 R16C:i16:$rA, R16C:i16:$rB), 65535:i16)
  // Pattern complexity = 3  cost = 2  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETULE &&
      N0.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_142(N, SPU::CLGTHr16, SPU::XORHIr16, MVT::i16, MVT::i16);
    return Result;
  }

  // Pattern: (setcc:i16 R16C:i16:$rA, R16C:i16:$rB, SETNE:Other)
  // Emits: (XORHIr16:i16 (CEQHr16:i16 R16C:i16:$rA, R16C:i16:$rB), -1:i16)
  // Pattern complexity = 3  cost = 2  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETNE &&
      N0.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_144(N, SPU::CEQHr16, SPU::XORHIr16, MVT::i16, MVT::i16);
    return Result;
  }

  // Pattern: (setcc:i16 R16C:i16:$rA, R16C:i16:$rB, SETLE:Other)
  // Emits: (XORHIr16:i16 (CGTHr16:i16 R16C:i16:$rA, R16C:i16:$rB), 65535:i16)
  // Pattern complexity = 3  cost = 2  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETLE &&
      N0.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_142(N, SPU::CGTHr16, SPU::XORHIr16, MVT::i16, MVT::i16);
    return Result;
  }

  // Pattern: (setcc:i16 R16C:i16:$rA, R16C:i16:$rB, SETGE:Other)
  // Emits: (ORr16:i16 (CGTHr16:i16 R16C:i16:$rA, R16C:i16:$rB), (CEQHr16:i16 R16C:i16:$rA, R16C:i16:$rB))
  // Pattern complexity = 3  cost = 3  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETGE &&
      N0.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_137(N, SPU::CGTHr16, SPU::CEQHr16, SPU::ORr16, MVT::i16, MVT::i16, MVT::i16);
    return Result;
  }

  // Pattern: (setcc:i16 R16C:i16:$rA, R16C:i16:$rB, SETLT:Other)
  // Emits: (NORr16:i16 (CGTHr16:i16 R16C:i16:$rA, R16C:i16:$rB), (CEQHr16:i16 R16C:i16:$rA, R16C:i16:$rB))
  // Pattern complexity = 3  cost = 3  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETLT &&
      N0.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_137(N, SPU::CGTHr16, SPU::CEQHr16, SPU::NORr16, MVT::i16, MVT::i16, MVT::i16);
    return Result;
  }

  // Pattern: (setcc:i16 R16C:i16:$rA, R16C:i16:$rB, SETUGE:Other)
  // Emits: (ORr16:i16 (CLGTHr16:i16 R16C:i16:$rA, R16C:i16:$rB), (CEQHr16:i16 R16C:i16:$rA, R16C:i16:$rB))
  // Pattern complexity = 3  cost = 3  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETUGE &&
      N0.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_137(N, SPU::CLGTHr16, SPU::CEQHr16, SPU::ORr16, MVT::i16, MVT::i16, MVT::i16);
    return Result;
  }

  // Pattern: (setcc:i16 R16C:i16:$rA, R16C:i16:$rB, SETULT:Other)
  // Emits: (NORr16:i16 (CLGTHr16:i16 R16C:i16:$rA, R16C:i16:$rB), (CEQHr16:i16 R16C:i16:$rA, R16C:i16:$rB))
  // Pattern complexity = 3  cost = 3  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETULT &&
      N0.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_137(N, SPU::CLGTHr16, SPU::CEQHr16, SPU::NORr16, MVT::i16, MVT::i16, MVT::i16);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_147(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp1 = CurDAG->getTargetConstant(((unsigned) cast<ConstantSDNode>(N1)->getZExtValue()), MVT::i32);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N0, Tmp1);
}
SDNode *Emit_148(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N2 = N.getOperand(2);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N00, N10);
}
SDNode *Emit_149(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, MVT VT0, MVT VT1, MVT VT2) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp1 = CurDAG->getTargetConstant(((unsigned) cast<ConstantSDNode>(N1)->getZExtValue()), MVT::i32);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0, Tmp1), 0);
  SDValue Tmp4(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N0, Tmp1), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc2, VT2, Tmp2, Tmp4);
}
SDNode *Emit_150(const SDValue &N, unsigned Opc0, unsigned Opc1, MVT VT0, MVT VT1) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0, N1), 0);
  SDValue Tmp3 = CurDAG->getTargetConstant(0xFFFFFFFFULL, MVT::i32);
  return CurDAG->SelectNodeTo(N.getNode(), Opc1, VT1, Tmp2, Tmp3);
}
SDNode *Emit_151(const SDValue &N, unsigned Opc0, unsigned Opc1, MVT VT0, MVT VT1) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp1 = CurDAG->getTargetConstant(((unsigned) cast<ConstantSDNode>(N1)->getZExtValue()), MVT::i32);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0, Tmp1), 0);
  SDValue Tmp3 = CurDAG->getTargetConstant(0xFFFFFFFFULL, MVT::i32);
  return CurDAG->SelectNodeTo(N.getNode(), Opc1, VT1, Tmp2, Tmp3);
}
SDNode *Emit_152(const SDValue &N, unsigned Opc0, unsigned Opc1, MVT VT0, MVT VT1) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0, N1), 0);
  SDValue Tmp3 = CurDAG->getTargetConstant(0xFFFFFFFFFFFFFFFFULL, MVT::i32);
  return CurDAG->SelectNodeTo(N.getNode(), Opc1, VT1, Tmp2, Tmp3);
}
SDNode *Emit_153(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, unsigned Opc4, unsigned Opc5, MVT VT0, MVT VT1, MVT VT2, MVT VT3, MVT VT4, MVT VT5) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp1(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0), 0);
  SDValue Tmp3(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N1), 0);
  SDValue Tmp4(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, Tmp1, Tmp3), 0);
  SDValue Tmp5(CurDAG->getTargetNode(Opc3, N.getDebugLoc(), VT3, Tmp4), 0);
  SDValue Tmp6 = CurDAG->getTargetConstant(0xBULL, MVT::i16);
  SDValue Tmp7(CurDAG->getTargetNode(Opc4, N.getDebugLoc(), VT4, Tmp5, Tmp6), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc5, VT5, Tmp7);
}
SDNode *Emit_154(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, MVT VT0, MVT VT1, MVT VT2, MVT VT3) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0, N1), 0);
  SDValue Tmp3(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, Tmp2), 0);
  SDValue Tmp4 = CurDAG->getTargetConstant(0xFULL, MVT::i16);
  SDValue Tmp5(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, Tmp3, Tmp4), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc3, VT3, Tmp5);
}
SDNode *Emit_155(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, unsigned Opc4, unsigned Opc5, unsigned Opc6, MVT VT0, MVT VT1, MVT VT2, MVT VT3, MVT VT4, MVT VT5, MVT VT6) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp1(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0), 0);
  SDValue Tmp3(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N1), 0);
  SDValue Tmp4(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, Tmp1, Tmp3), 0);
  SDValue Tmp5(CurDAG->getTargetNode(Opc3, N.getDebugLoc(), VT3, Tmp4), 0);
  SDValue Tmp6 = CurDAG->getTargetConstant(0xBULL, MVT::i16);
  SDValue Tmp7(CurDAG->getTargetNode(Opc4, N.getDebugLoc(), VT4, Tmp5, Tmp6), 0);
  SDValue Tmp8(CurDAG->getTargetNode(Opc5, N.getDebugLoc(), VT5, Tmp7), 0);
  SDValue Tmp9 = CurDAG->getTargetConstant(0xFFFFFFFFFFFFFFFFULL, MVT::i32);
  return CurDAG->SelectNodeTo(N.getNode(), Opc6, VT6, Tmp8, Tmp9);
}
SDNode *Emit_156(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, unsigned Opc4, unsigned Opc5, unsigned Opc6, unsigned Opc7, unsigned Opc8, unsigned Opc9, unsigned Opc10, unsigned Opc11, MVT VT0, MVT VT1, MVT VT2, MVT VT3, MVT VT4, MVT VT5, MVT VT6, MVT VT7, MVT VT8, MVT VT9, MVT VT10, MVT VT11) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp1(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0), 0);
  SDValue Tmp3(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N1), 0);
  SDValue Tmp4(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, Tmp1, Tmp3), 0);
  SDValue Tmp6(CurDAG->getTargetNode(Opc3, N.getDebugLoc(), VT3, N0), 0);
  SDValue Tmp8(CurDAG->getTargetNode(Opc4, N.getDebugLoc(), VT4, N1), 0);
  SDValue Tmp9(CurDAG->getTargetNode(Opc5, N.getDebugLoc(), VT5, Tmp6, Tmp8), 0);
  SDValue Tmp10(CurDAG->getTargetNode(Opc6, N.getDebugLoc(), VT6, Tmp9), 0);
  SDValue Tmp12(CurDAG->getTargetNode(Opc7, N.getDebugLoc(), VT7, N0), 0);
  SDValue Tmp14(CurDAG->getTargetNode(Opc8, N.getDebugLoc(), VT8, N1), 0);
  SDValue Tmp15(CurDAG->getTargetNode(Opc9, N.getDebugLoc(), VT9, Tmp12, Tmp14), 0);
  SDValue Tmp16(CurDAG->getTargetNode(Opc10, N.getDebugLoc(), VT10, Tmp4, Tmp10, Tmp15), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc11, VT11, Tmp16);
}
SDNode *Emit_157(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, unsigned Opc4, unsigned Opc5, unsigned Opc6, unsigned Opc7, unsigned Opc8, unsigned Opc9, unsigned Opc10, unsigned Opc11, unsigned Opc12, MVT VT0, MVT VT1, MVT VT2, MVT VT3, MVT VT4, MVT VT5, MVT VT6, MVT VT7, MVT VT8, MVT VT9, MVT VT10, MVT VT11, MVT VT12) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp1(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0), 0);
  SDValue Tmp3(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N1), 0);
  SDValue Tmp4(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, Tmp1, Tmp3), 0);
  SDValue Tmp6(CurDAG->getTargetNode(Opc3, N.getDebugLoc(), VT3, N0), 0);
  SDValue Tmp8(CurDAG->getTargetNode(Opc4, N.getDebugLoc(), VT4, N1), 0);
  SDValue Tmp9(CurDAG->getTargetNode(Opc5, N.getDebugLoc(), VT5, Tmp6, Tmp8), 0);
  SDValue Tmp10(CurDAG->getTargetNode(Opc6, N.getDebugLoc(), VT6, Tmp9), 0);
  SDValue Tmp12(CurDAG->getTargetNode(Opc7, N.getDebugLoc(), VT7, N0), 0);
  SDValue Tmp14(CurDAG->getTargetNode(Opc8, N.getDebugLoc(), VT8, N1), 0);
  SDValue Tmp15(CurDAG->getTargetNode(Opc9, N.getDebugLoc(), VT9, Tmp12, Tmp14), 0);
  SDValue Tmp16(CurDAG->getTargetNode(Opc10, N.getDebugLoc(), VT10, Tmp4, Tmp10, Tmp15), 0);
  SDValue Tmp17(CurDAG->getTargetNode(Opc11, N.getDebugLoc(), VT11, Tmp16), 0);
  SDValue Tmp18 = CurDAG->getTargetConstant(0xFFFFFFFFFFFFFFFFULL, MVT::i32);
  return CurDAG->SelectNodeTo(N.getNode(), Opc12, VT12, Tmp17, Tmp18);
}
SDNode *Emit_158(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, unsigned Opc4, unsigned Opc5, unsigned Opc6, unsigned Opc7, unsigned Opc8, unsigned Opc9, MVT VT0, MVT VT1, MVT VT2, MVT VT3, MVT VT4, MVT VT5, MVT VT6, MVT VT7, MVT VT8, MVT VT9) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp1(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0), 0);
  SDValue Tmp3(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N1), 0);
  SDValue Tmp4(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, Tmp1, Tmp3), 0);
  SDValue Tmp6(CurDAG->getTargetNode(Opc3, N.getDebugLoc(), VT3, N0), 0);
  SDValue Tmp8(CurDAG->getTargetNode(Opc4, N.getDebugLoc(), VT4, N1), 0);
  SDValue Tmp9(CurDAG->getTargetNode(Opc5, N.getDebugLoc(), VT5, Tmp6, Tmp8), 0);
  SDValue Tmp10(CurDAG->getTargetNode(Opc6, N.getDebugLoc(), VT6, Tmp4, Tmp9), 0);
  SDValue Tmp11(CurDAG->getTargetNode(Opc7, N.getDebugLoc(), VT7, Tmp10), 0);
  SDValue Tmp12 = CurDAG->getTargetConstant(0xBULL, MVT::i16);
  SDValue Tmp13(CurDAG->getTargetNode(Opc8, N.getDebugLoc(), VT8, Tmp11, Tmp12), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc9, VT9, Tmp13);
}
SDNode *Emit_159(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, unsigned Opc4, unsigned Opc5, unsigned Opc6, unsigned Opc7, unsigned Opc8, unsigned Opc9, unsigned Opc10, MVT VT0, MVT VT1, MVT VT2, MVT VT3, MVT VT4, MVT VT5, MVT VT6, MVT VT7, MVT VT8, MVT VT9, MVT VT10) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp1(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0), 0);
  SDValue Tmp3(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N1), 0);
  SDValue Tmp4(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, Tmp1, Tmp3), 0);
  SDValue Tmp6(CurDAG->getTargetNode(Opc3, N.getDebugLoc(), VT3, N0), 0);
  SDValue Tmp8(CurDAG->getTargetNode(Opc4, N.getDebugLoc(), VT4, N1), 0);
  SDValue Tmp9(CurDAG->getTargetNode(Opc5, N.getDebugLoc(), VT5, Tmp6, Tmp8), 0);
  SDValue Tmp10(CurDAG->getTargetNode(Opc6, N.getDebugLoc(), VT6, Tmp4, Tmp9), 0);
  SDValue Tmp11(CurDAG->getTargetNode(Opc7, N.getDebugLoc(), VT7, Tmp10), 0);
  SDValue Tmp12 = CurDAG->getTargetConstant(0xBULL, MVT::i16);
  SDValue Tmp13(CurDAG->getTargetNode(Opc8, N.getDebugLoc(), VT8, Tmp11, Tmp12), 0);
  SDValue Tmp14(CurDAG->getTargetNode(Opc9, N.getDebugLoc(), VT9, Tmp13), 0);
  SDValue Tmp15 = CurDAG->getTargetConstant(0xFFFFFFFFFFFFFFFFULL, MVT::i32);
  return CurDAG->SelectNodeTo(N.getNode(), Opc10, VT10, Tmp14, Tmp15);
}
SDNode *Emit_160(const SDValue &N, unsigned Opc0, unsigned Opc1, MVT VT0, MVT VT1) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp1 = CurDAG->getTargetConstant(((unsigned) cast<ConstantSDNode>(N1)->getZExtValue()), MVT::i32);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0, Tmp1), 0);
  SDValue Tmp3 = CurDAG->getTargetConstant(0xFFFFFFFFFFFFFFFFULL, MVT::i32);
  return CurDAG->SelectNodeTo(N.getNode(), Opc1, VT1, Tmp2, Tmp3);
}
SDNode *Select_ISD_SETCC_i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getOpcode() == ISD::FABS) {
    SDValue N00 = N0.getOperand(0);
    SDValue N1 = N.getOperand(1);
    if (N1.getOpcode() == ISD::FABS) {
      SDValue N10 = N1.getOperand(0);
      SDValue N2 = N.getOperand(2);

      // Pattern: (setcc:i32 (fabs:f32 R32FP:f32:$rA), (fabs:f32 R32FP:f32:$rB), SETUEQ:Other)
      // Emits: (FCMEQf32:i32 R32FP:f32:$rA, R32FP:f32:$rB)
      // Pattern complexity = 9  cost = 1  size = 0
      if (cast<CondCodeSDNode>(N2)->get() == ISD::SETUEQ &&
          N0.getNode()->getValueType(0) == MVT::f32) {
        SDNode *Result = Emit_148(N, SPU::FCMEQf32, MVT::i32);
        return Result;
      }

      // Pattern: (setcc:i32 (fabs:f32 R32FP:f32:$rA), (fabs:f32 R32FP:f32:$rB), SETUGT:Other)
      // Emits: (FCMGTf32:i32 R32FP:f32:$rA, R32FP:f32:$rB)
      // Pattern complexity = 9  cost = 1  size = 0
      if (cast<CondCodeSDNode>(N2)->get() == ISD::SETUGT &&
          N0.getNode()->getValueType(0) == MVT::f32) {
        SDNode *Result = Emit_148(N, SPU::FCMGTf32, MVT::i32);
        return Result;
      }

      // Pattern: (setcc:i32 (fabs:f32 R32FP:f32:$rA), (fabs:f32 R32FP:f32:$rB), SETOEQ:Other)
      // Emits: (FCMEQf32:i32 R32FP:f32:$rA, R32FP:f32:$rB)
      // Pattern complexity = 9  cost = 1  size = 0
      if (cast<CondCodeSDNode>(N2)->get() == ISD::SETOEQ &&
          N0.getNode()->getValueType(0) == MVT::f32) {
        SDNode *Result = Emit_148(N, SPU::FCMEQf32, MVT::i32);
        return Result;
      }

      // Pattern: (setcc:i32 (fabs:f32 R32FP:f32:$rA), (fabs:f32 R32FP:f32:$rB), SETUGT:Other)
      // Emits: (FCMGTf32:i32 R32FP:f32:$rA, R32FP:f32:$rB)
      // Pattern complexity = 9  cost = 1  size = 0
      if (cast<CondCodeSDNode>(N2)->get() == ISD::SETUGT &&
          N0.getNode()->getValueType(0) == MVT::f32) {
        SDNode *Result = Emit_148(N, SPU::FCMGTf32, MVT::i32);
        return Result;
      }
    }
  }
  SDValue N1 = N.getOperand(1);
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_i32ImmSExt10(N1.getNode())) {
    SDValue N2 = N.getOperand(2);

    // Pattern: (setcc:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val, SETEQ:Other)
    // Emits: (CEQIr32:i32 R32C:i32:$rA, (imm:i32):$val)
    // Pattern complexity = 7  cost = 1  size = 0
    if (cast<CondCodeSDNode>(N2)->get() == ISD::SETEQ &&
        N0.getNode()->getValueType(0) == MVT::i32) {
      SDNode *Result = Emit_147(N, SPU::CEQIr32, MVT::i32);
      return Result;
    }

    // Pattern: (setcc:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val, SETGT:Other)
    // Emits: (CGTIr32:i32 R32C:i32:$rA, (imm:i32):$val)
    // Pattern complexity = 7  cost = 1  size = 0
    if (cast<CondCodeSDNode>(N2)->get() == ISD::SETGT &&
        N0.getNode()->getValueType(0) == MVT::i32) {
      SDNode *Result = Emit_147(N, SPU::CGTIr32, MVT::i32);
      return Result;
    }

    // Pattern: (setcc:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val, SETUGT:Other)
    // Emits: (CLGTIr32:i32 R32C:i32:$rA, (imm:i32):$val)
    // Pattern complexity = 7  cost = 1  size = 0
    if (cast<CondCodeSDNode>(N2)->get() == ISD::SETUGT &&
        N0.getNode()->getValueType(0) == MVT::i32) {
      SDNode *Result = Emit_147(N, SPU::CLGTIr32, MVT::i32);
      return Result;
    }

    // Pattern: (setcc:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$imm, SETULE:Other)
    // Emits: (XORIr32:i32 (CLGTIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$imm), 4294967295:i32)
    // Pattern complexity = 7  cost = 2  size = 0
    if (cast<CondCodeSDNode>(N2)->get() == ISD::SETULE &&
        N0.getNode()->getValueType(0) == MVT::i32) {
      SDNode *Result = Emit_151(N, SPU::CLGTIr32, SPU::XORIr32, MVT::i32, MVT::i32);
      return Result;
    }

    // Pattern: (setcc:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$imm, SETNE:Other)
    // Emits: (XORIr32:i32 (CEQIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$imm), -1:i32)
    // Pattern complexity = 7  cost = 2  size = 0
    if (cast<CondCodeSDNode>(N2)->get() == ISD::SETNE &&
        N0.getNode()->getValueType(0) == MVT::i32) {
      SDNode *Result = Emit_160(N, SPU::CEQIr32, SPU::XORIr32, MVT::i32, MVT::i32);
      return Result;
    }

    // Pattern: (setcc:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$imm, SETLE:Other)
    // Emits: (XORIr32:i32 (CGTIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$imm), 4294967295:i32)
    // Pattern complexity = 7  cost = 2  size = 0
    if (cast<CondCodeSDNode>(N2)->get() == ISD::SETLE &&
        N0.getNode()->getValueType(0) == MVT::i32) {
      SDNode *Result = Emit_151(N, SPU::CGTIr32, SPU::XORIr32, MVT::i32, MVT::i32);
      return Result;
    }

    // Pattern: (setcc:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$imm, SETUGE:Other)
    // Emits: (ORr32:i32 (CLGTIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$imm), (CEQIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$imm))
    // Pattern complexity = 7  cost = 3  size = 0
    if (cast<CondCodeSDNode>(N2)->get() == ISD::SETUGE &&
        N0.getNode()->getValueType(0) == MVT::i32) {
      SDNode *Result = Emit_149(N, SPU::CLGTIr32, SPU::CEQIr32, SPU::ORr32, MVT::i32, MVT::i32, MVT::i32);
      return Result;
    }

    // Pattern: (setcc:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$imm, SETULT:Other)
    // Emits: (NORr32:i32 (CLGTIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$imm), (CEQIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$imm))
    // Pattern complexity = 7  cost = 3  size = 0
    if (cast<CondCodeSDNode>(N2)->get() == ISD::SETULT &&
        N0.getNode()->getValueType(0) == MVT::i32) {
      SDNode *Result = Emit_149(N, SPU::CLGTIr32, SPU::CEQIr32, SPU::NORr32, MVT::i32, MVT::i32, MVT::i32);
      return Result;
    }

    // Pattern: (setcc:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$imm, SETGE:Other)
    // Emits: (ORr32:i32 (CGTIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$imm), (CEQIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$imm))
    // Pattern complexity = 7  cost = 3  size = 0
    if (cast<CondCodeSDNode>(N2)->get() == ISD::SETGE &&
        N0.getNode()->getValueType(0) == MVT::i32) {
      SDNode *Result = Emit_149(N, SPU::CGTIr32, SPU::CEQIr32, SPU::ORr32, MVT::i32, MVT::i32, MVT::i32);
      return Result;
    }

    // Pattern: (setcc:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$imm, SETLT:Other)
    // Emits: (NORr32:i32 (CGTIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$imm), (CEQIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$imm))
    // Pattern complexity = 7  cost = 3  size = 0
    if (cast<CondCodeSDNode>(N2)->get() == ISD::SETLT &&
        N0.getNode()->getValueType(0) == MVT::i32) {
      SDNode *Result = Emit_149(N, SPU::CGTIr32, SPU::CEQIr32, SPU::NORr32, MVT::i32, MVT::i32, MVT::i32);
      return Result;
    }
  }
  SDValue N2 = N.getOperand(2);

  // Pattern: (setcc:i32 R32C:i32:$rA, R32C:i32:$rB, SETEQ:Other)
  // Emits: (CEQr32:i32 R32C:i32:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETEQ &&
      N0.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_133(N, SPU::CEQr32, MVT::i32);
    return Result;
  }

  // Pattern: (setcc:i32 R32C:i32:$rA, R32C:i32:$rB, SETGT:Other)
  // Emits: (CGTr32:i32 R32C:i32:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETGT &&
      N0.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_133(N, SPU::CGTr32, MVT::i32);
    return Result;
  }

  // Pattern: (setcc:i32 R32C:i32:$rA, R32C:i32:$rB, SETUGT:Other)
  // Emits: (CLGTr32:i32 R32C:i32:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETUGT &&
      N0.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_133(N, SPU::CLGTr32, MVT::i32);
    return Result;
  }

  // Pattern: (setcc:i32 R32FP:f32:$rA, R32FP:f32:$rB, SETUEQ:Other)
  // Emits: (FCEQf32:i32 R32FP:f32:$rA, R32FP:f32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETUEQ &&
      N0.getNode()->getValueType(0) == MVT::f32) {
    SDNode *Result = Emit_133(N, SPU::FCEQf32, MVT::i32);
    return Result;
  }

  // Pattern: (setcc:i32 R32FP:f32:$rA, R32FP:f32:$rB, SETUGT:Other)
  // Emits: (FCGTf32:i32 R32FP:f32:$rA, R32FP:f32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETUGT &&
      N0.getNode()->getValueType(0) == MVT::f32) {
    SDNode *Result = Emit_133(N, SPU::FCGTf32, MVT::i32);
    return Result;
  }

  // Pattern: (setcc:i32 R32FP:f32:$rA, R32FP:f32:$rB, SETOEQ:Other)
  // Emits: (FCEQf32:i32 R32FP:f32:$rA, R32FP:f32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETOEQ &&
      N0.getNode()->getValueType(0) == MVT::f32) {
    SDNode *Result = Emit_133(N, SPU::FCEQf32, MVT::i32);
    return Result;
  }

  // Pattern: (setcc:i32 R32FP:f32:$rA, R32FP:f32:$rB, SETUGT:Other)
  // Emits: (FCGTf32:i32 R32FP:f32:$rA, R32FP:f32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETUGT &&
      N0.getNode()->getValueType(0) == MVT::f32) {
    SDNode *Result = Emit_133(N, SPU::FCGTf32, MVT::i32);
    return Result;
  }

  // Pattern: (setcc:i32 R32C:i32:$rA, R32C:i32:$rB, SETULE:Other)
  // Emits: (XORIr32:i32 (CLGTr32:i32 R32C:i32:$rA, R32C:i32:$rB), 4294967295:i32)
  // Pattern complexity = 3  cost = 2  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETULE &&
      N0.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_150(N, SPU::CLGTr32, SPU::XORIr32, MVT::i32, MVT::i32);
    return Result;
  }

  // Pattern: (setcc:i32 R32FP:f32:$rA, R32FP:f32:$rB, SETUNE:Other)
  // Emits: (XORIr32:i32 (FCEQf32:i32 R32FP:f32:$rA, R32FP:f32:$rB), -1:i32)
  // Pattern complexity = 3  cost = 2  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETUNE &&
      N0.getNode()->getValueType(0) == MVT::f32) {
    SDNode *Result = Emit_152(N, SPU::FCEQf32, SPU::XORIr32, MVT::i32, MVT::i32);
    return Result;
  }

  // Pattern: (setcc:i32 R32FP:f32:$rA, R32FP:f32:$rB, SETONE:Other)
  // Emits: (XORIr32:i32 (FCEQf32:i32 R32FP:f32:$rA, R32FP:f32:$rB), -1:i32)
  // Pattern complexity = 3  cost = 2  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETONE &&
      N0.getNode()->getValueType(0) == MVT::f32) {
    SDNode *Result = Emit_152(N, SPU::FCEQf32, SPU::XORIr32, MVT::i32, MVT::i32);
    return Result;
  }

  // Pattern: (setcc:i32 R32FP:f32:$rA, R32FP:f32:$rB, SETULE:Other)
  // Emits: (XORIr32:i32 (FCGTf32:i32 R32FP:f32:$rA, R32FP:f32:$rB), 4294967295:i32)
  // Pattern complexity = 3  cost = 2  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETULE &&
      N0.getNode()->getValueType(0) == MVT::f32) {
    SDNode *Result = Emit_150(N, SPU::FCGTf32, SPU::XORIr32, MVT::i32, MVT::i32);
    return Result;
  }

  // Pattern: (setcc:i32 R32FP:f32:$rA, R32FP:f32:$rB, SETOLE:Other)
  // Emits: (XORIr32:i32 (FCGTf32:i32 R32FP:f32:$rA, R32FP:f32:$rB), 4294967295:i32)
  // Pattern complexity = 3  cost = 2  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETOLE &&
      N0.getNode()->getValueType(0) == MVT::f32) {
    SDNode *Result = Emit_150(N, SPU::FCGTf32, SPU::XORIr32, MVT::i32, MVT::i32);
    return Result;
  }

  // Pattern: (setcc:i32 R32C:i32:$rA, R32C:i32:$rB, SETNE:Other)
  // Emits: (XORIr32:i32 (CEQr32:i32 R32C:i32:$rA, R32C:i32:$rB), -1:i32)
  // Pattern complexity = 3  cost = 2  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETNE &&
      N0.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_152(N, SPU::CEQr32, SPU::XORIr32, MVT::i32, MVT::i32);
    return Result;
  }

  // Pattern: (setcc:i32 R32C:i32:$rA, R32C:i32:$rB, SETLE:Other)
  // Emits: (XORIr32:i32 (CGTr32:i32 R32C:i32:$rA, R32C:i32:$rB), 4294967295:i32)
  // Pattern complexity = 3  cost = 2  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETLE &&
      N0.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_150(N, SPU::CGTr32, SPU::XORIr32, MVT::i32, MVT::i32);
    return Result;
  }

  // Pattern: (setcc:i32 R32C:i32:$rA, R32C:i32:$rB, SETUGE:Other)
  // Emits: (ORr32:i32 (CLGTr32:i32 R32C:i32:$rA, R32C:i32:$rB), (CEQr32:i32 R32C:i32:$rA, R32C:i32:$rB))
  // Pattern complexity = 3  cost = 3  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETUGE &&
      N0.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_137(N, SPU::CLGTr32, SPU::CEQr32, SPU::ORr32, MVT::i32, MVT::i32, MVT::i32);
    return Result;
  }

  // Pattern: (setcc:i32 R32C:i32:$rA, R32C:i32:$rB, SETULT:Other)
  // Emits: (NORr32:i32 (CLGTr32:i32 R32C:i32:$rA, R32C:i32:$rB), (CEQr32:i32 R32C:i32:$rA, R32C:i32:$rB))
  // Pattern complexity = 3  cost = 3  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETULT &&
      N0.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_137(N, SPU::CLGTr32, SPU::CEQr32, SPU::NORr32, MVT::i32, MVT::i32, MVT::i32);
    return Result;
  }

  // Pattern: (setcc:i32 R32FP:f32:$rA, R32FP:f32:$rB, SETUGE:Other)
  // Emits: (ORr32:i32 (FCGTf32:i32 R32FP:f32:$rA, R32FP:f32:$rB), (FCEQf32:i32 R32FP:f32:$rA, R32FP:f32:$rB))
  // Pattern complexity = 3  cost = 3  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETUGE &&
      N0.getNode()->getValueType(0) == MVT::f32) {
    SDNode *Result = Emit_137(N, SPU::FCGTf32, SPU::FCEQf32, SPU::ORr32, MVT::i32, MVT::i32, MVT::i32);
    return Result;
  }

  // Pattern: (setcc:i32 R32FP:f32:$rA, R32FP:f32:$rB, SETOGE:Other)
  // Emits: (ORr32:i32 (FCGTf32:i32 R32FP:f32:$rA, R32FP:f32:$rB), (FCEQf32:i32 R32FP:f32:$rA, R32FP:f32:$rB))
  // Pattern complexity = 3  cost = 3  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETOGE &&
      N0.getNode()->getValueType(0) == MVT::f32) {
    SDNode *Result = Emit_137(N, SPU::FCGTf32, SPU::FCEQf32, SPU::ORr32, MVT::i32, MVT::i32, MVT::i32);
    return Result;
  }

  // Pattern: (setcc:i32 R32FP:f32:$rA, R32FP:f32:$rB, SETULT:Other)
  // Emits: (NORr32:i32 (FCGTf32:i32 R32FP:f32:$rA, R32FP:f32:$rB), (FCEQf32:i32 R32FP:f32:$rA, R32FP:f32:$rB))
  // Pattern complexity = 3  cost = 3  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETULT &&
      N0.getNode()->getValueType(0) == MVT::f32) {
    SDNode *Result = Emit_137(N, SPU::FCGTf32, SPU::FCEQf32, SPU::NORr32, MVT::i32, MVT::i32, MVT::i32);
    return Result;
  }

  // Pattern: (setcc:i32 R32FP:f32:$rA, R32FP:f32:$rB, SETOLT:Other)
  // Emits: (NORr32:i32 (FCGTf32:i32 R32FP:f32:$rA, R32FP:f32:$rB), (FCEQf32:i32 R32FP:f32:$rA, R32FP:f32:$rB))
  // Pattern complexity = 3  cost = 3  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETOLT &&
      N0.getNode()->getValueType(0) == MVT::f32) {
    SDNode *Result = Emit_137(N, SPU::FCGTf32, SPU::FCEQf32, SPU::NORr32, MVT::i32, MVT::i32, MVT::i32);
    return Result;
  }

  // Pattern: (setcc:i32 R32C:i32:$rA, R32C:i32:$rB, SETGE:Other)
  // Emits: (ORr32:i32 (CGTr32:i32 R32C:i32:$rA, R32C:i32:$rB), (CEQr32:i32 R32C:i32:$rA, R32C:i32:$rB))
  // Pattern complexity = 3  cost = 3  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETGE &&
      N0.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_137(N, SPU::CGTr32, SPU::CEQr32, SPU::ORr32, MVT::i32, MVT::i32, MVT::i32);
    return Result;
  }

  // Pattern: (setcc:i32 R32C:i32:$rA, R32C:i32:$rB, SETLT:Other)
  // Emits: (NORr32:i32 (CGTr32:i32 R32C:i32:$rA, R32C:i32:$rB), (CEQr32:i32 R32C:i32:$rA, R32C:i32:$rB))
  // Pattern complexity = 3  cost = 3  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETLT &&
      N0.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_137(N, SPU::CGTr32, SPU::CEQr32, SPU::NORr32, MVT::i32, MVT::i32, MVT::i32);
    return Result;
  }
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETEQ) {

    // Pattern: (setcc:i32 VECREG:v2i64:$rA, VECREG:v2i64:$rB, SETEQ:Other)
    // Emits: (ORi32_v4i32:i32 (CEQIv4i32:v16i8 (GBv4i32:v16i8 (CEQv4i32:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)), 15:i16))
    // Pattern complexity = 3  cost = 4  size = 0
    if (N0.getNode()->getValueType(0) == MVT::v2i64) {
      SDNode *Result = Emit_154(N, SPU::CEQv4i32, SPU::GBv4i32, SPU::CEQIv4i32, SPU::ORi32_v4i32, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::i32);
      return Result;
    }

    // Pattern: (setcc:i32 R64C:i64:$rA, R64C:i64:$rB, SETEQ:Other)
    // Emits: (ORi32_v4i32:i32 (CGTIv4i32:v16i8 (GBv4i32:v16i8 (CEQv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB))), 11:i16))
    // Pattern complexity = 3  cost = 6  size = 0
    if (N0.getNode()->getValueType(0) == MVT::i64) {
      SDNode *Result = Emit_153(N, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CEQv4i32, SPU::GBv4i32, SPU::CGTIv4i32, SPU::ORi32_v4i32, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::i32);
      return Result;
    }
  }

  // Pattern: (setcc:i32 R64C:i64:$rA, R64C:i64:$rB, SETNE:Other)
  // Emits: (XORIr32:i32 (ORi32_v4i32:i32 (CGTIv4i32:v16i8 (GBv4i32:v16i8 (CEQv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB))), 11:i16)), -1:i32)
  // Pattern complexity = 3  cost = 7  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETNE &&
      N0.getNode()->getValueType(0) == MVT::i64) {
    SDNode *Result = Emit_155(N, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CEQv4i32, SPU::GBv4i32, SPU::CGTIv4i32, SPU::ORi32_v4i32, SPU::XORIr32, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::i32, MVT::i32);
    return Result;
  }

  // Pattern: (setcc:i32 R64C:i64:$rA, R64C:i64:$rB, SETUGE:Other)
  // Emits: (ORi32_v4i32:i32 (CGTIv4i32:v16i8 (GBv4i32:v16i8 (ORv4i32:v16i8 (CLGTv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB)), (CEQv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB)))), 11:i16))
  // Pattern complexity = 3  cost = 10  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETUGE &&
      N0.getNode()->getValueType(0) == MVT::i64) {
    SDNode *Result = Emit_158(N, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CLGTv4i32, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CEQv4i32, SPU::ORv4i32, SPU::GBv4i32, SPU::CGTIv4i32, SPU::ORi32_v4i32, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::i32);
    return Result;
  }

  // Pattern: (setcc:i32 R64C:i64:$rA, R64C:i64:$rB, SETGE:Other)
  // Emits: (ORi32_v4i32:i32 (CGTIv4i32:v16i8 (GBv4i32:v16i8 (ORv4i32:v16i8 (CGTv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB)), (CEQv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB)))), 11:i16))
  // Pattern complexity = 3  cost = 10  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETGE &&
      N0.getNode()->getValueType(0) == MVT::i64) {
    SDNode *Result = Emit_158(N, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CGTv4i32, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CEQv4i32, SPU::ORv4i32, SPU::GBv4i32, SPU::CGTIv4i32, SPU::ORi32_v4i32, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::i32);
    return Result;
  }

  // Pattern: (setcc:i32 R64C:i64:$rA, R64C:i64:$rB, SETULT:Other)
  // Emits: (XORIr32:i32 (ORi32_v4i32:i32 (CGTIv4i32:v16i8 (GBv4i32:v16i8 (ORv4i32:v16i8 (CLGTv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB)), (CEQv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB)))), 11:i16)), -1:i32)
  // Pattern complexity = 3  cost = 11  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETULT &&
      N0.getNode()->getValueType(0) == MVT::i64) {
    SDNode *Result = Emit_159(N, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CLGTv4i32, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CEQv4i32, SPU::ORv4i32, SPU::GBv4i32, SPU::CGTIv4i32, SPU::ORi32_v4i32, SPU::XORIr32, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::i32, MVT::i32);
    return Result;
  }

  // Pattern: (setcc:i32 R64C:i64:$rA, R64C:i64:$rB, SETLT:Other)
  // Emits: (XORIr32:i32 (ORi32_v4i32:i32 (CGTIv4i32:v16i8 (GBv4i32:v16i8 (ORv4i32:v16i8 (CGTv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB)), (CEQv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB)))), 11:i16)), -1:i32)
  // Pattern complexity = 3  cost = 11  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETLT &&
      N0.getNode()->getValueType(0) == MVT::i64) {
    SDNode *Result = Emit_159(N, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CGTv4i32, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CEQv4i32, SPU::ORv4i32, SPU::GBv4i32, SPU::CGTIv4i32, SPU::ORi32_v4i32, SPU::XORIr32, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::i32, MVT::i32);
    return Result;
  }

  // Pattern: (setcc:i32 R64C:i64:$rA, R64C:i64:$rB, SETUGT:Other)
  // Emits: (ORi32_v4i32:i32 (SELBv2i64:v16i8 (CLGTv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB)), (XSWDv2i64:v16i8 (CLGTv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB))), (CEQv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB))))
  // Pattern complexity = 3  cost = 12  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETUGT &&
      N0.getNode()->getValueType(0) == MVT::i64) {
    SDNode *Result = Emit_156(N, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CLGTv4i32, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CLGTv4i32, SPU::XSWDv2i64, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CEQv4i32, SPU::SELBv2i64, SPU::ORi32_v4i32, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::i32);
    return Result;
  }

  // Pattern: (setcc:i32 R64C:i64:$rA, R64C:i64:$rB, SETGT:Other)
  // Emits: (ORi32_v4i32:i32 (SELBv2i64:v16i8 (CLGTv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB)), (XSWDv2i64:v16i8 (CLGTv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB))), (CEQv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB))))
  // Pattern complexity = 3  cost = 12  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETGT &&
      N0.getNode()->getValueType(0) == MVT::i64) {
    SDNode *Result = Emit_156(N, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CLGTv4i32, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CLGTv4i32, SPU::XSWDv2i64, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CEQv4i32, SPU::SELBv2i64, SPU::ORi32_v4i32, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::i32);
    return Result;
  }

  // Pattern: (setcc:i32 R64C:i64:$rA, R64C:i64:$rB, SETULE:Other)
  // Emits: (XORIr32:i32 (ORi32_v4i32:i32 (SELBv2i64:v16i8 (CLGTv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB)), (XSWDv2i64:v16i8 (CLGTv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB))), (CEQv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB)))), -1:i32)
  // Pattern complexity = 3  cost = 13  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETULE &&
      N0.getNode()->getValueType(0) == MVT::i64) {
    SDNode *Result = Emit_157(N, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CLGTv4i32, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CLGTv4i32, SPU::XSWDv2i64, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CEQv4i32, SPU::SELBv2i64, SPU::ORi32_v4i32, SPU::XORIr32, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::i32, MVT::i32);
    return Result;
  }

  // Pattern: (setcc:i32 R64C:i64:$rA, R64C:i64:$rB, SETLE:Other)
  // Emits: (XORIr32:i32 (ORi32_v4i32:i32 (SELBv2i64:v16i8 (CLGTv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB)), (XSWDv2i64:v16i8 (CLGTv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB))), (CEQv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB)))), -1:i32)
  // Pattern complexity = 3  cost = 13  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETLE &&
      N0.getNode()->getValueType(0) == MVT::i64) {
    SDNode *Result = Emit_157(N, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CLGTv4i32, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CLGTv4i32, SPU::XSWDv2i64, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CEQv4i32, SPU::SELBv2i64, SPU::ORi32_v4i32, SPU::XORIr32, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::i32, MVT::i32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_161(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp2 = Transform_v16i8SExt8Imm_xform(N1.getNode());
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N0, Tmp2);
}
SDNode *Emit_162(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, unsigned Opc4, unsigned Opc5, unsigned Opc6, MVT VT0, MVT VT1, MVT VT2, MVT VT3, MVT VT4, MVT VT5, MVT VT6) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0, N1), 0);
  SDValue Tmp4(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N0), 0);
  SDValue Tmp6(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, N1), 0);
  SDValue Tmp7(CurDAG->getTargetNode(Opc3, N.getDebugLoc(), VT3, Tmp4, Tmp6), 0);
  SDValue Tmp8(CurDAG->getTargetNode(Opc4, N.getDebugLoc(), VT4, Tmp7), 0);
  SDValue Tmp11(CurDAG->getTargetNode(Opc5, N.getDebugLoc(), VT5, N0, N1), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc6, VT6, Tmp2, Tmp8, Tmp11);
}
SDNode *Emit_163(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, unsigned Opc4, MVT VT0, MVT VT1, MVT VT2, MVT VT3, MVT VT4) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0, N1), 0);
  SDValue Tmp5(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N0, N1), 0);
  SDValue Tmp6(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, Tmp2, Tmp5), 0);
  SDValue Tmp7(CurDAG->getTargetNode(Opc3, N.getDebugLoc(), VT3, Tmp6), 0);
  SDValue Tmp8 = CurDAG->getTargetConstant(0xFULL, MVT::i16);
  return CurDAG->SelectNodeTo(N.getNode(), Opc4, VT4, Tmp7, Tmp8);
}
SDNode *Select_ISD_SETCC_v16i8(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getOpcode() == ISD::BUILD_VECTOR &&
      Predicate_v16i8SExt8Imm(N1.getNode())) {
    SDValue N2 = N.getOperand(2);

    // Pattern: (setcc:v16i8 VECREG:v16i8:$rA, (build_vector:v16i8)<<P:Predicate_v16i8SExt8Imm>><<X:v16i8SExt8Imm_xform>>:$val, SETEQ:Other)
    // Emits: (CEQBIv16i8:v16i8 VECREG:v16i8:$rA, (v16i8SExt8Imm_xform:i8 (build_vector:v16i8):$val))
    // Pattern complexity = 7  cost = 1  size = 0
    if (cast<CondCodeSDNode>(N2)->get() == ISD::SETEQ &&
        N0.getNode()->getValueType(0) == MVT::v16i8) {
      SDNode *Result = Emit_161(N, SPU::CEQBIv16i8, MVT::v16i8);
      return Result;
    }

    // Pattern: (setcc:v16i8 VECREG:v16i8:$rA, (build_vector:v16i8)<<P:Predicate_v16i8SExt8Imm>><<X:v16i8SExt8Imm_xform>>:$val, SETGT:Other)
    // Emits: (CGTBIv16i8:v16i8 VECREG:v16i8:$rA, (v16i8SExt8Imm_xform:i8 (build_vector:v16i8):$val))
    // Pattern complexity = 7  cost = 1  size = 0
    if (cast<CondCodeSDNode>(N2)->get() == ISD::SETGT &&
        N0.getNode()->getValueType(0) == MVT::v16i8) {
      SDNode *Result = Emit_161(N, SPU::CGTBIv16i8, MVT::v16i8);
      return Result;
    }

    // Pattern: (setcc:v16i8 VECREG:v16i8:$rA, (build_vector:v16i8)<<P:Predicate_v16i8SExt8Imm>><<X:v16i8SExt8Imm_xform>>:$val, SETUGT:Other)
    // Emits: (CLGTBIv16i8:v16i8 VECREG:v16i8:$rA, (v16i8SExt8Imm_xform:i8 (build_vector:v16i8):$val))
    // Pattern complexity = 7  cost = 1  size = 0
    if (cast<CondCodeSDNode>(N2)->get() == ISD::SETUGT &&
        N0.getNode()->getValueType(0) == MVT::v16i8) {
      SDNode *Result = Emit_161(N, SPU::CLGTBIv16i8, MVT::v16i8);
      return Result;
    }
  }
  SDValue N2 = N.getOperand(2);

  // Pattern: (setcc:v16i8 VECREG:v8i16:$rA, VECREG:v8i16:$rB, SETEQ:Other)
  // Emits: (CEQBv16i8:v16i8 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETEQ &&
      N0.getNode()->getValueType(0) == MVT::v8i16) {
    SDNode *Result = Emit_133(N, SPU::CEQBv16i8, MVT::v16i8);
    return Result;
  }

  // Pattern: (setcc:v16i8 VECREG:v8i16:$rA, VECREG:v8i16:$rB, SETGT:Other)
  // Emits: (CGTBv16i8:v16i8 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETGT &&
      N0.getNode()->getValueType(0) == MVT::v8i16) {
    SDNode *Result = Emit_133(N, SPU::CGTBv16i8, MVT::v16i8);
    return Result;
  }

  // Pattern: (setcc:v16i8 VECREG:v8i16:$rA, VECREG:v8i16:$rB, SETUGT:Other)
  // Emits: (CLGTBv16i8:v16i8 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETUGT &&
      N0.getNode()->getValueType(0) == MVT::v8i16) {
    SDNode *Result = Emit_133(N, SPU::CLGTBv16i8, MVT::v16i8);
    return Result;
  }

  // Pattern: (setcc:v16i8 VECREG:v2i64:$rA, VECREG:v2i64:$rB, SETUGE:Other)
  // Emits: (CEQIv4i32:v16i8 (GBv4i32:v16i8 (ORv4i32:v16i8 (CLGTv4i32:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB), (CEQv4i32:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB))), 15:i16)
  // Pattern complexity = 3  cost = 5  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETUGE &&
      N0.getNode()->getValueType(0) == MVT::v2i64) {
    SDNode *Result = Emit_163(N, SPU::CLGTv4i32, SPU::CEQv4i32, SPU::ORv4i32, SPU::GBv4i32, SPU::CEQIv4i32, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8);
    return Result;
  }

  // Pattern: (setcc:v16i8 VECREG:v2i64:$rA, VECREG:v2i64:$rB, SETGE:Other)
  // Emits: (CEQIv4i32:v16i8 (GBv4i32:v16i8 (ORv4i32:v16i8 (CGTv4i32:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB), (CEQv4i32:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB))), 15:i16)
  // Pattern complexity = 3  cost = 5  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETGE &&
      N0.getNode()->getValueType(0) == MVT::v2i64) {
    SDNode *Result = Emit_163(N, SPU::CGTv4i32, SPU::CEQv4i32, SPU::ORv4i32, SPU::GBv4i32, SPU::CEQIv4i32, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8);
    return Result;
  }

  // Pattern: (setcc:v16i8 VECREG:v2i64:$rA, VECREG:v2i64:$rB, SETUGT:Other)
  // Emits: (SELBv2i64:v16i8 (CLGTv4i32:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB), (XSWDv2i64:v16i8 (CLGTv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB))), (CEQv4i32:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB))
  // Pattern complexity = 3  cost = 7  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETUGT &&
      N0.getNode()->getValueType(0) == MVT::v2i64) {
    SDNode *Result = Emit_162(N, SPU::CLGTv4i32, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CLGTv4i32, SPU::XSWDv2i64, SPU::CEQv4i32, SPU::SELBv2i64, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8);
    return Result;
  }

  // Pattern: (setcc:v16i8 VECREG:v2i64:$rA, VECREG:v2i64:$rB, SETGT:Other)
  // Emits: (SELBv2i64:v16i8 (CLGTv4i32:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB), (XSWDv2i64:v16i8 (CLGTv4i32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$rA), (ORv2i64_i64:v16i8 R64C:i64:$rB))), (CEQv4i32:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB))
  // Pattern complexity = 3  cost = 7  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETGT &&
      N0.getNode()->getValueType(0) == MVT::v2i64) {
    SDNode *Result = Emit_162(N, SPU::CLGTv4i32, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CLGTv4i32, SPU::XSWDv2i64, SPU::CEQv4i32, SPU::SELBv2i64, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_164(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp2 = Transform_v8i16SExt10Imm_xform(N1.getNode());
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N0, Tmp2);
}
SDNode *Select_ISD_SETCC_v8i16(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getOpcode() == ISD::BUILD_VECTOR &&
      Predicate_v8i16SExt10Imm(N1.getNode())) {
    SDValue N2 = N.getOperand(2);

    // Pattern: (setcc:v8i16 VECREG:v8i16:$rA, (build_vector:v8i16)<<P:Predicate_v8i16SExt10Imm>><<X:v8i16SExt10Imm_xform>>:$val, SETEQ:Other)
    // Emits: (CEQHIv8i16:v8i16 VECREG:v8i16:$rA, (v8i16SExt10Imm_xform:i16 (build_vector:v8i16):$val))
    // Pattern complexity = 7  cost = 1  size = 0
    if (cast<CondCodeSDNode>(N2)->get() == ISD::SETEQ &&
        N0.getNode()->getValueType(0) == MVT::v8i16) {
      SDNode *Result = Emit_164(N, SPU::CEQHIv8i16, MVT::v8i16);
      return Result;
    }

    // Pattern: (setcc:v8i16 VECREG:v8i16:$rA, (build_vector:v8i16)<<P:Predicate_v8i16SExt10Imm>><<X:v8i16SExt10Imm_xform>>:$val, SETGT:Other)
    // Emits: (CGTHIv8i16:v8i16 VECREG:v8i16:$rA, (v8i16SExt10Imm_xform:i16 (build_vector:v8i16):$val))
    // Pattern complexity = 7  cost = 1  size = 0
    if (cast<CondCodeSDNode>(N2)->get() == ISD::SETGT &&
        N0.getNode()->getValueType(0) == MVT::v8i16) {
      SDNode *Result = Emit_164(N, SPU::CGTHIv8i16, MVT::v8i16);
      return Result;
    }

    // Pattern: (setcc:v8i16 VECREG:v8i16:$rA, (build_vector:v8i16)<<P:Predicate_v8i16SExt10Imm>><<X:v8i16SExt10Imm_xform>>:$val, SETUGT:Other)
    // Emits: (CLGTHIv8i16:v8i16 VECREG:v8i16:$rA, (v8i16SExt10Imm_xform:i16 (build_vector:v8i16):$val))
    // Pattern complexity = 7  cost = 1  size = 0
    if (cast<CondCodeSDNode>(N2)->get() == ISD::SETUGT &&
        N0.getNode()->getValueType(0) == MVT::v8i16) {
      SDNode *Result = Emit_164(N, SPU::CLGTHIv8i16, MVT::v8i16);
      return Result;
    }
  }
  SDValue N2 = N.getOperand(2);

  // Pattern: (setcc:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB, SETEQ:Other)
  // Emits: (CEQHv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETEQ &&
      N0.getNode()->getValueType(0) == MVT::v8i16) {
    SDNode *Result = Emit_133(N, SPU::CEQHv8i16, MVT::v8i16);
    return Result;
  }

  // Pattern: (setcc:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB, SETGT:Other)
  // Emits: (CGTHv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETGT &&
      N0.getNode()->getValueType(0) == MVT::v8i16) {
    SDNode *Result = Emit_133(N, SPU::CGTHv8i16, MVT::v8i16);
    return Result;
  }

  // Pattern: (setcc:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB, SETUGT:Other)
  // Emits: (CLGTHv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETUGT &&
      N0.getNode()->getValueType(0) == MVT::v8i16) {
    SDNode *Result = Emit_133(N, SPU::CLGTHv8i16, MVT::v8i16);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_165(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp2 = Transform_v4i32SExt16Imm_xform(N1.getNode());
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N0, Tmp2);
}
SDNode *Emit_166(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp2 = Transform_v4i32SExt16Imm_xform(N1.getNode());
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N00, Tmp2);
}
SDNode *Select_ISD_SETCC_v4i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);

  // Pattern: (setcc:v4i32 (bitconvert:v4i32 VECREG:v4f32:$rA), (build_vector:v4i32)<<P:Predicate_v4i32SExt16Imm>><<X:v4i32SExt16Imm_xform>>:$val, SETGT:Other)
  // Emits: (CGTIv4f32:v4i32 VECREG:v4f32:$rA, (v4i32SExt16Imm_xform:i16 (build_vector:v4i32):$val))
  // Pattern complexity = 10  cost = 1  size = 0
  if (N0.getOpcode() == ISD::BIT_CONVERT) {
    SDValue N00 = N0.getOperand(0);
    SDValue N1 = N.getOperand(1);
    if (N1.getOpcode() == ISD::BUILD_VECTOR &&
        Predicate_v4i32SExt16Imm(N1.getNode())) {
      SDValue N2 = N.getOperand(2);
      if (cast<CondCodeSDNode>(N2)->get() == ISD::SETGT &&
          N0.getNode()->getValueType(0) == MVT::v4i32 &&
          N00.getNode()->getValueType(0) == MVT::v4f32) {
        SDNode *Result = Emit_166(N, SPU::CGTIv4f32, MVT::v4i32);
        return Result;
      }
    }
  }
  SDValue N1 = N.getOperand(1);
  if (N1.getOpcode() == ISD::BUILD_VECTOR &&
      Predicate_v4i32SExt16Imm(N1.getNode())) {
    SDValue N2 = N.getOperand(2);

    // Pattern: (setcc:v4i32 VECREG:v4i32:$rA, (build_vector:v4i32)<<P:Predicate_v4i32SExt16Imm>><<X:v4i32SExt16Imm_xform>>:$val, SETEQ:Other)
    // Emits: (CEQIv4i32:v4i32 VECREG:v4i32:$rA, (v4i32SExt16Imm_xform:i16 (build_vector:v4i32):$val))
    // Pattern complexity = 7  cost = 1  size = 0
    if (cast<CondCodeSDNode>(N2)->get() == ISD::SETEQ &&
        N0.getNode()->getValueType(0) == MVT::v4i32) {
      SDNode *Result = Emit_165(N, SPU::CEQIv4i32, MVT::v4i32);
      return Result;
    }

    // Pattern: (setcc:v4i32 VECREG:v4i32:$rA, (build_vector:v4i32)<<P:Predicate_v4i32SExt16Imm>><<X:v4i32SExt16Imm_xform>>:$val, SETGT:Other)
    // Emits: (CGTIv4i32:v4i32 VECREG:v4i32:$rA, (v4i32SExt16Imm_xform:i16 (build_vector:v4i32):$val))
    // Pattern complexity = 7  cost = 1  size = 0
    if (cast<CondCodeSDNode>(N2)->get() == ISD::SETGT &&
        N0.getNode()->getValueType(0) == MVT::v4i32) {
      SDNode *Result = Emit_165(N, SPU::CGTIv4i32, MVT::v4i32);
      return Result;
    }

    // Pattern: (setcc:v4i32 VECREG:v4i32:$rA, (build_vector:v4i32)<<P:Predicate_v4i32SExt16Imm>><<X:v4i32SExt16Imm_xform>>:$val, SETUGT:Other)
    // Emits: (CLGTIv4i32:v4i32 VECREG:v4i32:$rA, (v4i32SExt16Imm_xform:i16 (build_vector:v4i32):$val))
    // Pattern complexity = 7  cost = 1  size = 0
    if (cast<CondCodeSDNode>(N2)->get() == ISD::SETUGT &&
        N0.getNode()->getValueType(0) == MVT::v4i32) {
      SDNode *Result = Emit_165(N, SPU::CLGTIv4i32, MVT::v4i32);
      return Result;
    }
  }
  SDValue N2 = N.getOperand(2);

  // Pattern: (setcc:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB, SETEQ:Other)
  // Emits: (CEQv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETEQ &&
      N0.getNode()->getValueType(0) == MVT::v4i32) {
    SDNode *Result = Emit_133(N, SPU::CEQv4i32, MVT::v4i32);
    return Result;
  }

  // Pattern: (setcc:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB, SETGT:Other)
  // Emits: (CGTv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETGT &&
      N0.getNode()->getValueType(0) == MVT::v4i32) {
    SDNode *Result = Emit_133(N, SPU::CGTv4i32, MVT::v4i32);
    return Result;
  }

  // Pattern: (setcc:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB, SETUGT:Other)
  // Emits: (CLGTv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (cast<CondCodeSDNode>(N2)->get() == ISD::SETUGT &&
      N0.getNode()->getValueType(0) == MVT::v4i32) {
    SDNode *Result = Emit_133(N, SPU::CLGTv4i32, MVT::v4i32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_SHL_i16(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_uimm7(N1.getNode())) {

    // Pattern: (shl:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_uimm7>>:$val)
    // Emits: (SHLHIr16:i16 R16C:i16:$rA, (imm:i16):$val)
    // Pattern complexity = 7  cost = 1  size = 0
    if (N1.getNode()->getValueType(0) == MVT::i16) {
      SDNode *Result = Emit_1(N, SPU::SHLHIr16, MVT::i16);
      return Result;
    }

    // Pattern: (shl:i16 R16C:i16:$rA, (imm:i32)<<P:Predicate_uimm7>>:$val)
    // Emits: (SHLHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_uimm7>>:$val)
    // Pattern complexity = 7  cost = 1  size = 0
    if (N1.getNode()->getValueType(0) == MVT::i32) {
      SDNode *Result = Emit_1(N, SPU::SHLHIr16, MVT::i16);
      return Result;
    }
  }

  // Pattern: (shl:i16 R16C:i16:$rA, R16C:i16:$rB)
  // Emits: (SHLHr16:i16 R16C:i16:$rA, R16C:i16:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_0(N, SPU::SHLHr16, MVT::i16);
    return Result;
  }

  // Pattern: (shl:i16 R16C:i16:$rA, R32C:i32:$rB)
  // Emits: (SHLHr16_r32:i16 R16C:i16:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_0(N, SPU::SHLHr16_r32, MVT::i16);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_SHL_i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);

  // Pattern: (shl:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_uimm7>>:$val)
  // Emits: (SHLIr32:i32 R32C:i32:$rA, (imm:i32):$val)
  // Pattern complexity = 7  cost = 1  size = 0
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_uimm7(N1.getNode()) &&
      N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_2(N, SPU::SHLIr32, MVT::i32);
    return Result;
  }

  // Pattern: (shl:i32 R32C:i32:$rA, R32C:i32:$rB)
  // Emits: (SHLr32:i32 R32C:i32:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_0(N, SPU::SHLr32, MVT::i32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_167(const SDValue &N, unsigned Opc0, unsigned Opc1, MVT VT0, MVT VT1) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0, N1), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc1, VT1, Tmp2, N1);
}
SDNode *Select_ISD_SHL_i128(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_167(N, SPU::SHLQBIr128, SPU::SHLQBYBIr128, MVT::i128, MVT::i128);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_SIGN_EXTEND_i16(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::i8) {
    SDNode *Result = Emit_31(N, SPU::XSBHr8, MVT::i16);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_168(const SDValue &N, unsigned Opc0, unsigned Opc1, MVT VT0, MVT VT1) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue Tmp1(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc1, VT1, Tmp1);
}
SDNode *Select_ISD_SIGN_EXTEND_i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);

  // Pattern: (sext:i32 R16C:i16:$rSrc)
  // Emits: (XSHWr16:i32 R16C:i16:$rSrc)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_31(N, SPU::XSHWr16, MVT::i32);
    return Result;
  }

  // Pattern: (sext:i32 R8C:i8:$rSrc)
  // Emits: (XSHWr16:i32 (XSBHr8:i16 R8C:i8:$rSrc))
  // Pattern complexity = 3  cost = 2  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i8) {
    SDNode *Result = Emit_168(N, SPU::XSBHr8, SPU::XSHWr16, MVT::i16, MVT::i32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_169(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, MVT VT0, MVT VT1, MVT VT2) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue Tmp1(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0), 0);
  SDValue Tmp2(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, Tmp1), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc2, VT2, Tmp2);
}
SDNode *Select_ISD_SIGN_EXTEND_i64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);

  // Pattern: (sext:i64 R32C:i32:$rSrc)
  // Emits: (XSWDr64:i64 R32C:i32:$rSrc)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_31(N, SPU::XSWDr64, MVT::i64);
    return Result;
  }

  // Pattern: (sext:i64 R16C:i16:$rSrc)
  // Emits: (XSWDr64:i64 (XSHWr16:i32 R16C:i16:$rSrc))
  // Pattern complexity = 3  cost = 2  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_168(N, SPU::XSHWr16, SPU::XSWDr64, MVT::i32, MVT::i64);
    return Result;
  }

  // Pattern: (sext:i64 R8C:i8:$rSrc)
  // Emits: (XSWDr64:i64 (XSHWr16:i32 (XSBHr8:i16 R8C:i8:$rSrc)))
  // Pattern complexity = 3  cost = 3  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i8) {
    SDNode *Result = Emit_169(N, SPU::XSBHr8, SPU::XSHWr16, SPU::XSWDr64, MVT::i16, MVT::i32, MVT::i64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_SIGN_EXTEND_v8i16(const SDValue &N) {
  SDValue N0 = N.getOperand(0);

  // Pattern: (sext:v8i16 VECREG:v8i16:$rSrc)
  // Emits: (XSBHv16i8:v8i16 VECREG:v8i16:$rSrc)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v8i16) {
    SDNode *Result = Emit_31(N, SPU::XSBHv16i8, MVT::v8i16);
    return Result;
  }

  // Pattern: (sext:v8i16 VECREG:v4i32:$rSrc)
  // Emits: (XSHWv4i32:v8i16 VECREG:v4i32:$rSrc)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v4i32) {
    SDNode *Result = Emit_31(N, SPU::XSHWv4i32, MVT::v8i16);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_SIGN_EXTEND_v2i64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::v2i64) {
    SDNode *Result = Emit_31(N, SPU::XSWDv2i64, MVT::v2i64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_170(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N0);
}
SDNode *Select_ISD_SIGN_EXTEND_INREG_i16(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (cast<VTSDNode>(N1)->getVT() == MVT::i8) {
    SDNode *Result = Emit_170(N, SPU::XSBHr16, MVT::i16);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_171(const SDValue &N, unsigned Opc0, unsigned Opc1, MVT VT0, MVT VT1) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue Tmp1(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc1, VT1, Tmp1);
}
SDNode *Select_ISD_SIGN_EXTEND_INREG_i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);

  // Pattern: (sext_inreg:i32 R32C:i32:$rSrc, i16:Other)
  // Emits: (XSHWr32:i32 R32C:i32:$rSrc)
  // Pattern complexity = 3  cost = 1  size = 0
  if (cast<VTSDNode>(N1)->getVT() == MVT::i16) {
    SDNode *Result = Emit_170(N, SPU::XSHWr32, MVT::i32);
    return Result;
  }

  // Pattern: (sext_inreg:i32 R32C:i32:$rSrc, i8:Other)
  // Emits: (XSHWr32:i32 (XSBHr32:i32 R32C:i32:$rSrc))
  // Pattern complexity = 3  cost = 2  size = 0
  if (cast<VTSDNode>(N1)->getVT() == MVT::i8) {
    SDNode *Result = Emit_171(N, SPU::XSBHr32, SPU::XSHWr32, MVT::i32, MVT::i32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_172(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, MVT VT0, MVT VT1, MVT VT2) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue Tmp1(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0), 0);
  SDValue Tmp2(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, Tmp1), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc2, VT2, Tmp2);
}
SDNode *Select_ISD_SIGN_EXTEND_INREG_i64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);

  // Pattern: (sext_inreg:i64 R64C:i64:$rSrc, i32:Other)
  // Emits: (XSWDr64_inreg:i64 R64C:i64:$rSrc)
  // Pattern complexity = 3  cost = 1  size = 0
  if (cast<VTSDNode>(N1)->getVT() == MVT::i32) {
    SDNode *Result = Emit_170(N, SPU::XSWDr64_inreg, MVT::i64);
    return Result;
  }

  // Pattern: (sext_inreg:i64 R64C:i64:$rSrc, i16:Other)
  // Emits: (XSWDr64_inreg:i64 (XSHWr64:i64 R64C:i64:$rSrc))
  // Pattern complexity = 3  cost = 2  size = 0
  if (cast<VTSDNode>(N1)->getVT() == MVT::i16) {
    SDNode *Result = Emit_171(N, SPU::XSHWr64, SPU::XSWDr64_inreg, MVT::i64, MVT::i64);
    return Result;
  }

  // Pattern: (sext_inreg:i64 R64C:i64:$rSrc, i8:Other)
  // Emits: (XSWDr64_inreg:i64 (XSHWr64:i64 (XSBHr64:i64 R64C:i64:$rSrc)))
  // Pattern complexity = 3  cost = 3  size = 0
  if (cast<VTSDNode>(N1)->getVT() == MVT::i8) {
    SDNode *Result = Emit_172(N, SPU::XSBHr64, SPU::XSHWr64, SPU::XSWDr64_inreg, MVT::i64, MVT::i64, MVT::i64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_SINT_TO_FP_f32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_31(N, SPU::CSiFf32, MVT::f32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_SINT_TO_FP_v4f32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::v4i32) {
    SDNode *Result = Emit_31(N, SPU::CSiFv4f32, MVT::v4f32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_173(const SDValue &N, unsigned Opc0, unsigned Opc1, MVT VT0, MVT VT1) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue Tmp2 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp3(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N1, Tmp2), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc1, VT1, N0, Tmp3);
}
SDNode *Emit_174(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, MVT VT0, MVT VT1, MVT VT2) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N1), 0);
  SDValue Tmp3 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp4(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, Tmp2, Tmp3), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc2, VT2, N0, Tmp4);
}
SDNode *Emit_175(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, MVT VT0, MVT VT1, MVT VT2, MVT VT3) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N1), 0);
  SDValue Tmp3(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, Tmp2), 0);
  SDValue Tmp4 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp5(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, Tmp3, Tmp4), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc3, VT3, N0, Tmp5);
}
SDNode *Select_ISD_SRA_i16(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getOpcode() == ISD::Constant) {

    // Pattern: (sra:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_uimm7>>:$val)
    // Emits: (ROTMAHIr16:i16 R16C:i16:$rA, (imm:i16):$val)
    // Pattern complexity = 7  cost = 1  size = 0
    if (Predicate_uimm7(N1.getNode()) &&
        N1.getNode()->getValueType(0) == MVT::i16) {
      SDNode *Result = Emit_1(N, SPU::ROTMAHIr16, MVT::i16);
      return Result;
    }

    // Pattern: (sra:i16 R16C:i16:$rA, (imm:i32):$val)
    // Emits: (ROTMAHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_uimm7>>:$val)
    // Pattern complexity = 6  cost = 1  size = 0
    if (N1.getNode()->getValueType(0) == MVT::i32) {
      SDNode *Result = Emit_1(N, SPU::ROTMAHIr16, MVT::i16);
      return Result;
    }

    // Pattern: (sra:i16 R16C:i16:$rA, (imm:i8):$val)
    // Emits: (ROTMAHIr16:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_uimm7>>:$val)
    // Pattern complexity = 6  cost = 1  size = 0
    if (N1.getNode()->getValueType(0) == MVT::i8) {
      SDNode *Result = Emit_1(N, SPU::ROTMAHIr16, MVT::i16);
      return Result;
    }
  }

  // Pattern: (sra:i16 R16C:i16:$rA, R32C:i32:$rB)
  // Emits: (ROTMAHr16:i16 R16C:i16:$rA, (SFIr32:i32 R32C:i32:$rB, 0:i32))
  // Pattern complexity = 3  cost = 2  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_173(N, SPU::SFIr32, SPU::ROTMAHr16, MVT::i32, MVT::i16);
    return Result;
  }

  // Pattern: (sra:i16 R16C:i16:$rA, R16C:i16:$rB)
  // Emits: (ROTMAHr16:i16 R16C:i16:$rA, (SFIr32:i32 (XSHWr16:i32 R16C:i16:$rB), 0:i32))
  // Pattern complexity = 3  cost = 3  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_174(N, SPU::XSHWr16, SPU::SFIr32, SPU::ROTMAHr16, MVT::i32, MVT::i32, MVT::i16);
    return Result;
  }

  // Pattern: (sra:i16 R16C:i16:$rA, R8C:i8:$rB)
  // Emits: (ROTMAHr16:i16 R16C:i16:$rA, (SFIr32:i32 (XSHWr16:i32 (XSBHr8:i16 R8C:i8:$rB)), 0:i32))
  // Pattern complexity = 3  cost = 4  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i8) {
    SDNode *Result = Emit_175(N, SPU::XSBHr8, SPU::XSHWr16, SPU::SFIr32, SPU::ROTMAHr16, MVT::i16, MVT::i32, MVT::i32, MVT::i16);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_SRA_i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);

  // Pattern: (sra:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_uimm7>>:$val)
  // Emits: (ROTMAIr32_i32:i32 R32C:i32:$rA, (imm:i32):$val)
  // Pattern complexity = 7  cost = 1  size = 0
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_uimm7(N1.getNode()) &&
      N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_2(N, SPU::ROTMAIr32_i32, MVT::i32);
    return Result;
  }

  // Pattern: (sra:i32 R32C:i32:$rA, R32C:i32:$rB)
  // Emits: (ROTMAr32:i32 R32C:i32:$rA, (SFIr32:i32 R32C:i32:$rB, 0:i32))
  // Pattern complexity = 3  cost = 2  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_173(N, SPU::SFIr32, SPU::ROTMAr32, MVT::i32, MVT::i32);
    return Result;
  }

  // Pattern: (sra:i32 R32C:i32:$rA, R16C:i16:$rB)
  // Emits: (ROTMAr32:i32 R32C:i32:$rA, (SFIr32:i32 (XSHWr16:i32 R16C:i16:$rB), 0:i32))
  // Pattern complexity = 3  cost = 3  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_174(N, SPU::XSHWr16, SPU::SFIr32, SPU::ROTMAr32, MVT::i32, MVT::i32, MVT::i32);
    return Result;
  }

  // Pattern: (sra:i32 R32C:i32:$rA, R8C:i8:$rB)
  // Emits: (ROTMAr32:i32 R32C:i32:$rA, (SFIr32:i32 (XSHWr16:i32 (XSBHr8:i16 R8C:i8:$rB)), 0:i32))
  // Pattern complexity = 3  cost = 4  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i8) {
    SDNode *Result = Emit_175(N, SPU::XSBHr8, SPU::XSHWr16, SPU::SFIr32, SPU::ROTMAr32, MVT::i16, MVT::i32, MVT::i32, MVT::i32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_SRA_i64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_uimm7(N1.getNode()) &&
      N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_2(N, SPU::ROTMAIr64_i32, MVT::i64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_SRL_i16(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_uimm7(N1.getNode())) {

    // Pattern: (srl:i16 R16C:i16:$rA, (imm:i32)<<P:Predicate_uimm7>>:$val)
    // Emits: (ROTHMIr16:i16 R16C:i16:$rA, (imm:i32)<<P:Predicate_uimm7>>:$val)
    // Pattern complexity = 7  cost = 1  size = 0
    if (N1.getNode()->getValueType(0) == MVT::i32) {
      SDNode *Result = Emit_2(N, SPU::ROTHMIr16, MVT::i16);
      return Result;
    }

    // Pattern: (srl:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_uimm7>>:$val)
    // Emits: (ROTHMIr16:i16 R16C:i16:$rA, (imm:i32)<<P:Predicate_uimm7>>:$val)
    // Pattern complexity = 7  cost = 1  size = 0
    if (N1.getNode()->getValueType(0) == MVT::i16) {
      SDNode *Result = Emit_2(N, SPU::ROTHMIr16, MVT::i16);
      return Result;
    }

    // Pattern: (srl:i16 R16C:i16:$rA, (imm:i8)<<P:Predicate_uimm7>>:$val)
    // Emits: (ROTHMIr16:i16 R16C:i16:$rA, (imm:i32)<<P:Predicate_uimm7>>:$val)
    // Pattern complexity = 7  cost = 1  size = 0
    if (N1.getNode()->getValueType(0) == MVT::i8) {
      SDNode *Result = Emit_2(N, SPU::ROTHMIr16, MVT::i16);
      return Result;
    }
  }

  // Pattern: (srl:i16 R16C:i16:$rA, R32C:i32:$rB)
  // Emits: (ROTHMr16:i16 R16C:i16:$rA, (SFIr32:i32 R32C:i32:$rB, 0:i32))
  // Pattern complexity = 3  cost = 2  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_173(N, SPU::SFIr32, SPU::ROTHMr16, MVT::i32, MVT::i16);
    return Result;
  }

  // Pattern: (srl:i16 R16C:i16:$rA, R16C:i16:$rB)
  // Emits: (ROTHMr16:i16 R16C:i16:$rA, (SFIr32:i32 (XSHWr16:i32 R16C:i16:$rB), 0:i32))
  // Pattern complexity = 3  cost = 3  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_174(N, SPU::XSHWr16, SPU::SFIr32, SPU::ROTHMr16, MVT::i32, MVT::i32, MVT::i16);
    return Result;
  }

  // Pattern: (srl:i16 R16C:i16:$rA, R8C:i8:$rB)
  // Emits: (ROTHMr16:i16 R16C:i16:$rA, (SFIr32:i32 (XSHWr16:i32 (XSBHr8:i16 R8C:i8:$rB)), 0:i32))
  // Pattern complexity = 3  cost = 4  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i8) {
    SDNode *Result = Emit_175(N, SPU::XSBHr8, SPU::XSHWr16, SPU::SFIr32, SPU::ROTHMr16, MVT::i16, MVT::i32, MVT::i32, MVT::i16);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_SRL_i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getOpcode() == ISD::Constant) {

    // Pattern: (srl:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_uimm7>>:$val)
    // Emits: (ROTMIr32:i32 R32C:i32:$rA, (imm:i32):$val)
    // Pattern complexity = 7  cost = 1  size = 0
    if (Predicate_uimm7(N1.getNode()) &&
        N1.getNode()->getValueType(0) == MVT::i32) {
      SDNode *Result = Emit_2(N, SPU::ROTMIr32, MVT::i32);
      return Result;
    }

    // Pattern: (srl:i32 R32C:i32:$rA, (imm:i16):$val)
    // Emits: (ROTMIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_uimm7>>:$val)
    // Pattern complexity = 6  cost = 1  size = 0
    if (N1.getNode()->getValueType(0) == MVT::i16) {
      SDNode *Result = Emit_2(N, SPU::ROTMIr32, MVT::i32);
      return Result;
    }

    // Pattern: (srl:i32 R32C:i32:$rA, (imm:i8):$val)
    // Emits: (ROTMIr32:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_uimm7>>:$val)
    // Pattern complexity = 6  cost = 1  size = 0
    if (N1.getNode()->getValueType(0) == MVT::i8) {
      SDNode *Result = Emit_2(N, SPU::ROTMIr32, MVT::i32);
      return Result;
    }
  }

  // Pattern: (srl:i32 R32C:i32:$rA, R32C:i32:$rB)
  // Emits: (ROTMr32:i32 R32C:i32:$rA, (SFIr32:i32 R32C:i32:$rB, 0:i32))
  // Pattern complexity = 3  cost = 2  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_173(N, SPU::SFIr32, SPU::ROTMr32, MVT::i32, MVT::i32);
    return Result;
  }

  // Pattern: (srl:i32 R32C:i32:$rA, R16C:i16:$rB)
  // Emits: (ROTMr32:i32 R32C:i32:$rA, (SFIr32:i32 (XSHWr16:i32 R16C:i16:$rB), 0:i32))
  // Pattern complexity = 3  cost = 3  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_174(N, SPU::XSHWr16, SPU::SFIr32, SPU::ROTMr32, MVT::i32, MVT::i32, MVT::i32);
    return Result;
  }

  // Pattern: (srl:i32 R32C:i32:$rA, R8C:i8:$rB)
  // Emits: (ROTMr32:i32 R32C:i32:$rA, (SFIr32:i32 (XSHWr16:i32 (XSBHr8:i16 R8C:i8:$rB)), 0:i32))
  // Pattern complexity = 3  cost = 4  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i8) {
    SDNode *Result = Emit_175(N, SPU::XSBHr8, SPU::XSHWr16, SPU::SFIr32, SPU::ROTMr32, MVT::i16, MVT::i32, MVT::i32, MVT::i32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_176(const SDValue &N, unsigned Opc0, SDValue &CPTmpN2_0, SDValue &CPTmpN2_1) DISABLE_INLINE {
  SDValue Chain = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue LSI_N = CurDAG->getMemOperand(cast<MemSDNode>(N)->getMemOperand());
  SDValue Ops0[] = { N1, CPTmpN2_0, CPTmpN2_1, LSI_N, Chain };
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, MVT::Other, Ops0, 5);
}
SDNode *Select_ISD_STORE(const SDValue &N) {
  SDValue Chain = N.getOperand(0);
  if (Predicate_unindexedstore(N.getNode()) &&
      Predicate_store(N.getNode())) {
    SDValue N1 = N.getOperand(1);
    SDValue N2 = N.getOperand(2);
    SDValue CPTmpN2_0;
    SDValue CPTmpN2_1;
    if (SelectDFormAddr(N, N2, CPTmpN2_0, CPTmpN2_1)) {

      // Pattern: (st:isVoid VECREG:v16i8:$rT, dform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQDv16i8:isVoid VECREG:v16i8:$rT, dform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::v16i8) {
        SDNode *Result = Emit_176(N, SPU::STQDv16i8, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid VECREG:v8i16:$rT, dform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQDv8i16:isVoid VECREG:v8i16:$rT, dform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::v8i16) {
        SDNode *Result = Emit_176(N, SPU::STQDv8i16, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid VECREG:v4i32:$rT, dform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQDv4i32:isVoid VECREG:v4i32:$rT, dform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::v4i32) {
        SDNode *Result = Emit_176(N, SPU::STQDv4i32, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid VECREG:v2i64:$rT, dform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQDv2i64:isVoid VECREG:v2i64:$rT, dform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::v2i64) {
        SDNode *Result = Emit_176(N, SPU::STQDv2i64, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid VECREG:v4f32:$rT, dform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQDv4f32:isVoid VECREG:v4f32:$rT, dform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::v4f32) {
        SDNode *Result = Emit_176(N, SPU::STQDv4f32, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid VECREG:v2f64:$rT, dform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQDv2f64:isVoid VECREG:v2f64:$rT, dform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::v2f64) {
        SDNode *Result = Emit_176(N, SPU::STQDv2f64, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid VECREG:v2i32:$rT, dform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQDv2i32:isVoid VECREG:v2i32:$rT, dform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::v2i32) {
        SDNode *Result = Emit_176(N, SPU::STQDv2i32, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid GPRC:i128:$rT, dform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQDr128:isVoid GPRC:i128:$rT, dform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::i128) {
        SDNode *Result = Emit_176(N, SPU::STQDr128, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid R64C:i64:$rT, dform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQDr64:isVoid R64C:i64:$rT, dform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::i64) {
        SDNode *Result = Emit_176(N, SPU::STQDr64, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid R32C:i32:$rT, dform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQDr32:isVoid R32C:i32:$rT, dform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::i32) {
        SDNode *Result = Emit_176(N, SPU::STQDr32, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid R32FP:f32:$rT, dform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQDf32:isVoid R32FP:f32:$rT, dform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::f32) {
        SDNode *Result = Emit_176(N, SPU::STQDf32, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid R64FP:f64:$rT, dform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQDf64:isVoid R64FP:f64:$rT, dform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::f64) {
        SDNode *Result = Emit_176(N, SPU::STQDf64, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid R16C:i16:$rT, dform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQDr16:isVoid R16C:i16:$rT, dform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::i16) {
        SDNode *Result = Emit_176(N, SPU::STQDr16, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid R8C:i8:$rT, dform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQDr8:isVoid R8C:i8:$rT, dform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::i8) {
        SDNode *Result = Emit_176(N, SPU::STQDr8, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }
    }
    if (SelectAFormAddr(N, N2, CPTmpN2_0, CPTmpN2_1)) {

      // Pattern: (st:isVoid VECREG:v16i8:$rT, aform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQAv16i8:isVoid VECREG:v16i8:$rT, aform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::v16i8) {
        SDNode *Result = Emit_176(N, SPU::STQAv16i8, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid VECREG:v8i16:$rT, aform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQAv8i16:isVoid VECREG:v8i16:$rT, aform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::v8i16) {
        SDNode *Result = Emit_176(N, SPU::STQAv8i16, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid VECREG:v4i32:$rT, aform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQAv4i32:isVoid VECREG:v4i32:$rT, aform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::v4i32) {
        SDNode *Result = Emit_176(N, SPU::STQAv4i32, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid VECREG:v2i64:$rT, aform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQAv2i64:isVoid VECREG:v2i64:$rT, aform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::v2i64) {
        SDNode *Result = Emit_176(N, SPU::STQAv2i64, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid VECREG:v4f32:$rT, aform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQAv4f32:isVoid VECREG:v4f32:$rT, aform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::v4f32) {
        SDNode *Result = Emit_176(N, SPU::STQAv4f32, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid VECREG:v2f64:$rT, aform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQAv2f64:isVoid VECREG:v2f64:$rT, aform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::v2f64) {
        SDNode *Result = Emit_176(N, SPU::STQAv2f64, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid VECREG:v2i32:$rT, aform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQAv2i32:isVoid VECREG:v2i32:$rT, aform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::v2i32) {
        SDNode *Result = Emit_176(N, SPU::STQAv2i32, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid GPRC:i128:$rT, aform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQAr128:isVoid GPRC:i128:$rT, aform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::i128) {
        SDNode *Result = Emit_176(N, SPU::STQAr128, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid R64C:i64:$rT, aform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQAr64:isVoid R64C:i64:$rT, aform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::i64) {
        SDNode *Result = Emit_176(N, SPU::STQAr64, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid R32C:i32:$rT, aform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQAr32:isVoid R32C:i32:$rT, aform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::i32) {
        SDNode *Result = Emit_176(N, SPU::STQAr32, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid R32FP:f32:$rT, aform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQAf32:isVoid R32FP:f32:$rT, aform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::f32) {
        SDNode *Result = Emit_176(N, SPU::STQAf32, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid R64FP:f64:$rT, aform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQAf64:isVoid R64FP:f64:$rT, aform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::f64) {
        SDNode *Result = Emit_176(N, SPU::STQAf64, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid R16C:i16:$rT, aform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQAr16:isVoid R16C:i16:$rT, aform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::i16) {
        SDNode *Result = Emit_176(N, SPU::STQAr16, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid R8C:i8:$rT, aform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQAr8:isVoid R8C:i8:$rT, aform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::i8) {
        SDNode *Result = Emit_176(N, SPU::STQAr8, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }
    }
    if (SelectXFormAddr(N, N2, CPTmpN2_0, CPTmpN2_1)) {

      // Pattern: (st:isVoid VECREG:v16i8:$rT, xform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQXv16i8:isVoid VECREG:v16i8:$rT, xform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::v16i8) {
        SDNode *Result = Emit_176(N, SPU::STQXv16i8, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid VECREG:v8i16:$rT, xform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQXv8i16:isVoid VECREG:v8i16:$rT, xform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::v8i16) {
        SDNode *Result = Emit_176(N, SPU::STQXv8i16, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid VECREG:v4i32:$rT, xform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQXv4i32:isVoid VECREG:v4i32:$rT, xform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::v4i32) {
        SDNode *Result = Emit_176(N, SPU::STQXv4i32, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid VECREG:v2i64:$rT, xform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQXv2i64:isVoid VECREG:v2i64:$rT, xform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::v2i64) {
        SDNode *Result = Emit_176(N, SPU::STQXv2i64, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid VECREG:v4f32:$rT, xform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQXv4f32:isVoid VECREG:v4f32:$rT, xform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::v4f32) {
        SDNode *Result = Emit_176(N, SPU::STQXv4f32, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid VECREG:v2f64:$rT, xform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQXv2f64:isVoid VECREG:v2f64:$rT, xform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::v2f64) {
        SDNode *Result = Emit_176(N, SPU::STQXv2f64, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid VECREG:v2i32:$rT, xform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQXv2i32:isVoid VECREG:v2i32:$rT, xform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::v2i32) {
        SDNode *Result = Emit_176(N, SPU::STQXv2i32, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid GPRC:i128:$rT, xform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQXr128:isVoid GPRC:i128:$rT, xform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::i128) {
        SDNode *Result = Emit_176(N, SPU::STQXr128, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid R64C:i64:$rT, xform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQXr64:isVoid R64C:i64:$rT, xform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::i64) {
        SDNode *Result = Emit_176(N, SPU::STQXr64, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid R32C:i32:$rT, xform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQXr32:isVoid R32C:i32:$rT, xform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::i32) {
        SDNode *Result = Emit_176(N, SPU::STQXr32, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid R32FP:f32:$rT, xform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQXf32:isVoid R32FP:f32:$rT, xform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::f32) {
        SDNode *Result = Emit_176(N, SPU::STQXf32, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid R64FP:f64:$rT, xform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQXf64:isVoid R64FP:f64:$rT, xform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::f64) {
        SDNode *Result = Emit_176(N, SPU::STQXf64, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid R16C:i16:$rT, xform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQXr16:isVoid R16C:i16:$rT, xform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::i16) {
        SDNode *Result = Emit_176(N, SPU::STQXr16, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }

      // Pattern: (st:isVoid R8C:i8:$rT, xform_addr:iPTR:$src)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
      // Emits: (STQXr8:isVoid R8C:i8:$rT, xform_addr:iPTR:$src)
      // Pattern complexity = 13  cost = 1  size = 0
      if (N1.getNode()->getValueType(0) == MVT::i8) {
        SDNode *Result = Emit_176(N, SPU::STQXr8, CPTmpN2_0, CPTmpN2_1);
        return Result;
      }
    }
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_177(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue Tmp1 = CurDAG->getTargetConstant(((unsigned short) cast<ConstantSDNode>(N0)->getZExtValue()), MVT::i16);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N1, Tmp1);
}
SDNode *Select_ISD_SUB_i16(const SDValue &N) {

  // Pattern: (sub:i16 (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val, R16C:i16:$rA)
  // Emits: (SFHIr16:i16 R16C:i16:$rA, (imm:i16):$val)
  // Pattern complexity = 7  cost = 1  size = 0
  {
    SDValue N0 = N.getOperand(0);
    if (N0.getOpcode() == ISD::Constant &&
        Predicate_i16ImmSExt10(N0.getNode())) {
      SDNode *Result = Emit_177(N, SPU::SFHIr16, MVT::i16);
      return Result;
    }
  }

  // Pattern: (sub:i16 R16C:i16:$rA, R16C:i16:$rB)
  // Emits: (SFHr16:i16 R16C:i16:$rA, R16C:i16:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::SFHr16, MVT::i16);
  return Result;
}

SDNode *Emit_178(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue Tmp1 = CurDAG->getTargetConstant(((unsigned) cast<ConstantSDNode>(N0)->getZExtValue()), MVT::i32);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N1, Tmp1);
}
SDNode *Select_ISD_SUB_i32(const SDValue &N) {

  // Pattern: (sub:i32 (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val, R32C:i32:$rA)
  // Emits: (SFIr32:i32 R32C:i32:$rA, (imm:i32):$val)
  // Pattern complexity = 7  cost = 1  size = 0
  {
    SDValue N0 = N.getOperand(0);
    if (N0.getOpcode() == ISD::Constant &&
        Predicate_i32ImmSExt10(N0.getNode())) {
      SDNode *Result = Emit_178(N, SPU::SFIr32, MVT::i32);
      return Result;
    }
  }

  // Pattern: (sub:i32 R32C:i32:$rA, R32C:i32:$rB)
  // Emits: (SFr32:i32 R32C:i32:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::SFr32, MVT::i32);
  return Result;
}

SDNode *Select_ISD_SUB_v8i16(const SDValue &N) {

  // Pattern: (sub:v8i16 (build_vector:v8i16)<<P:Predicate_v8i16SExt10Imm>><<X:v8i16SExt10Imm_xform>>:$val, VECREG:v8i16:$rA)
  // Emits: (SFHIvec:v8i16 VECREG:v8i16:$rA, (v8i16SExt10Imm_xform:i16 (build_vector:v8i16):$val))
  // Pattern complexity = 7  cost = 1  size = 0
  {
    SDValue N0 = N.getOperand(0);
    if (N0.getOpcode() == ISD::BUILD_VECTOR &&
        Predicate_v8i16SExt10Imm(N0.getNode())) {
      SDNode *Result = Emit_11(N, SPU::SFHIvec, MVT::v8i16);
      return Result;
    }
  }

  // Pattern: (sub:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
  // Emits: (SFHvec:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::SFHvec, MVT::v8i16);
  return Result;
}

SDNode *Select_ISD_SUB_v4i32(const SDValue &N) {

  // Pattern: (sub:v4i32 (build_vector:v4i32)<<P:Predicate_v4i32SExt10Imm>><<X:v4i32SExt10Imm_xform>>:$val, VECREG:v4i32:$rA)
  // Emits: (SFIvec:v4i32 VECREG:v4i32:$rA, (v4i32SExt10Imm_xform:i16 (build_vector:v4i32):$val))
  // Pattern complexity = 7  cost = 1  size = 0
  {
    SDValue N0 = N.getOperand(0);
    if (N0.getOpcode() == ISD::BUILD_VECTOR &&
        Predicate_v4i32SExt10Imm(N0.getNode())) {
      SDNode *Result = Emit_13(N, SPU::SFIvec, MVT::v4i32);
      return Result;
    }
  }

  // Pattern: (sub:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
  // Emits: (SFvec:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::SFvec, MVT::v4i32);
  return Result;
}

SDNode *Emit_179(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, MVT VT0, MVT VT1, MVT VT2, MVT VT3) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue Tmp2 = CurDAG->getTargetConstant(0xF0FULL, MVT::i32);
  SDValue Tmp3(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, Tmp2), 0);
  SDValue Tmp4 = CurDAG->getTargetConstant(0xF0FULL, MVT::i32);
  SDValue Tmp5(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, Tmp3, Tmp4), 0);
  SDValue Tmp6(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, N0, N0, Tmp5), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc3, VT3, Tmp6);
}
SDNode *Emit_180(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, unsigned Opc4, unsigned Opc5, MVT VT0, MVT VT1, MVT VT2, MVT VT3, MVT VT4, MVT VT5) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue Tmp1(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0), 0);
  SDValue Tmp3(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N0), 0);
  SDValue Tmp4 = CurDAG->getTargetConstant(0x707ULL, MVT::i32);
  SDValue Tmp5(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, Tmp4), 0);
  SDValue Tmp6 = CurDAG->getTargetConstant(0x707ULL, MVT::i32);
  SDValue Tmp7(CurDAG->getTargetNode(Opc3, N.getDebugLoc(), VT3, Tmp5, Tmp6), 0);
  SDValue Tmp8(CurDAG->getTargetNode(Opc4, N.getDebugLoc(), VT4, Tmp1, Tmp3, Tmp7), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc5, VT5, Tmp8);
}
SDNode *Emit_181(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, unsigned Opc4, unsigned Opc5, MVT VT0, MVT VT1, MVT VT2, MVT VT3, MVT VT4, MVT VT5) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue Tmp1(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0), 0);
  SDValue Tmp3(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N0), 0);
  SDValue Tmp4 = CurDAG->getTargetConstant(0x303ULL, MVT::i32);
  SDValue Tmp5(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, Tmp4), 0);
  SDValue Tmp6 = CurDAG->getTargetConstant(0x303ULL, MVT::i32);
  SDValue Tmp7(CurDAG->getTargetNode(Opc3, N.getDebugLoc(), VT3, Tmp5, Tmp6), 0);
  SDValue Tmp8(CurDAG->getTargetNode(Opc4, N.getDebugLoc(), VT4, Tmp1, Tmp3, Tmp7), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc5, VT5, Tmp8);
}
SDNode *Select_ISD_TRUNCATE_i8(const SDValue &N) {
  SDValue N0 = N.getOperand(0);

  // Pattern: (trunc:i8 GPRC:i128:$src)
  // Emits: (ORi8_v16i8:i8 (SHUFBgprc:v16i8 GPRC:i128:$src, GPRC:i128:$src, (IOHLv4i32:v16i8 (ILHUv4i32:v16i8 3855:i32), 3855:i32)))
  // Pattern complexity = 3  cost = 4  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i128) {
    SDNode *Result = Emit_179(N, SPU::ILHUv4i32, SPU::IOHLv4i32, SPU::SHUFBgprc, SPU::ORi8_v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::i8);
    return Result;
  }

  // Pattern: (trunc:i8 R64C:i64:$src)
  // Emits: (ORi8_v16i8:i8 (SHUFBv2i64_m32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$src), (ORv2i64_i64:v16i8 R64C:i64:$src), (IOHLv4i32:v16i8 (ILHUv4i32:v16i8 1799:i32), 1799:i32)))
  // Pattern complexity = 3  cost = 6  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i64) {
    SDNode *Result = Emit_180(N, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::ILHUv4i32, SPU::IOHLv4i32, SPU::SHUFBv2i64_m32, SPU::ORi8_v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::i8);
    return Result;
  }

  // Pattern: (trunc:i8 R32C:i32:$src)
  // Emits: (ORi8_v16i8:i8 (SHUFBv4i32_m32:v16i8 (ORv4i32_i32:v16i8 R32C:i32:$src), (ORv4i32_i32:v16i8 R32C:i32:$src), (IOHLv4i32:v16i8 (ILHUv4i32:v16i8 771:i32), 771:i32)))
  // Pattern complexity = 3  cost = 6  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_181(N, SPU::ORv4i32_i32, SPU::ORv4i32_i32, SPU::ILHUv4i32, SPU::IOHLv4i32, SPU::SHUFBv4i32_m32, SPU::ORi8_v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::i8);
    return Result;
  }

  // Pattern: (trunc:i8 R16C:i16:$src)
  // Emits: (ORi8_v16i8:i8 (SHUFBv4i32_m32:v16i8 (ORv8i16_i16:v16i8 R16C:i16:$src), (ORv8i16_i16:v16i8 R16C:i16:$src), (IOHLv4i32:v16i8 (ILHUv4i32:v16i8 771:i32), 771:i32)))
  // Pattern complexity = 3  cost = 6  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_181(N, SPU::ORv8i16_i16, SPU::ORv8i16_i16, SPU::ILHUv4i32, SPU::IOHLv4i32, SPU::SHUFBv4i32_m32, SPU::ORi8_v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::i8);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_182(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, MVT VT0, MVT VT1, MVT VT2, MVT VT3) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue Tmp2 = CurDAG->getTargetConstant(0xE0FULL, MVT::i32);
  SDValue Tmp3(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, Tmp2), 0);
  SDValue Tmp4 = CurDAG->getTargetConstant(0xE0FULL, MVT::i32);
  SDValue Tmp5(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, Tmp3, Tmp4), 0);
  SDValue Tmp6(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, N0, N0, Tmp5), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc3, VT3, Tmp6);
}
SDNode *Emit_183(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, unsigned Opc4, unsigned Opc5, MVT VT0, MVT VT1, MVT VT2, MVT VT3, MVT VT4, MVT VT5) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue Tmp1(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0), 0);
  SDValue Tmp3(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N0), 0);
  SDValue Tmp4 = CurDAG->getTargetConstant(0x607ULL, MVT::i32);
  SDValue Tmp5(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, Tmp4), 0);
  SDValue Tmp6 = CurDAG->getTargetConstant(0x607ULL, MVT::i32);
  SDValue Tmp7(CurDAG->getTargetNode(Opc3, N.getDebugLoc(), VT3, Tmp5, Tmp6), 0);
  SDValue Tmp8(CurDAG->getTargetNode(Opc4, N.getDebugLoc(), VT4, Tmp1, Tmp3, Tmp7), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc5, VT5, Tmp8);
}
SDNode *Emit_184(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, unsigned Opc4, unsigned Opc5, MVT VT0, MVT VT1, MVT VT2, MVT VT3, MVT VT4, MVT VT5) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue Tmp1(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0), 0);
  SDValue Tmp3(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N0), 0);
  SDValue Tmp4 = CurDAG->getTargetConstant(0x203ULL, MVT::i32);
  SDValue Tmp5(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, Tmp4), 0);
  SDValue Tmp6 = CurDAG->getTargetConstant(0x203ULL, MVT::i32);
  SDValue Tmp7(CurDAG->getTargetNode(Opc3, N.getDebugLoc(), VT3, Tmp5, Tmp6), 0);
  SDValue Tmp8(CurDAG->getTargetNode(Opc4, N.getDebugLoc(), VT4, Tmp1, Tmp3, Tmp7), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc5, VT5, Tmp8);
}
SDNode *Select_ISD_TRUNCATE_i16(const SDValue &N) {
  SDValue N0 = N.getOperand(0);

  // Pattern: (trunc:i16 GPRC:i128:$src)
  // Emits: (ORi16_v8i16:i16 (SHUFBgprc:v16i8 GPRC:i128:$src, GPRC:i128:$src, (IOHLv4i32:v16i8 (ILHUv4i32:v16i8 3599:i32), 3599:i32)))
  // Pattern complexity = 3  cost = 4  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i128) {
    SDNode *Result = Emit_182(N, SPU::ILHUv4i32, SPU::IOHLv4i32, SPU::SHUFBgprc, SPU::ORi16_v8i16, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::i16);
    return Result;
  }

  // Pattern: (trunc:i16 R64C:i64:$src)
  // Emits: (ORi16_v8i16:i16 (SHUFBv2i64_m32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$src), (ORv2i64_i64:v16i8 R64C:i64:$src), (IOHLv4i32:v16i8 (ILHUv4i32:v16i8 1543:i32), 1543:i32)))
  // Pattern complexity = 3  cost = 6  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i64) {
    SDNode *Result = Emit_183(N, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::ILHUv4i32, SPU::IOHLv4i32, SPU::SHUFBv2i64_m32, SPU::ORi16_v8i16, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::i16);
    return Result;
  }

  // Pattern: (trunc:i16 R32C:i32:$src)
  // Emits: (ORi16_v8i16:i16 (SHUFBv4i32_m32:v16i8 (ORv4i32_i32:v16i8 R32C:i32:$src), (ORv4i32_i32:v16i8 R32C:i32:$src), (IOHLv4i32:v16i8 (ILHUv4i32:v16i8 515:i32), 515:i32)))
  // Pattern complexity = 3  cost = 6  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_184(N, SPU::ORv4i32_i32, SPU::ORv4i32_i32, SPU::ILHUv4i32, SPU::IOHLv4i32, SPU::SHUFBv4i32_m32, SPU::ORi16_v8i16, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::i16);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_185(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, MVT VT0, MVT VT1, MVT VT2, MVT VT3) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue Tmp2 = CurDAG->getTargetConstant(0xC0DULL, MVT::i32);
  SDValue Tmp3(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, Tmp2), 0);
  SDValue Tmp4 = CurDAG->getTargetConstant(0xE0FULL, MVT::i32);
  SDValue Tmp5(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, Tmp3, Tmp4), 0);
  SDValue Tmp6(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, N0, N0, Tmp5), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc3, VT3, Tmp6);
}
SDNode *Emit_186(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, unsigned Opc4, unsigned Opc5, MVT VT0, MVT VT1, MVT VT2, MVT VT3, MVT VT4, MVT VT5) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue Tmp1(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0), 0);
  SDValue Tmp3(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N0), 0);
  SDValue Tmp4 = CurDAG->getTargetConstant(0x405ULL, MVT::i32);
  SDValue Tmp5(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, Tmp4), 0);
  SDValue Tmp6 = CurDAG->getTargetConstant(0x607ULL, MVT::i32);
  SDValue Tmp7(CurDAG->getTargetNode(Opc3, N.getDebugLoc(), VT3, Tmp5, Tmp6), 0);
  SDValue Tmp8(CurDAG->getTargetNode(Opc4, N.getDebugLoc(), VT4, Tmp1, Tmp3, Tmp7), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc5, VT5, Tmp8);
}
SDNode *Select_ISD_TRUNCATE_i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);

  // Pattern: (trunc:i32 GPRC:i128:$src)
  // Emits: (ORi32_v4i32:i32 (SHUFBgprc:v16i8 GPRC:i128:$src, GPRC:i128:$src, (IOHLv4i32:v16i8 (ILHUv4i32:v16i8 3085:i32), 3599:i32)))
  // Pattern complexity = 3  cost = 4  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i128) {
    SDNode *Result = Emit_185(N, SPU::ILHUv4i32, SPU::IOHLv4i32, SPU::SHUFBgprc, SPU::ORi32_v4i32, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::i32);
    return Result;
  }

  // Pattern: (trunc:i32 R64C:i64:$src)
  // Emits: (ORi32_v4i32:i32 (SHUFBv2i64_m32:v16i8 (ORv2i64_i64:v16i8 R64C:i64:$src), (ORv2i64_i64:v16i8 R64C:i64:$src), (IOHLv4i32:v16i8 (ILHUv4i32:v16i8 1029:i32), 1543:i32)))
  // Pattern complexity = 3  cost = 6  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i64) {
    SDNode *Result = Emit_186(N, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::ILHUv4i32, SPU::IOHLv4i32, SPU::SHUFBv2i64_m32, SPU::ORi32_v4i32, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::i32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_UINT_TO_FP_f32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_31(N, SPU::CUiFf32, MVT::f32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_UINT_TO_FP_v4f32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::v4i32) {
    SDNode *Result = Emit_31(N, SPU::CUiFv4f32, MVT::v4f32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_187(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N1 = N.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N00, N01);
}
SDNode *Emit_188(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N1 = N.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N00, N1);
}
SDNode *Select_ISD_XOR_i8(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);

    // Pattern: (xor:i8 (and:i8 R8C:i8:$rA, R8C:i8:$rB), (imm:i8)<<P:Predicate_immAllOnes>>)
    // Emits: (NANDr8:i8 R8C:i8:$rA, R8C:i8:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::AND) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::Constant &&
          Predicate_immAllOnes(N1.getNode())) {
        SDNode *Result = Emit_187(N, SPU::NANDr8, MVT::i8);
        return Result;
      }
    }

    // Pattern: (xor:i8 (or:i8 R8C:i8:$rA, R8C:i8:$rB), (imm:i8)<<P:Predicate_immAllOnes>>)
    // Emits: (NORr8:i8 R8C:i8:$rA, R8C:i8:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::OR) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::Constant &&
          Predicate_immAllOnes(N1.getNode())) {
        SDNode *Result = Emit_187(N, SPU::NORr8, MVT::i8);
        return Result;
      }
    }

    // Pattern: (xor:i8 R8C:i8:$rA, (xor:i8 R8C:i8:$rB, (imm:i8)<<P:Predicate_immAllOnes>>))
    // Emits: (EQVr8_1:i8 R8C:i8:$rA, R8C:i8:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);
        SDValue N11 = N1.getOperand(1);
        if (N11.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N11.getNode())) {
          SDNode *Result = Emit_14(N, SPU::EQVr8_1, MVT::i8);
          return Result;
        }
      }
    }
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);

      // Pattern: (xor:i8 (xor:i8 R8C:i8:$rA, R8C:i8:$rB), (imm:i8)<<P:Predicate_immAllOnes>>)
      // Emits: (EQVr8_3:i8 R8C:i8:$rA, R8C:i8:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      {
        SDValue N1 = N.getOperand(1);
        if (N1.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N1.getNode())) {
          SDNode *Result = Emit_187(N, SPU::EQVr8_3, MVT::i8);
          return Result;
        }
      }

      // Pattern: (xor:i8 (xor:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immAllOnes>>), R8C:i8:$rB)
      // Emits: (EQVr8_1:i8 R8C:i8:$rA, R8C:i8:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      if (N01.getOpcode() == ISD::Constant &&
          Predicate_immAllOnes(N01.getNode())) {
        SDNode *Result = Emit_188(N, SPU::EQVr8_1, MVT::i8);
        return Result;
      }
    }

    // Pattern: (xor:i8 R8C:i8:$rA, (imm:i8)<<P:Predicate_immU8>>:$val)
    // Emits: (XORBIr8:i8 R8C:i8:$rA, (imm:i8):$val)
    // Pattern complexity = 7  cost = 1  size = 0
    SDValue N1 = N.getOperand(1);
    if (N1.getOpcode() == ISD::Constant &&
        Predicate_immU8(N1.getNode())) {
      SDNode *Result = Emit_15(N, SPU::XORBIr8, MVT::i8);
      return Result;
    }
  }

  // Pattern: (xor:i8 R8C:i8:$rA, R8C:i8:$rB)
  // Emits: (XORr8:i8 R8C:i8:$rA, R8C:i8:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::XORr8, MVT::i8);
  return Result;
}

SDNode *Select_ISD_XOR_i16(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);

    // Pattern: (xor:i16 (and:i16 R16C:i16:$rA, R16C:i16:$rB), (imm:i16)<<P:Predicate_immAllOnes>>)
    // Emits: (NANDr16:i16 R16C:i16:$rA, R16C:i16:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::AND) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::Constant &&
          Predicate_immAllOnes(N1.getNode())) {
        SDNode *Result = Emit_187(N, SPU::NANDr16, MVT::i16);
        return Result;
      }
    }

    // Pattern: (xor:i16 (or:i16 R16C:i16:$rA, R16C:i16:$rB), (imm:i16)<<P:Predicate_immAllOnes>>)
    // Emits: (NORr16:i16 R16C:i16:$rA, R16C:i16:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::OR) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::Constant &&
          Predicate_immAllOnes(N1.getNode())) {
        SDNode *Result = Emit_187(N, SPU::NORr16, MVT::i16);
        return Result;
      }
    }

    // Pattern: (xor:i16 R16C:i16:$rA, (xor:i16 R16C:i16:$rB, (imm:i16)<<P:Predicate_immAllOnes>>))
    // Emits: (EQVr16_1:i16 R16C:i16:$rA, R16C:i16:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);
        SDValue N11 = N1.getOperand(1);
        if (N11.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N11.getNode())) {
          SDNode *Result = Emit_14(N, SPU::EQVr16_1, MVT::i16);
          return Result;
        }
      }
    }
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);

      // Pattern: (xor:i16 (xor:i16 R16C:i16:$rA, R16C:i16:$rB), (imm:i16)<<P:Predicate_immAllOnes>>)
      // Emits: (EQVr16_3:i16 R16C:i16:$rA, R16C:i16:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      {
        SDValue N1 = N.getOperand(1);
        if (N1.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N1.getNode())) {
          SDNode *Result = Emit_187(N, SPU::EQVr16_3, MVT::i16);
          return Result;
        }
      }

      // Pattern: (xor:i16 (xor:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_immAllOnes>>), R16C:i16:$rB)
      // Emits: (EQVr16_1:i16 R16C:i16:$rA, R16C:i16:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      if (N01.getOpcode() == ISD::Constant &&
          Predicate_immAllOnes(N01.getNode())) {
        SDNode *Result = Emit_188(N, SPU::EQVr16_1, MVT::i16);
        return Result;
      }
    }

    // Pattern: (xor:i16 R16C:i16:$rA, (imm:i16)<<P:Predicate_i16ImmSExt10>>:$val)
    // Emits: (XORHIr16:i16 R16C:i16:$rA, (imm:i16):$val)
    // Pattern complexity = 7  cost = 1  size = 0
    SDValue N1 = N.getOperand(1);
    if (N1.getOpcode() == ISD::Constant &&
        Predicate_i16ImmSExt10(N1.getNode())) {
      SDNode *Result = Emit_1(N, SPU::XORHIr16, MVT::i16);
      return Result;
    }
  }

  // Pattern: (xor:i16 R16C:i16:$rA, R16C:i16:$rB)
  // Emits: (XORr16:i16 R16C:i16:$rA, R16C:i16:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::XORr16, MVT::i16);
  return Result;
}

SDNode *Select_ISD_XOR_i32(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);

    // Pattern: (xor:i32 (and:i32 R32C:i32:$rA, R32C:i32:$rB), (imm:i32)<<P:Predicate_immAllOnes>>)
    // Emits: (NANDr32:i32 R32C:i32:$rA, R32C:i32:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::AND) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::Constant &&
          Predicate_immAllOnes(N1.getNode())) {
        SDNode *Result = Emit_187(N, SPU::NANDr32, MVT::i32);
        return Result;
      }
    }

    // Pattern: (xor:i32 (or:i32 R32C:i32:$rA, R32C:i32:$rB), (imm:i32)<<P:Predicate_immAllOnes>>)
    // Emits: (NORr32:i32 R32C:i32:$rA, R32C:i32:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::OR) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::Constant &&
          Predicate_immAllOnes(N1.getNode())) {
        SDNode *Result = Emit_187(N, SPU::NORr32, MVT::i32);
        return Result;
      }
    }

    // Pattern: (xor:i32 R32C:i32:$rA, (xor:i32 R32C:i32:$rB, (imm:i32)<<P:Predicate_immAllOnes>>))
    // Emits: (EQVr32_1:i32 R32C:i32:$rA, R32C:i32:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);
        SDValue N11 = N1.getOperand(1);
        if (N11.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N11.getNode())) {
          SDNode *Result = Emit_14(N, SPU::EQVr32_1, MVT::i32);
          return Result;
        }
      }
    }
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);

      // Pattern: (xor:i32 (xor:i32 R32C:i32:$rA, R32C:i32:$rB), (imm:i32)<<P:Predicate_immAllOnes>>)
      // Emits: (EQVr32_3:i32 R32C:i32:$rA, R32C:i32:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      {
        SDValue N1 = N.getOperand(1);
        if (N1.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N1.getNode())) {
          SDNode *Result = Emit_187(N, SPU::EQVr32_3, MVT::i32);
          return Result;
        }
      }

      // Pattern: (xor:i32 (xor:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_immAllOnes>>), R32C:i32:$rB)
      // Emits: (EQVr32_1:i32 R32C:i32:$rA, R32C:i32:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      if (N01.getOpcode() == ISD::Constant &&
          Predicate_immAllOnes(N01.getNode())) {
        SDNode *Result = Emit_188(N, SPU::EQVr32_1, MVT::i32);
        return Result;
      }
    }

    // Pattern: (xor:i32 R32C:i32:$rA, (imm:i32)<<P:Predicate_i32ImmSExt10>>:$val)
    // Emits: (XORIr32:i32 R32C:i32:$rA, (imm:i32):$val)
    // Pattern complexity = 7  cost = 1  size = 0
    SDValue N1 = N.getOperand(1);
    if (N1.getOpcode() == ISD::Constant &&
        Predicate_i32ImmSExt10(N1.getNode())) {
      SDNode *Result = Emit_2(N, SPU::XORIr32, MVT::i32);
      return Result;
    }
  }

  // Pattern: (xor:i32 R32C:i32:$rA, R32C:i32:$rB)
  // Emits: (XORr32:i32 R32C:i32:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::XORr32, MVT::i32);
  return Result;
}

SDNode *Select_ISD_XOR_i64(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);

    // Pattern: (xor:i64 R64C:i64:$rA, (xor:i64 R64C:i64:$rB, (imm:i64)<<P:Predicate_immAllOnes>>))
    // Emits: (EQVr64_1:i64 R64C:i64:$rA, R64C:i64:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);
        SDValue N11 = N1.getOperand(1);
        if (N11.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N11.getNode())) {
          SDNode *Result = Emit_14(N, SPU::EQVr64_1, MVT::i64);
          return Result;
        }
      }
    }
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);

      // Pattern: (xor:i64 (xor:i64 R64C:i64:$rA, R64C:i64:$rB), (imm:i64)<<P:Predicate_immAllOnes>>)
      // Emits: (EQVr64_3:i64 R64C:i64:$rA, R64C:i64:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      {
        SDValue N1 = N.getOperand(1);
        if (N1.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N1.getNode())) {
          SDNode *Result = Emit_187(N, SPU::EQVr64_3, MVT::i64);
          return Result;
        }
      }

      // Pattern: (xor:i64 (xor:i64 R64C:i64:$rA, (imm:i64)<<P:Predicate_immAllOnes>>), R64C:i64:$rB)
      // Emits: (EQVr64_1:i64 R64C:i64:$rA, R64C:i64:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      if (N01.getOpcode() == ISD::Constant &&
          Predicate_immAllOnes(N01.getNode())) {
        SDNode *Result = Emit_188(N, SPU::EQVr64_1, MVT::i64);
        return Result;
      }
    }
  }

  // Pattern: (xor:i64 R64C:i64:$rA, R64C:i64:$rB)
  // Emits: (XORr64:i64 R64C:i64:$rA, R64C:i64:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::XORr64, MVT::i64);
  return Result;
}

SDNode *Select_ISD_XOR_i128(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);

    // Pattern: (xor:i128 GPRC:i128:$rA, (xor:i128 GPRC:i128:$rB, (imm:i128)<<P:Predicate_immAllOnes>>))
    // Emits: (EQVr128_1:i128 GPRC:i128:$rA, GPRC:i128:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);
        SDValue N11 = N1.getOperand(1);
        if (N11.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N11.getNode())) {
          SDNode *Result = Emit_14(N, SPU::EQVr128_1, MVT::i128);
          return Result;
        }
      }
    }
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);

      // Pattern: (xor:i128 (xor:i128 GPRC:i128:$rA, GPRC:i128:$rB), (imm:i128)<<P:Predicate_immAllOnes>>)
      // Emits: (EQVr128_3:i128 GPRC:i128:$rA, GPRC:i128:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      {
        SDValue N1 = N.getOperand(1);
        if (N1.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N1.getNode())) {
          SDNode *Result = Emit_187(N, SPU::EQVr128_3, MVT::i128);
          return Result;
        }
      }

      // Pattern: (xor:i128 (xor:i128 GPRC:i128:$rA, (imm:i128)<<P:Predicate_immAllOnes>>), GPRC:i128:$rB)
      // Emits: (EQVr128_1:i128 GPRC:i128:$rA, GPRC:i128:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      if (N01.getOpcode() == ISD::Constant &&
          Predicate_immAllOnes(N01.getNode())) {
        SDNode *Result = Emit_188(N, SPU::EQVr128_1, MVT::i128);
        return Result;
      }
    }
  }

  // Pattern: (xor:i128 GPRC:i128:$rA, GPRC:i128:$rB)
  // Emits: (XORr128:i128 GPRC:i128:$rA, GPRC:i128:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::XORr128, MVT::i128);
  return Result;
}

SDNode *Emit_189(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N10, N11);
}
SDNode *Emit_190(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue N1 = N.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N01, N1);
}
SDNode *Emit_191(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N11, N0);
}
SDNode *Emit_192(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N10, N0);
}
SDNode *Select_ISD_XOR_v16i8(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);

    // Pattern: (xor:v16i8 (and:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB), (build_vector:v16i8)<<P:Predicate_immAllOnesV>>)
    // Emits: (NANDv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::AND) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_immAllOnesV(N1.getNode())) {
        SDNode *Result = Emit_187(N, SPU::NANDv16i8, MVT::v16i8);
        return Result;
      }
    }

    // Pattern: (xor:v16i8 (or:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB), (build_vector:v16i8)<<P:Predicate_immAllOnesV>>)
    // Emits: (NORv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::OR) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_immAllOnesV(N1.getNode())) {
        SDNode *Result = Emit_187(N, SPU::NORv16i8, MVT::v16i8);
        return Result;
      }
    }

    // Pattern: (xor:v16i8 VECREG:v16i8:$rA, (xor:v16i8 VECREG:v16i8:$rB, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>))
    // Emits: (EQVv16i8_1:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);
        SDValue N11 = N1.getOperand(1);
        if (N11.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N11.getNode())) {
          SDNode *Result = Emit_14(N, SPU::EQVv16i8_1, MVT::v16i8);
          return Result;
        }
      }
    }

    // Pattern: (xor:v16i8 (xor:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB), (imm:v16i8)<<P:Predicate_immAllOnes>>)
    // Emits: (EQVv16i8_3:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::Constant &&
          Predicate_immAllOnes(N1.getNode())) {
        SDNode *Result = Emit_187(N, SPU::EQVv16i8_3, MVT::v16i8);
        return Result;
      }
    }
    if (N0.getOpcode() == ISD::BUILD_VECTOR &&
        Predicate_immAllOnesV(N0.getNode())) {
      SDValue N1 = N.getOperand(1);

      // Pattern: (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, (and:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB))
      // Emits: (NANDv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      if (N1.getOpcode() == ISD::AND) {
        SDNode *Result = Emit_189(N, SPU::NANDv16i8, MVT::v16i8);
        return Result;
      }

      // Pattern: (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, (or:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB))
      // Emits: (NORv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      if (N1.getOpcode() == ISD::OR) {
        SDNode *Result = Emit_189(N, SPU::NORv16i8, MVT::v16i8);
        return Result;
      }
    }
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);

      // Pattern: (xor:v16i8 (xor:v16i8 VECREG:v16i8:$rA, (build_vector:v16i8)<<P:Predicate_immAllOnesV>>), VECREG:v16i8:$rB)
      // Emits: (EQVv16i8_1:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      {
        SDValue N01 = N0.getOperand(1);
        if (N01.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N01.getNode())) {
          SDNode *Result = Emit_188(N, SPU::EQVv16i8_1, MVT::v16i8);
          return Result;
        }
      }

      // Pattern: (xor:v16i8 (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rA), VECREG:v16i8:$rB)
      // Emits: (EQVv16i8_1:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      if (N00.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_immAllOnesV(N00.getNode())) {
        SDNode *Result = Emit_190(N, SPU::EQVv16i8_1, MVT::v16i8);
        return Result;
      }
    }

    // Pattern: (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, (xor:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB))
    // Emits: (EQVv16i8_1:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::BUILD_VECTOR &&
        Predicate_immAllOnesV(N0.getNode())) {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDNode *Result = Emit_189(N, SPU::EQVv16i8_1, MVT::v16i8);
        return Result;
      }
    }

    // Pattern: (xor:v16i8 VECREG:v16i8:$rB, (xor:v16i8 (build_vector:v16i8)<<P:Predicate_immAllOnesV>>, VECREG:v16i8:$rA))
    // Emits: (EQVv16i8_1:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);
        if (N10.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N10.getNode())) {
          SDNode *Result = Emit_191(N, SPU::EQVv16i8_1, MVT::v16i8);
          return Result;
        }
      }
    }

    // Pattern: (xor:v16i8 (xor:v16i8 VECREG:v16i8:$rA, (imm:v16i8)<<P:Predicate_immAllOnes>>), VECREG:v16i8:$rB)
    // Emits: (EQVv16i8_3:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);
      if (N01.getOpcode() == ISD::Constant &&
          Predicate_immAllOnes(N01.getNode())) {
        SDNode *Result = Emit_188(N, SPU::EQVv16i8_3, MVT::v16i8);
        return Result;
      }
    }
    {
      SDValue N1 = N.getOperand(1);

      // Pattern: (xor:v16i8 VECREG:v16i8:$rB, (xor:v16i8 VECREG:v16i8:$rA, (imm:v16i8)<<P:Predicate_immAllOnes>>))
      // Emits: (EQVv16i8_3:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);
        SDValue N11 = N1.getOperand(1);
        if (N11.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N11.getNode())) {
          SDNode *Result = Emit_192(N, SPU::EQVv16i8_3, MVT::v16i8);
          return Result;
        }
      }

      // Pattern: (xor:v16i8 VECREG:v16i8:$rA, (build_vector:v16i8)<<P:Predicate_v16i8U8Imm>><<X:v16i8U8Imm_xform>>:$val)
      // Emits: (XORBIv16i8:v16i8 VECREG:v16i8:$rA, (v16i8U8Imm_xform:i16 (build_vector:v16i8):$val))
      // Pattern complexity = 7  cost = 1  size = 0
      if (N1.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_v16i8U8Imm(N1.getNode())) {
        SDNode *Result = Emit_21(N, SPU::XORBIv16i8, MVT::v16i8);
        return Result;
      }
    }

    // Pattern: (xor:v16i8 (build_vector:v16i8)<<P:Predicate_v16i8U8Imm>><<X:v16i8U8Imm_xform>>:$val, VECREG:v16i8:$rA)
    // Emits: (XORBIv16i8:v16i8 VECREG:v16i8:$rA, (v16i8U8Imm_xform:i16 (build_vector:v16i8):$val))
    // Pattern complexity = 7  cost = 1  size = 0
    if (N0.getOpcode() == ISD::BUILD_VECTOR &&
        Predicate_v16i8U8Imm(N0.getNode())) {
      SDNode *Result = Emit_24(N, SPU::XORBIv16i8, MVT::v16i8);
      return Result;
    }
  }

  // Pattern: (xor:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
  // Emits: (XORv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::XORv16i8, MVT::v16i8);
  return Result;
}

SDNode *Select_ISD_XOR_v8i16(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);

    // Pattern: (xor:v8i16 (and:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB), (build_vector:v8i16)<<P:Predicate_immAllOnesV>>)
    // Emits: (NANDv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::AND) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_immAllOnesV(N1.getNode())) {
        SDNode *Result = Emit_187(N, SPU::NANDv8i16, MVT::v8i16);
        return Result;
      }
    }

    // Pattern: (xor:v8i16 (or:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB), (build_vector:v8i16)<<P:Predicate_immAllOnesV>>)
    // Emits: (NORv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::OR) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_immAllOnesV(N1.getNode())) {
        SDNode *Result = Emit_187(N, SPU::NORv8i16, MVT::v8i16);
        return Result;
      }
    }

    // Pattern: (xor:v8i16 VECREG:v8i16:$rA, (xor:v8i16 VECREG:v8i16:$rB, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>))
    // Emits: (EQVv8i16_1:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);
        SDValue N11 = N1.getOperand(1);
        if (N11.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N11.getNode())) {
          SDNode *Result = Emit_14(N, SPU::EQVv8i16_1, MVT::v8i16);
          return Result;
        }
      }
    }

    // Pattern: (xor:v8i16 (xor:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB), (imm:v8i16)<<P:Predicate_immAllOnes>>)
    // Emits: (EQVv8i16_3:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::Constant &&
          Predicate_immAllOnes(N1.getNode())) {
        SDNode *Result = Emit_187(N, SPU::EQVv8i16_3, MVT::v8i16);
        return Result;
      }
    }
    if (N0.getOpcode() == ISD::BUILD_VECTOR &&
        Predicate_immAllOnesV(N0.getNode())) {
      SDValue N1 = N.getOperand(1);

      // Pattern: (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, (and:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB))
      // Emits: (NANDv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      if (N1.getOpcode() == ISD::AND) {
        SDNode *Result = Emit_189(N, SPU::NANDv8i16, MVT::v8i16);
        return Result;
      }

      // Pattern: (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, (or:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB))
      // Emits: (NORv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      if (N1.getOpcode() == ISD::OR) {
        SDNode *Result = Emit_189(N, SPU::NORv8i16, MVT::v8i16);
        return Result;
      }
    }
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);

      // Pattern: (xor:v8i16 (xor:v8i16 VECREG:v8i16:$rA, (build_vector:v8i16)<<P:Predicate_immAllOnesV>>), VECREG:v8i16:$rB)
      // Emits: (EQVv8i16_1:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      {
        SDValue N01 = N0.getOperand(1);
        if (N01.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N01.getNode())) {
          SDNode *Result = Emit_188(N, SPU::EQVv8i16_1, MVT::v8i16);
          return Result;
        }
      }

      // Pattern: (xor:v8i16 (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rA), VECREG:v8i16:$rB)
      // Emits: (EQVv8i16_1:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      if (N00.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_immAllOnesV(N00.getNode())) {
        SDNode *Result = Emit_190(N, SPU::EQVv8i16_1, MVT::v8i16);
        return Result;
      }
    }

    // Pattern: (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, (xor:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB))
    // Emits: (EQVv8i16_1:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::BUILD_VECTOR &&
        Predicate_immAllOnesV(N0.getNode())) {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDNode *Result = Emit_189(N, SPU::EQVv8i16_1, MVT::v8i16);
        return Result;
      }
    }

    // Pattern: (xor:v8i16 VECREG:v8i16:$rB, (xor:v8i16 (build_vector:v8i16)<<P:Predicate_immAllOnesV>>, VECREG:v8i16:$rA))
    // Emits: (EQVv8i16_1:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);
        if (N10.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N10.getNode())) {
          SDNode *Result = Emit_191(N, SPU::EQVv8i16_1, MVT::v8i16);
          return Result;
        }
      }
    }

    // Pattern: (xor:v8i16 (xor:v8i16 VECREG:v8i16:$rA, (imm:v8i16)<<P:Predicate_immAllOnes>>), VECREG:v8i16:$rB)
    // Emits: (EQVv8i16_3:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);
      if (N01.getOpcode() == ISD::Constant &&
          Predicate_immAllOnes(N01.getNode())) {
        SDNode *Result = Emit_188(N, SPU::EQVv8i16_3, MVT::v8i16);
        return Result;
      }
    }
    {
      SDValue N1 = N.getOperand(1);

      // Pattern: (xor:v8i16 VECREG:v8i16:$rB, (xor:v8i16 VECREG:v8i16:$rA, (imm:v8i16)<<P:Predicate_immAllOnes>>))
      // Emits: (EQVv8i16_3:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);
        SDValue N11 = N1.getOperand(1);
        if (N11.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N11.getNode())) {
          SDNode *Result = Emit_192(N, SPU::EQVv8i16_3, MVT::v8i16);
          return Result;
        }
      }

      // Pattern: (xor:v8i16 VECREG:v8i16:$rA, (build_vector:v8i16)<<P:Predicate_v8i16SExt10Imm>><<X:v8i16SExt10Imm_xform>>:$val)
      // Emits: (XORHIv8i16:v8i16 VECREG:v8i16:$rA, (v8i16SExt10Imm_xform:i16 (build_vector:v8i16):$val))
      // Pattern complexity = 7  cost = 1  size = 0
      if (N1.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_v8i16SExt10Imm(N1.getNode())) {
        SDNode *Result = Emit_10(N, SPU::XORHIv8i16, MVT::v8i16);
        return Result;
      }
    }

    // Pattern: (xor:v8i16 (build_vector:v8i16)<<P:Predicate_v8i16SExt10Imm>><<X:v8i16SExt10Imm_xform>>:$val, VECREG:v8i16:$rA)
    // Emits: (XORHIv8i16:v8i16 VECREG:v8i16:$rA, (v8i16SExt10Imm_xform:i16 (build_vector:v8i16):$val))
    // Pattern complexity = 7  cost = 1  size = 0
    if (N0.getOpcode() == ISD::BUILD_VECTOR &&
        Predicate_v8i16SExt10Imm(N0.getNode())) {
      SDNode *Result = Emit_11(N, SPU::XORHIv8i16, MVT::v8i16);
      return Result;
    }
  }

  // Pattern: (xor:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
  // Emits: (XORv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::XORv8i16, MVT::v8i16);
  return Result;
}

SDNode *Select_ISD_XOR_v4i32(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);

    // Pattern: (xor:v4i32 (and:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB), (build_vector:v4i32)<<P:Predicate_immAllOnesV>>)
    // Emits: (NANDv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::AND) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_immAllOnesV(N1.getNode())) {
        SDNode *Result = Emit_187(N, SPU::NANDv4i32, MVT::v4i32);
        return Result;
      }
    }

    // Pattern: (xor:v4i32 (or:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB), (build_vector:v4i32)<<P:Predicate_immAllOnesV>>)
    // Emits: (NORv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::OR) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_immAllOnesV(N1.getNode())) {
        SDNode *Result = Emit_187(N, SPU::NORv4i32, MVT::v4i32);
        return Result;
      }
    }

    // Pattern: (xor:v4i32 VECREG:v4i32:$rA, (xor:v4i32 VECREG:v4i32:$rB, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>))
    // Emits: (EQVv4i32_1:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);
        SDValue N11 = N1.getOperand(1);
        if (N11.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N11.getNode())) {
          SDNode *Result = Emit_14(N, SPU::EQVv4i32_1, MVT::v4i32);
          return Result;
        }
      }
    }

    // Pattern: (xor:v4i32 (xor:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB), (imm:v4i32)<<P:Predicate_immAllOnes>>)
    // Emits: (EQVv4i32_3:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::Constant &&
          Predicate_immAllOnes(N1.getNode())) {
        SDNode *Result = Emit_187(N, SPU::EQVv4i32_3, MVT::v4i32);
        return Result;
      }
    }
    if (N0.getOpcode() == ISD::BUILD_VECTOR &&
        Predicate_immAllOnesV(N0.getNode())) {
      SDValue N1 = N.getOperand(1);

      // Pattern: (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, (and:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB))
      // Emits: (NANDv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      if (N1.getOpcode() == ISD::AND) {
        SDNode *Result = Emit_189(N, SPU::NANDv4i32, MVT::v4i32);
        return Result;
      }

      // Pattern: (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, (or:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB))
      // Emits: (NORv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      if (N1.getOpcode() == ISD::OR) {
        SDNode *Result = Emit_189(N, SPU::NORv4i32, MVT::v4i32);
        return Result;
      }
    }
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);

      // Pattern: (xor:v4i32 (xor:v4i32 VECREG:v4i32:$rA, (build_vector:v4i32)<<P:Predicate_immAllOnesV>>), VECREG:v4i32:$rB)
      // Emits: (EQVv4i32_1:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      {
        SDValue N01 = N0.getOperand(1);
        if (N01.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N01.getNode())) {
          SDNode *Result = Emit_188(N, SPU::EQVv4i32_1, MVT::v4i32);
          return Result;
        }
      }

      // Pattern: (xor:v4i32 (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rA), VECREG:v4i32:$rB)
      // Emits: (EQVv4i32_1:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      if (N00.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_immAllOnesV(N00.getNode())) {
        SDNode *Result = Emit_190(N, SPU::EQVv4i32_1, MVT::v4i32);
        return Result;
      }
    }

    // Pattern: (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, (xor:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB))
    // Emits: (EQVv4i32_1:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::BUILD_VECTOR &&
        Predicate_immAllOnesV(N0.getNode())) {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDNode *Result = Emit_189(N, SPU::EQVv4i32_1, MVT::v4i32);
        return Result;
      }
    }

    // Pattern: (xor:v4i32 VECREG:v4i32:$rB, (xor:v4i32 (build_vector:v4i32)<<P:Predicate_immAllOnesV>>, VECREG:v4i32:$rA))
    // Emits: (EQVv4i32_1:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);
        if (N10.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N10.getNode())) {
          SDNode *Result = Emit_191(N, SPU::EQVv4i32_1, MVT::v4i32);
          return Result;
        }
      }
    }

    // Pattern: (xor:v4i32 (xor:v4i32 VECREG:v4i32:$rA, (imm:v4i32)<<P:Predicate_immAllOnes>>), VECREG:v4i32:$rB)
    // Emits: (EQVv4i32_3:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);
      if (N01.getOpcode() == ISD::Constant &&
          Predicate_immAllOnes(N01.getNode())) {
        SDNode *Result = Emit_188(N, SPU::EQVv4i32_3, MVT::v4i32);
        return Result;
      }
    }
    {
      SDValue N1 = N.getOperand(1);

      // Pattern: (xor:v4i32 VECREG:v4i32:$rB, (xor:v4i32 VECREG:v4i32:$rA, (imm:v4i32)<<P:Predicate_immAllOnes>>))
      // Emits: (EQVv4i32_3:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);
        SDValue N11 = N1.getOperand(1);
        if (N11.getOpcode() == ISD::Constant &&
            Predicate_immAllOnes(N11.getNode())) {
          SDNode *Result = Emit_192(N, SPU::EQVv4i32_3, MVT::v4i32);
          return Result;
        }
      }

      // Pattern: (xor:v4i32 VECREG:v4i32:$rA, (build_vector:v4i32)<<P:Predicate_v4i32SExt10Imm>><<X:v4i32SExt10Imm_xform>>:$val)
      // Emits: (XORIv4i32:v4i32 VECREG:v4i32:$rA, (v4i32SExt10Imm_xform:i32 (build_vector:v4i32):$val))
      // Pattern complexity = 7  cost = 1  size = 0
      if (N1.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_v4i32SExt10Imm(N1.getNode())) {
        SDNode *Result = Emit_12(N, SPU::XORIv4i32, MVT::v4i32);
        return Result;
      }
    }

    // Pattern: (xor:v4i32 (build_vector:v4i32)<<P:Predicate_v4i32SExt10Imm>><<X:v4i32SExt10Imm_xform>>:$val, VECREG:v4i32:$rA)
    // Emits: (XORIv4i32:v4i32 VECREG:v4i32:$rA, (v4i32SExt10Imm_xform:i32 (build_vector:v4i32):$val))
    // Pattern complexity = 7  cost = 1  size = 0
    if (N0.getOpcode() == ISD::BUILD_VECTOR &&
        Predicate_v4i32SExt10Imm(N0.getNode())) {
      SDNode *Result = Emit_13(N, SPU::XORIv4i32, MVT::v4i32);
      return Result;
    }
  }

  // Pattern: (xor:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
  // Emits: (XORv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::XORv4i32, MVT::v4i32);
  return Result;
}

SDNode *Select_ISD_XOR_v2i64(const SDValue &N) {
  {
    SDValue N0 = N.getOperand(0);

    // Pattern: (xor:v2i64 VECREG:v2i64:$rA, (xor:v2i64 VECREG:v2i64:$rB, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>))
    // Emits: (EQVv2i64_1:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);
        SDValue N11 = N1.getOperand(1);
        if (N11.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N11.getNode())) {
          SDNode *Result = Emit_14(N, SPU::EQVv2i64_1, MVT::v2i64);
          return Result;
        }
      }
    }
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);
      {
        SDValue N01 = N0.getOperand(1);

        // Pattern: (xor:v2i64 (xor:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB), (imm:v2i64)<<P:Predicate_immAllOnes>>)
        // Emits: (EQVv2i64_3:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
        // Pattern complexity = 10  cost = 1  size = 0
        {
          SDValue N1 = N.getOperand(1);
          if (N1.getOpcode() == ISD::Constant &&
              Predicate_immAllOnes(N1.getNode())) {
            SDNode *Result = Emit_187(N, SPU::EQVv2i64_3, MVT::v2i64);
            return Result;
          }
        }

        // Pattern: (xor:v2i64 (xor:v2i64 VECREG:v2i64:$rA, (build_vector:v2i64)<<P:Predicate_immAllOnesV>>), VECREG:v2i64:$rB)
        // Emits: (EQVv2i64_1:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
        // Pattern complexity = 10  cost = 1  size = 0
        if (N01.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N01.getNode())) {
          SDNode *Result = Emit_188(N, SPU::EQVv2i64_1, MVT::v2i64);
          return Result;
        }
      }

      // Pattern: (xor:v2i64 (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rA), VECREG:v2i64:$rB)
      // Emits: (EQVv2i64_1:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
      // Pattern complexity = 10  cost = 1  size = 0
      if (N00.getOpcode() == ISD::BUILD_VECTOR &&
          Predicate_immAllOnesV(N00.getNode())) {
        SDNode *Result = Emit_190(N, SPU::EQVv2i64_1, MVT::v2i64);
        return Result;
      }
    }

    // Pattern: (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, (xor:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB))
    // Emits: (EQVv2i64_1:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::BUILD_VECTOR &&
        Predicate_immAllOnesV(N0.getNode())) {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDNode *Result = Emit_189(N, SPU::EQVv2i64_1, MVT::v2i64);
        return Result;
      }
    }

    // Pattern: (xor:v2i64 VECREG:v2i64:$rB, (xor:v2i64 (build_vector:v2i64)<<P:Predicate_immAllOnesV>>, VECREG:v2i64:$rA))
    // Emits: (EQVv2i64_1:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    {
      SDValue N1 = N.getOperand(1);
      if (N1.getOpcode() == ISD::XOR) {
        SDValue N10 = N1.getOperand(0);
        if (N10.getOpcode() == ISD::BUILD_VECTOR &&
            Predicate_immAllOnesV(N10.getNode())) {
          SDNode *Result = Emit_191(N, SPU::EQVv2i64_1, MVT::v2i64);
          return Result;
        }
      }
    }

    // Pattern: (xor:v2i64 (xor:v2i64 VECREG:v2i64:$rA, (imm:v2i64)<<P:Predicate_immAllOnes>>), VECREG:v2i64:$rB)
    // Emits: (EQVv2i64_3:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    if (N0.getOpcode() == ISD::XOR) {
      SDValue N00 = N0.getOperand(0);
      SDValue N01 = N0.getOperand(1);
      if (N01.getOpcode() == ISD::Constant &&
          Predicate_immAllOnes(N01.getNode())) {
        SDNode *Result = Emit_188(N, SPU::EQVv2i64_3, MVT::v2i64);
        return Result;
      }
    }

    // Pattern: (xor:v2i64 VECREG:v2i64:$rB, (xor:v2i64 VECREG:v2i64:$rA, (imm:v2i64)<<P:Predicate_immAllOnes>>))
    // Emits: (EQVv2i64_3:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
    // Pattern complexity = 10  cost = 1  size = 0
    SDValue N1 = N.getOperand(1);
    if (N1.getOpcode() == ISD::XOR) {
      SDValue N10 = N1.getOperand(0);
      SDValue N11 = N1.getOperand(1);
      if (N11.getOpcode() == ISD::Constant &&
          Predicate_immAllOnes(N11.getNode())) {
        SDNode *Result = Emit_192(N, SPU::EQVv2i64_3, MVT::v2i64);
        return Result;
      }
    }
  }

  // Pattern: (xor:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
  // Emits: (XORv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  SDNode *Result = Emit_0(N, SPU::XORv2i64, MVT::v2i64);
  return Result;
}

SDNode *Emit_193(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue Tmp1 = CurDAG->getTargetConstant(0xFFULL, MVT::i16);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N0, Tmp1);
}
SDNode *Select_ISD_ZERO_EXTEND_i16(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::i8) {
    SDNode *Result = Emit_193(N, SPU::ANDHIi8i16, MVT::i16);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_194(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue Tmp1 = CurDAG->getTargetConstant(0xFFULL, MVT::i32);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N0, Tmp1);
}
SDNode *Emit_195(const SDValue &N, unsigned Opc0, unsigned Opc1, MVT VT0, MVT VT1) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue Tmp1 = CurDAG->getTargetConstant(0xFFFFULL, MVT::i32);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, Tmp1), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc1, VT1, N0, Tmp2);
}
SDNode *Emit_196(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue Tmp2 = CurDAG->getTargetConstant(0xFULL, MVT::i32);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N00, Tmp2);
}
SDNode *Emit_197(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue Tmp2 = CurDAG->getTargetConstant(0xFFULL, MVT::i32);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N00, Tmp2);
}
SDNode *Emit_198(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N00 = N0.getOperand(0);
  SDValue N01 = N0.getOperand(1);
  SDValue Tmp2 = CurDAG->getTargetConstant(0xFFFULL, MVT::i32);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N00, Tmp2);
}
SDNode *Select_ISD_ZERO_EXTEND_i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getOpcode() == ISD::AND) {
    SDValue N00 = N0.getOperand(0);
    SDValue N01 = N0.getOperand(1);
    ConstantSDNode *Tmp0 = dyn_cast<ConstantSDNode>(N01);
    if (Tmp0) {

      // Pattern: (zext:i32 (and:i16 R16C:i16:$rSrc, 15:i16))
      // Emits: (ANDIi16i32:i32 R16C:i16:$rSrc, 15:i32)
      // Pattern complexity = 11  cost = 1  size = 0
      if (CheckAndMask(N00, Tmp0, INT64_C(15)) &&
          N0.getNode()->getValueType(0) == MVT::i16) {
        SDNode *Result = Emit_196(N, SPU::ANDIi16i32, MVT::i32);
        return Result;
      }

      // Pattern: (zext:i32 (and:i16 R16C:i16:$rSrc, 255:i16))
      // Emits: (ANDIi16i32:i32 R16C:i16:$rSrc, 255:i32)
      // Pattern complexity = 11  cost = 1  size = 0
      if (CheckAndMask(N00, Tmp0, INT64_C(255)) &&
          N0.getNode()->getValueType(0) == MVT::i16) {
        SDNode *Result = Emit_197(N, SPU::ANDIi16i32, MVT::i32);
        return Result;
      }

      // Pattern: (zext:i32 (and:i16 R16C:i16:$rSrc, 4095:i16))
      // Emits: (ANDIi16i32:i32 R16C:i16:$rSrc, 4095:i32)
      // Pattern complexity = 11  cost = 1  size = 0
      if (CheckAndMask(N00, Tmp0, INT64_C(4095)) &&
          N0.getNode()->getValueType(0) == MVT::i16) {
        SDNode *Result = Emit_198(N, SPU::ANDIi16i32, MVT::i32);
        return Result;
      }
    }
  }

  // Pattern: (zext:i32 R8C:i8:$rSrc)
  // Emits: (ANDIi8i32:i32 R8C:i8:$rSrc, 255:i32)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i8) {
    SDNode *Result = Emit_194(N, SPU::ANDIi8i32, MVT::i32);
    return Result;
  }

  // Pattern: (zext:i32 R16C:i16:$rSrc)
  // Emits: (ANDi16i32:i32 R16C:i16:$rSrc, (ILAr32:i32 65535:i32))
  // Pattern complexity = 3  cost = 2  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_195(N, SPU::ILAr32, SPU::ANDi16i32, MVT::i32, MVT::i32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_199(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, unsigned Opc4, unsigned Opc5, unsigned Opc6, MVT VT0, MVT VT1, MVT VT2, MVT VT3, MVT VT4, MVT VT5, MVT VT6) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue Tmp1 = CurDAG->getTargetConstant(0xFFULL, MVT::i32);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0, Tmp1), 0);
  SDValue Tmp3(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, Tmp2), 0);
  SDValue Tmp4 = CurDAG->getTargetConstant(0x4ULL, MVT::i32);
  SDValue Tmp5(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, Tmp3, Tmp4), 0);
  SDValue Tmp6 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp7(CurDAG->getTargetNode(Opc3, N.getDebugLoc(), VT3, Tmp6), 0);
  SDValue Tmp8 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp9(CurDAG->getTargetNode(Opc4, N.getDebugLoc(), VT4, Tmp8), 0);
  SDValue Tmp10(CurDAG->getTargetNode(Opc5, N.getDebugLoc(), VT5, Tmp5, Tmp7, Tmp9), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc6, VT6, Tmp10);
}
SDNode *Select_ISD_ZERO_EXTEND_i64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::i8) {
    SDNode *Result = Emit_199(N, SPU::ANDIi8i32, SPU::ORv4i32_i32, SPU::ROTQMBYv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORi64_v2i64, MVT::i32, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::i64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_ISD_ZERO_EXTEND_i128(const SDValue &N) {
  SDValue N0 = N.getOperand(0);

  // Pattern: (zext:i128 R32C:i32:$rSrc)
  // Emits: (ROTQMBYIr128_zext_r32:i128 R32C:i32:$rSrc, 12:i32)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_27(N, SPU::ROTQMBYIr128_zext_r32, MVT::i128);
    return Result;
  }

  // Pattern: (zext:i128 R64C:i64:$rSrc)
  // Emits: (ROTQMBYIr128_zext_r64:i128 R64C:i64:$rSrc, 8:i32)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i64) {
    SDNode *Result = Emit_28(N, SPU::ROTQMBYIr128_zext_r64, MVT::i128);
    return Result;
  }

  // Pattern: (zext:i128 R8C:i8:$rSrc)
  // Emits: (ROTQMBYIr128_zext_r32:i128 (ANDIi8i32:i32 R8C:i8:$rSrc, 15:i32), 12:i32)
  // Pattern complexity = 3  cost = 2  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i8) {
    SDNode *Result = Emit_30(N, SPU::ANDIi8i32, SPU::ROTQMBYIr128_zext_r32, MVT::i32, MVT::i128);
    return Result;
  }

  // Pattern: (zext:i128 R16C:i16:$rSrc)
  // Emits: (ROTQMBYIr128_zext_r32:i128 (ANDi16i32:i32 R16C:i16:$rSrc, (ILAr32:i32 65535:i32)), 12:i32)
  // Pattern complexity = 3  cost = 3  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_29(N, SPU::ILAr32, SPU::ANDi16i32, SPU::ROTQMBYIr128_zext_r32, MVT::i32, MVT::i32, MVT::i128);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_200(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, unsigned Opc4, unsigned Opc5, unsigned Opc6, unsigned Opc7, unsigned Opc8, unsigned Opc9, unsigned Opc10, MVT VT0, MVT VT1, MVT VT2, MVT VT3, MVT VT4, MVT VT5, MVT VT6, MVT VT7, MVT VT8, MVT VT9, MVT VT10) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp1(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0), 0);
  SDValue Tmp3(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N1), 0);
  SDValue Tmp5(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, N0), 0);
  SDValue Tmp7(CurDAG->getTargetNode(Opc3, N.getDebugLoc(), VT3, N1), 0);
  SDValue Tmp8(CurDAG->getTargetNode(Opc4, N.getDebugLoc(), VT4, Tmp5, Tmp7), 0);
  SDValue Tmp10(CurDAG->getTargetNode(Opc5, N.getDebugLoc(), VT5, N0), 0);
  SDValue Tmp12(CurDAG->getTargetNode(Opc6, N.getDebugLoc(), VT6, N1), 0);
  SDValue Tmp13(CurDAG->getTargetNode(Opc7, N.getDebugLoc(), VT7, Tmp10, Tmp12), 0);
  SDValue Tmp15(CurDAG->getTargetNode(Opc8, N.getDebugLoc(), VT8, Tmp8, Tmp13, N2), 0);
  SDValue Tmp16(CurDAG->getTargetNode(Opc9, N.getDebugLoc(), VT9, Tmp1, Tmp3, Tmp15), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc10, VT10, Tmp16);
}
SDNode *Select_SPUISD_ADD64_MARKER_i64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  if (N2.getNode()->getValueType(0) == MVT::v4i32) {
    SDNode *Result = Emit_200(N, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CGv4i32, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::CGv4i32, SPU::SHUFBv4i32, SPU::ADDXv4i32, SPU::ORi64_v2i64, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::i64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_201(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, MVT VT0, MVT VT1, MVT VT2, MVT VT3) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp4(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0, N1), 0);
  SDValue Tmp7(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, N0, N1), 0);
  SDValue Tmp9(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, Tmp4, Tmp7, N2), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc3, VT3, N0, N1, Tmp9);
}
SDNode *Select_SPUISD_ADD64_MARKER_v2i64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  if (N2.getNode()->getValueType(0) == MVT::v4i32) {
    SDNode *Result = Emit_201(N, SPU::CGv4i32, SPU::CGv4i32, SPU::SHUFBv4i32, SPU::ADDXv4i32, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v2i64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_AFormAddr_i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);

  // Pattern: (SPUaform:i32 (tglobaladdr:i32):$in, 0:i32)
  // Emits: (ILAlsa:i32 (tglobaladdr:i32):$in)
  // Pattern complexity = 11  cost = 1  size = 0
  if (N0.getOpcode() == ISD::TargetGlobalAddress) {
    SDValue N1 = N.getOperand(1);
    ConstantSDNode *Tmp0 = dyn_cast<ConstantSDNode>(N1);
    if (Tmp0) {
      int64_t CN1 = Tmp0->getSExtValue();
      if (CN1 == INT64_C(0)) {
        SDNode *Result = Emit_170(N, SPU::ILAlsa, MVT::i32);
        return Result;
      }
    }
  }

  // Pattern: (SPUaform:i32 (texternalsym:i32):$in, 0:i32)
  // Emits: (ILAlsa:i32 (texternalsym:i32):$in)
  // Pattern complexity = 11  cost = 1  size = 0
  if (N0.getOpcode() == ISD::TargetExternalSymbol) {
    SDValue N1 = N.getOperand(1);
    ConstantSDNode *Tmp0 = dyn_cast<ConstantSDNode>(N1);
    if (Tmp0) {
      int64_t CN1 = Tmp0->getSExtValue();
      if (CN1 == INT64_C(0)) {
        SDNode *Result = Emit_170(N, SPU::ILAlsa, MVT::i32);
        return Result;
      }
    }
  }

  // Pattern: (SPUaform:i32 (tjumptable:i32):$in, 0:i32)
  // Emits: (ILAlsa:i32 (tjumptable:i32):$in)
  // Pattern complexity = 11  cost = 1  size = 0
  if (N0.getOpcode() == ISD::TargetJumpTable) {
    SDValue N1 = N.getOperand(1);
    ConstantSDNode *Tmp0 = dyn_cast<ConstantSDNode>(N1);
    if (Tmp0) {
      int64_t CN1 = Tmp0->getSExtValue();
      if (CN1 == INT64_C(0)) {
        SDNode *Result = Emit_170(N, SPU::ILAlsa, MVT::i32);
        return Result;
      }
    }
  }

  // Pattern: (SPUaform:i32 (tconstpool:i32):$in, 0:i32)
  // Emits: (ILAlsa:i32 (tconstpool:i32):$in)
  // Pattern complexity = 11  cost = 1  size = 0
  if (N0.getOpcode() == ISD::TargetConstantPool) {
    SDValue N1 = N.getOperand(1);
    ConstantSDNode *Tmp0 = dyn_cast<ConstantSDNode>(N1);
    if (Tmp0) {
      int64_t CN1 = Tmp0->getSExtValue();
      if (CN1 == INT64_C(0)) {
        SDNode *Result = Emit_170(N, SPU::ILAlsa, MVT::i32);
        return Result;
      }
    }
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_202(const SDValue &N, unsigned Opc0, unsigned NumInputRootOps) DISABLE_INLINE {
  SDValue Chain = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N10 = N1.getOperand(0);
  SDValue N11 = N1.getOperand(1);
  bool HasInFlag = (N.getOperand(N.getNumOperands()-1).getValueType() == MVT::Flag);
  SmallVector<SDValue, 8> Ops0;
  SDValue InFlag(0, 0);
  if (HasInFlag) {
    InFlag = N.getOperand(N.getNumOperands()-1);
  }
  Ops0.push_back(N10);
  for (unsigned i = NumInputRootOps + 1, e = N.getNumOperands()-(HasInFlag?1:0); i != e; ++i) {
    Ops0.push_back(N.getOperand(i));
  }
  Ops0.push_back(Chain);
  if (HasInFlag)
    Ops0.push_back(InFlag);
  SDNode *ResNode = CurDAG->SelectNodeTo(N.getNode(), Opc0, MVT::Other, MVT::Flag, &Ops0[0], Ops0.size());
  Chain = SDValue(ResNode, 0);
  InFlag = SDValue(ResNode, 1);
  const SDValue Froms[] = {
    SDValue(N.getNode(), 1),
    SDValue(N.getNode(), 0)
  };
  const SDValue Tos[] = {
    InFlag,
    SDValue(Chain.getNode(), Chain.getResNo())
  };
  ReplaceUses(Froms, Tos, 2);
  return ResNode;
}
SDNode *Emit_203(const SDValue &N, unsigned Opc0) DISABLE_INLINE {
  SDValue Chain = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  bool HasInFlag = (N.getOperand(N.getNumOperands()-1).getValueType() == MVT::Flag);
  SDValue InFlag(0, 0);
  if (HasInFlag) {
    InFlag = N.getOperand(N.getNumOperands()-1);
  }
  SDValue Ops0[] = { N1, Chain, InFlag };
  SDNode *ResNode = CurDAG->SelectNodeTo(N.getNode(), Opc0, MVT::Other, MVT::Flag, Ops0, HasInFlag ? 3 : 2);
  Chain = SDValue(ResNode, 0);
  InFlag = SDValue(ResNode, 1);
  const SDValue Froms[] = {
    SDValue(N.getNode(), 1),
    SDValue(N.getNode(), 0)
  };
  const SDValue Tos[] = {
    InFlag,
    SDValue(Chain.getNode(), Chain.getResNo())
  };
  ReplaceUses(Froms, Tos, 2);
  return ResNode;
}
SDNode *Select_SPUISD_CALL(const SDValue &N) {
  SDValue Chain = N.getOperand(0);
  SDValue N1 = N.getOperand(1);

  // Pattern: (SPUcall:isVoid (SPUpcrel:iPTR (tglobaladdr:iPTR):$func, 0:iPTR))
  // Emits: (BRSL:isVoid (tglobaladdr:iPTR):$func)
  // Pattern complexity = 14  cost = 1  size = 0
  if (N1.getOpcode() == SPUISD::PCRelAddr) {
    SDValue N10 = N1.getOperand(0);
    if (N10.getOpcode() == ISD::TargetGlobalAddress) {
      SDValue N11 = N1.getOperand(1);
      ConstantSDNode *Tmp0 = dyn_cast<ConstantSDNode>(N11);
      if (Tmp0) {
        int64_t CN1 = Tmp0->getSExtValue();
        if (CN1 == INT64_C(0)) {
          SDNode *Result = Emit_202(N, SPU::BRSL, 1);
          return Result;
        }
      }
    }
  }

  // Pattern: (SPUcall:isVoid (SPUaform:iPTR (tglobaladdr:iPTR):$func, 0:iPTR))
  // Emits: (BRASL:isVoid (tglobaladdr:iPTR):$func)
  // Pattern complexity = 14  cost = 1  size = 0
  if (N1.getOpcode() == SPUISD::AFormAddr) {
    SDValue N10 = N1.getOperand(0);
    if (N10.getOpcode() == ISD::TargetGlobalAddress) {
      SDValue N11 = N1.getOperand(1);
      ConstantSDNode *Tmp0 = dyn_cast<ConstantSDNode>(N11);
      if (Tmp0) {
        int64_t CN1 = Tmp0->getSExtValue();
        if (CN1 == INT64_C(0)) {
          SDNode *Result = Emit_202(N, SPU::BRASL, 1);
          return Result;
        }
      }
    }
  }

  // Pattern: (SPUcall:isVoid (SPUpcrel:iPTR (texternalsym:iPTR):$func, 0:iPTR))
  // Emits: (BRSL:isVoid (texternalsym:iPTR):$func)
  // Pattern complexity = 14  cost = 1  size = 0
  if (N1.getOpcode() == SPUISD::PCRelAddr) {
    SDValue N10 = N1.getOperand(0);
    if (N10.getOpcode() == ISD::TargetExternalSymbol) {
      SDValue N11 = N1.getOperand(1);
      ConstantSDNode *Tmp0 = dyn_cast<ConstantSDNode>(N11);
      if (Tmp0) {
        int64_t CN1 = Tmp0->getSExtValue();
        if (CN1 == INT64_C(0)) {
          SDNode *Result = Emit_202(N, SPU::BRSL, 1);
          return Result;
        }
      }
    }
  }

  // Pattern: (SPUcall:isVoid (SPUaform:iPTR (texternalsym:iPTR):$func, 0:iPTR))
  // Emits: (BRASL:isVoid (texternalsym:iPTR):$func)
  // Pattern complexity = 14  cost = 1  size = 0
  if (N1.getOpcode() == SPUISD::AFormAddr) {
    SDValue N10 = N1.getOperand(0);
    if (N10.getOpcode() == ISD::TargetExternalSymbol) {
      SDValue N11 = N1.getOperand(1);
      ConstantSDNode *Tmp0 = dyn_cast<ConstantSDNode>(N11);
      if (Tmp0) {
        int64_t CN1 = Tmp0->getSExtValue();
        if (CN1 == INT64_C(0)) {
          SDNode *Result = Emit_202(N, SPU::BRASL, 1);
          return Result;
        }
      }
    }
  }

  // Pattern: (SPUcall:isVoid R32C:i32:$func)
  // Emits: (BISL:isVoid R32C:i32:$func)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_203(N, SPU::BISL);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_CNTB_v16i8(const SDValue &N) {
  SDNode *Result = Emit_31(N, SPU::CNTBv16i8, MVT::v16i8);
  return Result;
}

SDNode *Select_SPUISD_CNTB_v8i16(const SDValue &N) {
  SDNode *Result = Emit_31(N, SPU::CNTBv8i16, MVT::v8i16);
  return Result;
}

SDNode *Select_SPUISD_CNTB_v4i32(const SDValue &N) {
  SDNode *Result = Emit_31(N, SPU::CNTBv4i32, MVT::v4i32);
  return Result;
}

SDNode *Select_SPUISD_IndirectAddr_i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getOpcode() == SPUISD::Hi) {
    SDValue N00 = N0.getOperand(0);

    // Pattern: (SPUindirect:i32 (SPUhi:i32 (tglobaladdr:i32):$in, 0:i32), (SPUlo:i32 (tglobaladdr:i32):$in, 0:i32))
    // Emits: (IOHLlo:i32 (ILHUhi:i32 (tglobaladdr:i32):$in), (tglobaladdr:i32):$in)
    // Pattern complexity = 25  cost = 2  size = 0
    if (N00.getOpcode() == ISD::TargetGlobalAddress) {
      SDValue N01 = N0.getOperand(1);
      ConstantSDNode *Tmp0 = dyn_cast<ConstantSDNode>(N01);
      if (Tmp0) {
        int64_t CN1 = Tmp0->getSExtValue();
        if (CN1 == INT64_C(0)) {
          SDValue N1 = N.getOperand(1);
          if (N1.getOpcode() == SPUISD::Lo) {
            SDValue N10 = N1.getOperand(0);
            if (N10.getOpcode() == ISD::TargetGlobalAddress &&
                N00 == N10) {
              SDValue N11 = N1.getOperand(1);
              ConstantSDNode *Tmp2 = dyn_cast<ConstantSDNode>(N11);
              if (Tmp2) {
                int64_t CN3 = Tmp2->getSExtValue();
                if (CN3 == INT64_C(0)) {
                  SDNode *Result = Emit_6(N, SPU::ILHUhi, SPU::IOHLlo, MVT::i32, MVT::i32);
                  return Result;
                }
              }
            }
          }
        }
      }
    }

    // Pattern: (SPUindirect:i32 (SPUhi:i32 (texternalsym:i32):$in, 0:i32), (SPUlo:i32 (texternalsym:i32):$in, 0:i32))
    // Emits: (IOHLlo:i32 (ILHUhi:i32 (texternalsym:i32):$in), (texternalsym:i32):$in)
    // Pattern complexity = 25  cost = 2  size = 0
    if (N00.getOpcode() == ISD::TargetExternalSymbol) {
      SDValue N01 = N0.getOperand(1);
      ConstantSDNode *Tmp0 = dyn_cast<ConstantSDNode>(N01);
      if (Tmp0) {
        int64_t CN1 = Tmp0->getSExtValue();
        if (CN1 == INT64_C(0)) {
          SDValue N1 = N.getOperand(1);
          if (N1.getOpcode() == SPUISD::Lo) {
            SDValue N10 = N1.getOperand(0);
            if (N10.getOpcode() == ISD::TargetExternalSymbol &&
                N00 == N10) {
              SDValue N11 = N1.getOperand(1);
              ConstantSDNode *Tmp2 = dyn_cast<ConstantSDNode>(N11);
              if (Tmp2) {
                int64_t CN3 = Tmp2->getSExtValue();
                if (CN3 == INT64_C(0)) {
                  SDNode *Result = Emit_6(N, SPU::ILHUhi, SPU::IOHLlo, MVT::i32, MVT::i32);
                  return Result;
                }
              }
            }
          }
        }
      }
    }

    // Pattern: (SPUindirect:i32 (SPUhi:i32 (tjumptable:i32):$in, 0:i32), (SPUlo:i32 (tjumptable:i32):$in, 0:i32))
    // Emits: (IOHLlo:i32 (ILHUhi:i32 (tjumptable:i32):$in), (tjumptable:i32):$in)
    // Pattern complexity = 25  cost = 2  size = 0
    if (N00.getOpcode() == ISD::TargetJumpTable) {
      SDValue N01 = N0.getOperand(1);
      ConstantSDNode *Tmp0 = dyn_cast<ConstantSDNode>(N01);
      if (Tmp0) {
        int64_t CN1 = Tmp0->getSExtValue();
        if (CN1 == INT64_C(0)) {
          SDValue N1 = N.getOperand(1);
          if (N1.getOpcode() == SPUISD::Lo) {
            SDValue N10 = N1.getOperand(0);
            if (N10.getOpcode() == ISD::TargetJumpTable &&
                N00 == N10) {
              SDValue N11 = N1.getOperand(1);
              ConstantSDNode *Tmp2 = dyn_cast<ConstantSDNode>(N11);
              if (Tmp2) {
                int64_t CN3 = Tmp2->getSExtValue();
                if (CN3 == INT64_C(0)) {
                  SDNode *Result = Emit_6(N, SPU::ILHUhi, SPU::IOHLlo, MVT::i32, MVT::i32);
                  return Result;
                }
              }
            }
          }
        }
      }
    }

    // Pattern: (SPUindirect:i32 (SPUhi:i32 (tconstpool:i32):$in, 0:i32), (SPUlo:i32 (tconstpool:i32):$in, 0:i32))
    // Emits: (IOHLlo:i32 (ILHUhi:i32 (tconstpool:i32):$in), (tconstpool:i32):$in)
    // Pattern complexity = 25  cost = 2  size = 0
    if (N00.getOpcode() == ISD::TargetConstantPool) {
      SDValue N01 = N0.getOperand(1);
      ConstantSDNode *Tmp0 = dyn_cast<ConstantSDNode>(N01);
      if (Tmp0) {
        int64_t CN1 = Tmp0->getSExtValue();
        if (CN1 == INT64_C(0)) {
          SDValue N1 = N.getOperand(1);
          if (N1.getOpcode() == SPUISD::Lo) {
            SDValue N10 = N1.getOperand(0);
            if (N10.getOpcode() == ISD::TargetConstantPool &&
                N00 == N10) {
              SDValue N11 = N1.getOperand(1);
              ConstantSDNode *Tmp2 = dyn_cast<ConstantSDNode>(N11);
              if (Tmp2) {
                int64_t CN3 = Tmp2->getSExtValue();
                if (CN3 == INT64_C(0)) {
                  SDNode *Result = Emit_6(N, SPU::ILHUhi, SPU::IOHLlo, MVT::i32, MVT::i32);
                  return Result;
                }
              }
            }
          }
        }
      }
    }
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_204(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, unsigned Opc4, unsigned Opc5, unsigned Opc6, unsigned Opc7, unsigned Opc8, unsigned Opc9, unsigned Opc10, unsigned Opc11, unsigned Opc12, unsigned Opc13, unsigned Opc14, unsigned Opc15, unsigned Opc16, unsigned Opc17, unsigned Opc18, unsigned Opc19, unsigned Opc20, unsigned Opc21, unsigned Opc22, unsigned Opc23, unsigned Opc24, unsigned Opc25, unsigned Opc26, unsigned Opc27, unsigned Opc28, unsigned Opc29, unsigned Opc30, unsigned Opc31, unsigned Opc32, unsigned Opc33, unsigned Opc34, unsigned Opc35, unsigned Opc36, unsigned Opc37, unsigned Opc38, unsigned Opc39, unsigned Opc40, unsigned Opc41, unsigned Opc42, unsigned Opc43, unsigned Opc44, unsigned Opc45, unsigned Opc46, unsigned Opc47, unsigned Opc48, unsigned Opc49, unsigned Opc50, unsigned Opc51, unsigned Opc52, unsigned Opc53, unsigned Opc54, unsigned Opc55, unsigned Opc56, unsigned Opc57, unsigned Opc58, unsigned Opc59, unsigned Opc60, unsigned Opc61, unsigned Opc62, unsigned Opc63, unsigned Opc64, unsigned Opc65, unsigned Opc66, unsigned Opc67, unsigned Opc68, unsigned Opc69, unsigned Opc70, unsigned Opc71, unsigned Opc72, unsigned Opc73, unsigned Opc74, unsigned Opc75, unsigned Opc76, unsigned Opc77, unsigned Opc78, unsigned Opc79, unsigned Opc80, unsigned Opc81, unsigned Opc82, unsigned Opc83, unsigned Opc84, unsigned Opc85, unsigned Opc86, unsigned Opc87, unsigned Opc88, unsigned Opc89, unsigned Opc90, unsigned Opc91, unsigned Opc92, unsigned Opc93, unsigned Opc94, unsigned Opc95, unsigned Opc96, unsigned Opc97, unsigned Opc98, unsigned Opc99, unsigned Opc100, unsigned Opc101, unsigned Opc102, unsigned Opc103, unsigned Opc104, unsigned Opc105, unsigned Opc106, unsigned Opc107, unsigned Opc108, unsigned Opc109, unsigned Opc110, unsigned Opc111, unsigned Opc112, unsigned Opc113, unsigned Opc114, unsigned Opc115, unsigned Opc116, unsigned Opc117, unsigned Opc118, unsigned Opc119, unsigned Opc120, unsigned Opc121, unsigned Opc122, unsigned Opc123, unsigned Opc124, unsigned Opc125, unsigned Opc126, unsigned Opc127, unsigned Opc128, unsigned Opc129, unsigned Opc130, unsigned Opc131, unsigned Opc132, unsigned Opc133, unsigned Opc134, unsigned Opc135, unsigned Opc136, unsigned Opc137, unsigned Opc138, unsigned Opc139, unsigned Opc140, unsigned Opc141, unsigned Opc142, unsigned Opc143, unsigned Opc144, unsigned Opc145, unsigned Opc146, unsigned Opc147, unsigned Opc148, unsigned Opc149, unsigned Opc150, unsigned Opc151, unsigned Opc152, unsigned Opc153, unsigned Opc154, unsigned Opc155, unsigned Opc156, unsigned Opc157, unsigned Opc158, unsigned Opc159, unsigned Opc160, unsigned Opc161, unsigned Opc162, unsigned Opc163, unsigned Opc164, unsigned Opc165, unsigned Opc166, unsigned Opc167, unsigned Opc168, unsigned Opc169, unsigned Opc170, unsigned Opc171, unsigned Opc172, unsigned Opc173, unsigned Opc174, unsigned Opc175, unsigned Opc176, unsigned Opc177, unsigned Opc178, unsigned Opc179, unsigned Opc180, unsigned Opc181, unsigned Opc182, unsigned Opc183, unsigned Opc184, unsigned Opc185, unsigned Opc186, unsigned Opc187, unsigned Opc188, unsigned Opc189, unsigned Opc190, unsigned Opc191, unsigned Opc192, unsigned Opc193, unsigned Opc194, unsigned Opc195, unsigned Opc196, unsigned Opc197, unsigned Opc198, unsigned Opc199, unsigned Opc200, unsigned Opc201, unsigned Opc202, unsigned Opc203, unsigned Opc204, unsigned Opc205, unsigned Opc206, unsigned Opc207, unsigned Opc208, unsigned Opc209, unsigned Opc210, unsigned Opc211, unsigned Opc212, unsigned Opc213, unsigned Opc214, unsigned Opc215, unsigned Opc216, unsigned Opc217, unsigned Opc218, unsigned Opc219, unsigned Opc220, unsigned Opc221, unsigned Opc222, unsigned Opc223, unsigned Opc224, unsigned Opc225, unsigned Opc226, unsigned Opc227, unsigned Opc228, unsigned Opc229, unsigned Opc230, unsigned Opc231, unsigned Opc232, unsigned Opc233, unsigned Opc234, unsigned Opc235, unsigned Opc236, unsigned Opc237, unsigned Opc238, unsigned Opc239, unsigned Opc240, unsigned Opc241, unsigned Opc242, unsigned Opc243, unsigned Opc244, unsigned Opc245, unsigned Opc246, unsigned Opc247, unsigned Opc248, unsigned Opc249, unsigned Opc250, unsigned Opc251, unsigned Opc252, unsigned Opc253, unsigned Opc254, unsigned Opc255, unsigned Opc256, unsigned Opc257, unsigned Opc258, unsigned Opc259, unsigned Opc260, unsigned Opc261, unsigned Opc262, unsigned Opc263, unsigned Opc264, unsigned Opc265, unsigned Opc266, unsigned Opc267, unsigned Opc268, unsigned Opc269, unsigned Opc270, unsigned Opc271, unsigned Opc272, unsigned Opc273, unsigned Opc274, unsigned Opc275, unsigned Opc276, unsigned Opc277, unsigned Opc278, unsigned Opc279, unsigned Opc280, unsigned Opc281, unsigned Opc282, unsigned Opc283, unsigned Opc284, unsigned Opc285, unsigned Opc286, unsigned Opc287, unsigned Opc288, unsigned Opc289, unsigned Opc290, unsigned Opc291, unsigned Opc292, unsigned Opc293, unsigned Opc294, unsigned Opc295, unsigned Opc296, unsigned Opc297, unsigned Opc298, unsigned Opc299, unsigned Opc300, unsigned Opc301, unsigned Opc302, unsigned Opc303, unsigned Opc304, unsigned Opc305, unsigned Opc306, unsigned Opc307, unsigned Opc308, unsigned Opc309, unsigned Opc310, unsigned Opc311, unsigned Opc312, unsigned Opc313, unsigned Opc314, unsigned Opc315, unsigned Opc316, unsigned Opc317, unsigned Opc318, unsigned Opc319, unsigned Opc320, unsigned Opc321, unsigned Opc322, unsigned Opc323, unsigned Opc324, unsigned Opc325, unsigned Opc326, unsigned Opc327, unsigned Opc328, unsigned Opc329, unsigned Opc330, unsigned Opc331, unsigned Opc332, unsigned Opc333, unsigned Opc334, unsigned Opc335, unsigned Opc336, unsigned Opc337, unsigned Opc338, unsigned Opc339, unsigned Opc340, unsigned Opc341, unsigned Opc342, unsigned Opc343, unsigned Opc344, unsigned Opc345, unsigned Opc346, unsigned Opc347, unsigned Opc348, unsigned Opc349, unsigned Opc350, unsigned Opc351, unsigned Opc352, unsigned Opc353, unsigned Opc354, unsigned Opc355, unsigned Opc356, unsigned Opc357, unsigned Opc358, unsigned Opc359, unsigned Opc360, unsigned Opc361, unsigned Opc362, unsigned Opc363, unsigned Opc364, unsigned Opc365, unsigned Opc366, unsigned Opc367, unsigned Opc368, unsigned Opc369, unsigned Opc370, unsigned Opc371, unsigned Opc372, unsigned Opc373, unsigned Opc374, unsigned Opc375, unsigned Opc376, unsigned Opc377, unsigned Opc378, unsigned Opc379, unsigned Opc380, unsigned Opc381, unsigned Opc382, unsigned Opc383, unsigned Opc384, unsigned Opc385, unsigned Opc386, unsigned Opc387, unsigned Opc388, unsigned Opc389, unsigned Opc390, unsigned Opc391, unsigned Opc392, unsigned Opc393, unsigned Opc394, unsigned Opc395, unsigned Opc396, unsigned Opc397, unsigned Opc398, unsigned Opc399, unsigned Opc400, unsigned Opc401, unsigned Opc402, unsigned Opc403, unsigned Opc404, unsigned Opc405, unsigned Opc406, unsigned Opc407, unsigned Opc408, unsigned Opc409, unsigned Opc410, unsigned Opc411, unsigned Opc412, unsigned Opc413, unsigned Opc414, unsigned Opc415, unsigned Opc416, unsigned Opc417, unsigned Opc418, unsigned Opc419, unsigned Opc420, unsigned Opc421, unsigned Opc422, unsigned Opc423, unsigned Opc424, unsigned Opc425, unsigned Opc426, unsigned Opc427, unsigned Opc428, unsigned Opc429, unsigned Opc430, unsigned Opc431, unsigned Opc432, unsigned Opc433, unsigned Opc434, unsigned Opc435, unsigned Opc436, unsigned Opc437, unsigned Opc438, unsigned Opc439, unsigned Opc440, unsigned Opc441, unsigned Opc442, unsigned Opc443, unsigned Opc444, unsigned Opc445, unsigned Opc446, unsigned Opc447, unsigned Opc448, unsigned Opc449, unsigned Opc450, unsigned Opc451, unsigned Opc452, unsigned Opc453, unsigned Opc454, unsigned Opc455, unsigned Opc456, unsigned Opc457, unsigned Opc458, unsigned Opc459, unsigned Opc460, unsigned Opc461, unsigned Opc462, unsigned Opc463, unsigned Opc464, unsigned Opc465, unsigned Opc466, unsigned Opc467, unsigned Opc468, unsigned Opc469, unsigned Opc470, unsigned Opc471, unsigned Opc472, unsigned Opc473, unsigned Opc474, unsigned Opc475, unsigned Opc476, unsigned Opc477, unsigned Opc478, unsigned Opc479, unsigned Opc480, unsigned Opc481, unsigned Opc482, unsigned Opc483, unsigned Opc484, unsigned Opc485, unsigned Opc486, unsigned Opc487, unsigned Opc488, unsigned Opc489, unsigned Opc490, unsigned Opc491, unsigned Opc492, unsigned Opc493, unsigned Opc494, unsigned Opc495, unsigned Opc496, unsigned Opc497, unsigned Opc498, unsigned Opc499, unsigned Opc500, unsigned Opc501, unsigned Opc502, unsigned Opc503, unsigned Opc504, unsigned Opc505, unsigned Opc506, unsigned Opc507, unsigned Opc508, unsigned Opc509, unsigned Opc510, unsigned Opc511, unsigned Opc512, unsigned Opc513, unsigned Opc514, unsigned Opc515, unsigned Opc516, unsigned Opc517, unsigned Opc518, unsigned Opc519, unsigned Opc520, unsigned Opc521, unsigned Opc522, unsigned Opc523, unsigned Opc524, unsigned Opc525, unsigned Opc526, unsigned Opc527, unsigned Opc528, unsigned Opc529, unsigned Opc530, unsigned Opc531, unsigned Opc532, unsigned Opc533, unsigned Opc534, unsigned Opc535, unsigned Opc536, unsigned Opc537, unsigned Opc538, unsigned Opc539, unsigned Opc540, unsigned Opc541, unsigned Opc542, unsigned Opc543, unsigned Opc544, unsigned Opc545, unsigned Opc546, unsigned Opc547, unsigned Opc548, unsigned Opc549, unsigned Opc550, unsigned Opc551, unsigned Opc552, unsigned Opc553, unsigned Opc554, unsigned Opc555, unsigned Opc556, unsigned Opc557, unsigned Opc558, unsigned Opc559, unsigned Opc560, unsigned Opc561, unsigned Opc562, unsigned Opc563, unsigned Opc564, unsigned Opc565, unsigned Opc566, unsigned Opc567, unsigned Opc568, unsigned Opc569, unsigned Opc570, unsigned Opc571, unsigned Opc572, unsigned Opc573, unsigned Opc574, unsigned Opc575, unsigned Opc576, unsigned Opc577, unsigned Opc578, unsigned Opc579, unsigned Opc580, unsigned Opc581, unsigned Opc582, unsigned Opc583, unsigned Opc584, unsigned Opc585, unsigned Opc586, unsigned Opc587, unsigned Opc588, unsigned Opc589, unsigned Opc590, unsigned Opc591, unsigned Opc592, unsigned Opc593, unsigned Opc594, unsigned Opc595, unsigned Opc596, unsigned Opc597, unsigned Opc598, unsigned Opc599, unsigned Opc600, unsigned Opc601, unsigned Opc602, unsigned Opc603, unsigned Opc604, unsigned Opc605, unsigned Opc606, unsigned Opc607, unsigned Opc608, unsigned Opc609, unsigned Opc610, unsigned Opc611, unsigned Opc612, unsigned Opc613, unsigned Opc614, unsigned Opc615, unsigned Opc616, unsigned Opc617, unsigned Opc618, unsigned Opc619, unsigned Opc620, unsigned Opc621, unsigned Opc622, unsigned Opc623, unsigned Opc624, unsigned Opc625, unsigned Opc626, unsigned Opc627, unsigned Opc628, unsigned Opc629, unsigned Opc630, unsigned Opc631, unsigned Opc632, unsigned Opc633, unsigned Opc634, unsigned Opc635, unsigned Opc636, unsigned Opc637, unsigned Opc638, unsigned Opc639, unsigned Opc640, unsigned Opc641, unsigned Opc642, unsigned Opc643, unsigned Opc644, unsigned Opc645, unsigned Opc646, unsigned Opc647, unsigned Opc648, unsigned Opc649, unsigned Opc650, unsigned Opc651, unsigned Opc652, unsigned Opc653, unsigned Opc654, unsigned Opc655, unsigned Opc656, unsigned Opc657, unsigned Opc658, unsigned Opc659, unsigned Opc660, unsigned Opc661, unsigned Opc662, unsigned Opc663, unsigned Opc664, unsigned Opc665, unsigned Opc666, unsigned Opc667, unsigned Opc668, unsigned Opc669, unsigned Opc670, unsigned Opc671, unsigned Opc672, unsigned Opc673, unsigned Opc674, unsigned Opc675, unsigned Opc676, unsigned Opc677, unsigned Opc678, unsigned Opc679, unsigned Opc680, unsigned Opc681, unsigned Opc682, unsigned Opc683, unsigned Opc684, unsigned Opc685, unsigned Opc686, unsigned Opc687, unsigned Opc688, unsigned Opc689, unsigned Opc690, unsigned Opc691, unsigned Opc692, unsigned Opc693, unsigned Opc694, unsigned Opc695, unsigned Opc696, unsigned Opc697, unsigned Opc698, unsigned Opc699, unsigned Opc700, unsigned Opc701, unsigned Opc702, unsigned Opc703, unsigned Opc704, unsigned Opc705, unsigned Opc706, unsigned Opc707, unsigned Opc708, unsigned Opc709, unsigned Opc710, unsigned Opc711, unsigned Opc712, unsigned Opc713, unsigned Opc714, unsigned Opc715, unsigned Opc716, unsigned Opc717, unsigned Opc718, unsigned Opc719, unsigned Opc720, unsigned Opc721, unsigned Opc722, unsigned Opc723, unsigned Opc724, unsigned Opc725, unsigned Opc726, unsigned Opc727, unsigned Opc728, unsigned Opc729, unsigned Opc730, unsigned Opc731, unsigned Opc732, unsigned Opc733, unsigned Opc734, unsigned Opc735, unsigned Opc736, unsigned Opc737, unsigned Opc738, unsigned Opc739, unsigned Opc740, unsigned Opc741, unsigned Opc742, unsigned Opc743, unsigned Opc744, unsigned Opc745, unsigned Opc746, unsigned Opc747, unsigned Opc748, unsigned Opc749, unsigned Opc750, unsigned Opc751, unsigned Opc752, unsigned Opc753, unsigned Opc754, unsigned Opc755, unsigned Opc756, unsigned Opc757, unsigned Opc758, unsigned Opc759, unsigned Opc760, unsigned Opc761, unsigned Opc762, unsigned Opc763, unsigned Opc764, unsigned Opc765, unsigned Opc766, unsigned Opc767, unsigned Opc768, unsigned Opc769, unsigned Opc770, unsigned Opc771, unsigned Opc772, unsigned Opc773, unsigned Opc774, unsigned Opc775, unsigned Opc776, unsigned Opc777, unsigned Opc778, unsigned Opc779, unsigned Opc780, unsigned Opc781, unsigned Opc782, unsigned Opc783, unsigned Opc784, unsigned Opc785, unsigned Opc786, unsigned Opc787, unsigned Opc788, unsigned Opc789, unsigned Opc790, unsigned Opc791, unsigned Opc792, unsigned Opc793, unsigned Opc794, unsigned Opc795, unsigned Opc796, unsigned Opc797, unsigned Opc798, unsigned Opc799, unsigned Opc800, unsigned Opc801, unsigned Opc802, unsigned Opc803, unsigned Opc804, unsigned Opc805, unsigned Opc806, unsigned Opc807, unsigned Opc808, unsigned Opc809, unsigned Opc810, unsigned Opc811, unsigned Opc812, unsigned Opc813, unsigned Opc814, unsigned Opc815, unsigned Opc816, unsigned Opc817, unsigned Opc818, unsigned Opc819, unsigned Opc820, unsigned Opc821, unsigned Opc822, unsigned Opc823, unsigned Opc824, unsigned Opc825, unsigned Opc826, unsigned Opc827, unsigned Opc828, unsigned Opc829, unsigned Opc830, unsigned Opc831, unsigned Opc832, unsigned Opc833, unsigned Opc834, unsigned Opc835, unsigned Opc836, unsigned Opc837, unsigned Opc838, unsigned Opc839, unsigned Opc840, unsigned Opc841, unsigned Opc842, unsigned Opc843, unsigned Opc844, unsigned Opc845, unsigned Opc846, unsigned Opc847, unsigned Opc848, unsigned Opc849, unsigned Opc850, unsigned Opc851, unsigned Opc852, unsigned Opc853, MVT VT0, MVT VT1, MVT VT2, MVT VT3, MVT VT4, MVT VT5, MVT VT6, MVT VT7, MVT VT8, MVT VT9, MVT VT10, MVT VT11, MVT VT12, MVT VT13, MVT VT14, MVT VT15, MVT VT16, MVT VT17, MVT VT18, MVT VT19, MVT VT20, MVT VT21, MVT VT22, MVT VT23, MVT VT24, MVT VT25, MVT VT26, MVT VT27, MVT VT28, MVT VT29, MVT VT30, MVT VT31, MVT VT32, MVT VT33, MVT VT34, MVT VT35, MVT VT36, MVT VT37, MVT VT38, MVT VT39, MVT VT40, MVT VT41, MVT VT42, MVT VT43, MVT VT44, MVT VT45, MVT VT46, MVT VT47, MVT VT48, MVT VT49, MVT VT50, MVT VT51, MVT VT52, MVT VT53, MVT VT54, MVT VT55, MVT VT56, MVT VT57, MVT VT58, MVT VT59, MVT VT60, MVT VT61, MVT VT62, MVT VT63, MVT VT64, MVT VT65, MVT VT66, MVT VT67, MVT VT68, MVT VT69, MVT VT70, MVT VT71, MVT VT72, MVT VT73, MVT VT74, MVT VT75, MVT VT76, MVT VT77, MVT VT78, MVT VT79, MVT VT80, MVT VT81, MVT VT82, MVT VT83, MVT VT84, MVT VT85, MVT VT86, MVT VT87, MVT VT88, MVT VT89, MVT VT90, MVT VT91, MVT VT92, MVT VT93, MVT VT94, MVT VT95, MVT VT96, MVT VT97, MVT VT98, MVT VT99, MVT VT100, MVT VT101, MVT VT102, MVT VT103, MVT VT104, MVT VT105, MVT VT106, MVT VT107, MVT VT108, MVT VT109, MVT VT110, MVT VT111, MVT VT112, MVT VT113, MVT VT114, MVT VT115, MVT VT116, MVT VT117, MVT VT118, MVT VT119, MVT VT120, MVT VT121, MVT VT122, MVT VT123, MVT VT124, MVT VT125, MVT VT126, MVT VT127, MVT VT128, MVT VT129, MVT VT130, MVT VT131, MVT VT132, MVT VT133, MVT VT134, MVT VT135, MVT VT136, MVT VT137, MVT VT138, MVT VT139, MVT VT140, MVT VT141, MVT VT142, MVT VT143, MVT VT144, MVT VT145, MVT VT146, MVT VT147, MVT VT148, MVT VT149, MVT VT150, MVT VT151, MVT VT152, MVT VT153, MVT VT154, MVT VT155, MVT VT156, MVT VT157, MVT VT158, MVT VT159, MVT VT160, MVT VT161, MVT VT162, MVT VT163, MVT VT164, MVT VT165, MVT VT166, MVT VT167, MVT VT168, MVT VT169, MVT VT170, MVT VT171, MVT VT172, MVT VT173, MVT VT174, MVT VT175, MVT VT176, MVT VT177, MVT VT178, MVT VT179, MVT VT180, MVT VT181, MVT VT182, MVT VT183, MVT VT184, MVT VT185, MVT VT186, MVT VT187, MVT VT188, MVT VT189, MVT VT190, MVT VT191, MVT VT192, MVT VT193, MVT VT194, MVT VT195, MVT VT196, MVT VT197, MVT VT198, MVT VT199, MVT VT200, MVT VT201, MVT VT202, MVT VT203, MVT VT204, MVT VT205, MVT VT206, MVT VT207, MVT VT208, MVT VT209, MVT VT210, MVT VT211, MVT VT212, MVT VT213, MVT VT214, MVT VT215, MVT VT216, MVT VT217, MVT VT218, MVT VT219, MVT VT220, MVT VT221, MVT VT222, MVT VT223, MVT VT224, MVT VT225, MVT VT226, MVT VT227, MVT VT228, MVT VT229, MVT VT230, MVT VT231, MVT VT232, MVT VT233, MVT VT234, MVT VT235, MVT VT236, MVT VT237, MVT VT238, MVT VT239, MVT VT240, MVT VT241, MVT VT242, MVT VT243, MVT VT244, MVT VT245, MVT VT246, MVT VT247, MVT VT248, MVT VT249, MVT VT250, MVT VT251, MVT VT252, MVT VT253, MVT VT254, MVT VT255, MVT VT256, MVT VT257, MVT VT258, MVT VT259, MVT VT260, MVT VT261, MVT VT262, MVT VT263, MVT VT264, MVT VT265, MVT VT266, MVT VT267, MVT VT268, MVT VT269, MVT VT270, MVT VT271, MVT VT272, MVT VT273, MVT VT274, MVT VT275, MVT VT276, MVT VT277, MVT VT278, MVT VT279, MVT VT280, MVT VT281, MVT VT282, MVT VT283, MVT VT284, MVT VT285, MVT VT286, MVT VT287, MVT VT288, MVT VT289, MVT VT290, MVT VT291, MVT VT292, MVT VT293, MVT VT294, MVT VT295, MVT VT296, MVT VT297, MVT VT298, MVT VT299, MVT VT300, MVT VT301, MVT VT302, MVT VT303, MVT VT304, MVT VT305, MVT VT306, MVT VT307, MVT VT308, MVT VT309, MVT VT310, MVT VT311, MVT VT312, MVT VT313, MVT VT314, MVT VT315, MVT VT316, MVT VT317, MVT VT318, MVT VT319, MVT VT320, MVT VT321, MVT VT322, MVT VT323, MVT VT324, MVT VT325, MVT VT326, MVT VT327, MVT VT328, MVT VT329, MVT VT330, MVT VT331, MVT VT332, MVT VT333, MVT VT334, MVT VT335, MVT VT336, MVT VT337, MVT VT338, MVT VT339, MVT VT340, MVT VT341, MVT VT342, MVT VT343, MVT VT344, MVT VT345, MVT VT346, MVT VT347, MVT VT348, MVT VT349, MVT VT350, MVT VT351, MVT VT352, MVT VT353, MVT VT354, MVT VT355, MVT VT356, MVT VT357, MVT VT358, MVT VT359, MVT VT360, MVT VT361, MVT VT362, MVT VT363, MVT VT364, MVT VT365, MVT VT366, MVT VT367, MVT VT368, MVT VT369, MVT VT370, MVT VT371, MVT VT372, MVT VT373, MVT VT374, MVT VT375, MVT VT376, MVT VT377, MVT VT378, MVT VT379, MVT VT380, MVT VT381, MVT VT382, MVT VT383, MVT VT384, MVT VT385, MVT VT386, MVT VT387, MVT VT388, MVT VT389, MVT VT390, MVT VT391, MVT VT392, MVT VT393, MVT VT394, MVT VT395, MVT VT396, MVT VT397, MVT VT398, MVT VT399, MVT VT400, MVT VT401, MVT VT402, MVT VT403, MVT VT404, MVT VT405, MVT VT406, MVT VT407, MVT VT408, MVT VT409, MVT VT410, MVT VT411, MVT VT412, MVT VT413, MVT VT414, MVT VT415, MVT VT416, MVT VT417, MVT VT418, MVT VT419, MVT VT420, MVT VT421, MVT VT422, MVT VT423, MVT VT424, MVT VT425, MVT VT426, MVT VT427, MVT VT428, MVT VT429, MVT VT430, MVT VT431, MVT VT432, MVT VT433, MVT VT434, MVT VT435, MVT VT436, MVT VT437, MVT VT438, MVT VT439, MVT VT440, MVT VT441, MVT VT442, MVT VT443, MVT VT444, MVT VT445, MVT VT446, MVT VT447, MVT VT448, MVT VT449, MVT VT450, MVT VT451, MVT VT452, MVT VT453, MVT VT454, MVT VT455, MVT VT456, MVT VT457, MVT VT458, MVT VT459, MVT VT460, MVT VT461, MVT VT462, MVT VT463, MVT VT464, MVT VT465, MVT VT466, MVT VT467, MVT VT468, MVT VT469, MVT VT470, MVT VT471, MVT VT472, MVT VT473, MVT VT474, MVT VT475, MVT VT476, MVT VT477, MVT VT478, MVT VT479, MVT VT480, MVT VT481, MVT VT482, MVT VT483, MVT VT484, MVT VT485, MVT VT486, MVT VT487, MVT VT488, MVT VT489, MVT VT490, MVT VT491, MVT VT492, MVT VT493, MVT VT494, MVT VT495, MVT VT496, MVT VT497, MVT VT498, MVT VT499, MVT VT500, MVT VT501, MVT VT502, MVT VT503, MVT VT504, MVT VT505, MVT VT506, MVT VT507, MVT VT508, MVT VT509, MVT VT510, MVT VT511, MVT VT512, MVT VT513, MVT VT514, MVT VT515, MVT VT516, MVT VT517, MVT VT518, MVT VT519, MVT VT520, MVT VT521, MVT VT522, MVT VT523, MVT VT524, MVT VT525, MVT VT526, MVT VT527, MVT VT528, MVT VT529, MVT VT530, MVT VT531, MVT VT532, MVT VT533, MVT VT534, MVT VT535, MVT VT536, MVT VT537, MVT VT538, MVT VT539, MVT VT540, MVT VT541, MVT VT542, MVT VT543, MVT VT544, MVT VT545, MVT VT546, MVT VT547, MVT VT548, MVT VT549, MVT VT550, MVT VT551, MVT VT552, MVT VT553, MVT VT554, MVT VT555, MVT VT556, MVT VT557, MVT VT558, MVT VT559, MVT VT560, MVT VT561, MVT VT562, MVT VT563, MVT VT564, MVT VT565, MVT VT566, MVT VT567, MVT VT568, MVT VT569, MVT VT570, MVT VT571, MVT VT572, MVT VT573, MVT VT574, MVT VT575, MVT VT576, MVT VT577, MVT VT578, MVT VT579, MVT VT580, MVT VT581, MVT VT582, MVT VT583, MVT VT584, MVT VT585, MVT VT586, MVT VT587, MVT VT588, MVT VT589, MVT VT590, MVT VT591, MVT VT592, MVT VT593, MVT VT594, MVT VT595, MVT VT596, MVT VT597, MVT VT598, MVT VT599, MVT VT600, MVT VT601, MVT VT602, MVT VT603, MVT VT604, MVT VT605, MVT VT606, MVT VT607, MVT VT608, MVT VT609, MVT VT610, MVT VT611, MVT VT612, MVT VT613, MVT VT614, MVT VT615, MVT VT616, MVT VT617, MVT VT618, MVT VT619, MVT VT620, MVT VT621, MVT VT622, MVT VT623, MVT VT624, MVT VT625, MVT VT626, MVT VT627, MVT VT628, MVT VT629, MVT VT630, MVT VT631, MVT VT632, MVT VT633, MVT VT634, MVT VT635, MVT VT636, MVT VT637, MVT VT638, MVT VT639, MVT VT640, MVT VT641, MVT VT642, MVT VT643, MVT VT644, MVT VT645, MVT VT646, MVT VT647, MVT VT648, MVT VT649, MVT VT650, MVT VT651, MVT VT652, MVT VT653, MVT VT654, MVT VT655, MVT VT656, MVT VT657, MVT VT658, MVT VT659, MVT VT660, MVT VT661, MVT VT662, MVT VT663, MVT VT664, MVT VT665, MVT VT666, MVT VT667, MVT VT668, MVT VT669, MVT VT670, MVT VT671, MVT VT672, MVT VT673, MVT VT674, MVT VT675, MVT VT676, MVT VT677, MVT VT678, MVT VT679, MVT VT680, MVT VT681, MVT VT682, MVT VT683, MVT VT684, MVT VT685, MVT VT686, MVT VT687, MVT VT688, MVT VT689, MVT VT690, MVT VT691, MVT VT692, MVT VT693, MVT VT694, MVT VT695, MVT VT696, MVT VT697, MVT VT698, MVT VT699, MVT VT700, MVT VT701, MVT VT702, MVT VT703, MVT VT704, MVT VT705, MVT VT706, MVT VT707, MVT VT708, MVT VT709, MVT VT710, MVT VT711, MVT VT712, MVT VT713, MVT VT714, MVT VT715, MVT VT716, MVT VT717, MVT VT718, MVT VT719, MVT VT720, MVT VT721, MVT VT722, MVT VT723, MVT VT724, MVT VT725, MVT VT726, MVT VT727, MVT VT728, MVT VT729, MVT VT730, MVT VT731, MVT VT732, MVT VT733, MVT VT734, MVT VT735, MVT VT736, MVT VT737, MVT VT738, MVT VT739, MVT VT740, MVT VT741, MVT VT742, MVT VT743, MVT VT744, MVT VT745, MVT VT746, MVT VT747, MVT VT748, MVT VT749, MVT VT750, MVT VT751, MVT VT752, MVT VT753, MVT VT754, MVT VT755, MVT VT756, MVT VT757, MVT VT758, MVT VT759, MVT VT760, MVT VT761, MVT VT762, MVT VT763, MVT VT764, MVT VT765, MVT VT766, MVT VT767, MVT VT768, MVT VT769, MVT VT770, MVT VT771, MVT VT772, MVT VT773, MVT VT774, MVT VT775, MVT VT776, MVT VT777, MVT VT778, MVT VT779, MVT VT780, MVT VT781, MVT VT782, MVT VT783, MVT VT784, MVT VT785, MVT VT786, MVT VT787, MVT VT788, MVT VT789, MVT VT790, MVT VT791, MVT VT792, MVT VT793, MVT VT794, MVT VT795, MVT VT796, MVT VT797, MVT VT798, MVT VT799, MVT VT800, MVT VT801, MVT VT802, MVT VT803, MVT VT804, MVT VT805, MVT VT806, MVT VT807, MVT VT808, MVT VT809, MVT VT810, MVT VT811, MVT VT812, MVT VT813, MVT VT814, MVT VT815, MVT VT816, MVT VT817, MVT VT818, MVT VT819, MVT VT820, MVT VT821, MVT VT822, MVT VT823, MVT VT824, MVT VT825, MVT VT826, MVT VT827, MVT VT828, MVT VT829, MVT VT830, MVT VT831, MVT VT832, MVT VT833, MVT VT834, MVT VT835, MVT VT836, MVT VT837, MVT VT838, MVT VT839, MVT VT840, MVT VT841, MVT VT842, MVT VT843, MVT VT844, MVT VT845, MVT VT846, MVT VT847, MVT VT848, MVT VT849, MVT VT850, MVT VT851, MVT VT852, MVT VT853) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp1(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, N0), 0);
  SDValue Tmp2 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp3(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, Tmp2), 0);
  SDValue Tmp4 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp5(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, Tmp4), 0);
  SDValue Tmp6(CurDAG->getTargetNode(Opc3, N.getDebugLoc(), VT3, Tmp1, Tmp3, Tmp5), 0);
  SDValue Tmp8(CurDAG->getTargetNode(Opc4, N.getDebugLoc(), VT4, N1), 0);
  SDValue Tmp9 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp10(CurDAG->getTargetNode(Opc5, N.getDebugLoc(), VT5, Tmp9), 0);
  SDValue Tmp11 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp12(CurDAG->getTargetNode(Opc6, N.getDebugLoc(), VT6, Tmp11), 0);
  SDValue Tmp13(CurDAG->getTargetNode(Opc7, N.getDebugLoc(), VT7, Tmp8, Tmp10, Tmp12), 0);
  SDValue Tmp14(CurDAG->getTargetNode(Opc8, N.getDebugLoc(), VT8, Tmp6, Tmp13), 0);
  SDValue Tmp16(CurDAG->getTargetNode(Opc9, N.getDebugLoc(), VT9, N0), 0);
  SDValue Tmp17 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp18(CurDAG->getTargetNode(Opc10, N.getDebugLoc(), VT10, Tmp17), 0);
  SDValue Tmp19 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp20(CurDAG->getTargetNode(Opc11, N.getDebugLoc(), VT11, Tmp19), 0);
  SDValue Tmp21(CurDAG->getTargetNode(Opc12, N.getDebugLoc(), VT12, Tmp16, Tmp18, Tmp20), 0);
  SDValue Tmp23(CurDAG->getTargetNode(Opc13, N.getDebugLoc(), VT13, N1), 0);
  SDValue Tmp24 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp25(CurDAG->getTargetNode(Opc14, N.getDebugLoc(), VT14, Tmp23, Tmp24), 0);
  SDValue Tmp26(CurDAG->getTargetNode(Opc15, N.getDebugLoc(), VT15, Tmp21, Tmp25), 0);
  SDValue Tmp27 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp28(CurDAG->getTargetNode(Opc16, N.getDebugLoc(), VT16, Tmp26, Tmp27), 0);
  SDValue Tmp29 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp30(CurDAG->getTargetNode(Opc17, N.getDebugLoc(), VT17, Tmp29), 0);
  SDValue Tmp31 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp32(CurDAG->getTargetNode(Opc18, N.getDebugLoc(), VT18, Tmp31), 0);
  SDValue Tmp33(CurDAG->getTargetNode(Opc19, N.getDebugLoc(), VT19, Tmp28, Tmp30, Tmp32), 0);
  SDValue Tmp35(CurDAG->getTargetNode(Opc20, N.getDebugLoc(), VT20, N0), 0);
  SDValue Tmp36 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp37(CurDAG->getTargetNode(Opc21, N.getDebugLoc(), VT21, Tmp36), 0);
  SDValue Tmp38 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp39(CurDAG->getTargetNode(Opc22, N.getDebugLoc(), VT22, Tmp38), 0);
  SDValue Tmp40(CurDAG->getTargetNode(Opc23, N.getDebugLoc(), VT23, Tmp35, Tmp37, Tmp39), 0);
  SDValue Tmp42(CurDAG->getTargetNode(Opc24, N.getDebugLoc(), VT24, N1), 0);
  SDValue Tmp43 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp44(CurDAG->getTargetNode(Opc25, N.getDebugLoc(), VT25, Tmp43), 0);
  SDValue Tmp45 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp46(CurDAG->getTargetNode(Opc26, N.getDebugLoc(), VT26, Tmp45), 0);
  SDValue Tmp47(CurDAG->getTargetNode(Opc27, N.getDebugLoc(), VT27, Tmp42, Tmp44, Tmp46), 0);
  SDValue Tmp48(CurDAG->getTargetNode(Opc28, N.getDebugLoc(), VT28, Tmp40, Tmp47), 0);
  SDValue Tmp50(CurDAG->getTargetNode(Opc29, N.getDebugLoc(), VT29, N0), 0);
  SDValue Tmp51 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp52(CurDAG->getTargetNode(Opc30, N.getDebugLoc(), VT30, Tmp51), 0);
  SDValue Tmp53 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp54(CurDAG->getTargetNode(Opc31, N.getDebugLoc(), VT31, Tmp53), 0);
  SDValue Tmp55(CurDAG->getTargetNode(Opc32, N.getDebugLoc(), VT32, Tmp50, Tmp52, Tmp54), 0);
  SDValue Tmp57(CurDAG->getTargetNode(Opc33, N.getDebugLoc(), VT33, N1), 0);
  SDValue Tmp58 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp59(CurDAG->getTargetNode(Opc34, N.getDebugLoc(), VT34, Tmp57, Tmp58), 0);
  SDValue Tmp60(CurDAG->getTargetNode(Opc35, N.getDebugLoc(), VT35, Tmp55, Tmp59), 0);
  SDValue Tmp61 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp62(CurDAG->getTargetNode(Opc36, N.getDebugLoc(), VT36, Tmp60, Tmp61), 0);
  SDValue Tmp63 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp64(CurDAG->getTargetNode(Opc37, N.getDebugLoc(), VT37, Tmp63), 0);
  SDValue Tmp65 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp66(CurDAG->getTargetNode(Opc38, N.getDebugLoc(), VT38, Tmp65), 0);
  SDValue Tmp67(CurDAG->getTargetNode(Opc39, N.getDebugLoc(), VT39, Tmp62, Tmp64, Tmp66), 0);
  SDValue Tmp68(CurDAG->getTargetNode(Opc40, N.getDebugLoc(), VT40, Tmp48, Tmp67), 0);
  SDValue Tmp70(CurDAG->getTargetNode(Opc41, N.getDebugLoc(), VT41, N0), 0);
  SDValue Tmp71 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp72(CurDAG->getTargetNode(Opc42, N.getDebugLoc(), VT42, Tmp71), 0);
  SDValue Tmp73 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp74(CurDAG->getTargetNode(Opc43, N.getDebugLoc(), VT43, Tmp73), 0);
  SDValue Tmp75(CurDAG->getTargetNode(Opc44, N.getDebugLoc(), VT44, Tmp70, Tmp72, Tmp74), 0);
  SDValue Tmp77(CurDAG->getTargetNode(Opc45, N.getDebugLoc(), VT45, N1), 0);
  SDValue Tmp78 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp79(CurDAG->getTargetNode(Opc46, N.getDebugLoc(), VT46, Tmp78), 0);
  SDValue Tmp80 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp81(CurDAG->getTargetNode(Opc47, N.getDebugLoc(), VT47, Tmp80), 0);
  SDValue Tmp82(CurDAG->getTargetNode(Opc48, N.getDebugLoc(), VT48, Tmp77, Tmp79, Tmp81), 0);
  SDValue Tmp83(CurDAG->getTargetNode(Opc49, N.getDebugLoc(), VT49, Tmp75, Tmp82), 0);
  SDValue Tmp85(CurDAG->getTargetNode(Opc50, N.getDebugLoc(), VT50, N0), 0);
  SDValue Tmp86 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp87(CurDAG->getTargetNode(Opc51, N.getDebugLoc(), VT51, Tmp86), 0);
  SDValue Tmp88 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp89(CurDAG->getTargetNode(Opc52, N.getDebugLoc(), VT52, Tmp88), 0);
  SDValue Tmp90(CurDAG->getTargetNode(Opc53, N.getDebugLoc(), VT53, Tmp85, Tmp87, Tmp89), 0);
  SDValue Tmp92(CurDAG->getTargetNode(Opc54, N.getDebugLoc(), VT54, N1), 0);
  SDValue Tmp93 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp94(CurDAG->getTargetNode(Opc55, N.getDebugLoc(), VT55, Tmp92, Tmp93), 0);
  SDValue Tmp95(CurDAG->getTargetNode(Opc56, N.getDebugLoc(), VT56, Tmp90, Tmp94), 0);
  SDValue Tmp96 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp97(CurDAG->getTargetNode(Opc57, N.getDebugLoc(), VT57, Tmp95, Tmp96), 0);
  SDValue Tmp98 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp99(CurDAG->getTargetNode(Opc58, N.getDebugLoc(), VT58, Tmp98), 0);
  SDValue Tmp100 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp101(CurDAG->getTargetNode(Opc59, N.getDebugLoc(), VT59, Tmp100), 0);
  SDValue Tmp102(CurDAG->getTargetNode(Opc60, N.getDebugLoc(), VT60, Tmp97, Tmp99, Tmp101), 0);
  SDValue Tmp103(CurDAG->getTargetNode(Opc61, N.getDebugLoc(), VT61, Tmp83, Tmp102), 0);
  SDValue Tmp105(CurDAG->getTargetNode(Opc62, N.getDebugLoc(), VT62, Tmp68, Tmp103, N2), 0);
  SDValue Tmp106(CurDAG->getTargetNode(Opc63, N.getDebugLoc(), VT63, Tmp14, Tmp33, Tmp105), 0);
  SDValue Tmp108(CurDAG->getTargetNode(Opc64, N.getDebugLoc(), VT64, N1), 0);
  SDValue Tmp109 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp110(CurDAG->getTargetNode(Opc65, N.getDebugLoc(), VT65, Tmp109), 0);
  SDValue Tmp111 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp112(CurDAG->getTargetNode(Opc66, N.getDebugLoc(), VT66, Tmp111), 0);
  SDValue Tmp113(CurDAG->getTargetNode(Opc67, N.getDebugLoc(), VT67, Tmp108, Tmp110, Tmp112), 0);
  SDValue Tmp115(CurDAG->getTargetNode(Opc68, N.getDebugLoc(), VT68, N0), 0);
  SDValue Tmp116 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp117(CurDAG->getTargetNode(Opc69, N.getDebugLoc(), VT69, Tmp115, Tmp116), 0);
  SDValue Tmp118(CurDAG->getTargetNode(Opc70, N.getDebugLoc(), VT70, Tmp113, Tmp117), 0);
  SDValue Tmp119 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp120(CurDAG->getTargetNode(Opc71, N.getDebugLoc(), VT71, Tmp118, Tmp119), 0);
  SDValue Tmp121 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp122(CurDAG->getTargetNode(Opc72, N.getDebugLoc(), VT72, Tmp121), 0);
  SDValue Tmp123 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp124(CurDAG->getTargetNode(Opc73, N.getDebugLoc(), VT73, Tmp123), 0);
  SDValue Tmp125(CurDAG->getTargetNode(Opc74, N.getDebugLoc(), VT74, Tmp120, Tmp122, Tmp124), 0);
  SDValue Tmp127(CurDAG->getTargetNode(Opc75, N.getDebugLoc(), VT75, N0), 0);
  SDValue Tmp128 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp129(CurDAG->getTargetNode(Opc76, N.getDebugLoc(), VT76, Tmp128), 0);
  SDValue Tmp130 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp131(CurDAG->getTargetNode(Opc77, N.getDebugLoc(), VT77, Tmp130), 0);
  SDValue Tmp132(CurDAG->getTargetNode(Opc78, N.getDebugLoc(), VT78, Tmp127, Tmp129, Tmp131), 0);
  SDValue Tmp134(CurDAG->getTargetNode(Opc79, N.getDebugLoc(), VT79, N1), 0);
  SDValue Tmp135 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp136(CurDAG->getTargetNode(Opc80, N.getDebugLoc(), VT80, Tmp135), 0);
  SDValue Tmp137 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp138(CurDAG->getTargetNode(Opc81, N.getDebugLoc(), VT81, Tmp137), 0);
  SDValue Tmp139(CurDAG->getTargetNode(Opc82, N.getDebugLoc(), VT82, Tmp134, Tmp136, Tmp138), 0);
  SDValue Tmp140(CurDAG->getTargetNode(Opc83, N.getDebugLoc(), VT83, Tmp132, Tmp139), 0);
  SDValue Tmp142(CurDAG->getTargetNode(Opc84, N.getDebugLoc(), VT84, N0), 0);
  SDValue Tmp143 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp144(CurDAG->getTargetNode(Opc85, N.getDebugLoc(), VT85, Tmp143), 0);
  SDValue Tmp145 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp146(CurDAG->getTargetNode(Opc86, N.getDebugLoc(), VT86, Tmp145), 0);
  SDValue Tmp147(CurDAG->getTargetNode(Opc87, N.getDebugLoc(), VT87, Tmp142, Tmp144, Tmp146), 0);
  SDValue Tmp149(CurDAG->getTargetNode(Opc88, N.getDebugLoc(), VT88, N1), 0);
  SDValue Tmp150 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp151(CurDAG->getTargetNode(Opc89, N.getDebugLoc(), VT89, Tmp149, Tmp150), 0);
  SDValue Tmp152(CurDAG->getTargetNode(Opc90, N.getDebugLoc(), VT90, Tmp147, Tmp151), 0);
  SDValue Tmp153 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp154(CurDAG->getTargetNode(Opc91, N.getDebugLoc(), VT91, Tmp152, Tmp153), 0);
  SDValue Tmp155 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp156(CurDAG->getTargetNode(Opc92, N.getDebugLoc(), VT92, Tmp155), 0);
  SDValue Tmp157 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp158(CurDAG->getTargetNode(Opc93, N.getDebugLoc(), VT93, Tmp157), 0);
  SDValue Tmp159(CurDAG->getTargetNode(Opc94, N.getDebugLoc(), VT94, Tmp154, Tmp156, Tmp158), 0);
  SDValue Tmp161(CurDAG->getTargetNode(Opc95, N.getDebugLoc(), VT95, N0), 0);
  SDValue Tmp162 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp163(CurDAG->getTargetNode(Opc96, N.getDebugLoc(), VT96, Tmp162), 0);
  SDValue Tmp164 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp165(CurDAG->getTargetNode(Opc97, N.getDebugLoc(), VT97, Tmp164), 0);
  SDValue Tmp166(CurDAG->getTargetNode(Opc98, N.getDebugLoc(), VT98, Tmp161, Tmp163, Tmp165), 0);
  SDValue Tmp168(CurDAG->getTargetNode(Opc99, N.getDebugLoc(), VT99, N1), 0);
  SDValue Tmp169 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp170(CurDAG->getTargetNode(Opc100, N.getDebugLoc(), VT100, Tmp169), 0);
  SDValue Tmp171 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp172(CurDAG->getTargetNode(Opc101, N.getDebugLoc(), VT101, Tmp171), 0);
  SDValue Tmp173(CurDAG->getTargetNode(Opc102, N.getDebugLoc(), VT102, Tmp168, Tmp170, Tmp172), 0);
  SDValue Tmp174(CurDAG->getTargetNode(Opc103, N.getDebugLoc(), VT103, Tmp166, Tmp173), 0);
  SDValue Tmp176(CurDAG->getTargetNode(Opc104, N.getDebugLoc(), VT104, N0), 0);
  SDValue Tmp177 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp178(CurDAG->getTargetNode(Opc105, N.getDebugLoc(), VT105, Tmp177), 0);
  SDValue Tmp179 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp180(CurDAG->getTargetNode(Opc106, N.getDebugLoc(), VT106, Tmp179), 0);
  SDValue Tmp181(CurDAG->getTargetNode(Opc107, N.getDebugLoc(), VT107, Tmp176, Tmp178, Tmp180), 0);
  SDValue Tmp183(CurDAG->getTargetNode(Opc108, N.getDebugLoc(), VT108, N1), 0);
  SDValue Tmp184 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp185(CurDAG->getTargetNode(Opc109, N.getDebugLoc(), VT109, Tmp183, Tmp184), 0);
  SDValue Tmp186(CurDAG->getTargetNode(Opc110, N.getDebugLoc(), VT110, Tmp181, Tmp185), 0);
  SDValue Tmp187 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp188(CurDAG->getTargetNode(Opc111, N.getDebugLoc(), VT111, Tmp186, Tmp187), 0);
  SDValue Tmp189 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp190(CurDAG->getTargetNode(Opc112, N.getDebugLoc(), VT112, Tmp189), 0);
  SDValue Tmp191 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp192(CurDAG->getTargetNode(Opc113, N.getDebugLoc(), VT113, Tmp191), 0);
  SDValue Tmp193(CurDAG->getTargetNode(Opc114, N.getDebugLoc(), VT114, Tmp188, Tmp190, Tmp192), 0);
  SDValue Tmp194(CurDAG->getTargetNode(Opc115, N.getDebugLoc(), VT115, Tmp174, Tmp193), 0);
  SDValue Tmp196(CurDAG->getTargetNode(Opc116, N.getDebugLoc(), VT116, N0), 0);
  SDValue Tmp197 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp198(CurDAG->getTargetNode(Opc117, N.getDebugLoc(), VT117, Tmp197), 0);
  SDValue Tmp199 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp200(CurDAG->getTargetNode(Opc118, N.getDebugLoc(), VT118, Tmp199), 0);
  SDValue Tmp201(CurDAG->getTargetNode(Opc119, N.getDebugLoc(), VT119, Tmp196, Tmp198, Tmp200), 0);
  SDValue Tmp203(CurDAG->getTargetNode(Opc120, N.getDebugLoc(), VT120, N1), 0);
  SDValue Tmp204 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp205(CurDAG->getTargetNode(Opc121, N.getDebugLoc(), VT121, Tmp204), 0);
  SDValue Tmp206 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp207(CurDAG->getTargetNode(Opc122, N.getDebugLoc(), VT122, Tmp206), 0);
  SDValue Tmp208(CurDAG->getTargetNode(Opc123, N.getDebugLoc(), VT123, Tmp203, Tmp205, Tmp207), 0);
  SDValue Tmp209(CurDAG->getTargetNode(Opc124, N.getDebugLoc(), VT124, Tmp201, Tmp208), 0);
  SDValue Tmp211(CurDAG->getTargetNode(Opc125, N.getDebugLoc(), VT125, N0), 0);
  SDValue Tmp212 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp213(CurDAG->getTargetNode(Opc126, N.getDebugLoc(), VT126, Tmp212), 0);
  SDValue Tmp214 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp215(CurDAG->getTargetNode(Opc127, N.getDebugLoc(), VT127, Tmp214), 0);
  SDValue Tmp216(CurDAG->getTargetNode(Opc128, N.getDebugLoc(), VT128, Tmp211, Tmp213, Tmp215), 0);
  SDValue Tmp218(CurDAG->getTargetNode(Opc129, N.getDebugLoc(), VT129, N1), 0);
  SDValue Tmp219 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp220(CurDAG->getTargetNode(Opc130, N.getDebugLoc(), VT130, Tmp218, Tmp219), 0);
  SDValue Tmp221(CurDAG->getTargetNode(Opc131, N.getDebugLoc(), VT131, Tmp216, Tmp220), 0);
  SDValue Tmp222 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp223(CurDAG->getTargetNode(Opc132, N.getDebugLoc(), VT132, Tmp221, Tmp222), 0);
  SDValue Tmp224 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp225(CurDAG->getTargetNode(Opc133, N.getDebugLoc(), VT133, Tmp224), 0);
  SDValue Tmp226 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp227(CurDAG->getTargetNode(Opc134, N.getDebugLoc(), VT134, Tmp226), 0);
  SDValue Tmp228(CurDAG->getTargetNode(Opc135, N.getDebugLoc(), VT135, Tmp223, Tmp225, Tmp227), 0);
  SDValue Tmp229(CurDAG->getTargetNode(Opc136, N.getDebugLoc(), VT136, Tmp209, Tmp228), 0);
  SDValue Tmp231(CurDAG->getTargetNode(Opc137, N.getDebugLoc(), VT137, Tmp194, Tmp229, N2), 0);
  SDValue Tmp232(CurDAG->getTargetNode(Opc138, N.getDebugLoc(), VT138, Tmp140, Tmp159, Tmp231), 0);
  SDValue Tmp234(CurDAG->getTargetNode(Opc139, N.getDebugLoc(), VT139, N1), 0);
  SDValue Tmp235 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp236(CurDAG->getTargetNode(Opc140, N.getDebugLoc(), VT140, Tmp235), 0);
  SDValue Tmp237 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp238(CurDAG->getTargetNode(Opc141, N.getDebugLoc(), VT141, Tmp237), 0);
  SDValue Tmp239(CurDAG->getTargetNode(Opc142, N.getDebugLoc(), VT142, Tmp234, Tmp236, Tmp238), 0);
  SDValue Tmp241(CurDAG->getTargetNode(Opc143, N.getDebugLoc(), VT143, N0), 0);
  SDValue Tmp242 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp243(CurDAG->getTargetNode(Opc144, N.getDebugLoc(), VT144, Tmp241, Tmp242), 0);
  SDValue Tmp244(CurDAG->getTargetNode(Opc145, N.getDebugLoc(), VT145, Tmp239, Tmp243), 0);
  SDValue Tmp245 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp246(CurDAG->getTargetNode(Opc146, N.getDebugLoc(), VT146, Tmp244, Tmp245), 0);
  SDValue Tmp247 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp248(CurDAG->getTargetNode(Opc147, N.getDebugLoc(), VT147, Tmp247), 0);
  SDValue Tmp249 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp250(CurDAG->getTargetNode(Opc148, N.getDebugLoc(), VT148, Tmp249), 0);
  SDValue Tmp251(CurDAG->getTargetNode(Opc149, N.getDebugLoc(), VT149, Tmp246, Tmp248, Tmp250), 0);
  SDValue Tmp252(CurDAG->getTargetNode(Opc150, N.getDebugLoc(), VT150, Tmp232, Tmp251), 0);
  SDValue Tmp254(CurDAG->getTargetNode(Opc151, N.getDebugLoc(), VT151, N0), 0);
  SDValue Tmp255 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp256(CurDAG->getTargetNode(Opc152, N.getDebugLoc(), VT152, Tmp255), 0);
  SDValue Tmp257 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp258(CurDAG->getTargetNode(Opc153, N.getDebugLoc(), VT153, Tmp257), 0);
  SDValue Tmp259(CurDAG->getTargetNode(Opc154, N.getDebugLoc(), VT154, Tmp254, Tmp256, Tmp258), 0);
  SDValue Tmp261(CurDAG->getTargetNode(Opc155, N.getDebugLoc(), VT155, N1), 0);
  SDValue Tmp262 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp263(CurDAG->getTargetNode(Opc156, N.getDebugLoc(), VT156, Tmp262), 0);
  SDValue Tmp264 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp265(CurDAG->getTargetNode(Opc157, N.getDebugLoc(), VT157, Tmp264), 0);
  SDValue Tmp266(CurDAG->getTargetNode(Opc158, N.getDebugLoc(), VT158, Tmp261, Tmp263, Tmp265), 0);
  SDValue Tmp267(CurDAG->getTargetNode(Opc159, N.getDebugLoc(), VT159, Tmp259, Tmp266), 0);
  SDValue Tmp269(CurDAG->getTargetNode(Opc160, N.getDebugLoc(), VT160, N0), 0);
  SDValue Tmp270 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp271(CurDAG->getTargetNode(Opc161, N.getDebugLoc(), VT161, Tmp270), 0);
  SDValue Tmp272 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp273(CurDAG->getTargetNode(Opc162, N.getDebugLoc(), VT162, Tmp272), 0);
  SDValue Tmp274(CurDAG->getTargetNode(Opc163, N.getDebugLoc(), VT163, Tmp269, Tmp271, Tmp273), 0);
  SDValue Tmp276(CurDAG->getTargetNode(Opc164, N.getDebugLoc(), VT164, N1), 0);
  SDValue Tmp277 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp278(CurDAG->getTargetNode(Opc165, N.getDebugLoc(), VT165, Tmp276, Tmp277), 0);
  SDValue Tmp279(CurDAG->getTargetNode(Opc166, N.getDebugLoc(), VT166, Tmp274, Tmp278), 0);
  SDValue Tmp280 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp281(CurDAG->getTargetNode(Opc167, N.getDebugLoc(), VT167, Tmp279, Tmp280), 0);
  SDValue Tmp282 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp283(CurDAG->getTargetNode(Opc168, N.getDebugLoc(), VT168, Tmp282), 0);
  SDValue Tmp284 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp285(CurDAG->getTargetNode(Opc169, N.getDebugLoc(), VT169, Tmp284), 0);
  SDValue Tmp286(CurDAG->getTargetNode(Opc170, N.getDebugLoc(), VT170, Tmp281, Tmp283, Tmp285), 0);
  SDValue Tmp288(CurDAG->getTargetNode(Opc171, N.getDebugLoc(), VT171, N0), 0);
  SDValue Tmp289 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp290(CurDAG->getTargetNode(Opc172, N.getDebugLoc(), VT172, Tmp289), 0);
  SDValue Tmp291 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp292(CurDAG->getTargetNode(Opc173, N.getDebugLoc(), VT173, Tmp291), 0);
  SDValue Tmp293(CurDAG->getTargetNode(Opc174, N.getDebugLoc(), VT174, Tmp288, Tmp290, Tmp292), 0);
  SDValue Tmp295(CurDAG->getTargetNode(Opc175, N.getDebugLoc(), VT175, N1), 0);
  SDValue Tmp296 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp297(CurDAG->getTargetNode(Opc176, N.getDebugLoc(), VT176, Tmp296), 0);
  SDValue Tmp298 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp299(CurDAG->getTargetNode(Opc177, N.getDebugLoc(), VT177, Tmp298), 0);
  SDValue Tmp300(CurDAG->getTargetNode(Opc178, N.getDebugLoc(), VT178, Tmp295, Tmp297, Tmp299), 0);
  SDValue Tmp301(CurDAG->getTargetNode(Opc179, N.getDebugLoc(), VT179, Tmp293, Tmp300), 0);
  SDValue Tmp303(CurDAG->getTargetNode(Opc180, N.getDebugLoc(), VT180, N0), 0);
  SDValue Tmp304 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp305(CurDAG->getTargetNode(Opc181, N.getDebugLoc(), VT181, Tmp304), 0);
  SDValue Tmp306 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp307(CurDAG->getTargetNode(Opc182, N.getDebugLoc(), VT182, Tmp306), 0);
  SDValue Tmp308(CurDAG->getTargetNode(Opc183, N.getDebugLoc(), VT183, Tmp303, Tmp305, Tmp307), 0);
  SDValue Tmp310(CurDAG->getTargetNode(Opc184, N.getDebugLoc(), VT184, N1), 0);
  SDValue Tmp311 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp312(CurDAG->getTargetNode(Opc185, N.getDebugLoc(), VT185, Tmp310, Tmp311), 0);
  SDValue Tmp313(CurDAG->getTargetNode(Opc186, N.getDebugLoc(), VT186, Tmp308, Tmp312), 0);
  SDValue Tmp314 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp315(CurDAG->getTargetNode(Opc187, N.getDebugLoc(), VT187, Tmp313, Tmp314), 0);
  SDValue Tmp316 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp317(CurDAG->getTargetNode(Opc188, N.getDebugLoc(), VT188, Tmp316), 0);
  SDValue Tmp318 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp319(CurDAG->getTargetNode(Opc189, N.getDebugLoc(), VT189, Tmp318), 0);
  SDValue Tmp320(CurDAG->getTargetNode(Opc190, N.getDebugLoc(), VT190, Tmp315, Tmp317, Tmp319), 0);
  SDValue Tmp321(CurDAG->getTargetNode(Opc191, N.getDebugLoc(), VT191, Tmp301, Tmp320), 0);
  SDValue Tmp323(CurDAG->getTargetNode(Opc192, N.getDebugLoc(), VT192, N0), 0);
  SDValue Tmp324 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp325(CurDAG->getTargetNode(Opc193, N.getDebugLoc(), VT193, Tmp324), 0);
  SDValue Tmp326 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp327(CurDAG->getTargetNode(Opc194, N.getDebugLoc(), VT194, Tmp326), 0);
  SDValue Tmp328(CurDAG->getTargetNode(Opc195, N.getDebugLoc(), VT195, Tmp323, Tmp325, Tmp327), 0);
  SDValue Tmp330(CurDAG->getTargetNode(Opc196, N.getDebugLoc(), VT196, N1), 0);
  SDValue Tmp331 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp332(CurDAG->getTargetNode(Opc197, N.getDebugLoc(), VT197, Tmp331), 0);
  SDValue Tmp333 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp334(CurDAG->getTargetNode(Opc198, N.getDebugLoc(), VT198, Tmp333), 0);
  SDValue Tmp335(CurDAG->getTargetNode(Opc199, N.getDebugLoc(), VT199, Tmp330, Tmp332, Tmp334), 0);
  SDValue Tmp336(CurDAG->getTargetNode(Opc200, N.getDebugLoc(), VT200, Tmp328, Tmp335), 0);
  SDValue Tmp338(CurDAG->getTargetNode(Opc201, N.getDebugLoc(), VT201, N0), 0);
  SDValue Tmp339 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp340(CurDAG->getTargetNode(Opc202, N.getDebugLoc(), VT202, Tmp339), 0);
  SDValue Tmp341 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp342(CurDAG->getTargetNode(Opc203, N.getDebugLoc(), VT203, Tmp341), 0);
  SDValue Tmp343(CurDAG->getTargetNode(Opc204, N.getDebugLoc(), VT204, Tmp338, Tmp340, Tmp342), 0);
  SDValue Tmp345(CurDAG->getTargetNode(Opc205, N.getDebugLoc(), VT205, N1), 0);
  SDValue Tmp346 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp347(CurDAG->getTargetNode(Opc206, N.getDebugLoc(), VT206, Tmp345, Tmp346), 0);
  SDValue Tmp348(CurDAG->getTargetNode(Opc207, N.getDebugLoc(), VT207, Tmp343, Tmp347), 0);
  SDValue Tmp349 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp350(CurDAG->getTargetNode(Opc208, N.getDebugLoc(), VT208, Tmp348, Tmp349), 0);
  SDValue Tmp351 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp352(CurDAG->getTargetNode(Opc209, N.getDebugLoc(), VT209, Tmp351), 0);
  SDValue Tmp353 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp354(CurDAG->getTargetNode(Opc210, N.getDebugLoc(), VT210, Tmp353), 0);
  SDValue Tmp355(CurDAG->getTargetNode(Opc211, N.getDebugLoc(), VT211, Tmp350, Tmp352, Tmp354), 0);
  SDValue Tmp356(CurDAG->getTargetNode(Opc212, N.getDebugLoc(), VT212, Tmp336, Tmp355), 0);
  SDValue Tmp358(CurDAG->getTargetNode(Opc213, N.getDebugLoc(), VT213, Tmp321, Tmp356, N2), 0);
  SDValue Tmp359(CurDAG->getTargetNode(Opc214, N.getDebugLoc(), VT214, Tmp267, Tmp286, Tmp358), 0);
  SDValue Tmp361(CurDAG->getTargetNode(Opc215, N.getDebugLoc(), VT215, N1), 0);
  SDValue Tmp362 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp363(CurDAG->getTargetNode(Opc216, N.getDebugLoc(), VT216, Tmp362), 0);
  SDValue Tmp364 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp365(CurDAG->getTargetNode(Opc217, N.getDebugLoc(), VT217, Tmp364), 0);
  SDValue Tmp366(CurDAG->getTargetNode(Opc218, N.getDebugLoc(), VT218, Tmp361, Tmp363, Tmp365), 0);
  SDValue Tmp368(CurDAG->getTargetNode(Opc219, N.getDebugLoc(), VT219, N0), 0);
  SDValue Tmp369 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp370(CurDAG->getTargetNode(Opc220, N.getDebugLoc(), VT220, Tmp368, Tmp369), 0);
  SDValue Tmp371(CurDAG->getTargetNode(Opc221, N.getDebugLoc(), VT221, Tmp366, Tmp370), 0);
  SDValue Tmp372 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp373(CurDAG->getTargetNode(Opc222, N.getDebugLoc(), VT222, Tmp371, Tmp372), 0);
  SDValue Tmp374 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp375(CurDAG->getTargetNode(Opc223, N.getDebugLoc(), VT223, Tmp374), 0);
  SDValue Tmp376 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp377(CurDAG->getTargetNode(Opc224, N.getDebugLoc(), VT224, Tmp376), 0);
  SDValue Tmp378(CurDAG->getTargetNode(Opc225, N.getDebugLoc(), VT225, Tmp373, Tmp375, Tmp377), 0);
  SDValue Tmp379(CurDAG->getTargetNode(Opc226, N.getDebugLoc(), VT226, Tmp359, Tmp378), 0);
  SDValue Tmp381(CurDAG->getTargetNode(Opc227, N.getDebugLoc(), VT227, Tmp252, Tmp379, N2), 0);
  SDValue Tmp382(CurDAG->getTargetNode(Opc228, N.getDebugLoc(), VT228, Tmp106, Tmp125, Tmp381), 0);
  SDValue Tmp384(CurDAG->getTargetNode(Opc229, N.getDebugLoc(), VT229, N1), 0);
  SDValue Tmp385 = CurDAG->getTargetConstant(0x4ULL, MVT::i32);
  SDValue Tmp386(CurDAG->getTargetNode(Opc230, N.getDebugLoc(), VT230, Tmp384, Tmp385), 0);
  SDValue Tmp388(CurDAG->getTargetNode(Opc231, N.getDebugLoc(), VT231, N0), 0);
  SDValue Tmp389 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp390(CurDAG->getTargetNode(Opc232, N.getDebugLoc(), VT232, Tmp389), 0);
  SDValue Tmp391 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp392(CurDAG->getTargetNode(Opc233, N.getDebugLoc(), VT233, Tmp391), 0);
  SDValue Tmp393(CurDAG->getTargetNode(Opc234, N.getDebugLoc(), VT234, Tmp388, Tmp390, Tmp392), 0);
  SDValue Tmp394(CurDAG->getTargetNode(Opc235, N.getDebugLoc(), VT235, Tmp386, Tmp393), 0);
  SDValue Tmp396(CurDAG->getTargetNode(Opc236, N.getDebugLoc(), VT236, N0), 0);
  SDValue Tmp397 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp398(CurDAG->getTargetNode(Opc237, N.getDebugLoc(), VT237, Tmp397), 0);
  SDValue Tmp399 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp400(CurDAG->getTargetNode(Opc238, N.getDebugLoc(), VT238, Tmp399), 0);
  SDValue Tmp401(CurDAG->getTargetNode(Opc239, N.getDebugLoc(), VT239, Tmp396, Tmp398, Tmp400), 0);
  SDValue Tmp403(CurDAG->getTargetNode(Opc240, N.getDebugLoc(), VT240, N1), 0);
  SDValue Tmp404 = CurDAG->getTargetConstant(0x4ULL, MVT::i32);
  SDValue Tmp405(CurDAG->getTargetNode(Opc241, N.getDebugLoc(), VT241, Tmp403, Tmp404), 0);
  SDValue Tmp406(CurDAG->getTargetNode(Opc242, N.getDebugLoc(), VT242, Tmp401, Tmp405), 0);
  SDValue Tmp407(CurDAG->getTargetNode(Opc243, N.getDebugLoc(), VT243, Tmp394, Tmp406), 0);
  SDValue Tmp409(CurDAG->getTargetNode(Opc244, N.getDebugLoc(), VT244, N1), 0);
  SDValue Tmp410 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp411(CurDAG->getTargetNode(Opc245, N.getDebugLoc(), VT245, Tmp410), 0);
  SDValue Tmp412 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp413(CurDAG->getTargetNode(Opc246, N.getDebugLoc(), VT246, Tmp412), 0);
  SDValue Tmp414(CurDAG->getTargetNode(Opc247, N.getDebugLoc(), VT247, Tmp409, Tmp411, Tmp413), 0);
  SDValue Tmp416(CurDAG->getTargetNode(Opc248, N.getDebugLoc(), VT248, N0), 0);
  SDValue Tmp417 = CurDAG->getTargetConstant(0x4ULL, MVT::i32);
  SDValue Tmp418(CurDAG->getTargetNode(Opc249, N.getDebugLoc(), VT249, Tmp416, Tmp417), 0);
  SDValue Tmp419(CurDAG->getTargetNode(Opc250, N.getDebugLoc(), VT250, Tmp414, Tmp418), 0);
  SDValue Tmp421(CurDAG->getTargetNode(Opc251, N.getDebugLoc(), VT251, N0), 0);
  SDValue Tmp422 = CurDAG->getTargetConstant(0x4ULL, MVT::i32);
  SDValue Tmp423(CurDAG->getTargetNode(Opc252, N.getDebugLoc(), VT252, Tmp421, Tmp422), 0);
  SDValue Tmp425(CurDAG->getTargetNode(Opc253, N.getDebugLoc(), VT253, N1), 0);
  SDValue Tmp426 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp427(CurDAG->getTargetNode(Opc254, N.getDebugLoc(), VT254, Tmp426), 0);
  SDValue Tmp428 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp429(CurDAG->getTargetNode(Opc255, N.getDebugLoc(), VT255, Tmp428), 0);
  SDValue Tmp430(CurDAG->getTargetNode(Opc256, N.getDebugLoc(), VT256, Tmp425, Tmp427, Tmp429), 0);
  SDValue Tmp431(CurDAG->getTargetNode(Opc257, N.getDebugLoc(), VT257, Tmp423, Tmp430), 0);
  SDValue Tmp433(CurDAG->getTargetNode(Opc258, N.getDebugLoc(), VT258, N0), 0);
  SDValue Tmp434 = CurDAG->getTargetConstant(0x4ULL, MVT::i32);
  SDValue Tmp435(CurDAG->getTargetNode(Opc259, N.getDebugLoc(), VT259, Tmp433, Tmp434), 0);
  SDValue Tmp437(CurDAG->getTargetNode(Opc260, N.getDebugLoc(), VT260, N1), 0);
  SDValue Tmp438 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp439(CurDAG->getTargetNode(Opc261, N.getDebugLoc(), VT261, Tmp438), 0);
  SDValue Tmp440 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp441(CurDAG->getTargetNode(Opc262, N.getDebugLoc(), VT262, Tmp440), 0);
  SDValue Tmp442(CurDAG->getTargetNode(Opc263, N.getDebugLoc(), VT263, Tmp437, Tmp439, Tmp441), 0);
  SDValue Tmp443(CurDAG->getTargetNode(Opc264, N.getDebugLoc(), VT264, Tmp435, Tmp442), 0);
  SDValue Tmp445(CurDAG->getTargetNode(Opc265, N.getDebugLoc(), VT265, N0), 0);
  SDValue Tmp446 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp447(CurDAG->getTargetNode(Opc266, N.getDebugLoc(), VT266, Tmp445, Tmp446), 0);
  SDValue Tmp449(CurDAG->getTargetNode(Opc267, N.getDebugLoc(), VT267, N1), 0);
  SDValue Tmp450 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp451(CurDAG->getTargetNode(Opc268, N.getDebugLoc(), VT268, Tmp449, Tmp450), 0);
  SDValue Tmp452(CurDAG->getTargetNode(Opc269, N.getDebugLoc(), VT269, Tmp447, Tmp451), 0);
  SDValue Tmp454(CurDAG->getTargetNode(Opc270, N.getDebugLoc(), VT270, N0), 0);
  SDValue Tmp455 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp456(CurDAG->getTargetNode(Opc271, N.getDebugLoc(), VT271, Tmp454, Tmp455), 0);
  SDValue Tmp458(CurDAG->getTargetNode(Opc272, N.getDebugLoc(), VT272, N1), 0);
  SDValue Tmp459 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp460(CurDAG->getTargetNode(Opc273, N.getDebugLoc(), VT273, Tmp458, Tmp459), 0);
  SDValue Tmp461(CurDAG->getTargetNode(Opc274, N.getDebugLoc(), VT274, Tmp456, Tmp460), 0);
  SDValue Tmp462(CurDAG->getTargetNode(Opc275, N.getDebugLoc(), VT275, Tmp452, Tmp461), 0);
  SDValue Tmp463(CurDAG->getTargetNode(Opc276, N.getDebugLoc(), VT276, Tmp443, Tmp462), 0);
  SDValue Tmp464(CurDAG->getTargetNode(Opc277, N.getDebugLoc(), VT277, Tmp431, Tmp463), 0);
  SDValue Tmp465(CurDAG->getTargetNode(Opc278, N.getDebugLoc(), VT278, Tmp419, Tmp464), 0);
  SDValue Tmp466(CurDAG->getTargetNode(Opc279, N.getDebugLoc(), VT279, Tmp407, Tmp465), 0);
  SDValue Tmp467 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp468(CurDAG->getTargetNode(Opc280, N.getDebugLoc(), VT280, Tmp467), 0);
  SDValue Tmp469 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp470(CurDAG->getTargetNode(Opc281, N.getDebugLoc(), VT281, Tmp469), 0);
  SDValue Tmp471(CurDAG->getTargetNode(Opc282, N.getDebugLoc(), VT282, Tmp466, Tmp468, Tmp470), 0);
  SDValue Tmp473(CurDAG->getTargetNode(Opc283, N.getDebugLoc(), VT283, N0), 0);
  SDValue Tmp474 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp475(CurDAG->getTargetNode(Opc284, N.getDebugLoc(), VT284, Tmp474), 0);
  SDValue Tmp476 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp477(CurDAG->getTargetNode(Opc285, N.getDebugLoc(), VT285, Tmp476), 0);
  SDValue Tmp478(CurDAG->getTargetNode(Opc286, N.getDebugLoc(), VT286, Tmp473, Tmp475, Tmp477), 0);
  SDValue Tmp480(CurDAG->getTargetNode(Opc287, N.getDebugLoc(), VT287, N1), 0);
  SDValue Tmp481 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp482(CurDAG->getTargetNode(Opc288, N.getDebugLoc(), VT288, Tmp481), 0);
  SDValue Tmp483 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp484(CurDAG->getTargetNode(Opc289, N.getDebugLoc(), VT289, Tmp483), 0);
  SDValue Tmp485(CurDAG->getTargetNode(Opc290, N.getDebugLoc(), VT290, Tmp480, Tmp482, Tmp484), 0);
  SDValue Tmp486(CurDAG->getTargetNode(Opc291, N.getDebugLoc(), VT291, Tmp478, Tmp485), 0);
  SDValue Tmp488(CurDAG->getTargetNode(Opc292, N.getDebugLoc(), VT292, N0), 0);
  SDValue Tmp489 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp490(CurDAG->getTargetNode(Opc293, N.getDebugLoc(), VT293, Tmp489), 0);
  SDValue Tmp491 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp492(CurDAG->getTargetNode(Opc294, N.getDebugLoc(), VT294, Tmp491), 0);
  SDValue Tmp493(CurDAG->getTargetNode(Opc295, N.getDebugLoc(), VT295, Tmp488, Tmp490, Tmp492), 0);
  SDValue Tmp495(CurDAG->getTargetNode(Opc296, N.getDebugLoc(), VT296, N1), 0);
  SDValue Tmp496 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp497(CurDAG->getTargetNode(Opc297, N.getDebugLoc(), VT297, Tmp495, Tmp496), 0);
  SDValue Tmp498(CurDAG->getTargetNode(Opc298, N.getDebugLoc(), VT298, Tmp493, Tmp497), 0);
  SDValue Tmp499 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp500(CurDAG->getTargetNode(Opc299, N.getDebugLoc(), VT299, Tmp498, Tmp499), 0);
  SDValue Tmp501 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp502(CurDAG->getTargetNode(Opc300, N.getDebugLoc(), VT300, Tmp501), 0);
  SDValue Tmp503 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp504(CurDAG->getTargetNode(Opc301, N.getDebugLoc(), VT301, Tmp503), 0);
  SDValue Tmp505(CurDAG->getTargetNode(Opc302, N.getDebugLoc(), VT302, Tmp500, Tmp502, Tmp504), 0);
  SDValue Tmp507(CurDAG->getTargetNode(Opc303, N.getDebugLoc(), VT303, N0), 0);
  SDValue Tmp508 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp509(CurDAG->getTargetNode(Opc304, N.getDebugLoc(), VT304, Tmp508), 0);
  SDValue Tmp510 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp511(CurDAG->getTargetNode(Opc305, N.getDebugLoc(), VT305, Tmp510), 0);
  SDValue Tmp512(CurDAG->getTargetNode(Opc306, N.getDebugLoc(), VT306, Tmp507, Tmp509, Tmp511), 0);
  SDValue Tmp514(CurDAG->getTargetNode(Opc307, N.getDebugLoc(), VT307, N1), 0);
  SDValue Tmp515 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp516(CurDAG->getTargetNode(Opc308, N.getDebugLoc(), VT308, Tmp515), 0);
  SDValue Tmp517 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp518(CurDAG->getTargetNode(Opc309, N.getDebugLoc(), VT309, Tmp517), 0);
  SDValue Tmp519(CurDAG->getTargetNode(Opc310, N.getDebugLoc(), VT310, Tmp514, Tmp516, Tmp518), 0);
  SDValue Tmp520(CurDAG->getTargetNode(Opc311, N.getDebugLoc(), VT311, Tmp512, Tmp519), 0);
  SDValue Tmp522(CurDAG->getTargetNode(Opc312, N.getDebugLoc(), VT312, N0), 0);
  SDValue Tmp523 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp524(CurDAG->getTargetNode(Opc313, N.getDebugLoc(), VT313, Tmp523), 0);
  SDValue Tmp525 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp526(CurDAG->getTargetNode(Opc314, N.getDebugLoc(), VT314, Tmp525), 0);
  SDValue Tmp527(CurDAG->getTargetNode(Opc315, N.getDebugLoc(), VT315, Tmp522, Tmp524, Tmp526), 0);
  SDValue Tmp529(CurDAG->getTargetNode(Opc316, N.getDebugLoc(), VT316, N1), 0);
  SDValue Tmp530 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp531(CurDAG->getTargetNode(Opc317, N.getDebugLoc(), VT317, Tmp529, Tmp530), 0);
  SDValue Tmp532(CurDAG->getTargetNode(Opc318, N.getDebugLoc(), VT318, Tmp527, Tmp531), 0);
  SDValue Tmp533 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp534(CurDAG->getTargetNode(Opc319, N.getDebugLoc(), VT319, Tmp532, Tmp533), 0);
  SDValue Tmp535 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp536(CurDAG->getTargetNode(Opc320, N.getDebugLoc(), VT320, Tmp535), 0);
  SDValue Tmp537 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp538(CurDAG->getTargetNode(Opc321, N.getDebugLoc(), VT321, Tmp537), 0);
  SDValue Tmp539(CurDAG->getTargetNode(Opc322, N.getDebugLoc(), VT322, Tmp534, Tmp536, Tmp538), 0);
  SDValue Tmp540(CurDAG->getTargetNode(Opc323, N.getDebugLoc(), VT323, Tmp520, Tmp539), 0);
  SDValue Tmp542(CurDAG->getTargetNode(Opc324, N.getDebugLoc(), VT324, N0), 0);
  SDValue Tmp543 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp544(CurDAG->getTargetNode(Opc325, N.getDebugLoc(), VT325, Tmp543), 0);
  SDValue Tmp545 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp546(CurDAG->getTargetNode(Opc326, N.getDebugLoc(), VT326, Tmp545), 0);
  SDValue Tmp547(CurDAG->getTargetNode(Opc327, N.getDebugLoc(), VT327, Tmp542, Tmp544, Tmp546), 0);
  SDValue Tmp549(CurDAG->getTargetNode(Opc328, N.getDebugLoc(), VT328, N1), 0);
  SDValue Tmp550 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp551(CurDAG->getTargetNode(Opc329, N.getDebugLoc(), VT329, Tmp550), 0);
  SDValue Tmp552 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp553(CurDAG->getTargetNode(Opc330, N.getDebugLoc(), VT330, Tmp552), 0);
  SDValue Tmp554(CurDAG->getTargetNode(Opc331, N.getDebugLoc(), VT331, Tmp549, Tmp551, Tmp553), 0);
  SDValue Tmp555(CurDAG->getTargetNode(Opc332, N.getDebugLoc(), VT332, Tmp547, Tmp554), 0);
  SDValue Tmp557(CurDAG->getTargetNode(Opc333, N.getDebugLoc(), VT333, N0), 0);
  SDValue Tmp558 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp559(CurDAG->getTargetNode(Opc334, N.getDebugLoc(), VT334, Tmp558), 0);
  SDValue Tmp560 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp561(CurDAG->getTargetNode(Opc335, N.getDebugLoc(), VT335, Tmp560), 0);
  SDValue Tmp562(CurDAG->getTargetNode(Opc336, N.getDebugLoc(), VT336, Tmp557, Tmp559, Tmp561), 0);
  SDValue Tmp564(CurDAG->getTargetNode(Opc337, N.getDebugLoc(), VT337, N1), 0);
  SDValue Tmp565 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp566(CurDAG->getTargetNode(Opc338, N.getDebugLoc(), VT338, Tmp564, Tmp565), 0);
  SDValue Tmp567(CurDAG->getTargetNode(Opc339, N.getDebugLoc(), VT339, Tmp562, Tmp566), 0);
  SDValue Tmp568 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp569(CurDAG->getTargetNode(Opc340, N.getDebugLoc(), VT340, Tmp567, Tmp568), 0);
  SDValue Tmp570 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp571(CurDAG->getTargetNode(Opc341, N.getDebugLoc(), VT341, Tmp570), 0);
  SDValue Tmp572 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp573(CurDAG->getTargetNode(Opc342, N.getDebugLoc(), VT342, Tmp572), 0);
  SDValue Tmp574(CurDAG->getTargetNode(Opc343, N.getDebugLoc(), VT343, Tmp569, Tmp571, Tmp573), 0);
  SDValue Tmp575(CurDAG->getTargetNode(Opc344, N.getDebugLoc(), VT344, Tmp555, Tmp574), 0);
  SDValue Tmp577(CurDAG->getTargetNode(Opc345, N.getDebugLoc(), VT345, Tmp540, Tmp575, N2), 0);
  SDValue Tmp578(CurDAG->getTargetNode(Opc346, N.getDebugLoc(), VT346, Tmp486, Tmp505, Tmp577), 0);
  SDValue Tmp580(CurDAG->getTargetNode(Opc347, N.getDebugLoc(), VT347, N1), 0);
  SDValue Tmp581 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp582(CurDAG->getTargetNode(Opc348, N.getDebugLoc(), VT348, Tmp581), 0);
  SDValue Tmp583 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp584(CurDAG->getTargetNode(Opc349, N.getDebugLoc(), VT349, Tmp583), 0);
  SDValue Tmp585(CurDAG->getTargetNode(Opc350, N.getDebugLoc(), VT350, Tmp580, Tmp582, Tmp584), 0);
  SDValue Tmp587(CurDAG->getTargetNode(Opc351, N.getDebugLoc(), VT351, N0), 0);
  SDValue Tmp588 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp589(CurDAG->getTargetNode(Opc352, N.getDebugLoc(), VT352, Tmp587, Tmp588), 0);
  SDValue Tmp590(CurDAG->getTargetNode(Opc353, N.getDebugLoc(), VT353, Tmp585, Tmp589), 0);
  SDValue Tmp591 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp592(CurDAG->getTargetNode(Opc354, N.getDebugLoc(), VT354, Tmp590, Tmp591), 0);
  SDValue Tmp593 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp594(CurDAG->getTargetNode(Opc355, N.getDebugLoc(), VT355, Tmp593), 0);
  SDValue Tmp595 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp596(CurDAG->getTargetNode(Opc356, N.getDebugLoc(), VT356, Tmp595), 0);
  SDValue Tmp597(CurDAG->getTargetNode(Opc357, N.getDebugLoc(), VT357, Tmp592, Tmp594, Tmp596), 0);
  SDValue Tmp599(CurDAG->getTargetNode(Opc358, N.getDebugLoc(), VT358, N0), 0);
  SDValue Tmp600 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp601(CurDAG->getTargetNode(Opc359, N.getDebugLoc(), VT359, Tmp600), 0);
  SDValue Tmp602 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp603(CurDAG->getTargetNode(Opc360, N.getDebugLoc(), VT360, Tmp602), 0);
  SDValue Tmp604(CurDAG->getTargetNode(Opc361, N.getDebugLoc(), VT361, Tmp599, Tmp601, Tmp603), 0);
  SDValue Tmp606(CurDAG->getTargetNode(Opc362, N.getDebugLoc(), VT362, N1), 0);
  SDValue Tmp607 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp608(CurDAG->getTargetNode(Opc363, N.getDebugLoc(), VT363, Tmp607), 0);
  SDValue Tmp609 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp610(CurDAG->getTargetNode(Opc364, N.getDebugLoc(), VT364, Tmp609), 0);
  SDValue Tmp611(CurDAG->getTargetNode(Opc365, N.getDebugLoc(), VT365, Tmp606, Tmp608, Tmp610), 0);
  SDValue Tmp612(CurDAG->getTargetNode(Opc366, N.getDebugLoc(), VT366, Tmp604, Tmp611), 0);
  SDValue Tmp614(CurDAG->getTargetNode(Opc367, N.getDebugLoc(), VT367, N0), 0);
  SDValue Tmp615 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp616(CurDAG->getTargetNode(Opc368, N.getDebugLoc(), VT368, Tmp615), 0);
  SDValue Tmp617 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp618(CurDAG->getTargetNode(Opc369, N.getDebugLoc(), VT369, Tmp617), 0);
  SDValue Tmp619(CurDAG->getTargetNode(Opc370, N.getDebugLoc(), VT370, Tmp614, Tmp616, Tmp618), 0);
  SDValue Tmp621(CurDAG->getTargetNode(Opc371, N.getDebugLoc(), VT371, N1), 0);
  SDValue Tmp622 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp623(CurDAG->getTargetNode(Opc372, N.getDebugLoc(), VT372, Tmp621, Tmp622), 0);
  SDValue Tmp624(CurDAG->getTargetNode(Opc373, N.getDebugLoc(), VT373, Tmp619, Tmp623), 0);
  SDValue Tmp625 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp626(CurDAG->getTargetNode(Opc374, N.getDebugLoc(), VT374, Tmp624, Tmp625), 0);
  SDValue Tmp627 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp628(CurDAG->getTargetNode(Opc375, N.getDebugLoc(), VT375, Tmp627), 0);
  SDValue Tmp629 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp630(CurDAG->getTargetNode(Opc376, N.getDebugLoc(), VT376, Tmp629), 0);
  SDValue Tmp631(CurDAG->getTargetNode(Opc377, N.getDebugLoc(), VT377, Tmp626, Tmp628, Tmp630), 0);
  SDValue Tmp633(CurDAG->getTargetNode(Opc378, N.getDebugLoc(), VT378, N0), 0);
  SDValue Tmp634 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp635(CurDAG->getTargetNode(Opc379, N.getDebugLoc(), VT379, Tmp634), 0);
  SDValue Tmp636 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp637(CurDAG->getTargetNode(Opc380, N.getDebugLoc(), VT380, Tmp636), 0);
  SDValue Tmp638(CurDAG->getTargetNode(Opc381, N.getDebugLoc(), VT381, Tmp633, Tmp635, Tmp637), 0);
  SDValue Tmp640(CurDAG->getTargetNode(Opc382, N.getDebugLoc(), VT382, N1), 0);
  SDValue Tmp641 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp642(CurDAG->getTargetNode(Opc383, N.getDebugLoc(), VT383, Tmp641), 0);
  SDValue Tmp643 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp644(CurDAG->getTargetNode(Opc384, N.getDebugLoc(), VT384, Tmp643), 0);
  SDValue Tmp645(CurDAG->getTargetNode(Opc385, N.getDebugLoc(), VT385, Tmp640, Tmp642, Tmp644), 0);
  SDValue Tmp646(CurDAG->getTargetNode(Opc386, N.getDebugLoc(), VT386, Tmp638, Tmp645), 0);
  SDValue Tmp648(CurDAG->getTargetNode(Opc387, N.getDebugLoc(), VT387, N0), 0);
  SDValue Tmp649 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp650(CurDAG->getTargetNode(Opc388, N.getDebugLoc(), VT388, Tmp649), 0);
  SDValue Tmp651 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp652(CurDAG->getTargetNode(Opc389, N.getDebugLoc(), VT389, Tmp651), 0);
  SDValue Tmp653(CurDAG->getTargetNode(Opc390, N.getDebugLoc(), VT390, Tmp648, Tmp650, Tmp652), 0);
  SDValue Tmp655(CurDAG->getTargetNode(Opc391, N.getDebugLoc(), VT391, N1), 0);
  SDValue Tmp656 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp657(CurDAG->getTargetNode(Opc392, N.getDebugLoc(), VT392, Tmp655, Tmp656), 0);
  SDValue Tmp658(CurDAG->getTargetNode(Opc393, N.getDebugLoc(), VT393, Tmp653, Tmp657), 0);
  SDValue Tmp659 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp660(CurDAG->getTargetNode(Opc394, N.getDebugLoc(), VT394, Tmp658, Tmp659), 0);
  SDValue Tmp661 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp662(CurDAG->getTargetNode(Opc395, N.getDebugLoc(), VT395, Tmp661), 0);
  SDValue Tmp663 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp664(CurDAG->getTargetNode(Opc396, N.getDebugLoc(), VT396, Tmp663), 0);
  SDValue Tmp665(CurDAG->getTargetNode(Opc397, N.getDebugLoc(), VT397, Tmp660, Tmp662, Tmp664), 0);
  SDValue Tmp666(CurDAG->getTargetNode(Opc398, N.getDebugLoc(), VT398, Tmp646, Tmp665), 0);
  SDValue Tmp668(CurDAG->getTargetNode(Opc399, N.getDebugLoc(), VT399, N0), 0);
  SDValue Tmp669 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp670(CurDAG->getTargetNode(Opc400, N.getDebugLoc(), VT400, Tmp669), 0);
  SDValue Tmp671 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp672(CurDAG->getTargetNode(Opc401, N.getDebugLoc(), VT401, Tmp671), 0);
  SDValue Tmp673(CurDAG->getTargetNode(Opc402, N.getDebugLoc(), VT402, Tmp668, Tmp670, Tmp672), 0);
  SDValue Tmp675(CurDAG->getTargetNode(Opc403, N.getDebugLoc(), VT403, N1), 0);
  SDValue Tmp676 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp677(CurDAG->getTargetNode(Opc404, N.getDebugLoc(), VT404, Tmp676), 0);
  SDValue Tmp678 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp679(CurDAG->getTargetNode(Opc405, N.getDebugLoc(), VT405, Tmp678), 0);
  SDValue Tmp680(CurDAG->getTargetNode(Opc406, N.getDebugLoc(), VT406, Tmp675, Tmp677, Tmp679), 0);
  SDValue Tmp681(CurDAG->getTargetNode(Opc407, N.getDebugLoc(), VT407, Tmp673, Tmp680), 0);
  SDValue Tmp683(CurDAG->getTargetNode(Opc408, N.getDebugLoc(), VT408, N0), 0);
  SDValue Tmp684 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp685(CurDAG->getTargetNode(Opc409, N.getDebugLoc(), VT409, Tmp684), 0);
  SDValue Tmp686 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp687(CurDAG->getTargetNode(Opc410, N.getDebugLoc(), VT410, Tmp686), 0);
  SDValue Tmp688(CurDAG->getTargetNode(Opc411, N.getDebugLoc(), VT411, Tmp683, Tmp685, Tmp687), 0);
  SDValue Tmp690(CurDAG->getTargetNode(Opc412, N.getDebugLoc(), VT412, N1), 0);
  SDValue Tmp691 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp692(CurDAG->getTargetNode(Opc413, N.getDebugLoc(), VT413, Tmp690, Tmp691), 0);
  SDValue Tmp693(CurDAG->getTargetNode(Opc414, N.getDebugLoc(), VT414, Tmp688, Tmp692), 0);
  SDValue Tmp694 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp695(CurDAG->getTargetNode(Opc415, N.getDebugLoc(), VT415, Tmp693, Tmp694), 0);
  SDValue Tmp696 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp697(CurDAG->getTargetNode(Opc416, N.getDebugLoc(), VT416, Tmp696), 0);
  SDValue Tmp698 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp699(CurDAG->getTargetNode(Opc417, N.getDebugLoc(), VT417, Tmp698), 0);
  SDValue Tmp700(CurDAG->getTargetNode(Opc418, N.getDebugLoc(), VT418, Tmp695, Tmp697, Tmp699), 0);
  SDValue Tmp701(CurDAG->getTargetNode(Opc419, N.getDebugLoc(), VT419, Tmp681, Tmp700), 0);
  SDValue Tmp703(CurDAG->getTargetNode(Opc420, N.getDebugLoc(), VT420, Tmp666, Tmp701, N2), 0);
  SDValue Tmp704(CurDAG->getTargetNode(Opc421, N.getDebugLoc(), VT421, Tmp612, Tmp631, Tmp703), 0);
  SDValue Tmp706(CurDAG->getTargetNode(Opc422, N.getDebugLoc(), VT422, N1), 0);
  SDValue Tmp707 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp708(CurDAG->getTargetNode(Opc423, N.getDebugLoc(), VT423, Tmp707), 0);
  SDValue Tmp709 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp710(CurDAG->getTargetNode(Opc424, N.getDebugLoc(), VT424, Tmp709), 0);
  SDValue Tmp711(CurDAG->getTargetNode(Opc425, N.getDebugLoc(), VT425, Tmp706, Tmp708, Tmp710), 0);
  SDValue Tmp713(CurDAG->getTargetNode(Opc426, N.getDebugLoc(), VT426, N0), 0);
  SDValue Tmp714 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp715(CurDAG->getTargetNode(Opc427, N.getDebugLoc(), VT427, Tmp713, Tmp714), 0);
  SDValue Tmp716(CurDAG->getTargetNode(Opc428, N.getDebugLoc(), VT428, Tmp711, Tmp715), 0);
  SDValue Tmp717 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp718(CurDAG->getTargetNode(Opc429, N.getDebugLoc(), VT429, Tmp716, Tmp717), 0);
  SDValue Tmp719 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp720(CurDAG->getTargetNode(Opc430, N.getDebugLoc(), VT430, Tmp719), 0);
  SDValue Tmp721 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp722(CurDAG->getTargetNode(Opc431, N.getDebugLoc(), VT431, Tmp721), 0);
  SDValue Tmp723(CurDAG->getTargetNode(Opc432, N.getDebugLoc(), VT432, Tmp718, Tmp720, Tmp722), 0);
  SDValue Tmp724(CurDAG->getTargetNode(Opc433, N.getDebugLoc(), VT433, Tmp704, Tmp723), 0);
  SDValue Tmp726(CurDAG->getTargetNode(Opc434, N.getDebugLoc(), VT434, N0), 0);
  SDValue Tmp727 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp728(CurDAG->getTargetNode(Opc435, N.getDebugLoc(), VT435, Tmp727), 0);
  SDValue Tmp729 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp730(CurDAG->getTargetNode(Opc436, N.getDebugLoc(), VT436, Tmp729), 0);
  SDValue Tmp731(CurDAG->getTargetNode(Opc437, N.getDebugLoc(), VT437, Tmp726, Tmp728, Tmp730), 0);
  SDValue Tmp733(CurDAG->getTargetNode(Opc438, N.getDebugLoc(), VT438, N1), 0);
  SDValue Tmp734 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp735(CurDAG->getTargetNode(Opc439, N.getDebugLoc(), VT439, Tmp734), 0);
  SDValue Tmp736 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp737(CurDAG->getTargetNode(Opc440, N.getDebugLoc(), VT440, Tmp736), 0);
  SDValue Tmp738(CurDAG->getTargetNode(Opc441, N.getDebugLoc(), VT441, Tmp733, Tmp735, Tmp737), 0);
  SDValue Tmp739(CurDAG->getTargetNode(Opc442, N.getDebugLoc(), VT442, Tmp731, Tmp738), 0);
  SDValue Tmp741(CurDAG->getTargetNode(Opc443, N.getDebugLoc(), VT443, N0), 0);
  SDValue Tmp742 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp743(CurDAG->getTargetNode(Opc444, N.getDebugLoc(), VT444, Tmp742), 0);
  SDValue Tmp744 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp745(CurDAG->getTargetNode(Opc445, N.getDebugLoc(), VT445, Tmp744), 0);
  SDValue Tmp746(CurDAG->getTargetNode(Opc446, N.getDebugLoc(), VT446, Tmp741, Tmp743, Tmp745), 0);
  SDValue Tmp748(CurDAG->getTargetNode(Opc447, N.getDebugLoc(), VT447, N1), 0);
  SDValue Tmp749 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp750(CurDAG->getTargetNode(Opc448, N.getDebugLoc(), VT448, Tmp748, Tmp749), 0);
  SDValue Tmp751(CurDAG->getTargetNode(Opc449, N.getDebugLoc(), VT449, Tmp746, Tmp750), 0);
  SDValue Tmp752 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp753(CurDAG->getTargetNode(Opc450, N.getDebugLoc(), VT450, Tmp751, Tmp752), 0);
  SDValue Tmp754 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp755(CurDAG->getTargetNode(Opc451, N.getDebugLoc(), VT451, Tmp754), 0);
  SDValue Tmp756 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp757(CurDAG->getTargetNode(Opc452, N.getDebugLoc(), VT452, Tmp756), 0);
  SDValue Tmp758(CurDAG->getTargetNode(Opc453, N.getDebugLoc(), VT453, Tmp753, Tmp755, Tmp757), 0);
  SDValue Tmp760(CurDAG->getTargetNode(Opc454, N.getDebugLoc(), VT454, N0), 0);
  SDValue Tmp761 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp762(CurDAG->getTargetNode(Opc455, N.getDebugLoc(), VT455, Tmp761), 0);
  SDValue Tmp763 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp764(CurDAG->getTargetNode(Opc456, N.getDebugLoc(), VT456, Tmp763), 0);
  SDValue Tmp765(CurDAG->getTargetNode(Opc457, N.getDebugLoc(), VT457, Tmp760, Tmp762, Tmp764), 0);
  SDValue Tmp767(CurDAG->getTargetNode(Opc458, N.getDebugLoc(), VT458, N1), 0);
  SDValue Tmp768 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp769(CurDAG->getTargetNode(Opc459, N.getDebugLoc(), VT459, Tmp768), 0);
  SDValue Tmp770 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp771(CurDAG->getTargetNode(Opc460, N.getDebugLoc(), VT460, Tmp770), 0);
  SDValue Tmp772(CurDAG->getTargetNode(Opc461, N.getDebugLoc(), VT461, Tmp767, Tmp769, Tmp771), 0);
  SDValue Tmp773(CurDAG->getTargetNode(Opc462, N.getDebugLoc(), VT462, Tmp765, Tmp772), 0);
  SDValue Tmp775(CurDAG->getTargetNode(Opc463, N.getDebugLoc(), VT463, N0), 0);
  SDValue Tmp776 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp777(CurDAG->getTargetNode(Opc464, N.getDebugLoc(), VT464, Tmp776), 0);
  SDValue Tmp778 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp779(CurDAG->getTargetNode(Opc465, N.getDebugLoc(), VT465, Tmp778), 0);
  SDValue Tmp780(CurDAG->getTargetNode(Opc466, N.getDebugLoc(), VT466, Tmp775, Tmp777, Tmp779), 0);
  SDValue Tmp782(CurDAG->getTargetNode(Opc467, N.getDebugLoc(), VT467, N1), 0);
  SDValue Tmp783 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp784(CurDAG->getTargetNode(Opc468, N.getDebugLoc(), VT468, Tmp782, Tmp783), 0);
  SDValue Tmp785(CurDAG->getTargetNode(Opc469, N.getDebugLoc(), VT469, Tmp780, Tmp784), 0);
  SDValue Tmp786 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp787(CurDAG->getTargetNode(Opc470, N.getDebugLoc(), VT470, Tmp785, Tmp786), 0);
  SDValue Tmp788 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp789(CurDAG->getTargetNode(Opc471, N.getDebugLoc(), VT471, Tmp788), 0);
  SDValue Tmp790 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp791(CurDAG->getTargetNode(Opc472, N.getDebugLoc(), VT472, Tmp790), 0);
  SDValue Tmp792(CurDAG->getTargetNode(Opc473, N.getDebugLoc(), VT473, Tmp787, Tmp789, Tmp791), 0);
  SDValue Tmp793(CurDAG->getTargetNode(Opc474, N.getDebugLoc(), VT474, Tmp773, Tmp792), 0);
  SDValue Tmp795(CurDAG->getTargetNode(Opc475, N.getDebugLoc(), VT475, N0), 0);
  SDValue Tmp796 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp797(CurDAG->getTargetNode(Opc476, N.getDebugLoc(), VT476, Tmp796), 0);
  SDValue Tmp798 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp799(CurDAG->getTargetNode(Opc477, N.getDebugLoc(), VT477, Tmp798), 0);
  SDValue Tmp800(CurDAG->getTargetNode(Opc478, N.getDebugLoc(), VT478, Tmp795, Tmp797, Tmp799), 0);
  SDValue Tmp802(CurDAG->getTargetNode(Opc479, N.getDebugLoc(), VT479, N1), 0);
  SDValue Tmp803 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp804(CurDAG->getTargetNode(Opc480, N.getDebugLoc(), VT480, Tmp803), 0);
  SDValue Tmp805 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp806(CurDAG->getTargetNode(Opc481, N.getDebugLoc(), VT481, Tmp805), 0);
  SDValue Tmp807(CurDAG->getTargetNode(Opc482, N.getDebugLoc(), VT482, Tmp802, Tmp804, Tmp806), 0);
  SDValue Tmp808(CurDAG->getTargetNode(Opc483, N.getDebugLoc(), VT483, Tmp800, Tmp807), 0);
  SDValue Tmp810(CurDAG->getTargetNode(Opc484, N.getDebugLoc(), VT484, N0), 0);
  SDValue Tmp811 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp812(CurDAG->getTargetNode(Opc485, N.getDebugLoc(), VT485, Tmp811), 0);
  SDValue Tmp813 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp814(CurDAG->getTargetNode(Opc486, N.getDebugLoc(), VT486, Tmp813), 0);
  SDValue Tmp815(CurDAG->getTargetNode(Opc487, N.getDebugLoc(), VT487, Tmp810, Tmp812, Tmp814), 0);
  SDValue Tmp817(CurDAG->getTargetNode(Opc488, N.getDebugLoc(), VT488, N1), 0);
  SDValue Tmp818 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp819(CurDAG->getTargetNode(Opc489, N.getDebugLoc(), VT489, Tmp817, Tmp818), 0);
  SDValue Tmp820(CurDAG->getTargetNode(Opc490, N.getDebugLoc(), VT490, Tmp815, Tmp819), 0);
  SDValue Tmp821 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp822(CurDAG->getTargetNode(Opc491, N.getDebugLoc(), VT491, Tmp820, Tmp821), 0);
  SDValue Tmp823 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp824(CurDAG->getTargetNode(Opc492, N.getDebugLoc(), VT492, Tmp823), 0);
  SDValue Tmp825 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp826(CurDAG->getTargetNode(Opc493, N.getDebugLoc(), VT493, Tmp825), 0);
  SDValue Tmp827(CurDAG->getTargetNode(Opc494, N.getDebugLoc(), VT494, Tmp822, Tmp824, Tmp826), 0);
  SDValue Tmp828(CurDAG->getTargetNode(Opc495, N.getDebugLoc(), VT495, Tmp808, Tmp827), 0);
  SDValue Tmp830(CurDAG->getTargetNode(Opc496, N.getDebugLoc(), VT496, Tmp793, Tmp828, N2), 0);
  SDValue Tmp831(CurDAG->getTargetNode(Opc497, N.getDebugLoc(), VT497, Tmp739, Tmp758, Tmp830), 0);
  SDValue Tmp833(CurDAG->getTargetNode(Opc498, N.getDebugLoc(), VT498, N1), 0);
  SDValue Tmp834 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp835(CurDAG->getTargetNode(Opc499, N.getDebugLoc(), VT499, Tmp834), 0);
  SDValue Tmp836 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp837(CurDAG->getTargetNode(Opc500, N.getDebugLoc(), VT500, Tmp836), 0);
  SDValue Tmp838(CurDAG->getTargetNode(Opc501, N.getDebugLoc(), VT501, Tmp833, Tmp835, Tmp837), 0);
  SDValue Tmp840(CurDAG->getTargetNode(Opc502, N.getDebugLoc(), VT502, N0), 0);
  SDValue Tmp841 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp842(CurDAG->getTargetNode(Opc503, N.getDebugLoc(), VT503, Tmp840, Tmp841), 0);
  SDValue Tmp843(CurDAG->getTargetNode(Opc504, N.getDebugLoc(), VT504, Tmp838, Tmp842), 0);
  SDValue Tmp844 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp845(CurDAG->getTargetNode(Opc505, N.getDebugLoc(), VT505, Tmp843, Tmp844), 0);
  SDValue Tmp846 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp847(CurDAG->getTargetNode(Opc506, N.getDebugLoc(), VT506, Tmp846), 0);
  SDValue Tmp848 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp849(CurDAG->getTargetNode(Opc507, N.getDebugLoc(), VT507, Tmp848), 0);
  SDValue Tmp850(CurDAG->getTargetNode(Opc508, N.getDebugLoc(), VT508, Tmp845, Tmp847, Tmp849), 0);
  SDValue Tmp851(CurDAG->getTargetNode(Opc509, N.getDebugLoc(), VT509, Tmp831, Tmp850), 0);
  SDValue Tmp853(CurDAG->getTargetNode(Opc510, N.getDebugLoc(), VT510, Tmp724, Tmp851, N2), 0);
  SDValue Tmp854(CurDAG->getTargetNode(Opc511, N.getDebugLoc(), VT511, Tmp578, Tmp597, Tmp853), 0);
  SDValue Tmp856(CurDAG->getTargetNode(Opc512, N.getDebugLoc(), VT512, N1), 0);
  SDValue Tmp857 = CurDAG->getTargetConstant(0x4ULL, MVT::i32);
  SDValue Tmp858(CurDAG->getTargetNode(Opc513, N.getDebugLoc(), VT513, Tmp856, Tmp857), 0);
  SDValue Tmp860(CurDAG->getTargetNode(Opc514, N.getDebugLoc(), VT514, N0), 0);
  SDValue Tmp861 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp862(CurDAG->getTargetNode(Opc515, N.getDebugLoc(), VT515, Tmp861), 0);
  SDValue Tmp863 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp864(CurDAG->getTargetNode(Opc516, N.getDebugLoc(), VT516, Tmp863), 0);
  SDValue Tmp865(CurDAG->getTargetNode(Opc517, N.getDebugLoc(), VT517, Tmp860, Tmp862, Tmp864), 0);
  SDValue Tmp866(CurDAG->getTargetNode(Opc518, N.getDebugLoc(), VT518, Tmp858, Tmp865), 0);
  SDValue Tmp868(CurDAG->getTargetNode(Opc519, N.getDebugLoc(), VT519, N0), 0);
  SDValue Tmp869 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp870(CurDAG->getTargetNode(Opc520, N.getDebugLoc(), VT520, Tmp869), 0);
  SDValue Tmp871 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp872(CurDAG->getTargetNode(Opc521, N.getDebugLoc(), VT521, Tmp871), 0);
  SDValue Tmp873(CurDAG->getTargetNode(Opc522, N.getDebugLoc(), VT522, Tmp868, Tmp870, Tmp872), 0);
  SDValue Tmp875(CurDAG->getTargetNode(Opc523, N.getDebugLoc(), VT523, N1), 0);
  SDValue Tmp876 = CurDAG->getTargetConstant(0x4ULL, MVT::i32);
  SDValue Tmp877(CurDAG->getTargetNode(Opc524, N.getDebugLoc(), VT524, Tmp875, Tmp876), 0);
  SDValue Tmp878(CurDAG->getTargetNode(Opc525, N.getDebugLoc(), VT525, Tmp873, Tmp877), 0);
  SDValue Tmp879(CurDAG->getTargetNode(Opc526, N.getDebugLoc(), VT526, Tmp866, Tmp878), 0);
  SDValue Tmp881(CurDAG->getTargetNode(Opc527, N.getDebugLoc(), VT527, N1), 0);
  SDValue Tmp882 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp883(CurDAG->getTargetNode(Opc528, N.getDebugLoc(), VT528, Tmp882), 0);
  SDValue Tmp884 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp885(CurDAG->getTargetNode(Opc529, N.getDebugLoc(), VT529, Tmp884), 0);
  SDValue Tmp886(CurDAG->getTargetNode(Opc530, N.getDebugLoc(), VT530, Tmp881, Tmp883, Tmp885), 0);
  SDValue Tmp888(CurDAG->getTargetNode(Opc531, N.getDebugLoc(), VT531, N0), 0);
  SDValue Tmp889 = CurDAG->getTargetConstant(0x4ULL, MVT::i32);
  SDValue Tmp890(CurDAG->getTargetNode(Opc532, N.getDebugLoc(), VT532, Tmp888, Tmp889), 0);
  SDValue Tmp891(CurDAG->getTargetNode(Opc533, N.getDebugLoc(), VT533, Tmp886, Tmp890), 0);
  SDValue Tmp893(CurDAG->getTargetNode(Opc534, N.getDebugLoc(), VT534, N0), 0);
  SDValue Tmp894 = CurDAG->getTargetConstant(0x4ULL, MVT::i32);
  SDValue Tmp895(CurDAG->getTargetNode(Opc535, N.getDebugLoc(), VT535, Tmp893, Tmp894), 0);
  SDValue Tmp897(CurDAG->getTargetNode(Opc536, N.getDebugLoc(), VT536, N1), 0);
  SDValue Tmp898 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp899(CurDAG->getTargetNode(Opc537, N.getDebugLoc(), VT537, Tmp898), 0);
  SDValue Tmp900 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp901(CurDAG->getTargetNode(Opc538, N.getDebugLoc(), VT538, Tmp900), 0);
  SDValue Tmp902(CurDAG->getTargetNode(Opc539, N.getDebugLoc(), VT539, Tmp897, Tmp899, Tmp901), 0);
  SDValue Tmp903(CurDAG->getTargetNode(Opc540, N.getDebugLoc(), VT540, Tmp895, Tmp902), 0);
  SDValue Tmp905(CurDAG->getTargetNode(Opc541, N.getDebugLoc(), VT541, N0), 0);
  SDValue Tmp906 = CurDAG->getTargetConstant(0x4ULL, MVT::i32);
  SDValue Tmp907(CurDAG->getTargetNode(Opc542, N.getDebugLoc(), VT542, Tmp905, Tmp906), 0);
  SDValue Tmp909(CurDAG->getTargetNode(Opc543, N.getDebugLoc(), VT543, N1), 0);
  SDValue Tmp910 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp911(CurDAG->getTargetNode(Opc544, N.getDebugLoc(), VT544, Tmp910), 0);
  SDValue Tmp912 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp913(CurDAG->getTargetNode(Opc545, N.getDebugLoc(), VT545, Tmp912), 0);
  SDValue Tmp914(CurDAG->getTargetNode(Opc546, N.getDebugLoc(), VT546, Tmp909, Tmp911, Tmp913), 0);
  SDValue Tmp915(CurDAG->getTargetNode(Opc547, N.getDebugLoc(), VT547, Tmp907, Tmp914), 0);
  SDValue Tmp917(CurDAG->getTargetNode(Opc548, N.getDebugLoc(), VT548, N0), 0);
  SDValue Tmp918 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp919(CurDAG->getTargetNode(Opc549, N.getDebugLoc(), VT549, Tmp917, Tmp918), 0);
  SDValue Tmp921(CurDAG->getTargetNode(Opc550, N.getDebugLoc(), VT550, N1), 0);
  SDValue Tmp922 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp923(CurDAG->getTargetNode(Opc551, N.getDebugLoc(), VT551, Tmp921, Tmp922), 0);
  SDValue Tmp924(CurDAG->getTargetNode(Opc552, N.getDebugLoc(), VT552, Tmp919, Tmp923), 0);
  SDValue Tmp926(CurDAG->getTargetNode(Opc553, N.getDebugLoc(), VT553, N0), 0);
  SDValue Tmp927 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp928(CurDAG->getTargetNode(Opc554, N.getDebugLoc(), VT554, Tmp926, Tmp927), 0);
  SDValue Tmp930(CurDAG->getTargetNode(Opc555, N.getDebugLoc(), VT555, N1), 0);
  SDValue Tmp931 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp932(CurDAG->getTargetNode(Opc556, N.getDebugLoc(), VT556, Tmp930, Tmp931), 0);
  SDValue Tmp933(CurDAG->getTargetNode(Opc557, N.getDebugLoc(), VT557, Tmp928, Tmp932), 0);
  SDValue Tmp934(CurDAG->getTargetNode(Opc558, N.getDebugLoc(), VT558, Tmp924, Tmp933), 0);
  SDValue Tmp935(CurDAG->getTargetNode(Opc559, N.getDebugLoc(), VT559, Tmp915, Tmp934), 0);
  SDValue Tmp936(CurDAG->getTargetNode(Opc560, N.getDebugLoc(), VT560, Tmp903, Tmp935), 0);
  SDValue Tmp937(CurDAG->getTargetNode(Opc561, N.getDebugLoc(), VT561, Tmp891, Tmp936), 0);
  SDValue Tmp938(CurDAG->getTargetNode(Opc562, N.getDebugLoc(), VT562, Tmp879, Tmp937), 0);
  SDValue Tmp939 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp940(CurDAG->getTargetNode(Opc563, N.getDebugLoc(), VT563, Tmp939), 0);
  SDValue Tmp941 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp942(CurDAG->getTargetNode(Opc564, N.getDebugLoc(), VT564, Tmp941), 0);
  SDValue Tmp943(CurDAG->getTargetNode(Opc565, N.getDebugLoc(), VT565, Tmp938, Tmp940, Tmp942), 0);
  SDValue Tmp944(CurDAG->getTargetNode(Opc566, N.getDebugLoc(), VT566, Tmp854, Tmp943), 0);
  SDValue Tmp946(CurDAG->getTargetNode(Opc567, N.getDebugLoc(), VT567, N0), 0);
  SDValue Tmp947 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp948(CurDAG->getTargetNode(Opc568, N.getDebugLoc(), VT568, Tmp947), 0);
  SDValue Tmp949 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp950(CurDAG->getTargetNode(Opc569, N.getDebugLoc(), VT569, Tmp949), 0);
  SDValue Tmp951(CurDAG->getTargetNode(Opc570, N.getDebugLoc(), VT570, Tmp946, Tmp948, Tmp950), 0);
  SDValue Tmp953(CurDAG->getTargetNode(Opc571, N.getDebugLoc(), VT571, N1), 0);
  SDValue Tmp954 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp955(CurDAG->getTargetNode(Opc572, N.getDebugLoc(), VT572, Tmp954), 0);
  SDValue Tmp956 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp957(CurDAG->getTargetNode(Opc573, N.getDebugLoc(), VT573, Tmp956), 0);
  SDValue Tmp958(CurDAG->getTargetNode(Opc574, N.getDebugLoc(), VT574, Tmp953, Tmp955, Tmp957), 0);
  SDValue Tmp959(CurDAG->getTargetNode(Opc575, N.getDebugLoc(), VT575, Tmp951, Tmp958), 0);
  SDValue Tmp961(CurDAG->getTargetNode(Opc576, N.getDebugLoc(), VT576, N0), 0);
  SDValue Tmp962 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp963(CurDAG->getTargetNode(Opc577, N.getDebugLoc(), VT577, Tmp962), 0);
  SDValue Tmp964 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp965(CurDAG->getTargetNode(Opc578, N.getDebugLoc(), VT578, Tmp964), 0);
  SDValue Tmp966(CurDAG->getTargetNode(Opc579, N.getDebugLoc(), VT579, Tmp961, Tmp963, Tmp965), 0);
  SDValue Tmp968(CurDAG->getTargetNode(Opc580, N.getDebugLoc(), VT580, N1), 0);
  SDValue Tmp969 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp970(CurDAG->getTargetNode(Opc581, N.getDebugLoc(), VT581, Tmp968, Tmp969), 0);
  SDValue Tmp971(CurDAG->getTargetNode(Opc582, N.getDebugLoc(), VT582, Tmp966, Tmp970), 0);
  SDValue Tmp972 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp973(CurDAG->getTargetNode(Opc583, N.getDebugLoc(), VT583, Tmp971, Tmp972), 0);
  SDValue Tmp974 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp975(CurDAG->getTargetNode(Opc584, N.getDebugLoc(), VT584, Tmp974), 0);
  SDValue Tmp976 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp977(CurDAG->getTargetNode(Opc585, N.getDebugLoc(), VT585, Tmp976), 0);
  SDValue Tmp978(CurDAG->getTargetNode(Opc586, N.getDebugLoc(), VT586, Tmp973, Tmp975, Tmp977), 0);
  SDValue Tmp980(CurDAG->getTargetNode(Opc587, N.getDebugLoc(), VT587, N0), 0);
  SDValue Tmp981 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp982(CurDAG->getTargetNode(Opc588, N.getDebugLoc(), VT588, Tmp981), 0);
  SDValue Tmp983 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp984(CurDAG->getTargetNode(Opc589, N.getDebugLoc(), VT589, Tmp983), 0);
  SDValue Tmp985(CurDAG->getTargetNode(Opc590, N.getDebugLoc(), VT590, Tmp980, Tmp982, Tmp984), 0);
  SDValue Tmp987(CurDAG->getTargetNode(Opc591, N.getDebugLoc(), VT591, N1), 0);
  SDValue Tmp988 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp989(CurDAG->getTargetNode(Opc592, N.getDebugLoc(), VT592, Tmp988), 0);
  SDValue Tmp990 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp991(CurDAG->getTargetNode(Opc593, N.getDebugLoc(), VT593, Tmp990), 0);
  SDValue Tmp992(CurDAG->getTargetNode(Opc594, N.getDebugLoc(), VT594, Tmp987, Tmp989, Tmp991), 0);
  SDValue Tmp993(CurDAG->getTargetNode(Opc595, N.getDebugLoc(), VT595, Tmp985, Tmp992), 0);
  SDValue Tmp995(CurDAG->getTargetNode(Opc596, N.getDebugLoc(), VT596, N0), 0);
  SDValue Tmp996 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp997(CurDAG->getTargetNode(Opc597, N.getDebugLoc(), VT597, Tmp996), 0);
  SDValue Tmp998 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp999(CurDAG->getTargetNode(Opc598, N.getDebugLoc(), VT598, Tmp998), 0);
  SDValue Tmp1000(CurDAG->getTargetNode(Opc599, N.getDebugLoc(), VT599, Tmp995, Tmp997, Tmp999), 0);
  SDValue Tmp1002(CurDAG->getTargetNode(Opc600, N.getDebugLoc(), VT600, N1), 0);
  SDValue Tmp1003 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1004(CurDAG->getTargetNode(Opc601, N.getDebugLoc(), VT601, Tmp1002, Tmp1003), 0);
  SDValue Tmp1005(CurDAG->getTargetNode(Opc602, N.getDebugLoc(), VT602, Tmp1000, Tmp1004), 0);
  SDValue Tmp1006 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1007(CurDAG->getTargetNode(Opc603, N.getDebugLoc(), VT603, Tmp1005, Tmp1006), 0);
  SDValue Tmp1008 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1009(CurDAG->getTargetNode(Opc604, N.getDebugLoc(), VT604, Tmp1008), 0);
  SDValue Tmp1010 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp1011(CurDAG->getTargetNode(Opc605, N.getDebugLoc(), VT605, Tmp1010), 0);
  SDValue Tmp1012(CurDAG->getTargetNode(Opc606, N.getDebugLoc(), VT606, Tmp1007, Tmp1009, Tmp1011), 0);
  SDValue Tmp1013(CurDAG->getTargetNode(Opc607, N.getDebugLoc(), VT607, Tmp993, Tmp1012), 0);
  SDValue Tmp1015(CurDAG->getTargetNode(Opc608, N.getDebugLoc(), VT608, N0), 0);
  SDValue Tmp1016 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1017(CurDAG->getTargetNode(Opc609, N.getDebugLoc(), VT609, Tmp1016), 0);
  SDValue Tmp1018 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1019(CurDAG->getTargetNode(Opc610, N.getDebugLoc(), VT610, Tmp1018), 0);
  SDValue Tmp1020(CurDAG->getTargetNode(Opc611, N.getDebugLoc(), VT611, Tmp1015, Tmp1017, Tmp1019), 0);
  SDValue Tmp1022(CurDAG->getTargetNode(Opc612, N.getDebugLoc(), VT612, N1), 0);
  SDValue Tmp1023 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1024(CurDAG->getTargetNode(Opc613, N.getDebugLoc(), VT613, Tmp1023), 0);
  SDValue Tmp1025 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1026(CurDAG->getTargetNode(Opc614, N.getDebugLoc(), VT614, Tmp1025), 0);
  SDValue Tmp1027(CurDAG->getTargetNode(Opc615, N.getDebugLoc(), VT615, Tmp1022, Tmp1024, Tmp1026), 0);
  SDValue Tmp1028(CurDAG->getTargetNode(Opc616, N.getDebugLoc(), VT616, Tmp1020, Tmp1027), 0);
  SDValue Tmp1030(CurDAG->getTargetNode(Opc617, N.getDebugLoc(), VT617, N0), 0);
  SDValue Tmp1031 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1032(CurDAG->getTargetNode(Opc618, N.getDebugLoc(), VT618, Tmp1031), 0);
  SDValue Tmp1033 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1034(CurDAG->getTargetNode(Opc619, N.getDebugLoc(), VT619, Tmp1033), 0);
  SDValue Tmp1035(CurDAG->getTargetNode(Opc620, N.getDebugLoc(), VT620, Tmp1030, Tmp1032, Tmp1034), 0);
  SDValue Tmp1037(CurDAG->getTargetNode(Opc621, N.getDebugLoc(), VT621, N1), 0);
  SDValue Tmp1038 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1039(CurDAG->getTargetNode(Opc622, N.getDebugLoc(), VT622, Tmp1037, Tmp1038), 0);
  SDValue Tmp1040(CurDAG->getTargetNode(Opc623, N.getDebugLoc(), VT623, Tmp1035, Tmp1039), 0);
  SDValue Tmp1041 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1042(CurDAG->getTargetNode(Opc624, N.getDebugLoc(), VT624, Tmp1040, Tmp1041), 0);
  SDValue Tmp1043 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1044(CurDAG->getTargetNode(Opc625, N.getDebugLoc(), VT625, Tmp1043), 0);
  SDValue Tmp1045 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp1046(CurDAG->getTargetNode(Opc626, N.getDebugLoc(), VT626, Tmp1045), 0);
  SDValue Tmp1047(CurDAG->getTargetNode(Opc627, N.getDebugLoc(), VT627, Tmp1042, Tmp1044, Tmp1046), 0);
  SDValue Tmp1048(CurDAG->getTargetNode(Opc628, N.getDebugLoc(), VT628, Tmp1028, Tmp1047), 0);
  SDValue Tmp1050(CurDAG->getTargetNode(Opc629, N.getDebugLoc(), VT629, Tmp1013, Tmp1048, N2), 0);
  SDValue Tmp1051(CurDAG->getTargetNode(Opc630, N.getDebugLoc(), VT630, Tmp959, Tmp978, Tmp1050), 0);
  SDValue Tmp1053(CurDAG->getTargetNode(Opc631, N.getDebugLoc(), VT631, N1), 0);
  SDValue Tmp1054 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1055(CurDAG->getTargetNode(Opc632, N.getDebugLoc(), VT632, Tmp1054), 0);
  SDValue Tmp1056 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1057(CurDAG->getTargetNode(Opc633, N.getDebugLoc(), VT633, Tmp1056), 0);
  SDValue Tmp1058(CurDAG->getTargetNode(Opc634, N.getDebugLoc(), VT634, Tmp1053, Tmp1055, Tmp1057), 0);
  SDValue Tmp1060(CurDAG->getTargetNode(Opc635, N.getDebugLoc(), VT635, N0), 0);
  SDValue Tmp1061 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1062(CurDAG->getTargetNode(Opc636, N.getDebugLoc(), VT636, Tmp1060, Tmp1061), 0);
  SDValue Tmp1063(CurDAG->getTargetNode(Opc637, N.getDebugLoc(), VT637, Tmp1058, Tmp1062), 0);
  SDValue Tmp1064 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1065(CurDAG->getTargetNode(Opc638, N.getDebugLoc(), VT638, Tmp1063, Tmp1064), 0);
  SDValue Tmp1066 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1067(CurDAG->getTargetNode(Opc639, N.getDebugLoc(), VT639, Tmp1066), 0);
  SDValue Tmp1068 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp1069(CurDAG->getTargetNode(Opc640, N.getDebugLoc(), VT640, Tmp1068), 0);
  SDValue Tmp1070(CurDAG->getTargetNode(Opc641, N.getDebugLoc(), VT641, Tmp1065, Tmp1067, Tmp1069), 0);
  SDValue Tmp1072(CurDAG->getTargetNode(Opc642, N.getDebugLoc(), VT642, N0), 0);
  SDValue Tmp1073 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1074(CurDAG->getTargetNode(Opc643, N.getDebugLoc(), VT643, Tmp1073), 0);
  SDValue Tmp1075 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1076(CurDAG->getTargetNode(Opc644, N.getDebugLoc(), VT644, Tmp1075), 0);
  SDValue Tmp1077(CurDAG->getTargetNode(Opc645, N.getDebugLoc(), VT645, Tmp1072, Tmp1074, Tmp1076), 0);
  SDValue Tmp1079(CurDAG->getTargetNode(Opc646, N.getDebugLoc(), VT646, N1), 0);
  SDValue Tmp1080 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1081(CurDAG->getTargetNode(Opc647, N.getDebugLoc(), VT647, Tmp1080), 0);
  SDValue Tmp1082 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1083(CurDAG->getTargetNode(Opc648, N.getDebugLoc(), VT648, Tmp1082), 0);
  SDValue Tmp1084(CurDAG->getTargetNode(Opc649, N.getDebugLoc(), VT649, Tmp1079, Tmp1081, Tmp1083), 0);
  SDValue Tmp1085(CurDAG->getTargetNode(Opc650, N.getDebugLoc(), VT650, Tmp1077, Tmp1084), 0);
  SDValue Tmp1087(CurDAG->getTargetNode(Opc651, N.getDebugLoc(), VT651, N0), 0);
  SDValue Tmp1088 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1089(CurDAG->getTargetNode(Opc652, N.getDebugLoc(), VT652, Tmp1088), 0);
  SDValue Tmp1090 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1091(CurDAG->getTargetNode(Opc653, N.getDebugLoc(), VT653, Tmp1090), 0);
  SDValue Tmp1092(CurDAG->getTargetNode(Opc654, N.getDebugLoc(), VT654, Tmp1087, Tmp1089, Tmp1091), 0);
  SDValue Tmp1094(CurDAG->getTargetNode(Opc655, N.getDebugLoc(), VT655, N1), 0);
  SDValue Tmp1095 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1096(CurDAG->getTargetNode(Opc656, N.getDebugLoc(), VT656, Tmp1094, Tmp1095), 0);
  SDValue Tmp1097(CurDAG->getTargetNode(Opc657, N.getDebugLoc(), VT657, Tmp1092, Tmp1096), 0);
  SDValue Tmp1098 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1099(CurDAG->getTargetNode(Opc658, N.getDebugLoc(), VT658, Tmp1097, Tmp1098), 0);
  SDValue Tmp1100 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1101(CurDAG->getTargetNode(Opc659, N.getDebugLoc(), VT659, Tmp1100), 0);
  SDValue Tmp1102 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp1103(CurDAG->getTargetNode(Opc660, N.getDebugLoc(), VT660, Tmp1102), 0);
  SDValue Tmp1104(CurDAG->getTargetNode(Opc661, N.getDebugLoc(), VT661, Tmp1099, Tmp1101, Tmp1103), 0);
  SDValue Tmp1106(CurDAG->getTargetNode(Opc662, N.getDebugLoc(), VT662, N0), 0);
  SDValue Tmp1107 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1108(CurDAG->getTargetNode(Opc663, N.getDebugLoc(), VT663, Tmp1107), 0);
  SDValue Tmp1109 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1110(CurDAG->getTargetNode(Opc664, N.getDebugLoc(), VT664, Tmp1109), 0);
  SDValue Tmp1111(CurDAG->getTargetNode(Opc665, N.getDebugLoc(), VT665, Tmp1106, Tmp1108, Tmp1110), 0);
  SDValue Tmp1113(CurDAG->getTargetNode(Opc666, N.getDebugLoc(), VT666, N1), 0);
  SDValue Tmp1114 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1115(CurDAG->getTargetNode(Opc667, N.getDebugLoc(), VT667, Tmp1114), 0);
  SDValue Tmp1116 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1117(CurDAG->getTargetNode(Opc668, N.getDebugLoc(), VT668, Tmp1116), 0);
  SDValue Tmp1118(CurDAG->getTargetNode(Opc669, N.getDebugLoc(), VT669, Tmp1113, Tmp1115, Tmp1117), 0);
  SDValue Tmp1119(CurDAG->getTargetNode(Opc670, N.getDebugLoc(), VT670, Tmp1111, Tmp1118), 0);
  SDValue Tmp1121(CurDAG->getTargetNode(Opc671, N.getDebugLoc(), VT671, N0), 0);
  SDValue Tmp1122 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1123(CurDAG->getTargetNode(Opc672, N.getDebugLoc(), VT672, Tmp1122), 0);
  SDValue Tmp1124 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1125(CurDAG->getTargetNode(Opc673, N.getDebugLoc(), VT673, Tmp1124), 0);
  SDValue Tmp1126(CurDAG->getTargetNode(Opc674, N.getDebugLoc(), VT674, Tmp1121, Tmp1123, Tmp1125), 0);
  SDValue Tmp1128(CurDAG->getTargetNode(Opc675, N.getDebugLoc(), VT675, N1), 0);
  SDValue Tmp1129 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1130(CurDAG->getTargetNode(Opc676, N.getDebugLoc(), VT676, Tmp1128, Tmp1129), 0);
  SDValue Tmp1131(CurDAG->getTargetNode(Opc677, N.getDebugLoc(), VT677, Tmp1126, Tmp1130), 0);
  SDValue Tmp1132 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1133(CurDAG->getTargetNode(Opc678, N.getDebugLoc(), VT678, Tmp1131, Tmp1132), 0);
  SDValue Tmp1134 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1135(CurDAG->getTargetNode(Opc679, N.getDebugLoc(), VT679, Tmp1134), 0);
  SDValue Tmp1136 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp1137(CurDAG->getTargetNode(Opc680, N.getDebugLoc(), VT680, Tmp1136), 0);
  SDValue Tmp1138(CurDAG->getTargetNode(Opc681, N.getDebugLoc(), VT681, Tmp1133, Tmp1135, Tmp1137), 0);
  SDValue Tmp1139(CurDAG->getTargetNode(Opc682, N.getDebugLoc(), VT682, Tmp1119, Tmp1138), 0);
  SDValue Tmp1141(CurDAG->getTargetNode(Opc683, N.getDebugLoc(), VT683, N0), 0);
  SDValue Tmp1142 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1143(CurDAG->getTargetNode(Opc684, N.getDebugLoc(), VT684, Tmp1142), 0);
  SDValue Tmp1144 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1145(CurDAG->getTargetNode(Opc685, N.getDebugLoc(), VT685, Tmp1144), 0);
  SDValue Tmp1146(CurDAG->getTargetNode(Opc686, N.getDebugLoc(), VT686, Tmp1141, Tmp1143, Tmp1145), 0);
  SDValue Tmp1148(CurDAG->getTargetNode(Opc687, N.getDebugLoc(), VT687, N1), 0);
  SDValue Tmp1149 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1150(CurDAG->getTargetNode(Opc688, N.getDebugLoc(), VT688, Tmp1149), 0);
  SDValue Tmp1151 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1152(CurDAG->getTargetNode(Opc689, N.getDebugLoc(), VT689, Tmp1151), 0);
  SDValue Tmp1153(CurDAG->getTargetNode(Opc690, N.getDebugLoc(), VT690, Tmp1148, Tmp1150, Tmp1152), 0);
  SDValue Tmp1154(CurDAG->getTargetNode(Opc691, N.getDebugLoc(), VT691, Tmp1146, Tmp1153), 0);
  SDValue Tmp1156(CurDAG->getTargetNode(Opc692, N.getDebugLoc(), VT692, N0), 0);
  SDValue Tmp1157 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1158(CurDAG->getTargetNode(Opc693, N.getDebugLoc(), VT693, Tmp1157), 0);
  SDValue Tmp1159 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1160(CurDAG->getTargetNode(Opc694, N.getDebugLoc(), VT694, Tmp1159), 0);
  SDValue Tmp1161(CurDAG->getTargetNode(Opc695, N.getDebugLoc(), VT695, Tmp1156, Tmp1158, Tmp1160), 0);
  SDValue Tmp1163(CurDAG->getTargetNode(Opc696, N.getDebugLoc(), VT696, N1), 0);
  SDValue Tmp1164 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1165(CurDAG->getTargetNode(Opc697, N.getDebugLoc(), VT697, Tmp1163, Tmp1164), 0);
  SDValue Tmp1166(CurDAG->getTargetNode(Opc698, N.getDebugLoc(), VT698, Tmp1161, Tmp1165), 0);
  SDValue Tmp1167 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1168(CurDAG->getTargetNode(Opc699, N.getDebugLoc(), VT699, Tmp1166, Tmp1167), 0);
  SDValue Tmp1169 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1170(CurDAG->getTargetNode(Opc700, N.getDebugLoc(), VT700, Tmp1169), 0);
  SDValue Tmp1171 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp1172(CurDAG->getTargetNode(Opc701, N.getDebugLoc(), VT701, Tmp1171), 0);
  SDValue Tmp1173(CurDAG->getTargetNode(Opc702, N.getDebugLoc(), VT702, Tmp1168, Tmp1170, Tmp1172), 0);
  SDValue Tmp1174(CurDAG->getTargetNode(Opc703, N.getDebugLoc(), VT703, Tmp1154, Tmp1173), 0);
  SDValue Tmp1176(CurDAG->getTargetNode(Opc704, N.getDebugLoc(), VT704, Tmp1139, Tmp1174, N2), 0);
  SDValue Tmp1177(CurDAG->getTargetNode(Opc705, N.getDebugLoc(), VT705, Tmp1085, Tmp1104, Tmp1176), 0);
  SDValue Tmp1179(CurDAG->getTargetNode(Opc706, N.getDebugLoc(), VT706, N1), 0);
  SDValue Tmp1180 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1181(CurDAG->getTargetNode(Opc707, N.getDebugLoc(), VT707, Tmp1180), 0);
  SDValue Tmp1182 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1183(CurDAG->getTargetNode(Opc708, N.getDebugLoc(), VT708, Tmp1182), 0);
  SDValue Tmp1184(CurDAG->getTargetNode(Opc709, N.getDebugLoc(), VT709, Tmp1179, Tmp1181, Tmp1183), 0);
  SDValue Tmp1186(CurDAG->getTargetNode(Opc710, N.getDebugLoc(), VT710, N0), 0);
  SDValue Tmp1187 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1188(CurDAG->getTargetNode(Opc711, N.getDebugLoc(), VT711, Tmp1186, Tmp1187), 0);
  SDValue Tmp1189(CurDAG->getTargetNode(Opc712, N.getDebugLoc(), VT712, Tmp1184, Tmp1188), 0);
  SDValue Tmp1190 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1191(CurDAG->getTargetNode(Opc713, N.getDebugLoc(), VT713, Tmp1189, Tmp1190), 0);
  SDValue Tmp1192 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1193(CurDAG->getTargetNode(Opc714, N.getDebugLoc(), VT714, Tmp1192), 0);
  SDValue Tmp1194 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp1195(CurDAG->getTargetNode(Opc715, N.getDebugLoc(), VT715, Tmp1194), 0);
  SDValue Tmp1196(CurDAG->getTargetNode(Opc716, N.getDebugLoc(), VT716, Tmp1191, Tmp1193, Tmp1195), 0);
  SDValue Tmp1197(CurDAG->getTargetNode(Opc717, N.getDebugLoc(), VT717, Tmp1177, Tmp1196), 0);
  SDValue Tmp1199(CurDAG->getTargetNode(Opc718, N.getDebugLoc(), VT718, N0), 0);
  SDValue Tmp1200 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1201(CurDAG->getTargetNode(Opc719, N.getDebugLoc(), VT719, Tmp1200), 0);
  SDValue Tmp1202 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1203(CurDAG->getTargetNode(Opc720, N.getDebugLoc(), VT720, Tmp1202), 0);
  SDValue Tmp1204(CurDAG->getTargetNode(Opc721, N.getDebugLoc(), VT721, Tmp1199, Tmp1201, Tmp1203), 0);
  SDValue Tmp1206(CurDAG->getTargetNode(Opc722, N.getDebugLoc(), VT722, N1), 0);
  SDValue Tmp1207 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1208(CurDAG->getTargetNode(Opc723, N.getDebugLoc(), VT723, Tmp1207), 0);
  SDValue Tmp1209 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1210(CurDAG->getTargetNode(Opc724, N.getDebugLoc(), VT724, Tmp1209), 0);
  SDValue Tmp1211(CurDAG->getTargetNode(Opc725, N.getDebugLoc(), VT725, Tmp1206, Tmp1208, Tmp1210), 0);
  SDValue Tmp1212(CurDAG->getTargetNode(Opc726, N.getDebugLoc(), VT726, Tmp1204, Tmp1211), 0);
  SDValue Tmp1214(CurDAG->getTargetNode(Opc727, N.getDebugLoc(), VT727, N0), 0);
  SDValue Tmp1215 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1216(CurDAG->getTargetNode(Opc728, N.getDebugLoc(), VT728, Tmp1215), 0);
  SDValue Tmp1217 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1218(CurDAG->getTargetNode(Opc729, N.getDebugLoc(), VT729, Tmp1217), 0);
  SDValue Tmp1219(CurDAG->getTargetNode(Opc730, N.getDebugLoc(), VT730, Tmp1214, Tmp1216, Tmp1218), 0);
  SDValue Tmp1221(CurDAG->getTargetNode(Opc731, N.getDebugLoc(), VT731, N1), 0);
  SDValue Tmp1222 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1223(CurDAG->getTargetNode(Opc732, N.getDebugLoc(), VT732, Tmp1221, Tmp1222), 0);
  SDValue Tmp1224(CurDAG->getTargetNode(Opc733, N.getDebugLoc(), VT733, Tmp1219, Tmp1223), 0);
  SDValue Tmp1225 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1226(CurDAG->getTargetNode(Opc734, N.getDebugLoc(), VT734, Tmp1224, Tmp1225), 0);
  SDValue Tmp1227 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1228(CurDAG->getTargetNode(Opc735, N.getDebugLoc(), VT735, Tmp1227), 0);
  SDValue Tmp1229 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp1230(CurDAG->getTargetNode(Opc736, N.getDebugLoc(), VT736, Tmp1229), 0);
  SDValue Tmp1231(CurDAG->getTargetNode(Opc737, N.getDebugLoc(), VT737, Tmp1226, Tmp1228, Tmp1230), 0);
  SDValue Tmp1233(CurDAG->getTargetNode(Opc738, N.getDebugLoc(), VT738, N0), 0);
  SDValue Tmp1234 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1235(CurDAG->getTargetNode(Opc739, N.getDebugLoc(), VT739, Tmp1234), 0);
  SDValue Tmp1236 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1237(CurDAG->getTargetNode(Opc740, N.getDebugLoc(), VT740, Tmp1236), 0);
  SDValue Tmp1238(CurDAG->getTargetNode(Opc741, N.getDebugLoc(), VT741, Tmp1233, Tmp1235, Tmp1237), 0);
  SDValue Tmp1240(CurDAG->getTargetNode(Opc742, N.getDebugLoc(), VT742, N1), 0);
  SDValue Tmp1241 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1242(CurDAG->getTargetNode(Opc743, N.getDebugLoc(), VT743, Tmp1241), 0);
  SDValue Tmp1243 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1244(CurDAG->getTargetNode(Opc744, N.getDebugLoc(), VT744, Tmp1243), 0);
  SDValue Tmp1245(CurDAG->getTargetNode(Opc745, N.getDebugLoc(), VT745, Tmp1240, Tmp1242, Tmp1244), 0);
  SDValue Tmp1246(CurDAG->getTargetNode(Opc746, N.getDebugLoc(), VT746, Tmp1238, Tmp1245), 0);
  SDValue Tmp1248(CurDAG->getTargetNode(Opc747, N.getDebugLoc(), VT747, N0), 0);
  SDValue Tmp1249 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1250(CurDAG->getTargetNode(Opc748, N.getDebugLoc(), VT748, Tmp1249), 0);
  SDValue Tmp1251 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1252(CurDAG->getTargetNode(Opc749, N.getDebugLoc(), VT749, Tmp1251), 0);
  SDValue Tmp1253(CurDAG->getTargetNode(Opc750, N.getDebugLoc(), VT750, Tmp1248, Tmp1250, Tmp1252), 0);
  SDValue Tmp1255(CurDAG->getTargetNode(Opc751, N.getDebugLoc(), VT751, N1), 0);
  SDValue Tmp1256 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1257(CurDAG->getTargetNode(Opc752, N.getDebugLoc(), VT752, Tmp1255, Tmp1256), 0);
  SDValue Tmp1258(CurDAG->getTargetNode(Opc753, N.getDebugLoc(), VT753, Tmp1253, Tmp1257), 0);
  SDValue Tmp1259 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1260(CurDAG->getTargetNode(Opc754, N.getDebugLoc(), VT754, Tmp1258, Tmp1259), 0);
  SDValue Tmp1261 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1262(CurDAG->getTargetNode(Opc755, N.getDebugLoc(), VT755, Tmp1261), 0);
  SDValue Tmp1263 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp1264(CurDAG->getTargetNode(Opc756, N.getDebugLoc(), VT756, Tmp1263), 0);
  SDValue Tmp1265(CurDAG->getTargetNode(Opc757, N.getDebugLoc(), VT757, Tmp1260, Tmp1262, Tmp1264), 0);
  SDValue Tmp1266(CurDAG->getTargetNode(Opc758, N.getDebugLoc(), VT758, Tmp1246, Tmp1265), 0);
  SDValue Tmp1268(CurDAG->getTargetNode(Opc759, N.getDebugLoc(), VT759, N0), 0);
  SDValue Tmp1269 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1270(CurDAG->getTargetNode(Opc760, N.getDebugLoc(), VT760, Tmp1269), 0);
  SDValue Tmp1271 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1272(CurDAG->getTargetNode(Opc761, N.getDebugLoc(), VT761, Tmp1271), 0);
  SDValue Tmp1273(CurDAG->getTargetNode(Opc762, N.getDebugLoc(), VT762, Tmp1268, Tmp1270, Tmp1272), 0);
  SDValue Tmp1275(CurDAG->getTargetNode(Opc763, N.getDebugLoc(), VT763, N1), 0);
  SDValue Tmp1276 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1277(CurDAG->getTargetNode(Opc764, N.getDebugLoc(), VT764, Tmp1276), 0);
  SDValue Tmp1278 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1279(CurDAG->getTargetNode(Opc765, N.getDebugLoc(), VT765, Tmp1278), 0);
  SDValue Tmp1280(CurDAG->getTargetNode(Opc766, N.getDebugLoc(), VT766, Tmp1275, Tmp1277, Tmp1279), 0);
  SDValue Tmp1281(CurDAG->getTargetNode(Opc767, N.getDebugLoc(), VT767, Tmp1273, Tmp1280), 0);
  SDValue Tmp1283(CurDAG->getTargetNode(Opc768, N.getDebugLoc(), VT768, N0), 0);
  SDValue Tmp1284 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1285(CurDAG->getTargetNode(Opc769, N.getDebugLoc(), VT769, Tmp1284), 0);
  SDValue Tmp1286 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1287(CurDAG->getTargetNode(Opc770, N.getDebugLoc(), VT770, Tmp1286), 0);
  SDValue Tmp1288(CurDAG->getTargetNode(Opc771, N.getDebugLoc(), VT771, Tmp1283, Tmp1285, Tmp1287), 0);
  SDValue Tmp1290(CurDAG->getTargetNode(Opc772, N.getDebugLoc(), VT772, N1), 0);
  SDValue Tmp1291 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1292(CurDAG->getTargetNode(Opc773, N.getDebugLoc(), VT773, Tmp1290, Tmp1291), 0);
  SDValue Tmp1293(CurDAG->getTargetNode(Opc774, N.getDebugLoc(), VT774, Tmp1288, Tmp1292), 0);
  SDValue Tmp1294 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1295(CurDAG->getTargetNode(Opc775, N.getDebugLoc(), VT775, Tmp1293, Tmp1294), 0);
  SDValue Tmp1296 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1297(CurDAG->getTargetNode(Opc776, N.getDebugLoc(), VT776, Tmp1296), 0);
  SDValue Tmp1298 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp1299(CurDAG->getTargetNode(Opc777, N.getDebugLoc(), VT777, Tmp1298), 0);
  SDValue Tmp1300(CurDAG->getTargetNode(Opc778, N.getDebugLoc(), VT778, Tmp1295, Tmp1297, Tmp1299), 0);
  SDValue Tmp1301(CurDAG->getTargetNode(Opc779, N.getDebugLoc(), VT779, Tmp1281, Tmp1300), 0);
  SDValue Tmp1303(CurDAG->getTargetNode(Opc780, N.getDebugLoc(), VT780, Tmp1266, Tmp1301, N2), 0);
  SDValue Tmp1304(CurDAG->getTargetNode(Opc781, N.getDebugLoc(), VT781, Tmp1212, Tmp1231, Tmp1303), 0);
  SDValue Tmp1306(CurDAG->getTargetNode(Opc782, N.getDebugLoc(), VT782, N1), 0);
  SDValue Tmp1307 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1308(CurDAG->getTargetNode(Opc783, N.getDebugLoc(), VT783, Tmp1307), 0);
  SDValue Tmp1309 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1310(CurDAG->getTargetNode(Opc784, N.getDebugLoc(), VT784, Tmp1309), 0);
  SDValue Tmp1311(CurDAG->getTargetNode(Opc785, N.getDebugLoc(), VT785, Tmp1306, Tmp1308, Tmp1310), 0);
  SDValue Tmp1313(CurDAG->getTargetNode(Opc786, N.getDebugLoc(), VT786, N0), 0);
  SDValue Tmp1314 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1315(CurDAG->getTargetNode(Opc787, N.getDebugLoc(), VT787, Tmp1313, Tmp1314), 0);
  SDValue Tmp1316(CurDAG->getTargetNode(Opc788, N.getDebugLoc(), VT788, Tmp1311, Tmp1315), 0);
  SDValue Tmp1317 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1318(CurDAG->getTargetNode(Opc789, N.getDebugLoc(), VT789, Tmp1316, Tmp1317), 0);
  SDValue Tmp1319 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1320(CurDAG->getTargetNode(Opc790, N.getDebugLoc(), VT790, Tmp1319), 0);
  SDValue Tmp1321 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp1322(CurDAG->getTargetNode(Opc791, N.getDebugLoc(), VT791, Tmp1321), 0);
  SDValue Tmp1323(CurDAG->getTargetNode(Opc792, N.getDebugLoc(), VT792, Tmp1318, Tmp1320, Tmp1322), 0);
  SDValue Tmp1324(CurDAG->getTargetNode(Opc793, N.getDebugLoc(), VT793, Tmp1304, Tmp1323), 0);
  SDValue Tmp1326(CurDAG->getTargetNode(Opc794, N.getDebugLoc(), VT794, Tmp1197, Tmp1324, N2), 0);
  SDValue Tmp1327(CurDAG->getTargetNode(Opc795, N.getDebugLoc(), VT795, Tmp1051, Tmp1070, Tmp1326), 0);
  SDValue Tmp1329(CurDAG->getTargetNode(Opc796, N.getDebugLoc(), VT796, N1), 0);
  SDValue Tmp1330 = CurDAG->getTargetConstant(0x4ULL, MVT::i32);
  SDValue Tmp1331(CurDAG->getTargetNode(Opc797, N.getDebugLoc(), VT797, Tmp1329, Tmp1330), 0);
  SDValue Tmp1333(CurDAG->getTargetNode(Opc798, N.getDebugLoc(), VT798, N0), 0);
  SDValue Tmp1334 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1335(CurDAG->getTargetNode(Opc799, N.getDebugLoc(), VT799, Tmp1334), 0);
  SDValue Tmp1336 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp1337(CurDAG->getTargetNode(Opc800, N.getDebugLoc(), VT800, Tmp1336), 0);
  SDValue Tmp1338(CurDAG->getTargetNode(Opc801, N.getDebugLoc(), VT801, Tmp1333, Tmp1335, Tmp1337), 0);
  SDValue Tmp1339(CurDAG->getTargetNode(Opc802, N.getDebugLoc(), VT802, Tmp1331, Tmp1338), 0);
  SDValue Tmp1341(CurDAG->getTargetNode(Opc803, N.getDebugLoc(), VT803, N0), 0);
  SDValue Tmp1342 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1343(CurDAG->getTargetNode(Opc804, N.getDebugLoc(), VT804, Tmp1342), 0);
  SDValue Tmp1344 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp1345(CurDAG->getTargetNode(Opc805, N.getDebugLoc(), VT805, Tmp1344), 0);
  SDValue Tmp1346(CurDAG->getTargetNode(Opc806, N.getDebugLoc(), VT806, Tmp1341, Tmp1343, Tmp1345), 0);
  SDValue Tmp1348(CurDAG->getTargetNode(Opc807, N.getDebugLoc(), VT807, N1), 0);
  SDValue Tmp1349 = CurDAG->getTargetConstant(0x4ULL, MVT::i32);
  SDValue Tmp1350(CurDAG->getTargetNode(Opc808, N.getDebugLoc(), VT808, Tmp1348, Tmp1349), 0);
  SDValue Tmp1351(CurDAG->getTargetNode(Opc809, N.getDebugLoc(), VT809, Tmp1346, Tmp1350), 0);
  SDValue Tmp1352(CurDAG->getTargetNode(Opc810, N.getDebugLoc(), VT810, Tmp1339, Tmp1351), 0);
  SDValue Tmp1354(CurDAG->getTargetNode(Opc811, N.getDebugLoc(), VT811, N1), 0);
  SDValue Tmp1355 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1356(CurDAG->getTargetNode(Opc812, N.getDebugLoc(), VT812, Tmp1355), 0);
  SDValue Tmp1357 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp1358(CurDAG->getTargetNode(Opc813, N.getDebugLoc(), VT813, Tmp1357), 0);
  SDValue Tmp1359(CurDAG->getTargetNode(Opc814, N.getDebugLoc(), VT814, Tmp1354, Tmp1356, Tmp1358), 0);
  SDValue Tmp1361(CurDAG->getTargetNode(Opc815, N.getDebugLoc(), VT815, N0), 0);
  SDValue Tmp1362 = CurDAG->getTargetConstant(0x4ULL, MVT::i32);
  SDValue Tmp1363(CurDAG->getTargetNode(Opc816, N.getDebugLoc(), VT816, Tmp1361, Tmp1362), 0);
  SDValue Tmp1364(CurDAG->getTargetNode(Opc817, N.getDebugLoc(), VT817, Tmp1359, Tmp1363), 0);
  SDValue Tmp1366(CurDAG->getTargetNode(Opc818, N.getDebugLoc(), VT818, N0), 0);
  SDValue Tmp1367 = CurDAG->getTargetConstant(0x4ULL, MVT::i32);
  SDValue Tmp1368(CurDAG->getTargetNode(Opc819, N.getDebugLoc(), VT819, Tmp1366, Tmp1367), 0);
  SDValue Tmp1370(CurDAG->getTargetNode(Opc820, N.getDebugLoc(), VT820, N1), 0);
  SDValue Tmp1371 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1372(CurDAG->getTargetNode(Opc821, N.getDebugLoc(), VT821, Tmp1371), 0);
  SDValue Tmp1373 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp1374(CurDAG->getTargetNode(Opc822, N.getDebugLoc(), VT822, Tmp1373), 0);
  SDValue Tmp1375(CurDAG->getTargetNode(Opc823, N.getDebugLoc(), VT823, Tmp1370, Tmp1372, Tmp1374), 0);
  SDValue Tmp1376(CurDAG->getTargetNode(Opc824, N.getDebugLoc(), VT824, Tmp1368, Tmp1375), 0);
  SDValue Tmp1378(CurDAG->getTargetNode(Opc825, N.getDebugLoc(), VT825, N0), 0);
  SDValue Tmp1379 = CurDAG->getTargetConstant(0x4ULL, MVT::i32);
  SDValue Tmp1380(CurDAG->getTargetNode(Opc826, N.getDebugLoc(), VT826, Tmp1378, Tmp1379), 0);
  SDValue Tmp1382(CurDAG->getTargetNode(Opc827, N.getDebugLoc(), VT827, N1), 0);
  SDValue Tmp1383 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1384(CurDAG->getTargetNode(Opc828, N.getDebugLoc(), VT828, Tmp1383), 0);
  SDValue Tmp1385 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp1386(CurDAG->getTargetNode(Opc829, N.getDebugLoc(), VT829, Tmp1385), 0);
  SDValue Tmp1387(CurDAG->getTargetNode(Opc830, N.getDebugLoc(), VT830, Tmp1382, Tmp1384, Tmp1386), 0);
  SDValue Tmp1388(CurDAG->getTargetNode(Opc831, N.getDebugLoc(), VT831, Tmp1380, Tmp1387), 0);
  SDValue Tmp1390(CurDAG->getTargetNode(Opc832, N.getDebugLoc(), VT832, N0), 0);
  SDValue Tmp1391 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1392(CurDAG->getTargetNode(Opc833, N.getDebugLoc(), VT833, Tmp1390, Tmp1391), 0);
  SDValue Tmp1394(CurDAG->getTargetNode(Opc834, N.getDebugLoc(), VT834, N1), 0);
  SDValue Tmp1395 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1396(CurDAG->getTargetNode(Opc835, N.getDebugLoc(), VT835, Tmp1394, Tmp1395), 0);
  SDValue Tmp1397(CurDAG->getTargetNode(Opc836, N.getDebugLoc(), VT836, Tmp1392, Tmp1396), 0);
  SDValue Tmp1399(CurDAG->getTargetNode(Opc837, N.getDebugLoc(), VT837, N0), 0);
  SDValue Tmp1400 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1401(CurDAG->getTargetNode(Opc838, N.getDebugLoc(), VT838, Tmp1399, Tmp1400), 0);
  SDValue Tmp1403(CurDAG->getTargetNode(Opc839, N.getDebugLoc(), VT839, N1), 0);
  SDValue Tmp1404 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1405(CurDAG->getTargetNode(Opc840, N.getDebugLoc(), VT840, Tmp1403, Tmp1404), 0);
  SDValue Tmp1406(CurDAG->getTargetNode(Opc841, N.getDebugLoc(), VT841, Tmp1401, Tmp1405), 0);
  SDValue Tmp1407(CurDAG->getTargetNode(Opc842, N.getDebugLoc(), VT842, Tmp1397, Tmp1406), 0);
  SDValue Tmp1408(CurDAG->getTargetNode(Opc843, N.getDebugLoc(), VT843, Tmp1388, Tmp1407), 0);
  SDValue Tmp1409(CurDAG->getTargetNode(Opc844, N.getDebugLoc(), VT844, Tmp1376, Tmp1408), 0);
  SDValue Tmp1410(CurDAG->getTargetNode(Opc845, N.getDebugLoc(), VT845, Tmp1364, Tmp1409), 0);
  SDValue Tmp1411(CurDAG->getTargetNode(Opc846, N.getDebugLoc(), VT846, Tmp1352, Tmp1410), 0);
  SDValue Tmp1412 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1413(CurDAG->getTargetNode(Opc847, N.getDebugLoc(), VT847, Tmp1412), 0);
  SDValue Tmp1414 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp1415(CurDAG->getTargetNode(Opc848, N.getDebugLoc(), VT848, Tmp1414), 0);
  SDValue Tmp1416(CurDAG->getTargetNode(Opc849, N.getDebugLoc(), VT849, Tmp1411, Tmp1413, Tmp1415), 0);
  SDValue Tmp1417(CurDAG->getTargetNode(Opc850, N.getDebugLoc(), VT850, Tmp1327, Tmp1416), 0);
  SDValue Tmp1419(CurDAG->getTargetNode(Opc851, N.getDebugLoc(), VT851, Tmp944, Tmp1417, N2), 0);
  SDValue Tmp1420(CurDAG->getTargetNode(Opc852, N.getDebugLoc(), VT852, Tmp382, Tmp471, Tmp1419), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc853, VT853, Tmp1420);
}
SDNode *Select_SPUISD_MUL64_MARKER_i64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  if (N2.getNode()->getValueType(0) == MVT::v4i32) {
    SDNode *Result = Emit_204(N, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::SHUFBv4i32, SPU::ADDXv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::SHUFBv4i32, SPU::ADDXv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::SHUFBv4i32, SPU::ADDXv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::SHUFBv4i32, SPU::ADDXv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHv4i32, SPU::Av4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYHv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYUv4i32, SPU::Av4i32, SPU::Av4i32, SPU::Av4i32, SPU::Av4i32, SPU::Av4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::SHUFBv4i32, SPU::ADDXv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::SHUFBv4i32, SPU::ADDXv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::SHUFBv4i32, SPU::ADDXv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::SHUFBv4i32, SPU::ADDXv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHv4i32, SPU::Av4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYHv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYUv4i32, SPU::Av4i32, SPU::Av4i32, SPU::Av4i32, SPU::Av4i32, SPU::Av4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::SHUFBv4i32, SPU::ADDXv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::SHUFBv4i32, SPU::ADDXv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::SHUFBv4i32, SPU::ADDXv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::SHUFBv4i32, SPU::ADDXv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHv4i32, SPU::Av4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYHv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::ORv2i64_i64, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYHv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::ORv2i64_i64, SPU::SHLQBYIv4i32, SPU::MPYUv4i32, SPU::Av4i32, SPU::Av4i32, SPU::Av4i32, SPU::Av4i32, SPU::Av4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::SHUFBv4i32, SPU::ADDXv4i32, SPU::ORi64_v2i64, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::i64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_205(const SDValue &N, unsigned Opc0, unsigned Opc1, unsigned Opc2, unsigned Opc3, unsigned Opc4, unsigned Opc5, unsigned Opc6, unsigned Opc7, unsigned Opc8, unsigned Opc9, unsigned Opc10, unsigned Opc11, unsigned Opc12, unsigned Opc13, unsigned Opc14, unsigned Opc15, unsigned Opc16, unsigned Opc17, unsigned Opc18, unsigned Opc19, unsigned Opc20, unsigned Opc21, unsigned Opc22, unsigned Opc23, unsigned Opc24, unsigned Opc25, unsigned Opc26, unsigned Opc27, unsigned Opc28, unsigned Opc29, unsigned Opc30, unsigned Opc31, unsigned Opc32, unsigned Opc33, unsigned Opc34, unsigned Opc35, unsigned Opc36, unsigned Opc37, unsigned Opc38, unsigned Opc39, unsigned Opc40, unsigned Opc41, unsigned Opc42, unsigned Opc43, unsigned Opc44, unsigned Opc45, unsigned Opc46, unsigned Opc47, unsigned Opc48, unsigned Opc49, unsigned Opc50, unsigned Opc51, unsigned Opc52, unsigned Opc53, unsigned Opc54, unsigned Opc55, unsigned Opc56, unsigned Opc57, unsigned Opc58, unsigned Opc59, unsigned Opc60, unsigned Opc61, unsigned Opc62, unsigned Opc63, unsigned Opc64, unsigned Opc65, unsigned Opc66, unsigned Opc67, unsigned Opc68, unsigned Opc69, unsigned Opc70, unsigned Opc71, unsigned Opc72, unsigned Opc73, unsigned Opc74, unsigned Opc75, unsigned Opc76, unsigned Opc77, unsigned Opc78, unsigned Opc79, unsigned Opc80, unsigned Opc81, unsigned Opc82, unsigned Opc83, unsigned Opc84, unsigned Opc85, unsigned Opc86, unsigned Opc87, unsigned Opc88, unsigned Opc89, unsigned Opc90, unsigned Opc91, unsigned Opc92, unsigned Opc93, unsigned Opc94, unsigned Opc95, unsigned Opc96, unsigned Opc97, unsigned Opc98, unsigned Opc99, unsigned Opc100, unsigned Opc101, unsigned Opc102, unsigned Opc103, unsigned Opc104, unsigned Opc105, unsigned Opc106, unsigned Opc107, unsigned Opc108, unsigned Opc109, unsigned Opc110, unsigned Opc111, unsigned Opc112, unsigned Opc113, unsigned Opc114, unsigned Opc115, unsigned Opc116, unsigned Opc117, unsigned Opc118, unsigned Opc119, unsigned Opc120, unsigned Opc121, unsigned Opc122, unsigned Opc123, unsigned Opc124, unsigned Opc125, unsigned Opc126, unsigned Opc127, unsigned Opc128, unsigned Opc129, unsigned Opc130, unsigned Opc131, unsigned Opc132, unsigned Opc133, unsigned Opc134, unsigned Opc135, unsigned Opc136, unsigned Opc137, unsigned Opc138, unsigned Opc139, unsigned Opc140, unsigned Opc141, unsigned Opc142, unsigned Opc143, unsigned Opc144, unsigned Opc145, unsigned Opc146, unsigned Opc147, unsigned Opc148, unsigned Opc149, unsigned Opc150, unsigned Opc151, unsigned Opc152, unsigned Opc153, unsigned Opc154, unsigned Opc155, unsigned Opc156, unsigned Opc157, unsigned Opc158, unsigned Opc159, unsigned Opc160, unsigned Opc161, unsigned Opc162, unsigned Opc163, unsigned Opc164, unsigned Opc165, unsigned Opc166, unsigned Opc167, unsigned Opc168, unsigned Opc169, unsigned Opc170, unsigned Opc171, unsigned Opc172, unsigned Opc173, unsigned Opc174, unsigned Opc175, unsigned Opc176, unsigned Opc177, unsigned Opc178, unsigned Opc179, unsigned Opc180, unsigned Opc181, unsigned Opc182, unsigned Opc183, unsigned Opc184, unsigned Opc185, unsigned Opc186, unsigned Opc187, unsigned Opc188, unsigned Opc189, unsigned Opc190, unsigned Opc191, unsigned Opc192, unsigned Opc193, unsigned Opc194, unsigned Opc195, unsigned Opc196, unsigned Opc197, unsigned Opc198, unsigned Opc199, unsigned Opc200, unsigned Opc201, unsigned Opc202, unsigned Opc203, unsigned Opc204, unsigned Opc205, unsigned Opc206, unsigned Opc207, unsigned Opc208, unsigned Opc209, unsigned Opc210, unsigned Opc211, unsigned Opc212, unsigned Opc213, unsigned Opc214, unsigned Opc215, unsigned Opc216, unsigned Opc217, unsigned Opc218, unsigned Opc219, unsigned Opc220, unsigned Opc221, unsigned Opc222, unsigned Opc223, unsigned Opc224, unsigned Opc225, unsigned Opc226, unsigned Opc227, unsigned Opc228, unsigned Opc229, unsigned Opc230, unsigned Opc231, unsigned Opc232, unsigned Opc233, unsigned Opc234, unsigned Opc235, unsigned Opc236, unsigned Opc237, unsigned Opc238, unsigned Opc239, unsigned Opc240, unsigned Opc241, unsigned Opc242, unsigned Opc243, unsigned Opc244, unsigned Opc245, unsigned Opc246, unsigned Opc247, unsigned Opc248, unsigned Opc249, unsigned Opc250, unsigned Opc251, unsigned Opc252, unsigned Opc253, unsigned Opc254, unsigned Opc255, unsigned Opc256, unsigned Opc257, unsigned Opc258, unsigned Opc259, unsigned Opc260, unsigned Opc261, unsigned Opc262, unsigned Opc263, unsigned Opc264, unsigned Opc265, unsigned Opc266, unsigned Opc267, unsigned Opc268, unsigned Opc269, unsigned Opc270, unsigned Opc271, unsigned Opc272, unsigned Opc273, unsigned Opc274, unsigned Opc275, unsigned Opc276, unsigned Opc277, unsigned Opc278, unsigned Opc279, unsigned Opc280, unsigned Opc281, unsigned Opc282, unsigned Opc283, unsigned Opc284, unsigned Opc285, unsigned Opc286, unsigned Opc287, unsigned Opc288, unsigned Opc289, unsigned Opc290, unsigned Opc291, unsigned Opc292, unsigned Opc293, unsigned Opc294, unsigned Opc295, unsigned Opc296, unsigned Opc297, unsigned Opc298, unsigned Opc299, unsigned Opc300, unsigned Opc301, unsigned Opc302, unsigned Opc303, unsigned Opc304, unsigned Opc305, unsigned Opc306, unsigned Opc307, unsigned Opc308, unsigned Opc309, unsigned Opc310, unsigned Opc311, unsigned Opc312, unsigned Opc313, unsigned Opc314, unsigned Opc315, unsigned Opc316, unsigned Opc317, unsigned Opc318, unsigned Opc319, unsigned Opc320, unsigned Opc321, unsigned Opc322, unsigned Opc323, unsigned Opc324, unsigned Opc325, unsigned Opc326, unsigned Opc327, unsigned Opc328, unsigned Opc329, unsigned Opc330, unsigned Opc331, unsigned Opc332, unsigned Opc333, unsigned Opc334, unsigned Opc335, unsigned Opc336, unsigned Opc337, unsigned Opc338, unsigned Opc339, unsigned Opc340, unsigned Opc341, unsigned Opc342, unsigned Opc343, unsigned Opc344, unsigned Opc345, unsigned Opc346, unsigned Opc347, unsigned Opc348, unsigned Opc349, unsigned Opc350, unsigned Opc351, unsigned Opc352, unsigned Opc353, unsigned Opc354, unsigned Opc355, unsigned Opc356, unsigned Opc357, unsigned Opc358, unsigned Opc359, unsigned Opc360, unsigned Opc361, unsigned Opc362, unsigned Opc363, unsigned Opc364, unsigned Opc365, unsigned Opc366, unsigned Opc367, unsigned Opc368, unsigned Opc369, unsigned Opc370, unsigned Opc371, unsigned Opc372, unsigned Opc373, unsigned Opc374, unsigned Opc375, unsigned Opc376, unsigned Opc377, unsigned Opc378, unsigned Opc379, unsigned Opc380, unsigned Opc381, unsigned Opc382, unsigned Opc383, unsigned Opc384, unsigned Opc385, unsigned Opc386, unsigned Opc387, unsigned Opc388, unsigned Opc389, unsigned Opc390, unsigned Opc391, unsigned Opc392, unsigned Opc393, unsigned Opc394, unsigned Opc395, unsigned Opc396, unsigned Opc397, unsigned Opc398, unsigned Opc399, unsigned Opc400, unsigned Opc401, unsigned Opc402, unsigned Opc403, unsigned Opc404, unsigned Opc405, unsigned Opc406, unsigned Opc407, unsigned Opc408, unsigned Opc409, unsigned Opc410, unsigned Opc411, unsigned Opc412, unsigned Opc413, unsigned Opc414, unsigned Opc415, unsigned Opc416, unsigned Opc417, unsigned Opc418, unsigned Opc419, unsigned Opc420, unsigned Opc421, unsigned Opc422, unsigned Opc423, unsigned Opc424, unsigned Opc425, unsigned Opc426, unsigned Opc427, unsigned Opc428, unsigned Opc429, unsigned Opc430, unsigned Opc431, unsigned Opc432, unsigned Opc433, unsigned Opc434, unsigned Opc435, unsigned Opc436, unsigned Opc437, unsigned Opc438, unsigned Opc439, unsigned Opc440, unsigned Opc441, unsigned Opc442, unsigned Opc443, unsigned Opc444, unsigned Opc445, unsigned Opc446, unsigned Opc447, unsigned Opc448, unsigned Opc449, unsigned Opc450, unsigned Opc451, unsigned Opc452, unsigned Opc453, unsigned Opc454, unsigned Opc455, unsigned Opc456, unsigned Opc457, unsigned Opc458, unsigned Opc459, unsigned Opc460, unsigned Opc461, unsigned Opc462, unsigned Opc463, unsigned Opc464, unsigned Opc465, unsigned Opc466, unsigned Opc467, unsigned Opc468, unsigned Opc469, unsigned Opc470, unsigned Opc471, unsigned Opc472, unsigned Opc473, unsigned Opc474, unsigned Opc475, unsigned Opc476, unsigned Opc477, unsigned Opc478, unsigned Opc479, unsigned Opc480, unsigned Opc481, unsigned Opc482, unsigned Opc483, unsigned Opc484, unsigned Opc485, unsigned Opc486, unsigned Opc487, unsigned Opc488, unsigned Opc489, unsigned Opc490, unsigned Opc491, unsigned Opc492, unsigned Opc493, unsigned Opc494, unsigned Opc495, unsigned Opc496, unsigned Opc497, unsigned Opc498, unsigned Opc499, unsigned Opc500, unsigned Opc501, unsigned Opc502, unsigned Opc503, unsigned Opc504, unsigned Opc505, unsigned Opc506, unsigned Opc507, unsigned Opc508, unsigned Opc509, unsigned Opc510, unsigned Opc511, unsigned Opc512, unsigned Opc513, unsigned Opc514, unsigned Opc515, unsigned Opc516, unsigned Opc517, unsigned Opc518, unsigned Opc519, unsigned Opc520, unsigned Opc521, unsigned Opc522, unsigned Opc523, unsigned Opc524, unsigned Opc525, unsigned Opc526, unsigned Opc527, unsigned Opc528, unsigned Opc529, unsigned Opc530, unsigned Opc531, unsigned Opc532, unsigned Opc533, unsigned Opc534, unsigned Opc535, unsigned Opc536, unsigned Opc537, unsigned Opc538, unsigned Opc539, unsigned Opc540, unsigned Opc541, unsigned Opc542, unsigned Opc543, unsigned Opc544, unsigned Opc545, unsigned Opc546, unsigned Opc547, unsigned Opc548, unsigned Opc549, unsigned Opc550, unsigned Opc551, unsigned Opc552, unsigned Opc553, unsigned Opc554, unsigned Opc555, unsigned Opc556, unsigned Opc557, unsigned Opc558, unsigned Opc559, unsigned Opc560, unsigned Opc561, unsigned Opc562, unsigned Opc563, unsigned Opc564, unsigned Opc565, unsigned Opc566, unsigned Opc567, unsigned Opc568, unsigned Opc569, unsigned Opc570, unsigned Opc571, unsigned Opc572, unsigned Opc573, unsigned Opc574, unsigned Opc575, unsigned Opc576, unsigned Opc577, unsigned Opc578, unsigned Opc579, unsigned Opc580, unsigned Opc581, unsigned Opc582, unsigned Opc583, unsigned Opc584, unsigned Opc585, unsigned Opc586, unsigned Opc587, unsigned Opc588, unsigned Opc589, unsigned Opc590, unsigned Opc591, unsigned Opc592, unsigned Opc593, unsigned Opc594, unsigned Opc595, unsigned Opc596, unsigned Opc597, unsigned Opc598, unsigned Opc599, unsigned Opc600, unsigned Opc601, unsigned Opc602, unsigned Opc603, unsigned Opc604, unsigned Opc605, unsigned Opc606, unsigned Opc607, unsigned Opc608, unsigned Opc609, unsigned Opc610, unsigned Opc611, unsigned Opc612, unsigned Opc613, unsigned Opc614, unsigned Opc615, unsigned Opc616, unsigned Opc617, unsigned Opc618, unsigned Opc619, unsigned Opc620, unsigned Opc621, unsigned Opc622, unsigned Opc623, unsigned Opc624, unsigned Opc625, unsigned Opc626, unsigned Opc627, unsigned Opc628, unsigned Opc629, unsigned Opc630, unsigned Opc631, unsigned Opc632, unsigned Opc633, unsigned Opc634, unsigned Opc635, unsigned Opc636, unsigned Opc637, unsigned Opc638, unsigned Opc639, unsigned Opc640, unsigned Opc641, unsigned Opc642, unsigned Opc643, unsigned Opc644, unsigned Opc645, unsigned Opc646, unsigned Opc647, unsigned Opc648, unsigned Opc649, unsigned Opc650, unsigned Opc651, unsigned Opc652, unsigned Opc653, unsigned Opc654, unsigned Opc655, unsigned Opc656, unsigned Opc657, unsigned Opc658, unsigned Opc659, unsigned Opc660, unsigned Opc661, unsigned Opc662, unsigned Opc663, unsigned Opc664, unsigned Opc665, unsigned Opc666, unsigned Opc667, unsigned Opc668, unsigned Opc669, unsigned Opc670, unsigned Opc671, unsigned Opc672, unsigned Opc673, unsigned Opc674, unsigned Opc675, unsigned Opc676, unsigned Opc677, unsigned Opc678, unsigned Opc679, unsigned Opc680, unsigned Opc681, unsigned Opc682, unsigned Opc683, unsigned Opc684, MVT VT0, MVT VT1, MVT VT2, MVT VT3, MVT VT4, MVT VT5, MVT VT6, MVT VT7, MVT VT8, MVT VT9, MVT VT10, MVT VT11, MVT VT12, MVT VT13, MVT VT14, MVT VT15, MVT VT16, MVT VT17, MVT VT18, MVT VT19, MVT VT20, MVT VT21, MVT VT22, MVT VT23, MVT VT24, MVT VT25, MVT VT26, MVT VT27, MVT VT28, MVT VT29, MVT VT30, MVT VT31, MVT VT32, MVT VT33, MVT VT34, MVT VT35, MVT VT36, MVT VT37, MVT VT38, MVT VT39, MVT VT40, MVT VT41, MVT VT42, MVT VT43, MVT VT44, MVT VT45, MVT VT46, MVT VT47, MVT VT48, MVT VT49, MVT VT50, MVT VT51, MVT VT52, MVT VT53, MVT VT54, MVT VT55, MVT VT56, MVT VT57, MVT VT58, MVT VT59, MVT VT60, MVT VT61, MVT VT62, MVT VT63, MVT VT64, MVT VT65, MVT VT66, MVT VT67, MVT VT68, MVT VT69, MVT VT70, MVT VT71, MVT VT72, MVT VT73, MVT VT74, MVT VT75, MVT VT76, MVT VT77, MVT VT78, MVT VT79, MVT VT80, MVT VT81, MVT VT82, MVT VT83, MVT VT84, MVT VT85, MVT VT86, MVT VT87, MVT VT88, MVT VT89, MVT VT90, MVT VT91, MVT VT92, MVT VT93, MVT VT94, MVT VT95, MVT VT96, MVT VT97, MVT VT98, MVT VT99, MVT VT100, MVT VT101, MVT VT102, MVT VT103, MVT VT104, MVT VT105, MVT VT106, MVT VT107, MVT VT108, MVT VT109, MVT VT110, MVT VT111, MVT VT112, MVT VT113, MVT VT114, MVT VT115, MVT VT116, MVT VT117, MVT VT118, MVT VT119, MVT VT120, MVT VT121, MVT VT122, MVT VT123, MVT VT124, MVT VT125, MVT VT126, MVT VT127, MVT VT128, MVT VT129, MVT VT130, MVT VT131, MVT VT132, MVT VT133, MVT VT134, MVT VT135, MVT VT136, MVT VT137, MVT VT138, MVT VT139, MVT VT140, MVT VT141, MVT VT142, MVT VT143, MVT VT144, MVT VT145, MVT VT146, MVT VT147, MVT VT148, MVT VT149, MVT VT150, MVT VT151, MVT VT152, MVT VT153, MVT VT154, MVT VT155, MVT VT156, MVT VT157, MVT VT158, MVT VT159, MVT VT160, MVT VT161, MVT VT162, MVT VT163, MVT VT164, MVT VT165, MVT VT166, MVT VT167, MVT VT168, MVT VT169, MVT VT170, MVT VT171, MVT VT172, MVT VT173, MVT VT174, MVT VT175, MVT VT176, MVT VT177, MVT VT178, MVT VT179, MVT VT180, MVT VT181, MVT VT182, MVT VT183, MVT VT184, MVT VT185, MVT VT186, MVT VT187, MVT VT188, MVT VT189, MVT VT190, MVT VT191, MVT VT192, MVT VT193, MVT VT194, MVT VT195, MVT VT196, MVT VT197, MVT VT198, MVT VT199, MVT VT200, MVT VT201, MVT VT202, MVT VT203, MVT VT204, MVT VT205, MVT VT206, MVT VT207, MVT VT208, MVT VT209, MVT VT210, MVT VT211, MVT VT212, MVT VT213, MVT VT214, MVT VT215, MVT VT216, MVT VT217, MVT VT218, MVT VT219, MVT VT220, MVT VT221, MVT VT222, MVT VT223, MVT VT224, MVT VT225, MVT VT226, MVT VT227, MVT VT228, MVT VT229, MVT VT230, MVT VT231, MVT VT232, MVT VT233, MVT VT234, MVT VT235, MVT VT236, MVT VT237, MVT VT238, MVT VT239, MVT VT240, MVT VT241, MVT VT242, MVT VT243, MVT VT244, MVT VT245, MVT VT246, MVT VT247, MVT VT248, MVT VT249, MVT VT250, MVT VT251, MVT VT252, MVT VT253, MVT VT254, MVT VT255, MVT VT256, MVT VT257, MVT VT258, MVT VT259, MVT VT260, MVT VT261, MVT VT262, MVT VT263, MVT VT264, MVT VT265, MVT VT266, MVT VT267, MVT VT268, MVT VT269, MVT VT270, MVT VT271, MVT VT272, MVT VT273, MVT VT274, MVT VT275, MVT VT276, MVT VT277, MVT VT278, MVT VT279, MVT VT280, MVT VT281, MVT VT282, MVT VT283, MVT VT284, MVT VT285, MVT VT286, MVT VT287, MVT VT288, MVT VT289, MVT VT290, MVT VT291, MVT VT292, MVT VT293, MVT VT294, MVT VT295, MVT VT296, MVT VT297, MVT VT298, MVT VT299, MVT VT300, MVT VT301, MVT VT302, MVT VT303, MVT VT304, MVT VT305, MVT VT306, MVT VT307, MVT VT308, MVT VT309, MVT VT310, MVT VT311, MVT VT312, MVT VT313, MVT VT314, MVT VT315, MVT VT316, MVT VT317, MVT VT318, MVT VT319, MVT VT320, MVT VT321, MVT VT322, MVT VT323, MVT VT324, MVT VT325, MVT VT326, MVT VT327, MVT VT328, MVT VT329, MVT VT330, MVT VT331, MVT VT332, MVT VT333, MVT VT334, MVT VT335, MVT VT336, MVT VT337, MVT VT338, MVT VT339, MVT VT340, MVT VT341, MVT VT342, MVT VT343, MVT VT344, MVT VT345, MVT VT346, MVT VT347, MVT VT348, MVT VT349, MVT VT350, MVT VT351, MVT VT352, MVT VT353, MVT VT354, MVT VT355, MVT VT356, MVT VT357, MVT VT358, MVT VT359, MVT VT360, MVT VT361, MVT VT362, MVT VT363, MVT VT364, MVT VT365, MVT VT366, MVT VT367, MVT VT368, MVT VT369, MVT VT370, MVT VT371, MVT VT372, MVT VT373, MVT VT374, MVT VT375, MVT VT376, MVT VT377, MVT VT378, MVT VT379, MVT VT380, MVT VT381, MVT VT382, MVT VT383, MVT VT384, MVT VT385, MVT VT386, MVT VT387, MVT VT388, MVT VT389, MVT VT390, MVT VT391, MVT VT392, MVT VT393, MVT VT394, MVT VT395, MVT VT396, MVT VT397, MVT VT398, MVT VT399, MVT VT400, MVT VT401, MVT VT402, MVT VT403, MVT VT404, MVT VT405, MVT VT406, MVT VT407, MVT VT408, MVT VT409, MVT VT410, MVT VT411, MVT VT412, MVT VT413, MVT VT414, MVT VT415, MVT VT416, MVT VT417, MVT VT418, MVT VT419, MVT VT420, MVT VT421, MVT VT422, MVT VT423, MVT VT424, MVT VT425, MVT VT426, MVT VT427, MVT VT428, MVT VT429, MVT VT430, MVT VT431, MVT VT432, MVT VT433, MVT VT434, MVT VT435, MVT VT436, MVT VT437, MVT VT438, MVT VT439, MVT VT440, MVT VT441, MVT VT442, MVT VT443, MVT VT444, MVT VT445, MVT VT446, MVT VT447, MVT VT448, MVT VT449, MVT VT450, MVT VT451, MVT VT452, MVT VT453, MVT VT454, MVT VT455, MVT VT456, MVT VT457, MVT VT458, MVT VT459, MVT VT460, MVT VT461, MVT VT462, MVT VT463, MVT VT464, MVT VT465, MVT VT466, MVT VT467, MVT VT468, MVT VT469, MVT VT470, MVT VT471, MVT VT472, MVT VT473, MVT VT474, MVT VT475, MVT VT476, MVT VT477, MVT VT478, MVT VT479, MVT VT480, MVT VT481, MVT VT482, MVT VT483, MVT VT484, MVT VT485, MVT VT486, MVT VT487, MVT VT488, MVT VT489, MVT VT490, MVT VT491, MVT VT492, MVT VT493, MVT VT494, MVT VT495, MVT VT496, MVT VT497, MVT VT498, MVT VT499, MVT VT500, MVT VT501, MVT VT502, MVT VT503, MVT VT504, MVT VT505, MVT VT506, MVT VT507, MVT VT508, MVT VT509, MVT VT510, MVT VT511, MVT VT512, MVT VT513, MVT VT514, MVT VT515, MVT VT516, MVT VT517, MVT VT518, MVT VT519, MVT VT520, MVT VT521, MVT VT522, MVT VT523, MVT VT524, MVT VT525, MVT VT526, MVT VT527, MVT VT528, MVT VT529, MVT VT530, MVT VT531, MVT VT532, MVT VT533, MVT VT534, MVT VT535, MVT VT536, MVT VT537, MVT VT538, MVT VT539, MVT VT540, MVT VT541, MVT VT542, MVT VT543, MVT VT544, MVT VT545, MVT VT546, MVT VT547, MVT VT548, MVT VT549, MVT VT550, MVT VT551, MVT VT552, MVT VT553, MVT VT554, MVT VT555, MVT VT556, MVT VT557, MVT VT558, MVT VT559, MVT VT560, MVT VT561, MVT VT562, MVT VT563, MVT VT564, MVT VT565, MVT VT566, MVT VT567, MVT VT568, MVT VT569, MVT VT570, MVT VT571, MVT VT572, MVT VT573, MVT VT574, MVT VT575, MVT VT576, MVT VT577, MVT VT578, MVT VT579, MVT VT580, MVT VT581, MVT VT582, MVT VT583, MVT VT584, MVT VT585, MVT VT586, MVT VT587, MVT VT588, MVT VT589, MVT VT590, MVT VT591, MVT VT592, MVT VT593, MVT VT594, MVT VT595, MVT VT596, MVT VT597, MVT VT598, MVT VT599, MVT VT600, MVT VT601, MVT VT602, MVT VT603, MVT VT604, MVT VT605, MVT VT606, MVT VT607, MVT VT608, MVT VT609, MVT VT610, MVT VT611, MVT VT612, MVT VT613, MVT VT614, MVT VT615, MVT VT616, MVT VT617, MVT VT618, MVT VT619, MVT VT620, MVT VT621, MVT VT622, MVT VT623, MVT VT624, MVT VT625, MVT VT626, MVT VT627, MVT VT628, MVT VT629, MVT VT630, MVT VT631, MVT VT632, MVT VT633, MVT VT634, MVT VT635, MVT VT636, MVT VT637, MVT VT638, MVT VT639, MVT VT640, MVT VT641, MVT VT642, MVT VT643, MVT VT644, MVT VT645, MVT VT646, MVT VT647, MVT VT648, MVT VT649, MVT VT650, MVT VT651, MVT VT652, MVT VT653, MVT VT654, MVT VT655, MVT VT656, MVT VT657, MVT VT658, MVT VT659, MVT VT660, MVT VT661, MVT VT662, MVT VT663, MVT VT664, MVT VT665, MVT VT666, MVT VT667, MVT VT668, MVT VT669, MVT VT670, MVT VT671, MVT VT672, MVT VT673, MVT VT674, MVT VT675, MVT VT676, MVT VT677, MVT VT678, MVT VT679, MVT VT680, MVT VT681, MVT VT682, MVT VT683, MVT VT684) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  SDValue Tmp1 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp2(CurDAG->getTargetNode(Opc0, N.getDebugLoc(), VT0, Tmp1), 0);
  SDValue Tmp3 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp4(CurDAG->getTargetNode(Opc1, N.getDebugLoc(), VT1, Tmp3), 0);
  SDValue Tmp5(CurDAG->getTargetNode(Opc2, N.getDebugLoc(), VT2, N0, Tmp2, Tmp4), 0);
  SDValue Tmp7 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp8(CurDAG->getTargetNode(Opc3, N.getDebugLoc(), VT3, Tmp7), 0);
  SDValue Tmp9 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp10(CurDAG->getTargetNode(Opc4, N.getDebugLoc(), VT4, Tmp9), 0);
  SDValue Tmp11(CurDAG->getTargetNode(Opc5, N.getDebugLoc(), VT5, N1, Tmp8, Tmp10), 0);
  SDValue Tmp12(CurDAG->getTargetNode(Opc6, N.getDebugLoc(), VT6, Tmp5, Tmp11), 0);
  SDValue Tmp14 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp15(CurDAG->getTargetNode(Opc7, N.getDebugLoc(), VT7, Tmp14), 0);
  SDValue Tmp16 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp17(CurDAG->getTargetNode(Opc8, N.getDebugLoc(), VT8, Tmp16), 0);
  SDValue Tmp18(CurDAG->getTargetNode(Opc9, N.getDebugLoc(), VT9, N0, Tmp15, Tmp17), 0);
  SDValue Tmp20 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp21(CurDAG->getTargetNode(Opc10, N.getDebugLoc(), VT10, N1, Tmp20), 0);
  SDValue Tmp22(CurDAG->getTargetNode(Opc11, N.getDebugLoc(), VT11, Tmp18, Tmp21), 0);
  SDValue Tmp23 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp24(CurDAG->getTargetNode(Opc12, N.getDebugLoc(), VT12, Tmp22, Tmp23), 0);
  SDValue Tmp25 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp26(CurDAG->getTargetNode(Opc13, N.getDebugLoc(), VT13, Tmp25), 0);
  SDValue Tmp27 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp28(CurDAG->getTargetNode(Opc14, N.getDebugLoc(), VT14, Tmp27), 0);
  SDValue Tmp29(CurDAG->getTargetNode(Opc15, N.getDebugLoc(), VT15, Tmp24, Tmp26, Tmp28), 0);
  SDValue Tmp31 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp32(CurDAG->getTargetNode(Opc16, N.getDebugLoc(), VT16, Tmp31), 0);
  SDValue Tmp33 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp34(CurDAG->getTargetNode(Opc17, N.getDebugLoc(), VT17, Tmp33), 0);
  SDValue Tmp35(CurDAG->getTargetNode(Opc18, N.getDebugLoc(), VT18, N0, Tmp32, Tmp34), 0);
  SDValue Tmp37 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp38(CurDAG->getTargetNode(Opc19, N.getDebugLoc(), VT19, Tmp37), 0);
  SDValue Tmp39 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp40(CurDAG->getTargetNode(Opc20, N.getDebugLoc(), VT20, Tmp39), 0);
  SDValue Tmp41(CurDAG->getTargetNode(Opc21, N.getDebugLoc(), VT21, N1, Tmp38, Tmp40), 0);
  SDValue Tmp42(CurDAG->getTargetNode(Opc22, N.getDebugLoc(), VT22, Tmp35, Tmp41), 0);
  SDValue Tmp44 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp45(CurDAG->getTargetNode(Opc23, N.getDebugLoc(), VT23, Tmp44), 0);
  SDValue Tmp46 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp47(CurDAG->getTargetNode(Opc24, N.getDebugLoc(), VT24, Tmp46), 0);
  SDValue Tmp48(CurDAG->getTargetNode(Opc25, N.getDebugLoc(), VT25, N0, Tmp45, Tmp47), 0);
  SDValue Tmp50 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp51(CurDAG->getTargetNode(Opc26, N.getDebugLoc(), VT26, N1, Tmp50), 0);
  SDValue Tmp52(CurDAG->getTargetNode(Opc27, N.getDebugLoc(), VT27, Tmp48, Tmp51), 0);
  SDValue Tmp53 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp54(CurDAG->getTargetNode(Opc28, N.getDebugLoc(), VT28, Tmp52, Tmp53), 0);
  SDValue Tmp55 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp56(CurDAG->getTargetNode(Opc29, N.getDebugLoc(), VT29, Tmp55), 0);
  SDValue Tmp57 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp58(CurDAG->getTargetNode(Opc30, N.getDebugLoc(), VT30, Tmp57), 0);
  SDValue Tmp59(CurDAG->getTargetNode(Opc31, N.getDebugLoc(), VT31, Tmp54, Tmp56, Tmp58), 0);
  SDValue Tmp60(CurDAG->getTargetNode(Opc32, N.getDebugLoc(), VT32, Tmp42, Tmp59), 0);
  SDValue Tmp62 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp63(CurDAG->getTargetNode(Opc33, N.getDebugLoc(), VT33, Tmp62), 0);
  SDValue Tmp64 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp65(CurDAG->getTargetNode(Opc34, N.getDebugLoc(), VT34, Tmp64), 0);
  SDValue Tmp66(CurDAG->getTargetNode(Opc35, N.getDebugLoc(), VT35, N0, Tmp63, Tmp65), 0);
  SDValue Tmp68 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp69(CurDAG->getTargetNode(Opc36, N.getDebugLoc(), VT36, Tmp68), 0);
  SDValue Tmp70 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp71(CurDAG->getTargetNode(Opc37, N.getDebugLoc(), VT37, Tmp70), 0);
  SDValue Tmp72(CurDAG->getTargetNode(Opc38, N.getDebugLoc(), VT38, N1, Tmp69, Tmp71), 0);
  SDValue Tmp73(CurDAG->getTargetNode(Opc39, N.getDebugLoc(), VT39, Tmp66, Tmp72), 0);
  SDValue Tmp75 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp76(CurDAG->getTargetNode(Opc40, N.getDebugLoc(), VT40, Tmp75), 0);
  SDValue Tmp77 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp78(CurDAG->getTargetNode(Opc41, N.getDebugLoc(), VT41, Tmp77), 0);
  SDValue Tmp79(CurDAG->getTargetNode(Opc42, N.getDebugLoc(), VT42, N0, Tmp76, Tmp78), 0);
  SDValue Tmp81 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp82(CurDAG->getTargetNode(Opc43, N.getDebugLoc(), VT43, N1, Tmp81), 0);
  SDValue Tmp83(CurDAG->getTargetNode(Opc44, N.getDebugLoc(), VT44, Tmp79, Tmp82), 0);
  SDValue Tmp84 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp85(CurDAG->getTargetNode(Opc45, N.getDebugLoc(), VT45, Tmp83, Tmp84), 0);
  SDValue Tmp86 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp87(CurDAG->getTargetNode(Opc46, N.getDebugLoc(), VT46, Tmp86), 0);
  SDValue Tmp88 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp89(CurDAG->getTargetNode(Opc47, N.getDebugLoc(), VT47, Tmp88), 0);
  SDValue Tmp90(CurDAG->getTargetNode(Opc48, N.getDebugLoc(), VT48, Tmp85, Tmp87, Tmp89), 0);
  SDValue Tmp91(CurDAG->getTargetNode(Opc49, N.getDebugLoc(), VT49, Tmp73, Tmp90), 0);
  SDValue Tmp93(CurDAG->getTargetNode(Opc50, N.getDebugLoc(), VT50, Tmp60, Tmp91, N2), 0);
  SDValue Tmp94(CurDAG->getTargetNode(Opc51, N.getDebugLoc(), VT51, Tmp12, Tmp29, Tmp93), 0);
  SDValue Tmp96 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp97(CurDAG->getTargetNode(Opc52, N.getDebugLoc(), VT52, Tmp96), 0);
  SDValue Tmp98 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp99(CurDAG->getTargetNode(Opc53, N.getDebugLoc(), VT53, Tmp98), 0);
  SDValue Tmp100(CurDAG->getTargetNode(Opc54, N.getDebugLoc(), VT54, N1, Tmp97, Tmp99), 0);
  SDValue Tmp102 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp103(CurDAG->getTargetNode(Opc55, N.getDebugLoc(), VT55, N0, Tmp102), 0);
  SDValue Tmp104(CurDAG->getTargetNode(Opc56, N.getDebugLoc(), VT56, Tmp100, Tmp103), 0);
  SDValue Tmp105 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp106(CurDAG->getTargetNode(Opc57, N.getDebugLoc(), VT57, Tmp104, Tmp105), 0);
  SDValue Tmp107 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp108(CurDAG->getTargetNode(Opc58, N.getDebugLoc(), VT58, Tmp107), 0);
  SDValue Tmp109 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp110(CurDAG->getTargetNode(Opc59, N.getDebugLoc(), VT59, Tmp109), 0);
  SDValue Tmp111(CurDAG->getTargetNode(Opc60, N.getDebugLoc(), VT60, Tmp106, Tmp108, Tmp110), 0);
  SDValue Tmp113 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp114(CurDAG->getTargetNode(Opc61, N.getDebugLoc(), VT61, Tmp113), 0);
  SDValue Tmp115 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp116(CurDAG->getTargetNode(Opc62, N.getDebugLoc(), VT62, Tmp115), 0);
  SDValue Tmp117(CurDAG->getTargetNode(Opc63, N.getDebugLoc(), VT63, N0, Tmp114, Tmp116), 0);
  SDValue Tmp119 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp120(CurDAG->getTargetNode(Opc64, N.getDebugLoc(), VT64, Tmp119), 0);
  SDValue Tmp121 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp122(CurDAG->getTargetNode(Opc65, N.getDebugLoc(), VT65, Tmp121), 0);
  SDValue Tmp123(CurDAG->getTargetNode(Opc66, N.getDebugLoc(), VT66, N1, Tmp120, Tmp122), 0);
  SDValue Tmp124(CurDAG->getTargetNode(Opc67, N.getDebugLoc(), VT67, Tmp117, Tmp123), 0);
  SDValue Tmp126 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp127(CurDAG->getTargetNode(Opc68, N.getDebugLoc(), VT68, Tmp126), 0);
  SDValue Tmp128 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp129(CurDAG->getTargetNode(Opc69, N.getDebugLoc(), VT69, Tmp128), 0);
  SDValue Tmp130(CurDAG->getTargetNode(Opc70, N.getDebugLoc(), VT70, N0, Tmp127, Tmp129), 0);
  SDValue Tmp132 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp133(CurDAG->getTargetNode(Opc71, N.getDebugLoc(), VT71, N1, Tmp132), 0);
  SDValue Tmp134(CurDAG->getTargetNode(Opc72, N.getDebugLoc(), VT72, Tmp130, Tmp133), 0);
  SDValue Tmp135 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp136(CurDAG->getTargetNode(Opc73, N.getDebugLoc(), VT73, Tmp134, Tmp135), 0);
  SDValue Tmp137 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp138(CurDAG->getTargetNode(Opc74, N.getDebugLoc(), VT74, Tmp137), 0);
  SDValue Tmp139 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp140(CurDAG->getTargetNode(Opc75, N.getDebugLoc(), VT75, Tmp139), 0);
  SDValue Tmp141(CurDAG->getTargetNode(Opc76, N.getDebugLoc(), VT76, Tmp136, Tmp138, Tmp140), 0);
  SDValue Tmp143 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp144(CurDAG->getTargetNode(Opc77, N.getDebugLoc(), VT77, Tmp143), 0);
  SDValue Tmp145 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp146(CurDAG->getTargetNode(Opc78, N.getDebugLoc(), VT78, Tmp145), 0);
  SDValue Tmp147(CurDAG->getTargetNode(Opc79, N.getDebugLoc(), VT79, N0, Tmp144, Tmp146), 0);
  SDValue Tmp149 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp150(CurDAG->getTargetNode(Opc80, N.getDebugLoc(), VT80, Tmp149), 0);
  SDValue Tmp151 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp152(CurDAG->getTargetNode(Opc81, N.getDebugLoc(), VT81, Tmp151), 0);
  SDValue Tmp153(CurDAG->getTargetNode(Opc82, N.getDebugLoc(), VT82, N1, Tmp150, Tmp152), 0);
  SDValue Tmp154(CurDAG->getTargetNode(Opc83, N.getDebugLoc(), VT83, Tmp147, Tmp153), 0);
  SDValue Tmp156 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp157(CurDAG->getTargetNode(Opc84, N.getDebugLoc(), VT84, Tmp156), 0);
  SDValue Tmp158 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp159(CurDAG->getTargetNode(Opc85, N.getDebugLoc(), VT85, Tmp158), 0);
  SDValue Tmp160(CurDAG->getTargetNode(Opc86, N.getDebugLoc(), VT86, N0, Tmp157, Tmp159), 0);
  SDValue Tmp162 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp163(CurDAG->getTargetNode(Opc87, N.getDebugLoc(), VT87, N1, Tmp162), 0);
  SDValue Tmp164(CurDAG->getTargetNode(Opc88, N.getDebugLoc(), VT88, Tmp160, Tmp163), 0);
  SDValue Tmp165 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp166(CurDAG->getTargetNode(Opc89, N.getDebugLoc(), VT89, Tmp164, Tmp165), 0);
  SDValue Tmp167 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp168(CurDAG->getTargetNode(Opc90, N.getDebugLoc(), VT90, Tmp167), 0);
  SDValue Tmp169 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp170(CurDAG->getTargetNode(Opc91, N.getDebugLoc(), VT91, Tmp169), 0);
  SDValue Tmp171(CurDAG->getTargetNode(Opc92, N.getDebugLoc(), VT92, Tmp166, Tmp168, Tmp170), 0);
  SDValue Tmp172(CurDAG->getTargetNode(Opc93, N.getDebugLoc(), VT93, Tmp154, Tmp171), 0);
  SDValue Tmp174 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp175(CurDAG->getTargetNode(Opc94, N.getDebugLoc(), VT94, Tmp174), 0);
  SDValue Tmp176 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp177(CurDAG->getTargetNode(Opc95, N.getDebugLoc(), VT95, Tmp176), 0);
  SDValue Tmp178(CurDAG->getTargetNode(Opc96, N.getDebugLoc(), VT96, N0, Tmp175, Tmp177), 0);
  SDValue Tmp180 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp181(CurDAG->getTargetNode(Opc97, N.getDebugLoc(), VT97, Tmp180), 0);
  SDValue Tmp182 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp183(CurDAG->getTargetNode(Opc98, N.getDebugLoc(), VT98, Tmp182), 0);
  SDValue Tmp184(CurDAG->getTargetNode(Opc99, N.getDebugLoc(), VT99, N1, Tmp181, Tmp183), 0);
  SDValue Tmp185(CurDAG->getTargetNode(Opc100, N.getDebugLoc(), VT100, Tmp178, Tmp184), 0);
  SDValue Tmp187 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp188(CurDAG->getTargetNode(Opc101, N.getDebugLoc(), VT101, Tmp187), 0);
  SDValue Tmp189 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp190(CurDAG->getTargetNode(Opc102, N.getDebugLoc(), VT102, Tmp189), 0);
  SDValue Tmp191(CurDAG->getTargetNode(Opc103, N.getDebugLoc(), VT103, N0, Tmp188, Tmp190), 0);
  SDValue Tmp193 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp194(CurDAG->getTargetNode(Opc104, N.getDebugLoc(), VT104, N1, Tmp193), 0);
  SDValue Tmp195(CurDAG->getTargetNode(Opc105, N.getDebugLoc(), VT105, Tmp191, Tmp194), 0);
  SDValue Tmp196 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp197(CurDAG->getTargetNode(Opc106, N.getDebugLoc(), VT106, Tmp195, Tmp196), 0);
  SDValue Tmp198 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp199(CurDAG->getTargetNode(Opc107, N.getDebugLoc(), VT107, Tmp198), 0);
  SDValue Tmp200 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp201(CurDAG->getTargetNode(Opc108, N.getDebugLoc(), VT108, Tmp200), 0);
  SDValue Tmp202(CurDAG->getTargetNode(Opc109, N.getDebugLoc(), VT109, Tmp197, Tmp199, Tmp201), 0);
  SDValue Tmp203(CurDAG->getTargetNode(Opc110, N.getDebugLoc(), VT110, Tmp185, Tmp202), 0);
  SDValue Tmp205(CurDAG->getTargetNode(Opc111, N.getDebugLoc(), VT111, Tmp172, Tmp203, N2), 0);
  SDValue Tmp206(CurDAG->getTargetNode(Opc112, N.getDebugLoc(), VT112, Tmp124, Tmp141, Tmp205), 0);
  SDValue Tmp208 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp209(CurDAG->getTargetNode(Opc113, N.getDebugLoc(), VT113, Tmp208), 0);
  SDValue Tmp210 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp211(CurDAG->getTargetNode(Opc114, N.getDebugLoc(), VT114, Tmp210), 0);
  SDValue Tmp212(CurDAG->getTargetNode(Opc115, N.getDebugLoc(), VT115, N1, Tmp209, Tmp211), 0);
  SDValue Tmp214 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp215(CurDAG->getTargetNode(Opc116, N.getDebugLoc(), VT116, N0, Tmp214), 0);
  SDValue Tmp216(CurDAG->getTargetNode(Opc117, N.getDebugLoc(), VT117, Tmp212, Tmp215), 0);
  SDValue Tmp217 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp218(CurDAG->getTargetNode(Opc118, N.getDebugLoc(), VT118, Tmp216, Tmp217), 0);
  SDValue Tmp219 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp220(CurDAG->getTargetNode(Opc119, N.getDebugLoc(), VT119, Tmp219), 0);
  SDValue Tmp221 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp222(CurDAG->getTargetNode(Opc120, N.getDebugLoc(), VT120, Tmp221), 0);
  SDValue Tmp223(CurDAG->getTargetNode(Opc121, N.getDebugLoc(), VT121, Tmp218, Tmp220, Tmp222), 0);
  SDValue Tmp224(CurDAG->getTargetNode(Opc122, N.getDebugLoc(), VT122, Tmp206, Tmp223), 0);
  SDValue Tmp226 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp227(CurDAG->getTargetNode(Opc123, N.getDebugLoc(), VT123, Tmp226), 0);
  SDValue Tmp228 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp229(CurDAG->getTargetNode(Opc124, N.getDebugLoc(), VT124, Tmp228), 0);
  SDValue Tmp230(CurDAG->getTargetNode(Opc125, N.getDebugLoc(), VT125, N0, Tmp227, Tmp229), 0);
  SDValue Tmp232 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp233(CurDAG->getTargetNode(Opc126, N.getDebugLoc(), VT126, Tmp232), 0);
  SDValue Tmp234 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp235(CurDAG->getTargetNode(Opc127, N.getDebugLoc(), VT127, Tmp234), 0);
  SDValue Tmp236(CurDAG->getTargetNode(Opc128, N.getDebugLoc(), VT128, N1, Tmp233, Tmp235), 0);
  SDValue Tmp237(CurDAG->getTargetNode(Opc129, N.getDebugLoc(), VT129, Tmp230, Tmp236), 0);
  SDValue Tmp239 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp240(CurDAG->getTargetNode(Opc130, N.getDebugLoc(), VT130, Tmp239), 0);
  SDValue Tmp241 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp242(CurDAG->getTargetNode(Opc131, N.getDebugLoc(), VT131, Tmp241), 0);
  SDValue Tmp243(CurDAG->getTargetNode(Opc132, N.getDebugLoc(), VT132, N0, Tmp240, Tmp242), 0);
  SDValue Tmp245 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp246(CurDAG->getTargetNode(Opc133, N.getDebugLoc(), VT133, N1, Tmp245), 0);
  SDValue Tmp247(CurDAG->getTargetNode(Opc134, N.getDebugLoc(), VT134, Tmp243, Tmp246), 0);
  SDValue Tmp248 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp249(CurDAG->getTargetNode(Opc135, N.getDebugLoc(), VT135, Tmp247, Tmp248), 0);
  SDValue Tmp250 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp251(CurDAG->getTargetNode(Opc136, N.getDebugLoc(), VT136, Tmp250), 0);
  SDValue Tmp252 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp253(CurDAG->getTargetNode(Opc137, N.getDebugLoc(), VT137, Tmp252), 0);
  SDValue Tmp254(CurDAG->getTargetNode(Opc138, N.getDebugLoc(), VT138, Tmp249, Tmp251, Tmp253), 0);
  SDValue Tmp256 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp257(CurDAG->getTargetNode(Opc139, N.getDebugLoc(), VT139, Tmp256), 0);
  SDValue Tmp258 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp259(CurDAG->getTargetNode(Opc140, N.getDebugLoc(), VT140, Tmp258), 0);
  SDValue Tmp260(CurDAG->getTargetNode(Opc141, N.getDebugLoc(), VT141, N0, Tmp257, Tmp259), 0);
  SDValue Tmp262 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp263(CurDAG->getTargetNode(Opc142, N.getDebugLoc(), VT142, Tmp262), 0);
  SDValue Tmp264 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp265(CurDAG->getTargetNode(Opc143, N.getDebugLoc(), VT143, Tmp264), 0);
  SDValue Tmp266(CurDAG->getTargetNode(Opc144, N.getDebugLoc(), VT144, N1, Tmp263, Tmp265), 0);
  SDValue Tmp267(CurDAG->getTargetNode(Opc145, N.getDebugLoc(), VT145, Tmp260, Tmp266), 0);
  SDValue Tmp269 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp270(CurDAG->getTargetNode(Opc146, N.getDebugLoc(), VT146, Tmp269), 0);
  SDValue Tmp271 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp272(CurDAG->getTargetNode(Opc147, N.getDebugLoc(), VT147, Tmp271), 0);
  SDValue Tmp273(CurDAG->getTargetNode(Opc148, N.getDebugLoc(), VT148, N0, Tmp270, Tmp272), 0);
  SDValue Tmp275 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp276(CurDAG->getTargetNode(Opc149, N.getDebugLoc(), VT149, N1, Tmp275), 0);
  SDValue Tmp277(CurDAG->getTargetNode(Opc150, N.getDebugLoc(), VT150, Tmp273, Tmp276), 0);
  SDValue Tmp278 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp279(CurDAG->getTargetNode(Opc151, N.getDebugLoc(), VT151, Tmp277, Tmp278), 0);
  SDValue Tmp280 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp281(CurDAG->getTargetNode(Opc152, N.getDebugLoc(), VT152, Tmp280), 0);
  SDValue Tmp282 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp283(CurDAG->getTargetNode(Opc153, N.getDebugLoc(), VT153, Tmp282), 0);
  SDValue Tmp284(CurDAG->getTargetNode(Opc154, N.getDebugLoc(), VT154, Tmp279, Tmp281, Tmp283), 0);
  SDValue Tmp285(CurDAG->getTargetNode(Opc155, N.getDebugLoc(), VT155, Tmp267, Tmp284), 0);
  SDValue Tmp287 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp288(CurDAG->getTargetNode(Opc156, N.getDebugLoc(), VT156, Tmp287), 0);
  SDValue Tmp289 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp290(CurDAG->getTargetNode(Opc157, N.getDebugLoc(), VT157, Tmp289), 0);
  SDValue Tmp291(CurDAG->getTargetNode(Opc158, N.getDebugLoc(), VT158, N0, Tmp288, Tmp290), 0);
  SDValue Tmp293 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp294(CurDAG->getTargetNode(Opc159, N.getDebugLoc(), VT159, Tmp293), 0);
  SDValue Tmp295 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp296(CurDAG->getTargetNode(Opc160, N.getDebugLoc(), VT160, Tmp295), 0);
  SDValue Tmp297(CurDAG->getTargetNode(Opc161, N.getDebugLoc(), VT161, N1, Tmp294, Tmp296), 0);
  SDValue Tmp298(CurDAG->getTargetNode(Opc162, N.getDebugLoc(), VT162, Tmp291, Tmp297), 0);
  SDValue Tmp300 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp301(CurDAG->getTargetNode(Opc163, N.getDebugLoc(), VT163, Tmp300), 0);
  SDValue Tmp302 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp303(CurDAG->getTargetNode(Opc164, N.getDebugLoc(), VT164, Tmp302), 0);
  SDValue Tmp304(CurDAG->getTargetNode(Opc165, N.getDebugLoc(), VT165, N0, Tmp301, Tmp303), 0);
  SDValue Tmp306 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp307(CurDAG->getTargetNode(Opc166, N.getDebugLoc(), VT166, N1, Tmp306), 0);
  SDValue Tmp308(CurDAG->getTargetNode(Opc167, N.getDebugLoc(), VT167, Tmp304, Tmp307), 0);
  SDValue Tmp309 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp310(CurDAG->getTargetNode(Opc168, N.getDebugLoc(), VT168, Tmp308, Tmp309), 0);
  SDValue Tmp311 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp312(CurDAG->getTargetNode(Opc169, N.getDebugLoc(), VT169, Tmp311), 0);
  SDValue Tmp313 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp314(CurDAG->getTargetNode(Opc170, N.getDebugLoc(), VT170, Tmp313), 0);
  SDValue Tmp315(CurDAG->getTargetNode(Opc171, N.getDebugLoc(), VT171, Tmp310, Tmp312, Tmp314), 0);
  SDValue Tmp316(CurDAG->getTargetNode(Opc172, N.getDebugLoc(), VT172, Tmp298, Tmp315), 0);
  SDValue Tmp318(CurDAG->getTargetNode(Opc173, N.getDebugLoc(), VT173, Tmp285, Tmp316, N2), 0);
  SDValue Tmp319(CurDAG->getTargetNode(Opc174, N.getDebugLoc(), VT174, Tmp237, Tmp254, Tmp318), 0);
  SDValue Tmp321 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp322(CurDAG->getTargetNode(Opc175, N.getDebugLoc(), VT175, Tmp321), 0);
  SDValue Tmp323 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp324(CurDAG->getTargetNode(Opc176, N.getDebugLoc(), VT176, Tmp323), 0);
  SDValue Tmp325(CurDAG->getTargetNode(Opc177, N.getDebugLoc(), VT177, N1, Tmp322, Tmp324), 0);
  SDValue Tmp327 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp328(CurDAG->getTargetNode(Opc178, N.getDebugLoc(), VT178, N0, Tmp327), 0);
  SDValue Tmp329(CurDAG->getTargetNode(Opc179, N.getDebugLoc(), VT179, Tmp325, Tmp328), 0);
  SDValue Tmp330 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp331(CurDAG->getTargetNode(Opc180, N.getDebugLoc(), VT180, Tmp329, Tmp330), 0);
  SDValue Tmp332 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp333(CurDAG->getTargetNode(Opc181, N.getDebugLoc(), VT181, Tmp332), 0);
  SDValue Tmp334 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp335(CurDAG->getTargetNode(Opc182, N.getDebugLoc(), VT182, Tmp334), 0);
  SDValue Tmp336(CurDAG->getTargetNode(Opc183, N.getDebugLoc(), VT183, Tmp331, Tmp333, Tmp335), 0);
  SDValue Tmp337(CurDAG->getTargetNode(Opc184, N.getDebugLoc(), VT184, Tmp319, Tmp336), 0);
  SDValue Tmp339(CurDAG->getTargetNode(Opc185, N.getDebugLoc(), VT185, Tmp224, Tmp337, N2), 0);
  SDValue Tmp340(CurDAG->getTargetNode(Opc186, N.getDebugLoc(), VT186, Tmp94, Tmp111, Tmp339), 0);
  SDValue Tmp342 = CurDAG->getTargetConstant(0x4ULL, MVT::i32);
  SDValue Tmp343(CurDAG->getTargetNode(Opc187, N.getDebugLoc(), VT187, N1, Tmp342), 0);
  SDValue Tmp345 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp346(CurDAG->getTargetNode(Opc188, N.getDebugLoc(), VT188, Tmp345), 0);
  SDValue Tmp347 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp348(CurDAG->getTargetNode(Opc189, N.getDebugLoc(), VT189, Tmp347), 0);
  SDValue Tmp349(CurDAG->getTargetNode(Opc190, N.getDebugLoc(), VT190, N0, Tmp346, Tmp348), 0);
  SDValue Tmp350(CurDAG->getTargetNode(Opc191, N.getDebugLoc(), VT191, Tmp343, Tmp349), 0);
  SDValue Tmp352 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp353(CurDAG->getTargetNode(Opc192, N.getDebugLoc(), VT192, Tmp352), 0);
  SDValue Tmp354 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp355(CurDAG->getTargetNode(Opc193, N.getDebugLoc(), VT193, Tmp354), 0);
  SDValue Tmp356(CurDAG->getTargetNode(Opc194, N.getDebugLoc(), VT194, N0, Tmp353, Tmp355), 0);
  SDValue Tmp358 = CurDAG->getTargetConstant(0x4ULL, MVT::i32);
  SDValue Tmp359(CurDAG->getTargetNode(Opc195, N.getDebugLoc(), VT195, N1, Tmp358), 0);
  SDValue Tmp360(CurDAG->getTargetNode(Opc196, N.getDebugLoc(), VT196, Tmp356, Tmp359), 0);
  SDValue Tmp361(CurDAG->getTargetNode(Opc197, N.getDebugLoc(), VT197, Tmp350, Tmp360), 0);
  SDValue Tmp363 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp364(CurDAG->getTargetNode(Opc198, N.getDebugLoc(), VT198, Tmp363), 0);
  SDValue Tmp365 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp366(CurDAG->getTargetNode(Opc199, N.getDebugLoc(), VT199, Tmp365), 0);
  SDValue Tmp367(CurDAG->getTargetNode(Opc200, N.getDebugLoc(), VT200, N1, Tmp364, Tmp366), 0);
  SDValue Tmp369 = CurDAG->getTargetConstant(0x4ULL, MVT::i32);
  SDValue Tmp370(CurDAG->getTargetNode(Opc201, N.getDebugLoc(), VT201, N0, Tmp369), 0);
  SDValue Tmp371(CurDAG->getTargetNode(Opc202, N.getDebugLoc(), VT202, Tmp367, Tmp370), 0);
  SDValue Tmp373 = CurDAG->getTargetConstant(0x4ULL, MVT::i32);
  SDValue Tmp374(CurDAG->getTargetNode(Opc203, N.getDebugLoc(), VT203, N0, Tmp373), 0);
  SDValue Tmp376 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp377(CurDAG->getTargetNode(Opc204, N.getDebugLoc(), VT204, Tmp376), 0);
  SDValue Tmp378 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp379(CurDAG->getTargetNode(Opc205, N.getDebugLoc(), VT205, Tmp378), 0);
  SDValue Tmp380(CurDAG->getTargetNode(Opc206, N.getDebugLoc(), VT206, N1, Tmp377, Tmp379), 0);
  SDValue Tmp381(CurDAG->getTargetNode(Opc207, N.getDebugLoc(), VT207, Tmp374, Tmp380), 0);
  SDValue Tmp383 = CurDAG->getTargetConstant(0x4ULL, MVT::i32);
  SDValue Tmp384(CurDAG->getTargetNode(Opc208, N.getDebugLoc(), VT208, N0, Tmp383), 0);
  SDValue Tmp386 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp387(CurDAG->getTargetNode(Opc209, N.getDebugLoc(), VT209, Tmp386), 0);
  SDValue Tmp388 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp389(CurDAG->getTargetNode(Opc210, N.getDebugLoc(), VT210, Tmp388), 0);
  SDValue Tmp390(CurDAG->getTargetNode(Opc211, N.getDebugLoc(), VT211, N1, Tmp387, Tmp389), 0);
  SDValue Tmp391(CurDAG->getTargetNode(Opc212, N.getDebugLoc(), VT212, Tmp384, Tmp390), 0);
  SDValue Tmp393 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp394(CurDAG->getTargetNode(Opc213, N.getDebugLoc(), VT213, N0, Tmp393), 0);
  SDValue Tmp396 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp397(CurDAG->getTargetNode(Opc214, N.getDebugLoc(), VT214, N1, Tmp396), 0);
  SDValue Tmp398(CurDAG->getTargetNode(Opc215, N.getDebugLoc(), VT215, Tmp394, Tmp397), 0);
  SDValue Tmp400 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp401(CurDAG->getTargetNode(Opc216, N.getDebugLoc(), VT216, N0, Tmp400), 0);
  SDValue Tmp403 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp404(CurDAG->getTargetNode(Opc217, N.getDebugLoc(), VT217, N1, Tmp403), 0);
  SDValue Tmp405(CurDAG->getTargetNode(Opc218, N.getDebugLoc(), VT218, Tmp401, Tmp404), 0);
  SDValue Tmp406(CurDAG->getTargetNode(Opc219, N.getDebugLoc(), VT219, Tmp398, Tmp405), 0);
  SDValue Tmp407(CurDAG->getTargetNode(Opc220, N.getDebugLoc(), VT220, Tmp391, Tmp406), 0);
  SDValue Tmp408(CurDAG->getTargetNode(Opc221, N.getDebugLoc(), VT221, Tmp381, Tmp407), 0);
  SDValue Tmp409(CurDAG->getTargetNode(Opc222, N.getDebugLoc(), VT222, Tmp371, Tmp408), 0);
  SDValue Tmp410(CurDAG->getTargetNode(Opc223, N.getDebugLoc(), VT223, Tmp361, Tmp409), 0);
  SDValue Tmp411 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp412(CurDAG->getTargetNode(Opc224, N.getDebugLoc(), VT224, Tmp411), 0);
  SDValue Tmp413 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp414(CurDAG->getTargetNode(Opc225, N.getDebugLoc(), VT225, Tmp413), 0);
  SDValue Tmp415(CurDAG->getTargetNode(Opc226, N.getDebugLoc(), VT226, Tmp410, Tmp412, Tmp414), 0);
  SDValue Tmp417 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp418(CurDAG->getTargetNode(Opc227, N.getDebugLoc(), VT227, Tmp417), 0);
  SDValue Tmp419 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp420(CurDAG->getTargetNode(Opc228, N.getDebugLoc(), VT228, Tmp419), 0);
  SDValue Tmp421(CurDAG->getTargetNode(Opc229, N.getDebugLoc(), VT229, N0, Tmp418, Tmp420), 0);
  SDValue Tmp423 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp424(CurDAG->getTargetNode(Opc230, N.getDebugLoc(), VT230, Tmp423), 0);
  SDValue Tmp425 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp426(CurDAG->getTargetNode(Opc231, N.getDebugLoc(), VT231, Tmp425), 0);
  SDValue Tmp427(CurDAG->getTargetNode(Opc232, N.getDebugLoc(), VT232, N1, Tmp424, Tmp426), 0);
  SDValue Tmp428(CurDAG->getTargetNode(Opc233, N.getDebugLoc(), VT233, Tmp421, Tmp427), 0);
  SDValue Tmp430 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp431(CurDAG->getTargetNode(Opc234, N.getDebugLoc(), VT234, Tmp430), 0);
  SDValue Tmp432 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp433(CurDAG->getTargetNode(Opc235, N.getDebugLoc(), VT235, Tmp432), 0);
  SDValue Tmp434(CurDAG->getTargetNode(Opc236, N.getDebugLoc(), VT236, N0, Tmp431, Tmp433), 0);
  SDValue Tmp436 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp437(CurDAG->getTargetNode(Opc237, N.getDebugLoc(), VT237, N1, Tmp436), 0);
  SDValue Tmp438(CurDAG->getTargetNode(Opc238, N.getDebugLoc(), VT238, Tmp434, Tmp437), 0);
  SDValue Tmp439 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp440(CurDAG->getTargetNode(Opc239, N.getDebugLoc(), VT239, Tmp438, Tmp439), 0);
  SDValue Tmp441 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp442(CurDAG->getTargetNode(Opc240, N.getDebugLoc(), VT240, Tmp441), 0);
  SDValue Tmp443 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp444(CurDAG->getTargetNode(Opc241, N.getDebugLoc(), VT241, Tmp443), 0);
  SDValue Tmp445(CurDAG->getTargetNode(Opc242, N.getDebugLoc(), VT242, Tmp440, Tmp442, Tmp444), 0);
  SDValue Tmp447 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp448(CurDAG->getTargetNode(Opc243, N.getDebugLoc(), VT243, Tmp447), 0);
  SDValue Tmp449 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp450(CurDAG->getTargetNode(Opc244, N.getDebugLoc(), VT244, Tmp449), 0);
  SDValue Tmp451(CurDAG->getTargetNode(Opc245, N.getDebugLoc(), VT245, N0, Tmp448, Tmp450), 0);
  SDValue Tmp453 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp454(CurDAG->getTargetNode(Opc246, N.getDebugLoc(), VT246, Tmp453), 0);
  SDValue Tmp455 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp456(CurDAG->getTargetNode(Opc247, N.getDebugLoc(), VT247, Tmp455), 0);
  SDValue Tmp457(CurDAG->getTargetNode(Opc248, N.getDebugLoc(), VT248, N1, Tmp454, Tmp456), 0);
  SDValue Tmp458(CurDAG->getTargetNode(Opc249, N.getDebugLoc(), VT249, Tmp451, Tmp457), 0);
  SDValue Tmp460 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp461(CurDAG->getTargetNode(Opc250, N.getDebugLoc(), VT250, Tmp460), 0);
  SDValue Tmp462 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp463(CurDAG->getTargetNode(Opc251, N.getDebugLoc(), VT251, Tmp462), 0);
  SDValue Tmp464(CurDAG->getTargetNode(Opc252, N.getDebugLoc(), VT252, N0, Tmp461, Tmp463), 0);
  SDValue Tmp466 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp467(CurDAG->getTargetNode(Opc253, N.getDebugLoc(), VT253, N1, Tmp466), 0);
  SDValue Tmp468(CurDAG->getTargetNode(Opc254, N.getDebugLoc(), VT254, Tmp464, Tmp467), 0);
  SDValue Tmp469 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp470(CurDAG->getTargetNode(Opc255, N.getDebugLoc(), VT255, Tmp468, Tmp469), 0);
  SDValue Tmp471 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp472(CurDAG->getTargetNode(Opc256, N.getDebugLoc(), VT256, Tmp471), 0);
  SDValue Tmp473 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp474(CurDAG->getTargetNode(Opc257, N.getDebugLoc(), VT257, Tmp473), 0);
  SDValue Tmp475(CurDAG->getTargetNode(Opc258, N.getDebugLoc(), VT258, Tmp470, Tmp472, Tmp474), 0);
  SDValue Tmp476(CurDAG->getTargetNode(Opc259, N.getDebugLoc(), VT259, Tmp458, Tmp475), 0);
  SDValue Tmp478 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp479(CurDAG->getTargetNode(Opc260, N.getDebugLoc(), VT260, Tmp478), 0);
  SDValue Tmp480 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp481(CurDAG->getTargetNode(Opc261, N.getDebugLoc(), VT261, Tmp480), 0);
  SDValue Tmp482(CurDAG->getTargetNode(Opc262, N.getDebugLoc(), VT262, N0, Tmp479, Tmp481), 0);
  SDValue Tmp484 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp485(CurDAG->getTargetNode(Opc263, N.getDebugLoc(), VT263, Tmp484), 0);
  SDValue Tmp486 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp487(CurDAG->getTargetNode(Opc264, N.getDebugLoc(), VT264, Tmp486), 0);
  SDValue Tmp488(CurDAG->getTargetNode(Opc265, N.getDebugLoc(), VT265, N1, Tmp485, Tmp487), 0);
  SDValue Tmp489(CurDAG->getTargetNode(Opc266, N.getDebugLoc(), VT266, Tmp482, Tmp488), 0);
  SDValue Tmp491 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp492(CurDAG->getTargetNode(Opc267, N.getDebugLoc(), VT267, Tmp491), 0);
  SDValue Tmp493 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp494(CurDAG->getTargetNode(Opc268, N.getDebugLoc(), VT268, Tmp493), 0);
  SDValue Tmp495(CurDAG->getTargetNode(Opc269, N.getDebugLoc(), VT269, N0, Tmp492, Tmp494), 0);
  SDValue Tmp497 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp498(CurDAG->getTargetNode(Opc270, N.getDebugLoc(), VT270, N1, Tmp497), 0);
  SDValue Tmp499(CurDAG->getTargetNode(Opc271, N.getDebugLoc(), VT271, Tmp495, Tmp498), 0);
  SDValue Tmp500 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp501(CurDAG->getTargetNode(Opc272, N.getDebugLoc(), VT272, Tmp499, Tmp500), 0);
  SDValue Tmp502 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp503(CurDAG->getTargetNode(Opc273, N.getDebugLoc(), VT273, Tmp502), 0);
  SDValue Tmp504 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp505(CurDAG->getTargetNode(Opc274, N.getDebugLoc(), VT274, Tmp504), 0);
  SDValue Tmp506(CurDAG->getTargetNode(Opc275, N.getDebugLoc(), VT275, Tmp501, Tmp503, Tmp505), 0);
  SDValue Tmp507(CurDAG->getTargetNode(Opc276, N.getDebugLoc(), VT276, Tmp489, Tmp506), 0);
  SDValue Tmp509(CurDAG->getTargetNode(Opc277, N.getDebugLoc(), VT277, Tmp476, Tmp507, N2), 0);
  SDValue Tmp510(CurDAG->getTargetNode(Opc278, N.getDebugLoc(), VT278, Tmp428, Tmp445, Tmp509), 0);
  SDValue Tmp512 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp513(CurDAG->getTargetNode(Opc279, N.getDebugLoc(), VT279, Tmp512), 0);
  SDValue Tmp514 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp515(CurDAG->getTargetNode(Opc280, N.getDebugLoc(), VT280, Tmp514), 0);
  SDValue Tmp516(CurDAG->getTargetNode(Opc281, N.getDebugLoc(), VT281, N1, Tmp513, Tmp515), 0);
  SDValue Tmp518 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp519(CurDAG->getTargetNode(Opc282, N.getDebugLoc(), VT282, N0, Tmp518), 0);
  SDValue Tmp520(CurDAG->getTargetNode(Opc283, N.getDebugLoc(), VT283, Tmp516, Tmp519), 0);
  SDValue Tmp521 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp522(CurDAG->getTargetNode(Opc284, N.getDebugLoc(), VT284, Tmp520, Tmp521), 0);
  SDValue Tmp523 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp524(CurDAG->getTargetNode(Opc285, N.getDebugLoc(), VT285, Tmp523), 0);
  SDValue Tmp525 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp526(CurDAG->getTargetNode(Opc286, N.getDebugLoc(), VT286, Tmp525), 0);
  SDValue Tmp527(CurDAG->getTargetNode(Opc287, N.getDebugLoc(), VT287, Tmp522, Tmp524, Tmp526), 0);
  SDValue Tmp529 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp530(CurDAG->getTargetNode(Opc288, N.getDebugLoc(), VT288, Tmp529), 0);
  SDValue Tmp531 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp532(CurDAG->getTargetNode(Opc289, N.getDebugLoc(), VT289, Tmp531), 0);
  SDValue Tmp533(CurDAG->getTargetNode(Opc290, N.getDebugLoc(), VT290, N0, Tmp530, Tmp532), 0);
  SDValue Tmp535 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp536(CurDAG->getTargetNode(Opc291, N.getDebugLoc(), VT291, Tmp535), 0);
  SDValue Tmp537 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp538(CurDAG->getTargetNode(Opc292, N.getDebugLoc(), VT292, Tmp537), 0);
  SDValue Tmp539(CurDAG->getTargetNode(Opc293, N.getDebugLoc(), VT293, N1, Tmp536, Tmp538), 0);
  SDValue Tmp540(CurDAG->getTargetNode(Opc294, N.getDebugLoc(), VT294, Tmp533, Tmp539), 0);
  SDValue Tmp542 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp543(CurDAG->getTargetNode(Opc295, N.getDebugLoc(), VT295, Tmp542), 0);
  SDValue Tmp544 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp545(CurDAG->getTargetNode(Opc296, N.getDebugLoc(), VT296, Tmp544), 0);
  SDValue Tmp546(CurDAG->getTargetNode(Opc297, N.getDebugLoc(), VT297, N0, Tmp543, Tmp545), 0);
  SDValue Tmp548 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp549(CurDAG->getTargetNode(Opc298, N.getDebugLoc(), VT298, N1, Tmp548), 0);
  SDValue Tmp550(CurDAG->getTargetNode(Opc299, N.getDebugLoc(), VT299, Tmp546, Tmp549), 0);
  SDValue Tmp551 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp552(CurDAG->getTargetNode(Opc300, N.getDebugLoc(), VT300, Tmp550, Tmp551), 0);
  SDValue Tmp553 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp554(CurDAG->getTargetNode(Opc301, N.getDebugLoc(), VT301, Tmp553), 0);
  SDValue Tmp555 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp556(CurDAG->getTargetNode(Opc302, N.getDebugLoc(), VT302, Tmp555), 0);
  SDValue Tmp557(CurDAG->getTargetNode(Opc303, N.getDebugLoc(), VT303, Tmp552, Tmp554, Tmp556), 0);
  SDValue Tmp559 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp560(CurDAG->getTargetNode(Opc304, N.getDebugLoc(), VT304, Tmp559), 0);
  SDValue Tmp561 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp562(CurDAG->getTargetNode(Opc305, N.getDebugLoc(), VT305, Tmp561), 0);
  SDValue Tmp563(CurDAG->getTargetNode(Opc306, N.getDebugLoc(), VT306, N0, Tmp560, Tmp562), 0);
  SDValue Tmp565 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp566(CurDAG->getTargetNode(Opc307, N.getDebugLoc(), VT307, Tmp565), 0);
  SDValue Tmp567 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp568(CurDAG->getTargetNode(Opc308, N.getDebugLoc(), VT308, Tmp567), 0);
  SDValue Tmp569(CurDAG->getTargetNode(Opc309, N.getDebugLoc(), VT309, N1, Tmp566, Tmp568), 0);
  SDValue Tmp570(CurDAG->getTargetNode(Opc310, N.getDebugLoc(), VT310, Tmp563, Tmp569), 0);
  SDValue Tmp572 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp573(CurDAG->getTargetNode(Opc311, N.getDebugLoc(), VT311, Tmp572), 0);
  SDValue Tmp574 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp575(CurDAG->getTargetNode(Opc312, N.getDebugLoc(), VT312, Tmp574), 0);
  SDValue Tmp576(CurDAG->getTargetNode(Opc313, N.getDebugLoc(), VT313, N0, Tmp573, Tmp575), 0);
  SDValue Tmp578 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp579(CurDAG->getTargetNode(Opc314, N.getDebugLoc(), VT314, N1, Tmp578), 0);
  SDValue Tmp580(CurDAG->getTargetNode(Opc315, N.getDebugLoc(), VT315, Tmp576, Tmp579), 0);
  SDValue Tmp581 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp582(CurDAG->getTargetNode(Opc316, N.getDebugLoc(), VT316, Tmp580, Tmp581), 0);
  SDValue Tmp583 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp584(CurDAG->getTargetNode(Opc317, N.getDebugLoc(), VT317, Tmp583), 0);
  SDValue Tmp585 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp586(CurDAG->getTargetNode(Opc318, N.getDebugLoc(), VT318, Tmp585), 0);
  SDValue Tmp587(CurDAG->getTargetNode(Opc319, N.getDebugLoc(), VT319, Tmp582, Tmp584, Tmp586), 0);
  SDValue Tmp588(CurDAG->getTargetNode(Opc320, N.getDebugLoc(), VT320, Tmp570, Tmp587), 0);
  SDValue Tmp590 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp591(CurDAG->getTargetNode(Opc321, N.getDebugLoc(), VT321, Tmp590), 0);
  SDValue Tmp592 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp593(CurDAG->getTargetNode(Opc322, N.getDebugLoc(), VT322, Tmp592), 0);
  SDValue Tmp594(CurDAG->getTargetNode(Opc323, N.getDebugLoc(), VT323, N0, Tmp591, Tmp593), 0);
  SDValue Tmp596 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp597(CurDAG->getTargetNode(Opc324, N.getDebugLoc(), VT324, Tmp596), 0);
  SDValue Tmp598 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp599(CurDAG->getTargetNode(Opc325, N.getDebugLoc(), VT325, Tmp598), 0);
  SDValue Tmp600(CurDAG->getTargetNode(Opc326, N.getDebugLoc(), VT326, N1, Tmp597, Tmp599), 0);
  SDValue Tmp601(CurDAG->getTargetNode(Opc327, N.getDebugLoc(), VT327, Tmp594, Tmp600), 0);
  SDValue Tmp603 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp604(CurDAG->getTargetNode(Opc328, N.getDebugLoc(), VT328, Tmp603), 0);
  SDValue Tmp605 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp606(CurDAG->getTargetNode(Opc329, N.getDebugLoc(), VT329, Tmp605), 0);
  SDValue Tmp607(CurDAG->getTargetNode(Opc330, N.getDebugLoc(), VT330, N0, Tmp604, Tmp606), 0);
  SDValue Tmp609 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp610(CurDAG->getTargetNode(Opc331, N.getDebugLoc(), VT331, N1, Tmp609), 0);
  SDValue Tmp611(CurDAG->getTargetNode(Opc332, N.getDebugLoc(), VT332, Tmp607, Tmp610), 0);
  SDValue Tmp612 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp613(CurDAG->getTargetNode(Opc333, N.getDebugLoc(), VT333, Tmp611, Tmp612), 0);
  SDValue Tmp614 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp615(CurDAG->getTargetNode(Opc334, N.getDebugLoc(), VT334, Tmp614), 0);
  SDValue Tmp616 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp617(CurDAG->getTargetNode(Opc335, N.getDebugLoc(), VT335, Tmp616), 0);
  SDValue Tmp618(CurDAG->getTargetNode(Opc336, N.getDebugLoc(), VT336, Tmp613, Tmp615, Tmp617), 0);
  SDValue Tmp619(CurDAG->getTargetNode(Opc337, N.getDebugLoc(), VT337, Tmp601, Tmp618), 0);
  SDValue Tmp621(CurDAG->getTargetNode(Opc338, N.getDebugLoc(), VT338, Tmp588, Tmp619, N2), 0);
  SDValue Tmp622(CurDAG->getTargetNode(Opc339, N.getDebugLoc(), VT339, Tmp540, Tmp557, Tmp621), 0);
  SDValue Tmp624 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp625(CurDAG->getTargetNode(Opc340, N.getDebugLoc(), VT340, Tmp624), 0);
  SDValue Tmp626 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp627(CurDAG->getTargetNode(Opc341, N.getDebugLoc(), VT341, Tmp626), 0);
  SDValue Tmp628(CurDAG->getTargetNode(Opc342, N.getDebugLoc(), VT342, N1, Tmp625, Tmp627), 0);
  SDValue Tmp630 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp631(CurDAG->getTargetNode(Opc343, N.getDebugLoc(), VT343, N0, Tmp630), 0);
  SDValue Tmp632(CurDAG->getTargetNode(Opc344, N.getDebugLoc(), VT344, Tmp628, Tmp631), 0);
  SDValue Tmp633 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp634(CurDAG->getTargetNode(Opc345, N.getDebugLoc(), VT345, Tmp632, Tmp633), 0);
  SDValue Tmp635 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp636(CurDAG->getTargetNode(Opc346, N.getDebugLoc(), VT346, Tmp635), 0);
  SDValue Tmp637 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp638(CurDAG->getTargetNode(Opc347, N.getDebugLoc(), VT347, Tmp637), 0);
  SDValue Tmp639(CurDAG->getTargetNode(Opc348, N.getDebugLoc(), VT348, Tmp634, Tmp636, Tmp638), 0);
  SDValue Tmp640(CurDAG->getTargetNode(Opc349, N.getDebugLoc(), VT349, Tmp622, Tmp639), 0);
  SDValue Tmp642 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp643(CurDAG->getTargetNode(Opc350, N.getDebugLoc(), VT350, Tmp642), 0);
  SDValue Tmp644 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp645(CurDAG->getTargetNode(Opc351, N.getDebugLoc(), VT351, Tmp644), 0);
  SDValue Tmp646(CurDAG->getTargetNode(Opc352, N.getDebugLoc(), VT352, N0, Tmp643, Tmp645), 0);
  SDValue Tmp648 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp649(CurDAG->getTargetNode(Opc353, N.getDebugLoc(), VT353, Tmp648), 0);
  SDValue Tmp650 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp651(CurDAG->getTargetNode(Opc354, N.getDebugLoc(), VT354, Tmp650), 0);
  SDValue Tmp652(CurDAG->getTargetNode(Opc355, N.getDebugLoc(), VT355, N1, Tmp649, Tmp651), 0);
  SDValue Tmp653(CurDAG->getTargetNode(Opc356, N.getDebugLoc(), VT356, Tmp646, Tmp652), 0);
  SDValue Tmp655 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp656(CurDAG->getTargetNode(Opc357, N.getDebugLoc(), VT357, Tmp655), 0);
  SDValue Tmp657 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp658(CurDAG->getTargetNode(Opc358, N.getDebugLoc(), VT358, Tmp657), 0);
  SDValue Tmp659(CurDAG->getTargetNode(Opc359, N.getDebugLoc(), VT359, N0, Tmp656, Tmp658), 0);
  SDValue Tmp661 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp662(CurDAG->getTargetNode(Opc360, N.getDebugLoc(), VT360, N1, Tmp661), 0);
  SDValue Tmp663(CurDAG->getTargetNode(Opc361, N.getDebugLoc(), VT361, Tmp659, Tmp662), 0);
  SDValue Tmp664 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp665(CurDAG->getTargetNode(Opc362, N.getDebugLoc(), VT362, Tmp663, Tmp664), 0);
  SDValue Tmp666 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp667(CurDAG->getTargetNode(Opc363, N.getDebugLoc(), VT363, Tmp666), 0);
  SDValue Tmp668 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp669(CurDAG->getTargetNode(Opc364, N.getDebugLoc(), VT364, Tmp668), 0);
  SDValue Tmp670(CurDAG->getTargetNode(Opc365, N.getDebugLoc(), VT365, Tmp665, Tmp667, Tmp669), 0);
  SDValue Tmp672 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp673(CurDAG->getTargetNode(Opc366, N.getDebugLoc(), VT366, Tmp672), 0);
  SDValue Tmp674 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp675(CurDAG->getTargetNode(Opc367, N.getDebugLoc(), VT367, Tmp674), 0);
  SDValue Tmp676(CurDAG->getTargetNode(Opc368, N.getDebugLoc(), VT368, N0, Tmp673, Tmp675), 0);
  SDValue Tmp678 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp679(CurDAG->getTargetNode(Opc369, N.getDebugLoc(), VT369, Tmp678), 0);
  SDValue Tmp680 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp681(CurDAG->getTargetNode(Opc370, N.getDebugLoc(), VT370, Tmp680), 0);
  SDValue Tmp682(CurDAG->getTargetNode(Opc371, N.getDebugLoc(), VT371, N1, Tmp679, Tmp681), 0);
  SDValue Tmp683(CurDAG->getTargetNode(Opc372, N.getDebugLoc(), VT372, Tmp676, Tmp682), 0);
  SDValue Tmp685 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp686(CurDAG->getTargetNode(Opc373, N.getDebugLoc(), VT373, Tmp685), 0);
  SDValue Tmp687 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp688(CurDAG->getTargetNode(Opc374, N.getDebugLoc(), VT374, Tmp687), 0);
  SDValue Tmp689(CurDAG->getTargetNode(Opc375, N.getDebugLoc(), VT375, N0, Tmp686, Tmp688), 0);
  SDValue Tmp691 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp692(CurDAG->getTargetNode(Opc376, N.getDebugLoc(), VT376, N1, Tmp691), 0);
  SDValue Tmp693(CurDAG->getTargetNode(Opc377, N.getDebugLoc(), VT377, Tmp689, Tmp692), 0);
  SDValue Tmp694 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp695(CurDAG->getTargetNode(Opc378, N.getDebugLoc(), VT378, Tmp693, Tmp694), 0);
  SDValue Tmp696 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp697(CurDAG->getTargetNode(Opc379, N.getDebugLoc(), VT379, Tmp696), 0);
  SDValue Tmp698 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp699(CurDAG->getTargetNode(Opc380, N.getDebugLoc(), VT380, Tmp698), 0);
  SDValue Tmp700(CurDAG->getTargetNode(Opc381, N.getDebugLoc(), VT381, Tmp695, Tmp697, Tmp699), 0);
  SDValue Tmp701(CurDAG->getTargetNode(Opc382, N.getDebugLoc(), VT382, Tmp683, Tmp700), 0);
  SDValue Tmp703 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp704(CurDAG->getTargetNode(Opc383, N.getDebugLoc(), VT383, Tmp703), 0);
  SDValue Tmp705 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp706(CurDAG->getTargetNode(Opc384, N.getDebugLoc(), VT384, Tmp705), 0);
  SDValue Tmp707(CurDAG->getTargetNode(Opc385, N.getDebugLoc(), VT385, N0, Tmp704, Tmp706), 0);
  SDValue Tmp709 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp710(CurDAG->getTargetNode(Opc386, N.getDebugLoc(), VT386, Tmp709), 0);
  SDValue Tmp711 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp712(CurDAG->getTargetNode(Opc387, N.getDebugLoc(), VT387, Tmp711), 0);
  SDValue Tmp713(CurDAG->getTargetNode(Opc388, N.getDebugLoc(), VT388, N1, Tmp710, Tmp712), 0);
  SDValue Tmp714(CurDAG->getTargetNode(Opc389, N.getDebugLoc(), VT389, Tmp707, Tmp713), 0);
  SDValue Tmp716 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp717(CurDAG->getTargetNode(Opc390, N.getDebugLoc(), VT390, Tmp716), 0);
  SDValue Tmp718 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp719(CurDAG->getTargetNode(Opc391, N.getDebugLoc(), VT391, Tmp718), 0);
  SDValue Tmp720(CurDAG->getTargetNode(Opc392, N.getDebugLoc(), VT392, N0, Tmp717, Tmp719), 0);
  SDValue Tmp722 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp723(CurDAG->getTargetNode(Opc393, N.getDebugLoc(), VT393, N1, Tmp722), 0);
  SDValue Tmp724(CurDAG->getTargetNode(Opc394, N.getDebugLoc(), VT394, Tmp720, Tmp723), 0);
  SDValue Tmp725 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp726(CurDAG->getTargetNode(Opc395, N.getDebugLoc(), VT395, Tmp724, Tmp725), 0);
  SDValue Tmp727 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp728(CurDAG->getTargetNode(Opc396, N.getDebugLoc(), VT396, Tmp727), 0);
  SDValue Tmp729 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp730(CurDAG->getTargetNode(Opc397, N.getDebugLoc(), VT397, Tmp729), 0);
  SDValue Tmp731(CurDAG->getTargetNode(Opc398, N.getDebugLoc(), VT398, Tmp726, Tmp728, Tmp730), 0);
  SDValue Tmp732(CurDAG->getTargetNode(Opc399, N.getDebugLoc(), VT399, Tmp714, Tmp731), 0);
  SDValue Tmp734(CurDAG->getTargetNode(Opc400, N.getDebugLoc(), VT400, Tmp701, Tmp732, N2), 0);
  SDValue Tmp735(CurDAG->getTargetNode(Opc401, N.getDebugLoc(), VT401, Tmp653, Tmp670, Tmp734), 0);
  SDValue Tmp737 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp738(CurDAG->getTargetNode(Opc402, N.getDebugLoc(), VT402, Tmp737), 0);
  SDValue Tmp739 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp740(CurDAG->getTargetNode(Opc403, N.getDebugLoc(), VT403, Tmp739), 0);
  SDValue Tmp741(CurDAG->getTargetNode(Opc404, N.getDebugLoc(), VT404, N1, Tmp738, Tmp740), 0);
  SDValue Tmp743 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp744(CurDAG->getTargetNode(Opc405, N.getDebugLoc(), VT405, N0, Tmp743), 0);
  SDValue Tmp745(CurDAG->getTargetNode(Opc406, N.getDebugLoc(), VT406, Tmp741, Tmp744), 0);
  SDValue Tmp746 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp747(CurDAG->getTargetNode(Opc407, N.getDebugLoc(), VT407, Tmp745, Tmp746), 0);
  SDValue Tmp748 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp749(CurDAG->getTargetNode(Opc408, N.getDebugLoc(), VT408, Tmp748), 0);
  SDValue Tmp750 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp751(CurDAG->getTargetNode(Opc409, N.getDebugLoc(), VT409, Tmp750), 0);
  SDValue Tmp752(CurDAG->getTargetNode(Opc410, N.getDebugLoc(), VT410, Tmp747, Tmp749, Tmp751), 0);
  SDValue Tmp753(CurDAG->getTargetNode(Opc411, N.getDebugLoc(), VT411, Tmp735, Tmp752), 0);
  SDValue Tmp755(CurDAG->getTargetNode(Opc412, N.getDebugLoc(), VT412, Tmp640, Tmp753, N2), 0);
  SDValue Tmp756(CurDAG->getTargetNode(Opc413, N.getDebugLoc(), VT413, Tmp510, Tmp527, Tmp755), 0);
  SDValue Tmp758 = CurDAG->getTargetConstant(0x4ULL, MVT::i32);
  SDValue Tmp759(CurDAG->getTargetNode(Opc414, N.getDebugLoc(), VT414, N1, Tmp758), 0);
  SDValue Tmp761 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp762(CurDAG->getTargetNode(Opc415, N.getDebugLoc(), VT415, Tmp761), 0);
  SDValue Tmp763 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp764(CurDAG->getTargetNode(Opc416, N.getDebugLoc(), VT416, Tmp763), 0);
  SDValue Tmp765(CurDAG->getTargetNode(Opc417, N.getDebugLoc(), VT417, N0, Tmp762, Tmp764), 0);
  SDValue Tmp766(CurDAG->getTargetNode(Opc418, N.getDebugLoc(), VT418, Tmp759, Tmp765), 0);
  SDValue Tmp768 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp769(CurDAG->getTargetNode(Opc419, N.getDebugLoc(), VT419, Tmp768), 0);
  SDValue Tmp770 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp771(CurDAG->getTargetNode(Opc420, N.getDebugLoc(), VT420, Tmp770), 0);
  SDValue Tmp772(CurDAG->getTargetNode(Opc421, N.getDebugLoc(), VT421, N0, Tmp769, Tmp771), 0);
  SDValue Tmp774 = CurDAG->getTargetConstant(0x4ULL, MVT::i32);
  SDValue Tmp775(CurDAG->getTargetNode(Opc422, N.getDebugLoc(), VT422, N1, Tmp774), 0);
  SDValue Tmp776(CurDAG->getTargetNode(Opc423, N.getDebugLoc(), VT423, Tmp772, Tmp775), 0);
  SDValue Tmp777(CurDAG->getTargetNode(Opc424, N.getDebugLoc(), VT424, Tmp766, Tmp776), 0);
  SDValue Tmp779 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp780(CurDAG->getTargetNode(Opc425, N.getDebugLoc(), VT425, Tmp779), 0);
  SDValue Tmp781 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp782(CurDAG->getTargetNode(Opc426, N.getDebugLoc(), VT426, Tmp781), 0);
  SDValue Tmp783(CurDAG->getTargetNode(Opc427, N.getDebugLoc(), VT427, N1, Tmp780, Tmp782), 0);
  SDValue Tmp785 = CurDAG->getTargetConstant(0x4ULL, MVT::i32);
  SDValue Tmp786(CurDAG->getTargetNode(Opc428, N.getDebugLoc(), VT428, N0, Tmp785), 0);
  SDValue Tmp787(CurDAG->getTargetNode(Opc429, N.getDebugLoc(), VT429, Tmp783, Tmp786), 0);
  SDValue Tmp789 = CurDAG->getTargetConstant(0x4ULL, MVT::i32);
  SDValue Tmp790(CurDAG->getTargetNode(Opc430, N.getDebugLoc(), VT430, N0, Tmp789), 0);
  SDValue Tmp792 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp793(CurDAG->getTargetNode(Opc431, N.getDebugLoc(), VT431, Tmp792), 0);
  SDValue Tmp794 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp795(CurDAG->getTargetNode(Opc432, N.getDebugLoc(), VT432, Tmp794), 0);
  SDValue Tmp796(CurDAG->getTargetNode(Opc433, N.getDebugLoc(), VT433, N1, Tmp793, Tmp795), 0);
  SDValue Tmp797(CurDAG->getTargetNode(Opc434, N.getDebugLoc(), VT434, Tmp790, Tmp796), 0);
  SDValue Tmp799 = CurDAG->getTargetConstant(0x4ULL, MVT::i32);
  SDValue Tmp800(CurDAG->getTargetNode(Opc435, N.getDebugLoc(), VT435, N0, Tmp799), 0);
  SDValue Tmp802 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp803(CurDAG->getTargetNode(Opc436, N.getDebugLoc(), VT436, Tmp802), 0);
  SDValue Tmp804 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp805(CurDAG->getTargetNode(Opc437, N.getDebugLoc(), VT437, Tmp804), 0);
  SDValue Tmp806(CurDAG->getTargetNode(Opc438, N.getDebugLoc(), VT438, N1, Tmp803, Tmp805), 0);
  SDValue Tmp807(CurDAG->getTargetNode(Opc439, N.getDebugLoc(), VT439, Tmp800, Tmp806), 0);
  SDValue Tmp809 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp810(CurDAG->getTargetNode(Opc440, N.getDebugLoc(), VT440, N0, Tmp809), 0);
  SDValue Tmp812 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp813(CurDAG->getTargetNode(Opc441, N.getDebugLoc(), VT441, N1, Tmp812), 0);
  SDValue Tmp814(CurDAG->getTargetNode(Opc442, N.getDebugLoc(), VT442, Tmp810, Tmp813), 0);
  SDValue Tmp816 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp817(CurDAG->getTargetNode(Opc443, N.getDebugLoc(), VT443, N0, Tmp816), 0);
  SDValue Tmp819 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp820(CurDAG->getTargetNode(Opc444, N.getDebugLoc(), VT444, N1, Tmp819), 0);
  SDValue Tmp821(CurDAG->getTargetNode(Opc445, N.getDebugLoc(), VT445, Tmp817, Tmp820), 0);
  SDValue Tmp822(CurDAG->getTargetNode(Opc446, N.getDebugLoc(), VT446, Tmp814, Tmp821), 0);
  SDValue Tmp823(CurDAG->getTargetNode(Opc447, N.getDebugLoc(), VT447, Tmp807, Tmp822), 0);
  SDValue Tmp824(CurDAG->getTargetNode(Opc448, N.getDebugLoc(), VT448, Tmp797, Tmp823), 0);
  SDValue Tmp825(CurDAG->getTargetNode(Opc449, N.getDebugLoc(), VT449, Tmp787, Tmp824), 0);
  SDValue Tmp826(CurDAG->getTargetNode(Opc450, N.getDebugLoc(), VT450, Tmp777, Tmp825), 0);
  SDValue Tmp827 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp828(CurDAG->getTargetNode(Opc451, N.getDebugLoc(), VT451, Tmp827), 0);
  SDValue Tmp829 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp830(CurDAG->getTargetNode(Opc452, N.getDebugLoc(), VT452, Tmp829), 0);
  SDValue Tmp831(CurDAG->getTargetNode(Opc453, N.getDebugLoc(), VT453, Tmp826, Tmp828, Tmp830), 0);
  SDValue Tmp832(CurDAG->getTargetNode(Opc454, N.getDebugLoc(), VT454, Tmp756, Tmp831), 0);
  SDValue Tmp834 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp835(CurDAG->getTargetNode(Opc455, N.getDebugLoc(), VT455, Tmp834), 0);
  SDValue Tmp836 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp837(CurDAG->getTargetNode(Opc456, N.getDebugLoc(), VT456, Tmp836), 0);
  SDValue Tmp838(CurDAG->getTargetNode(Opc457, N.getDebugLoc(), VT457, N0, Tmp835, Tmp837), 0);
  SDValue Tmp840 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp841(CurDAG->getTargetNode(Opc458, N.getDebugLoc(), VT458, Tmp840), 0);
  SDValue Tmp842 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp843(CurDAG->getTargetNode(Opc459, N.getDebugLoc(), VT459, Tmp842), 0);
  SDValue Tmp844(CurDAG->getTargetNode(Opc460, N.getDebugLoc(), VT460, N1, Tmp841, Tmp843), 0);
  SDValue Tmp845(CurDAG->getTargetNode(Opc461, N.getDebugLoc(), VT461, Tmp838, Tmp844), 0);
  SDValue Tmp847 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp848(CurDAG->getTargetNode(Opc462, N.getDebugLoc(), VT462, Tmp847), 0);
  SDValue Tmp849 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp850(CurDAG->getTargetNode(Opc463, N.getDebugLoc(), VT463, Tmp849), 0);
  SDValue Tmp851(CurDAG->getTargetNode(Opc464, N.getDebugLoc(), VT464, N0, Tmp848, Tmp850), 0);
  SDValue Tmp853 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp854(CurDAG->getTargetNode(Opc465, N.getDebugLoc(), VT465, N1, Tmp853), 0);
  SDValue Tmp855(CurDAG->getTargetNode(Opc466, N.getDebugLoc(), VT466, Tmp851, Tmp854), 0);
  SDValue Tmp856 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp857(CurDAG->getTargetNode(Opc467, N.getDebugLoc(), VT467, Tmp855, Tmp856), 0);
  SDValue Tmp858 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp859(CurDAG->getTargetNode(Opc468, N.getDebugLoc(), VT468, Tmp858), 0);
  SDValue Tmp860 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp861(CurDAG->getTargetNode(Opc469, N.getDebugLoc(), VT469, Tmp860), 0);
  SDValue Tmp862(CurDAG->getTargetNode(Opc470, N.getDebugLoc(), VT470, Tmp857, Tmp859, Tmp861), 0);
  SDValue Tmp864 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp865(CurDAG->getTargetNode(Opc471, N.getDebugLoc(), VT471, Tmp864), 0);
  SDValue Tmp866 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp867(CurDAG->getTargetNode(Opc472, N.getDebugLoc(), VT472, Tmp866), 0);
  SDValue Tmp868(CurDAG->getTargetNode(Opc473, N.getDebugLoc(), VT473, N0, Tmp865, Tmp867), 0);
  SDValue Tmp870 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp871(CurDAG->getTargetNode(Opc474, N.getDebugLoc(), VT474, Tmp870), 0);
  SDValue Tmp872 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp873(CurDAG->getTargetNode(Opc475, N.getDebugLoc(), VT475, Tmp872), 0);
  SDValue Tmp874(CurDAG->getTargetNode(Opc476, N.getDebugLoc(), VT476, N1, Tmp871, Tmp873), 0);
  SDValue Tmp875(CurDAG->getTargetNode(Opc477, N.getDebugLoc(), VT477, Tmp868, Tmp874), 0);
  SDValue Tmp877 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp878(CurDAG->getTargetNode(Opc478, N.getDebugLoc(), VT478, Tmp877), 0);
  SDValue Tmp879 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp880(CurDAG->getTargetNode(Opc479, N.getDebugLoc(), VT479, Tmp879), 0);
  SDValue Tmp881(CurDAG->getTargetNode(Opc480, N.getDebugLoc(), VT480, N0, Tmp878, Tmp880), 0);
  SDValue Tmp883 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp884(CurDAG->getTargetNode(Opc481, N.getDebugLoc(), VT481, N1, Tmp883), 0);
  SDValue Tmp885(CurDAG->getTargetNode(Opc482, N.getDebugLoc(), VT482, Tmp881, Tmp884), 0);
  SDValue Tmp886 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp887(CurDAG->getTargetNode(Opc483, N.getDebugLoc(), VT483, Tmp885, Tmp886), 0);
  SDValue Tmp888 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp889(CurDAG->getTargetNode(Opc484, N.getDebugLoc(), VT484, Tmp888), 0);
  SDValue Tmp890 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp891(CurDAG->getTargetNode(Opc485, N.getDebugLoc(), VT485, Tmp890), 0);
  SDValue Tmp892(CurDAG->getTargetNode(Opc486, N.getDebugLoc(), VT486, Tmp887, Tmp889, Tmp891), 0);
  SDValue Tmp893(CurDAG->getTargetNode(Opc487, N.getDebugLoc(), VT487, Tmp875, Tmp892), 0);
  SDValue Tmp895 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp896(CurDAG->getTargetNode(Opc488, N.getDebugLoc(), VT488, Tmp895), 0);
  SDValue Tmp897 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp898(CurDAG->getTargetNode(Opc489, N.getDebugLoc(), VT489, Tmp897), 0);
  SDValue Tmp899(CurDAG->getTargetNode(Opc490, N.getDebugLoc(), VT490, N0, Tmp896, Tmp898), 0);
  SDValue Tmp901 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp902(CurDAG->getTargetNode(Opc491, N.getDebugLoc(), VT491, Tmp901), 0);
  SDValue Tmp903 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp904(CurDAG->getTargetNode(Opc492, N.getDebugLoc(), VT492, Tmp903), 0);
  SDValue Tmp905(CurDAG->getTargetNode(Opc493, N.getDebugLoc(), VT493, N1, Tmp902, Tmp904), 0);
  SDValue Tmp906(CurDAG->getTargetNode(Opc494, N.getDebugLoc(), VT494, Tmp899, Tmp905), 0);
  SDValue Tmp908 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp909(CurDAG->getTargetNode(Opc495, N.getDebugLoc(), VT495, Tmp908), 0);
  SDValue Tmp910 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp911(CurDAG->getTargetNode(Opc496, N.getDebugLoc(), VT496, Tmp910), 0);
  SDValue Tmp912(CurDAG->getTargetNode(Opc497, N.getDebugLoc(), VT497, N0, Tmp909, Tmp911), 0);
  SDValue Tmp914 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp915(CurDAG->getTargetNode(Opc498, N.getDebugLoc(), VT498, N1, Tmp914), 0);
  SDValue Tmp916(CurDAG->getTargetNode(Opc499, N.getDebugLoc(), VT499, Tmp912, Tmp915), 0);
  SDValue Tmp917 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp918(CurDAG->getTargetNode(Opc500, N.getDebugLoc(), VT500, Tmp916, Tmp917), 0);
  SDValue Tmp919 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp920(CurDAG->getTargetNode(Opc501, N.getDebugLoc(), VT501, Tmp919), 0);
  SDValue Tmp921 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp922(CurDAG->getTargetNode(Opc502, N.getDebugLoc(), VT502, Tmp921), 0);
  SDValue Tmp923(CurDAG->getTargetNode(Opc503, N.getDebugLoc(), VT503, Tmp918, Tmp920, Tmp922), 0);
  SDValue Tmp924(CurDAG->getTargetNode(Opc504, N.getDebugLoc(), VT504, Tmp906, Tmp923), 0);
  SDValue Tmp926(CurDAG->getTargetNode(Opc505, N.getDebugLoc(), VT505, Tmp893, Tmp924, N2), 0);
  SDValue Tmp927(CurDAG->getTargetNode(Opc506, N.getDebugLoc(), VT506, Tmp845, Tmp862, Tmp926), 0);
  SDValue Tmp929 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp930(CurDAG->getTargetNode(Opc507, N.getDebugLoc(), VT507, Tmp929), 0);
  SDValue Tmp931 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp932(CurDAG->getTargetNode(Opc508, N.getDebugLoc(), VT508, Tmp931), 0);
  SDValue Tmp933(CurDAG->getTargetNode(Opc509, N.getDebugLoc(), VT509, N1, Tmp930, Tmp932), 0);
  SDValue Tmp935 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp936(CurDAG->getTargetNode(Opc510, N.getDebugLoc(), VT510, N0, Tmp935), 0);
  SDValue Tmp937(CurDAG->getTargetNode(Opc511, N.getDebugLoc(), VT511, Tmp933, Tmp936), 0);
  SDValue Tmp938 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp939(CurDAG->getTargetNode(Opc512, N.getDebugLoc(), VT512, Tmp937, Tmp938), 0);
  SDValue Tmp940 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp941(CurDAG->getTargetNode(Opc513, N.getDebugLoc(), VT513, Tmp940), 0);
  SDValue Tmp942 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp943(CurDAG->getTargetNode(Opc514, N.getDebugLoc(), VT514, Tmp942), 0);
  SDValue Tmp944(CurDAG->getTargetNode(Opc515, N.getDebugLoc(), VT515, Tmp939, Tmp941, Tmp943), 0);
  SDValue Tmp946 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp947(CurDAG->getTargetNode(Opc516, N.getDebugLoc(), VT516, Tmp946), 0);
  SDValue Tmp948 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp949(CurDAG->getTargetNode(Opc517, N.getDebugLoc(), VT517, Tmp948), 0);
  SDValue Tmp950(CurDAG->getTargetNode(Opc518, N.getDebugLoc(), VT518, N0, Tmp947, Tmp949), 0);
  SDValue Tmp952 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp953(CurDAG->getTargetNode(Opc519, N.getDebugLoc(), VT519, Tmp952), 0);
  SDValue Tmp954 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp955(CurDAG->getTargetNode(Opc520, N.getDebugLoc(), VT520, Tmp954), 0);
  SDValue Tmp956(CurDAG->getTargetNode(Opc521, N.getDebugLoc(), VT521, N1, Tmp953, Tmp955), 0);
  SDValue Tmp957(CurDAG->getTargetNode(Opc522, N.getDebugLoc(), VT522, Tmp950, Tmp956), 0);
  SDValue Tmp959 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp960(CurDAG->getTargetNode(Opc523, N.getDebugLoc(), VT523, Tmp959), 0);
  SDValue Tmp961 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp962(CurDAG->getTargetNode(Opc524, N.getDebugLoc(), VT524, Tmp961), 0);
  SDValue Tmp963(CurDAG->getTargetNode(Opc525, N.getDebugLoc(), VT525, N0, Tmp960, Tmp962), 0);
  SDValue Tmp965 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp966(CurDAG->getTargetNode(Opc526, N.getDebugLoc(), VT526, N1, Tmp965), 0);
  SDValue Tmp967(CurDAG->getTargetNode(Opc527, N.getDebugLoc(), VT527, Tmp963, Tmp966), 0);
  SDValue Tmp968 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp969(CurDAG->getTargetNode(Opc528, N.getDebugLoc(), VT528, Tmp967, Tmp968), 0);
  SDValue Tmp970 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp971(CurDAG->getTargetNode(Opc529, N.getDebugLoc(), VT529, Tmp970), 0);
  SDValue Tmp972 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp973(CurDAG->getTargetNode(Opc530, N.getDebugLoc(), VT530, Tmp972), 0);
  SDValue Tmp974(CurDAG->getTargetNode(Opc531, N.getDebugLoc(), VT531, Tmp969, Tmp971, Tmp973), 0);
  SDValue Tmp976 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp977(CurDAG->getTargetNode(Opc532, N.getDebugLoc(), VT532, Tmp976), 0);
  SDValue Tmp978 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp979(CurDAG->getTargetNode(Opc533, N.getDebugLoc(), VT533, Tmp978), 0);
  SDValue Tmp980(CurDAG->getTargetNode(Opc534, N.getDebugLoc(), VT534, N0, Tmp977, Tmp979), 0);
  SDValue Tmp982 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp983(CurDAG->getTargetNode(Opc535, N.getDebugLoc(), VT535, Tmp982), 0);
  SDValue Tmp984 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp985(CurDAG->getTargetNode(Opc536, N.getDebugLoc(), VT536, Tmp984), 0);
  SDValue Tmp986(CurDAG->getTargetNode(Opc537, N.getDebugLoc(), VT537, N1, Tmp983, Tmp985), 0);
  SDValue Tmp987(CurDAG->getTargetNode(Opc538, N.getDebugLoc(), VT538, Tmp980, Tmp986), 0);
  SDValue Tmp989 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp990(CurDAG->getTargetNode(Opc539, N.getDebugLoc(), VT539, Tmp989), 0);
  SDValue Tmp991 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp992(CurDAG->getTargetNode(Opc540, N.getDebugLoc(), VT540, Tmp991), 0);
  SDValue Tmp993(CurDAG->getTargetNode(Opc541, N.getDebugLoc(), VT541, N0, Tmp990, Tmp992), 0);
  SDValue Tmp995 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp996(CurDAG->getTargetNode(Opc542, N.getDebugLoc(), VT542, N1, Tmp995), 0);
  SDValue Tmp997(CurDAG->getTargetNode(Opc543, N.getDebugLoc(), VT543, Tmp993, Tmp996), 0);
  SDValue Tmp998 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp999(CurDAG->getTargetNode(Opc544, N.getDebugLoc(), VT544, Tmp997, Tmp998), 0);
  SDValue Tmp1000 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1001(CurDAG->getTargetNode(Opc545, N.getDebugLoc(), VT545, Tmp1000), 0);
  SDValue Tmp1002 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp1003(CurDAG->getTargetNode(Opc546, N.getDebugLoc(), VT546, Tmp1002), 0);
  SDValue Tmp1004(CurDAG->getTargetNode(Opc547, N.getDebugLoc(), VT547, Tmp999, Tmp1001, Tmp1003), 0);
  SDValue Tmp1005(CurDAG->getTargetNode(Opc548, N.getDebugLoc(), VT548, Tmp987, Tmp1004), 0);
  SDValue Tmp1007 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1008(CurDAG->getTargetNode(Opc549, N.getDebugLoc(), VT549, Tmp1007), 0);
  SDValue Tmp1009 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1010(CurDAG->getTargetNode(Opc550, N.getDebugLoc(), VT550, Tmp1009), 0);
  SDValue Tmp1011(CurDAG->getTargetNode(Opc551, N.getDebugLoc(), VT551, N0, Tmp1008, Tmp1010), 0);
  SDValue Tmp1013 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1014(CurDAG->getTargetNode(Opc552, N.getDebugLoc(), VT552, Tmp1013), 0);
  SDValue Tmp1015 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1016(CurDAG->getTargetNode(Opc553, N.getDebugLoc(), VT553, Tmp1015), 0);
  SDValue Tmp1017(CurDAG->getTargetNode(Opc554, N.getDebugLoc(), VT554, N1, Tmp1014, Tmp1016), 0);
  SDValue Tmp1018(CurDAG->getTargetNode(Opc555, N.getDebugLoc(), VT555, Tmp1011, Tmp1017), 0);
  SDValue Tmp1020 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1021(CurDAG->getTargetNode(Opc556, N.getDebugLoc(), VT556, Tmp1020), 0);
  SDValue Tmp1022 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1023(CurDAG->getTargetNode(Opc557, N.getDebugLoc(), VT557, Tmp1022), 0);
  SDValue Tmp1024(CurDAG->getTargetNode(Opc558, N.getDebugLoc(), VT558, N0, Tmp1021, Tmp1023), 0);
  SDValue Tmp1026 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1027(CurDAG->getTargetNode(Opc559, N.getDebugLoc(), VT559, N1, Tmp1026), 0);
  SDValue Tmp1028(CurDAG->getTargetNode(Opc560, N.getDebugLoc(), VT560, Tmp1024, Tmp1027), 0);
  SDValue Tmp1029 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1030(CurDAG->getTargetNode(Opc561, N.getDebugLoc(), VT561, Tmp1028, Tmp1029), 0);
  SDValue Tmp1031 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1032(CurDAG->getTargetNode(Opc562, N.getDebugLoc(), VT562, Tmp1031), 0);
  SDValue Tmp1033 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp1034(CurDAG->getTargetNode(Opc563, N.getDebugLoc(), VT563, Tmp1033), 0);
  SDValue Tmp1035(CurDAG->getTargetNode(Opc564, N.getDebugLoc(), VT564, Tmp1030, Tmp1032, Tmp1034), 0);
  SDValue Tmp1036(CurDAG->getTargetNode(Opc565, N.getDebugLoc(), VT565, Tmp1018, Tmp1035), 0);
  SDValue Tmp1038(CurDAG->getTargetNode(Opc566, N.getDebugLoc(), VT566, Tmp1005, Tmp1036, N2), 0);
  SDValue Tmp1039(CurDAG->getTargetNode(Opc567, N.getDebugLoc(), VT567, Tmp957, Tmp974, Tmp1038), 0);
  SDValue Tmp1041 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1042(CurDAG->getTargetNode(Opc568, N.getDebugLoc(), VT568, Tmp1041), 0);
  SDValue Tmp1043 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1044(CurDAG->getTargetNode(Opc569, N.getDebugLoc(), VT569, Tmp1043), 0);
  SDValue Tmp1045(CurDAG->getTargetNode(Opc570, N.getDebugLoc(), VT570, N1, Tmp1042, Tmp1044), 0);
  SDValue Tmp1047 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1048(CurDAG->getTargetNode(Opc571, N.getDebugLoc(), VT571, N0, Tmp1047), 0);
  SDValue Tmp1049(CurDAG->getTargetNode(Opc572, N.getDebugLoc(), VT572, Tmp1045, Tmp1048), 0);
  SDValue Tmp1050 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1051(CurDAG->getTargetNode(Opc573, N.getDebugLoc(), VT573, Tmp1049, Tmp1050), 0);
  SDValue Tmp1052 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1053(CurDAG->getTargetNode(Opc574, N.getDebugLoc(), VT574, Tmp1052), 0);
  SDValue Tmp1054 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp1055(CurDAG->getTargetNode(Opc575, N.getDebugLoc(), VT575, Tmp1054), 0);
  SDValue Tmp1056(CurDAG->getTargetNode(Opc576, N.getDebugLoc(), VT576, Tmp1051, Tmp1053, Tmp1055), 0);
  SDValue Tmp1057(CurDAG->getTargetNode(Opc577, N.getDebugLoc(), VT577, Tmp1039, Tmp1056), 0);
  SDValue Tmp1059 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1060(CurDAG->getTargetNode(Opc578, N.getDebugLoc(), VT578, Tmp1059), 0);
  SDValue Tmp1061 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1062(CurDAG->getTargetNode(Opc579, N.getDebugLoc(), VT579, Tmp1061), 0);
  SDValue Tmp1063(CurDAG->getTargetNode(Opc580, N.getDebugLoc(), VT580, N0, Tmp1060, Tmp1062), 0);
  SDValue Tmp1065 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1066(CurDAG->getTargetNode(Opc581, N.getDebugLoc(), VT581, Tmp1065), 0);
  SDValue Tmp1067 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1068(CurDAG->getTargetNode(Opc582, N.getDebugLoc(), VT582, Tmp1067), 0);
  SDValue Tmp1069(CurDAG->getTargetNode(Opc583, N.getDebugLoc(), VT583, N1, Tmp1066, Tmp1068), 0);
  SDValue Tmp1070(CurDAG->getTargetNode(Opc584, N.getDebugLoc(), VT584, Tmp1063, Tmp1069), 0);
  SDValue Tmp1072 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1073(CurDAG->getTargetNode(Opc585, N.getDebugLoc(), VT585, Tmp1072), 0);
  SDValue Tmp1074 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1075(CurDAG->getTargetNode(Opc586, N.getDebugLoc(), VT586, Tmp1074), 0);
  SDValue Tmp1076(CurDAG->getTargetNode(Opc587, N.getDebugLoc(), VT587, N0, Tmp1073, Tmp1075), 0);
  SDValue Tmp1078 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1079(CurDAG->getTargetNode(Opc588, N.getDebugLoc(), VT588, N1, Tmp1078), 0);
  SDValue Tmp1080(CurDAG->getTargetNode(Opc589, N.getDebugLoc(), VT589, Tmp1076, Tmp1079), 0);
  SDValue Tmp1081 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1082(CurDAG->getTargetNode(Opc590, N.getDebugLoc(), VT590, Tmp1080, Tmp1081), 0);
  SDValue Tmp1083 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1084(CurDAG->getTargetNode(Opc591, N.getDebugLoc(), VT591, Tmp1083), 0);
  SDValue Tmp1085 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp1086(CurDAG->getTargetNode(Opc592, N.getDebugLoc(), VT592, Tmp1085), 0);
  SDValue Tmp1087(CurDAG->getTargetNode(Opc593, N.getDebugLoc(), VT593, Tmp1082, Tmp1084, Tmp1086), 0);
  SDValue Tmp1089 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1090(CurDAG->getTargetNode(Opc594, N.getDebugLoc(), VT594, Tmp1089), 0);
  SDValue Tmp1091 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1092(CurDAG->getTargetNode(Opc595, N.getDebugLoc(), VT595, Tmp1091), 0);
  SDValue Tmp1093(CurDAG->getTargetNode(Opc596, N.getDebugLoc(), VT596, N0, Tmp1090, Tmp1092), 0);
  SDValue Tmp1095 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1096(CurDAG->getTargetNode(Opc597, N.getDebugLoc(), VT597, Tmp1095), 0);
  SDValue Tmp1097 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1098(CurDAG->getTargetNode(Opc598, N.getDebugLoc(), VT598, Tmp1097), 0);
  SDValue Tmp1099(CurDAG->getTargetNode(Opc599, N.getDebugLoc(), VT599, N1, Tmp1096, Tmp1098), 0);
  SDValue Tmp1100(CurDAG->getTargetNode(Opc600, N.getDebugLoc(), VT600, Tmp1093, Tmp1099), 0);
  SDValue Tmp1102 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1103(CurDAG->getTargetNode(Opc601, N.getDebugLoc(), VT601, Tmp1102), 0);
  SDValue Tmp1104 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1105(CurDAG->getTargetNode(Opc602, N.getDebugLoc(), VT602, Tmp1104), 0);
  SDValue Tmp1106(CurDAG->getTargetNode(Opc603, N.getDebugLoc(), VT603, N0, Tmp1103, Tmp1105), 0);
  SDValue Tmp1108 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1109(CurDAG->getTargetNode(Opc604, N.getDebugLoc(), VT604, N1, Tmp1108), 0);
  SDValue Tmp1110(CurDAG->getTargetNode(Opc605, N.getDebugLoc(), VT605, Tmp1106, Tmp1109), 0);
  SDValue Tmp1111 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1112(CurDAG->getTargetNode(Opc606, N.getDebugLoc(), VT606, Tmp1110, Tmp1111), 0);
  SDValue Tmp1113 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1114(CurDAG->getTargetNode(Opc607, N.getDebugLoc(), VT607, Tmp1113), 0);
  SDValue Tmp1115 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp1116(CurDAG->getTargetNode(Opc608, N.getDebugLoc(), VT608, Tmp1115), 0);
  SDValue Tmp1117(CurDAG->getTargetNode(Opc609, N.getDebugLoc(), VT609, Tmp1112, Tmp1114, Tmp1116), 0);
  SDValue Tmp1118(CurDAG->getTargetNode(Opc610, N.getDebugLoc(), VT610, Tmp1100, Tmp1117), 0);
  SDValue Tmp1120 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1121(CurDAG->getTargetNode(Opc611, N.getDebugLoc(), VT611, Tmp1120), 0);
  SDValue Tmp1122 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1123(CurDAG->getTargetNode(Opc612, N.getDebugLoc(), VT612, Tmp1122), 0);
  SDValue Tmp1124(CurDAG->getTargetNode(Opc613, N.getDebugLoc(), VT613, N0, Tmp1121, Tmp1123), 0);
  SDValue Tmp1126 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1127(CurDAG->getTargetNode(Opc614, N.getDebugLoc(), VT614, Tmp1126), 0);
  SDValue Tmp1128 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1129(CurDAG->getTargetNode(Opc615, N.getDebugLoc(), VT615, Tmp1128), 0);
  SDValue Tmp1130(CurDAG->getTargetNode(Opc616, N.getDebugLoc(), VT616, N1, Tmp1127, Tmp1129), 0);
  SDValue Tmp1131(CurDAG->getTargetNode(Opc617, N.getDebugLoc(), VT617, Tmp1124, Tmp1130), 0);
  SDValue Tmp1133 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1134(CurDAG->getTargetNode(Opc618, N.getDebugLoc(), VT618, Tmp1133), 0);
  SDValue Tmp1135 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1136(CurDAG->getTargetNode(Opc619, N.getDebugLoc(), VT619, Tmp1135), 0);
  SDValue Tmp1137(CurDAG->getTargetNode(Opc620, N.getDebugLoc(), VT620, N0, Tmp1134, Tmp1136), 0);
  SDValue Tmp1139 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1140(CurDAG->getTargetNode(Opc621, N.getDebugLoc(), VT621, N1, Tmp1139), 0);
  SDValue Tmp1141(CurDAG->getTargetNode(Opc622, N.getDebugLoc(), VT622, Tmp1137, Tmp1140), 0);
  SDValue Tmp1142 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1143(CurDAG->getTargetNode(Opc623, N.getDebugLoc(), VT623, Tmp1141, Tmp1142), 0);
  SDValue Tmp1144 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1145(CurDAG->getTargetNode(Opc624, N.getDebugLoc(), VT624, Tmp1144), 0);
  SDValue Tmp1146 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp1147(CurDAG->getTargetNode(Opc625, N.getDebugLoc(), VT625, Tmp1146), 0);
  SDValue Tmp1148(CurDAG->getTargetNode(Opc626, N.getDebugLoc(), VT626, Tmp1143, Tmp1145, Tmp1147), 0);
  SDValue Tmp1149(CurDAG->getTargetNode(Opc627, N.getDebugLoc(), VT627, Tmp1131, Tmp1148), 0);
  SDValue Tmp1151(CurDAG->getTargetNode(Opc628, N.getDebugLoc(), VT628, Tmp1118, Tmp1149, N2), 0);
  SDValue Tmp1152(CurDAG->getTargetNode(Opc629, N.getDebugLoc(), VT629, Tmp1070, Tmp1087, Tmp1151), 0);
  SDValue Tmp1154 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1155(CurDAG->getTargetNode(Opc630, N.getDebugLoc(), VT630, Tmp1154), 0);
  SDValue Tmp1156 = CurDAG->getTargetConstant(0xF0F0ULL, MVT::i16);
  SDValue Tmp1157(CurDAG->getTargetNode(Opc631, N.getDebugLoc(), VT631, Tmp1156), 0);
  SDValue Tmp1158(CurDAG->getTargetNode(Opc632, N.getDebugLoc(), VT632, N1, Tmp1155, Tmp1157), 0);
  SDValue Tmp1160 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1161(CurDAG->getTargetNode(Opc633, N.getDebugLoc(), VT633, N0, Tmp1160), 0);
  SDValue Tmp1162(CurDAG->getTargetNode(Opc634, N.getDebugLoc(), VT634, Tmp1158, Tmp1161), 0);
  SDValue Tmp1163 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1164(CurDAG->getTargetNode(Opc635, N.getDebugLoc(), VT635, Tmp1162, Tmp1163), 0);
  SDValue Tmp1165 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1166(CurDAG->getTargetNode(Opc636, N.getDebugLoc(), VT636, Tmp1165), 0);
  SDValue Tmp1167 = CurDAG->getTargetConstant(0xC3C3ULL, MVT::i16);
  SDValue Tmp1168(CurDAG->getTargetNode(Opc637, N.getDebugLoc(), VT637, Tmp1167), 0);
  SDValue Tmp1169(CurDAG->getTargetNode(Opc638, N.getDebugLoc(), VT638, Tmp1164, Tmp1166, Tmp1168), 0);
  SDValue Tmp1170(CurDAG->getTargetNode(Opc639, N.getDebugLoc(), VT639, Tmp1152, Tmp1169), 0);
  SDValue Tmp1172(CurDAG->getTargetNode(Opc640, N.getDebugLoc(), VT640, Tmp1057, Tmp1170, N2), 0);
  SDValue Tmp1173(CurDAG->getTargetNode(Opc641, N.getDebugLoc(), VT641, Tmp927, Tmp944, Tmp1172), 0);
  SDValue Tmp1175 = CurDAG->getTargetConstant(0x4ULL, MVT::i32);
  SDValue Tmp1176(CurDAG->getTargetNode(Opc642, N.getDebugLoc(), VT642, N1, Tmp1175), 0);
  SDValue Tmp1178 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1179(CurDAG->getTargetNode(Opc643, N.getDebugLoc(), VT643, Tmp1178), 0);
  SDValue Tmp1180 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp1181(CurDAG->getTargetNode(Opc644, N.getDebugLoc(), VT644, Tmp1180), 0);
  SDValue Tmp1182(CurDAG->getTargetNode(Opc645, N.getDebugLoc(), VT645, N0, Tmp1179, Tmp1181), 0);
  SDValue Tmp1183(CurDAG->getTargetNode(Opc646, N.getDebugLoc(), VT646, Tmp1176, Tmp1182), 0);
  SDValue Tmp1185 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1186(CurDAG->getTargetNode(Opc647, N.getDebugLoc(), VT647, Tmp1185), 0);
  SDValue Tmp1187 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp1188(CurDAG->getTargetNode(Opc648, N.getDebugLoc(), VT648, Tmp1187), 0);
  SDValue Tmp1189(CurDAG->getTargetNode(Opc649, N.getDebugLoc(), VT649, N0, Tmp1186, Tmp1188), 0);
  SDValue Tmp1191 = CurDAG->getTargetConstant(0x4ULL, MVT::i32);
  SDValue Tmp1192(CurDAG->getTargetNode(Opc650, N.getDebugLoc(), VT650, N1, Tmp1191), 0);
  SDValue Tmp1193(CurDAG->getTargetNode(Opc651, N.getDebugLoc(), VT651, Tmp1189, Tmp1192), 0);
  SDValue Tmp1194(CurDAG->getTargetNode(Opc652, N.getDebugLoc(), VT652, Tmp1183, Tmp1193), 0);
  SDValue Tmp1196 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1197(CurDAG->getTargetNode(Opc653, N.getDebugLoc(), VT653, Tmp1196), 0);
  SDValue Tmp1198 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp1199(CurDAG->getTargetNode(Opc654, N.getDebugLoc(), VT654, Tmp1198), 0);
  SDValue Tmp1200(CurDAG->getTargetNode(Opc655, N.getDebugLoc(), VT655, N1, Tmp1197, Tmp1199), 0);
  SDValue Tmp1202 = CurDAG->getTargetConstant(0x4ULL, MVT::i32);
  SDValue Tmp1203(CurDAG->getTargetNode(Opc656, N.getDebugLoc(), VT656, N0, Tmp1202), 0);
  SDValue Tmp1204(CurDAG->getTargetNode(Opc657, N.getDebugLoc(), VT657, Tmp1200, Tmp1203), 0);
  SDValue Tmp1206 = CurDAG->getTargetConstant(0x4ULL, MVT::i32);
  SDValue Tmp1207(CurDAG->getTargetNode(Opc658, N.getDebugLoc(), VT658, N0, Tmp1206), 0);
  SDValue Tmp1209 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1210(CurDAG->getTargetNode(Opc659, N.getDebugLoc(), VT659, Tmp1209), 0);
  SDValue Tmp1211 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp1212(CurDAG->getTargetNode(Opc660, N.getDebugLoc(), VT660, Tmp1211), 0);
  SDValue Tmp1213(CurDAG->getTargetNode(Opc661, N.getDebugLoc(), VT661, N1, Tmp1210, Tmp1212), 0);
  SDValue Tmp1214(CurDAG->getTargetNode(Opc662, N.getDebugLoc(), VT662, Tmp1207, Tmp1213), 0);
  SDValue Tmp1216 = CurDAG->getTargetConstant(0x4ULL, MVT::i32);
  SDValue Tmp1217(CurDAG->getTargetNode(Opc663, N.getDebugLoc(), VT663, N0, Tmp1216), 0);
  SDValue Tmp1219 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1220(CurDAG->getTargetNode(Opc664, N.getDebugLoc(), VT664, Tmp1219), 0);
  SDValue Tmp1221 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp1222(CurDAG->getTargetNode(Opc665, N.getDebugLoc(), VT665, Tmp1221), 0);
  SDValue Tmp1223(CurDAG->getTargetNode(Opc666, N.getDebugLoc(), VT666, N1, Tmp1220, Tmp1222), 0);
  SDValue Tmp1224(CurDAG->getTargetNode(Opc667, N.getDebugLoc(), VT667, Tmp1217, Tmp1223), 0);
  SDValue Tmp1226 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1227(CurDAG->getTargetNode(Opc668, N.getDebugLoc(), VT668, N0, Tmp1226), 0);
  SDValue Tmp1229 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1230(CurDAG->getTargetNode(Opc669, N.getDebugLoc(), VT669, N1, Tmp1229), 0);
  SDValue Tmp1231(CurDAG->getTargetNode(Opc670, N.getDebugLoc(), VT670, Tmp1227, Tmp1230), 0);
  SDValue Tmp1233 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1234(CurDAG->getTargetNode(Opc671, N.getDebugLoc(), VT671, N0, Tmp1233), 0);
  SDValue Tmp1236 = CurDAG->getTargetConstant(0x2ULL, MVT::i32);
  SDValue Tmp1237(CurDAG->getTargetNode(Opc672, N.getDebugLoc(), VT672, N1, Tmp1236), 0);
  SDValue Tmp1238(CurDAG->getTargetNode(Opc673, N.getDebugLoc(), VT673, Tmp1234, Tmp1237), 0);
  SDValue Tmp1239(CurDAG->getTargetNode(Opc674, N.getDebugLoc(), VT674, Tmp1231, Tmp1238), 0);
  SDValue Tmp1240(CurDAG->getTargetNode(Opc675, N.getDebugLoc(), VT675, Tmp1224, Tmp1239), 0);
  SDValue Tmp1241(CurDAG->getTargetNode(Opc676, N.getDebugLoc(), VT676, Tmp1214, Tmp1240), 0);
  SDValue Tmp1242(CurDAG->getTargetNode(Opc677, N.getDebugLoc(), VT677, Tmp1204, Tmp1241), 0);
  SDValue Tmp1243(CurDAG->getTargetNode(Opc678, N.getDebugLoc(), VT678, Tmp1194, Tmp1242), 0);
  SDValue Tmp1244 = CurDAG->getTargetConstant(0x0ULL, MVT::i32);
  SDValue Tmp1245(CurDAG->getTargetNode(Opc679, N.getDebugLoc(), VT679, Tmp1244), 0);
  SDValue Tmp1246 = CurDAG->getTargetConstant(0xF0FULL, MVT::i16);
  SDValue Tmp1247(CurDAG->getTargetNode(Opc680, N.getDebugLoc(), VT680, Tmp1246), 0);
  SDValue Tmp1248(CurDAG->getTargetNode(Opc681, N.getDebugLoc(), VT681, Tmp1243, Tmp1245, Tmp1247), 0);
  SDValue Tmp1249(CurDAG->getTargetNode(Opc682, N.getDebugLoc(), VT682, Tmp1173, Tmp1248), 0);
  SDValue Tmp1251(CurDAG->getTargetNode(Opc683, N.getDebugLoc(), VT683, Tmp832, Tmp1249, N2), 0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc684, VT684, Tmp340, Tmp415, Tmp1251);
}
SDNode *Select_SPUISD_MUL64_MARKER_v2i64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  if (N2.getNode()->getValueType(0) == MVT::v4i32) {
    SDNode *Result = Emit_205(N, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::SHUFBv4i32, SPU::ADDXv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::SHUFBv4i32, SPU::ADDXv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::SHUFBv4i32, SPU::ADDXv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::SHUFBv4i32, SPU::ADDXv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHv4i32, SPU::Av4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYHv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::SHLQBYIv4i32, SPU::SHLQBYIv4i32, SPU::MPYHv4i32, SPU::SHLQBYIv4i32, SPU::SHLQBYIv4i32, SPU::MPYUv4i32, SPU::Av4i32, SPU::Av4i32, SPU::Av4i32, SPU::Av4i32, SPU::Av4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::SHUFBv4i32, SPU::ADDXv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::SHUFBv4i32, SPU::ADDXv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::SHUFBv4i32, SPU::ADDXv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::SHUFBv4i32, SPU::ADDXv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHv4i32, SPU::Av4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYHv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::SHLQBYIv4i32, SPU::SHLQBYIv4i32, SPU::MPYHv4i32, SPU::SHLQBYIv4i32, SPU::SHLQBYIv4i32, SPU::MPYUv4i32, SPU::Av4i32, SPU::Av4i32, SPU::Av4i32, SPU::Av4i32, SPU::Av4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::SHUFBv4i32, SPU::ADDXv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::SHUFBv4i32, SPU::ADDXv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::SHUFBv4i32, SPU::ADDXv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHHUv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::SHUFBv4i32, SPU::ADDXv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHv4i32, SPU::Av4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::SHLQBYIv4i32, SPU::MPYHv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYHv4i32, SPU::SHLQBYIv4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::MPYUv4i32, SPU::SHLQBYIv4i32, SPU::SHLQBYIv4i32, SPU::MPYHv4i32, SPU::SHLQBYIv4i32, SPU::SHLQBYIv4i32, SPU::MPYUv4i32, SPU::Av4i32, SPU::Av4i32, SPU::Av4i32, SPU::Av4i32, SPU::Av4i32, SPU::ILv4i32, SPU::FSMBIv4i32, SPU::SELBv4i32, SPU::CGv4i32, SPU::SHUFBv4i32, SPU::ADDXv4i32, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v2i64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_PREFSLOT2VEC_v16i8(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::i8) {
    SDNode *Result = Emit_31(N, SPU::ORv16i8_i8, MVT::v16i8);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_PREFSLOT2VEC_v8i16(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_31(N, SPU::ORv8i16_i16, MVT::v8i16);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_PREFSLOT2VEC_v4i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_31(N, SPU::ORv4i32_i32, MVT::v4i32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_PREFSLOT2VEC_v2i64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::i64) {
    SDNode *Result = Emit_31(N, SPU::ORv2i64_i64, MVT::v2i64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_PREFSLOT2VEC_v4f32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::f32) {
    SDNode *Result = Emit_31(N, SPU::ORv4f32_f32, MVT::v4f32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_PREFSLOT2VEC_v2f64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::f64) {
    SDNode *Result = Emit_31(N, SPU::ORv2f64_f64, MVT::v2f64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_206(const SDValue &N, unsigned Opc0) DISABLE_INLINE {
  SDValue Chain = N.getOperand(0);
  bool HasInFlag = (N.getOperand(N.getNumOperands()-1).getValueType() == MVT::Flag);
  SDValue InFlag(0, 0);
  if (HasInFlag) {
    InFlag = N.getOperand(N.getNumOperands()-1);
  }
  SDValue Ops0[] = { Chain, InFlag };
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, MVT::Other, Ops0, HasInFlag ? 2 : 1);
}
SDNode *Select_SPUISD_RET_FLAG(const SDValue &N) {
  SDNode *Result = Emit_206(N, SPU::RET);
  return Result;
}

SDNode *Select_SPUISD_ROTBYTES_LEFT_v16i8(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);

  // Pattern: (SPUrotbytes_left:v16i8 VECREG:v16i8:$rA, (imm:i16)<<P:Predicate_uimm7>>:$val)
  // Emits: (ROTQBYIv16i8:v16i8 VECREG:v16i8:$rA, (imm:i16):$val)
  // Pattern complexity = 7  cost = 1  size = 0
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_uimm7(N1.getNode()) &&
      N1.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_1(N, SPU::ROTQBYIv16i8, MVT::v16i8);
    return Result;
  }

  // Pattern: (SPUrotbytes_left:v16i8 VECREG:v16i8:$rA, R32C:i32:$rB)
  // Emits: (ROTQBYv16i8:v16i8 VECREG:v16i8:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_0(N, SPU::ROTQBYv16i8, MVT::v16i8);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_ROTBYTES_LEFT_v8i16(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);

  // Pattern: (SPUrotbytes_left:v8i16 VECREG:v8i16:$rA, (imm:i16)<<P:Predicate_uimm7>>:$val)
  // Emits: (ROTQBYIv8i16:v8i16 VECREG:v8i16:$rA, (imm:i16):$val)
  // Pattern complexity = 7  cost = 1  size = 0
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_uimm7(N1.getNode()) &&
      N1.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_1(N, SPU::ROTQBYIv8i16, MVT::v8i16);
    return Result;
  }

  // Pattern: (SPUrotbytes_left:v8i16 VECREG:v8i16:$rA, R32C:i32:$rB)
  // Emits: (ROTQBYv8i16:v8i16 VECREG:v8i16:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_0(N, SPU::ROTQBYv8i16, MVT::v8i16);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_ROTBYTES_LEFT_v4i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);

  // Pattern: (SPUrotbytes_left:v4i32 VECREG:v4i32:$rA, (imm:i16)<<P:Predicate_uimm7>>:$val)
  // Emits: (ROTQBYIv4i32:v4i32 VECREG:v4i32:$rA, (imm:i16):$val)
  // Pattern complexity = 7  cost = 1  size = 0
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_uimm7(N1.getNode()) &&
      N1.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_1(N, SPU::ROTQBYIv4i32, MVT::v4i32);
    return Result;
  }

  // Pattern: (SPUrotbytes_left:v4i32 VECREG:v4i32:$rA, R32C:i32:$rB)
  // Emits: (ROTQBYv4i32:v4i32 VECREG:v4i32:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_0(N, SPU::ROTQBYv4i32, MVT::v4i32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_ROTBYTES_LEFT_v2i64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);

  // Pattern: (SPUrotbytes_left:v2i64 VECREG:v2i64:$rA, (imm:i16)<<P:Predicate_uimm7>>:$val)
  // Emits: (ROTQBYIv2i64:v2i64 VECREG:v2i64:$rA, (imm:i16):$val)
  // Pattern complexity = 7  cost = 1  size = 0
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_uimm7(N1.getNode()) &&
      N1.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_1(N, SPU::ROTQBYIv2i64, MVT::v2i64);
    return Result;
  }

  // Pattern: (SPUrotbytes_left:v2i64 VECREG:v2i64:$rA, R32C:i32:$rB)
  // Emits: (ROTQBYv2i64:v2i64 VECREG:v2i64:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_0(N, SPU::ROTQBYv2i64, MVT::v2i64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_ROTBYTES_LEFT_v4f32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);

  // Pattern: (SPUrotbytes_left:v4f32 VECREG:v4f32:$rA, (imm:i16)<<P:Predicate_uimm7>>:$val)
  // Emits: (ROTQBYIv4f32:v4f32 VECREG:v4f32:$rA, (imm:i16):$val)
  // Pattern complexity = 7  cost = 1  size = 0
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_uimm7(N1.getNode()) &&
      N1.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_1(N, SPU::ROTQBYIv4f32, MVT::v4f32);
    return Result;
  }

  // Pattern: (SPUrotbytes_left:v4f32 VECREG:v4f32:$rA, R32C:i32:$rB)
  // Emits: (ROTQBYv4f32:v4f32 VECREG:v4f32:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_0(N, SPU::ROTQBYv4f32, MVT::v4f32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_ROTBYTES_LEFT_v2f64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);

  // Pattern: (SPUrotbytes_left:v2f64 VECREG:v2f64:$rA, (imm:i16)<<P:Predicate_uimm7>>:$val)
  // Emits: (ROTQBYIvfi64:v2f64 VECREG:v2f64:$rA, (imm:i16):$val)
  // Pattern complexity = 7  cost = 1  size = 0
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_uimm7(N1.getNode()) &&
      N1.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_1(N, SPU::ROTQBYIvfi64, MVT::v2f64);
    return Result;
  }

  // Pattern: (SPUrotbytes_left:v2f64 VECREG:v2f64:$rA, R32C:i32:$rB)
  // Emits: (ROTQBYv2f64:v2f64 VECREG:v2f64:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_0(N, SPU::ROTQBYv2f64, MVT::v2f64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_ROTBYTES_LEFT_BITS_v16i8(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_0(N, SPU::ROTQBYBIv16i8_r32, MVT::v16i8);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_ROTBYTES_LEFT_BITS_v8i16(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_0(N, SPU::ROTQBYBIv8i16_r32, MVT::v8i16);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_ROTBYTES_LEFT_BITS_v4i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_0(N, SPU::ROTQBYBIv4i32_r32, MVT::v4i32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_ROTBYTES_LEFT_BITS_v2i64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_0(N, SPU::ROTQBYBIv2i64_r32, MVT::v2i64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_207(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, N0, N1, N2);
}
SDNode *Select_SPUISD_SELB_i8(const SDValue &N) {
  SDNode *Result = Emit_207(N, SPU::SELBr8, MVT::i8);
  return Result;
}

SDNode *Select_SPUISD_SELB_i16(const SDValue &N) {
  SDNode *Result = Emit_207(N, SPU::SELBr16, MVT::i16);
  return Result;
}

SDNode *Select_SPUISD_SELB_i32(const SDValue &N) {
  SDNode *Result = Emit_207(N, SPU::SELBr32, MVT::i32);
  return Result;
}

SDNode *Select_SPUISD_SELB_i64(const SDValue &N) {
  SDNode *Result = Emit_207(N, SPU::SELBr64, MVT::i64);
  return Result;
}

SDNode *Select_SPUISD_SELB_v16i8(const SDValue &N) {
  SDNode *Result = Emit_207(N, SPU::SELBv16i8, MVT::v16i8);
  return Result;
}

SDNode *Select_SPUISD_SELB_v8i16(const SDValue &N) {
  SDNode *Result = Emit_207(N, SPU::SELBv8i16, MVT::v8i16);
  return Result;
}

SDNode *Select_SPUISD_SELB_v4i32(const SDValue &N) {
  SDNode *Result = Emit_207(N, SPU::SELBv4i32, MVT::v4i32);
  return Result;
}

SDNode *Select_SPUISD_SELB_v2i64(const SDValue &N) {
  SDNode *Result = Emit_207(N, SPU::SELBv2i64, MVT::v2i64);
  return Result;
}

SDNode *Emit_208(const SDValue &N, unsigned Opc0, MVT VT0) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  SDValue Tmp0 = CurDAG->getTargetConstant(((unsigned short) cast<ConstantSDNode>(N0)->getZExtValue()), MVT::i16);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, Tmp0);
}
SDNode *Select_SPUISD_SELECT_MASK_v16i8(const SDValue &N) {
  SDValue N0 = N.getOperand(0);

  // Pattern: (SPUselmask:v16i8 (imm:i16)<<P:Predicate_immU16>>:$val)
  // Emits: (FSMBIv16i8:v16i8 (imm:i16):$val)
  // Pattern complexity = 7  cost = 1  size = 0
  if (N0.getOpcode() == ISD::Constant &&
      Predicate_immU16(N0.getNode()) &&
      N0.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_208(N, SPU::FSMBIv16i8, MVT::v16i8);
    return Result;
  }

  // Pattern: (SPUselmask:v16i8 R16C:i16:$rA)
  // Emits: (FSMBv16i8_r16:v16i8 R16C:i16:$rA)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_31(N, SPU::FSMBv16i8_r16, MVT::v16i8);
    return Result;
  }

  // Pattern: (SPUselmask:v16i8 VECREG:v16i8:$rA)
  // Emits: (FSMBv16i8:v16i8 VECREG:v16i8:$rA)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v16i8) {
    SDNode *Result = Emit_31(N, SPU::FSMBv16i8, MVT::v16i8);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_SELECT_MASK_v8i16(const SDValue &N) {
  SDValue N0 = N.getOperand(0);

  // Pattern: (SPUselmask:v8i16 (imm:i16)<<P:Predicate_immU16>>:$val)
  // Emits: (FSMBIv8i16:v8i16 (imm:i16):$val)
  // Pattern complexity = 7  cost = 1  size = 0
  if (N0.getOpcode() == ISD::Constant &&
      Predicate_immU16(N0.getNode()) &&
      N0.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_208(N, SPU::FSMBIv8i16, MVT::v8i16);
    return Result;
  }

  // Pattern: (SPUselmask:v8i16 R16C:i16:$rA)
  // Emits: (FSMHv8i16_r16:v8i16 R16C:i16:$rA)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_31(N, SPU::FSMHv8i16_r16, MVT::v8i16);
    return Result;
  }

  // Pattern: (SPUselmask:v8i16 VECREG:v8i16:$rA)
  // Emits: (FSMHv8i16:v8i16 VECREG:v8i16:$rA)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v8i16) {
    SDNode *Result = Emit_31(N, SPU::FSMHv8i16, MVT::v8i16);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_SELECT_MASK_v4i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);

  // Pattern: (SPUselmask:v4i32 (imm:i16)<<P:Predicate_immU16>>:$val)
  // Emits: (FSMBIv4i32:v4i32 (imm:i16):$val)
  // Pattern complexity = 7  cost = 1  size = 0
  if (N0.getOpcode() == ISD::Constant &&
      Predicate_immU16(N0.getNode()) &&
      N0.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_208(N, SPU::FSMBIv4i32, MVT::v4i32);
    return Result;
  }

  // Pattern: (SPUselmask:v4i32 VECREG:v4i32:$rA)
  // Emits: (FSMv4i32:v4i32 VECREG:v4i32:$rA)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N0.getNode()->getValueType(0) == MVT::v4i32) {
    SDNode *Result = Emit_31(N, SPU::FSMv4i32, MVT::v4i32);
    return Result;
  }

  // Pattern: (SPUselmask:v4i32 R32C:i32:$rA)
  // Emits: (FSMr32:v4i32 R32C:i32:$rA)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_31(N, SPU::FSMr32, MVT::v4i32);
    return Result;
  }

  // Pattern: (SPUselmask:v4i32 R16C:i16:$rA)
  // Emits: (FSMr16:v4i32 R16C:i16:$rA)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_31(N, SPU::FSMr16, MVT::v4i32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_SELECT_MASK_v2i64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);

  // Pattern: (SPUselmask:v2i64 (imm:i16)<<P:Predicate_immU16>>:$val)
  // Emits: (FSMBIv2i64:v2i64 (imm:i16):$val)
  // Pattern complexity = 7  cost = 1  size = 0
  if (N0.getOpcode() == ISD::Constant &&
      Predicate_immU16(N0.getNode()) &&
      N0.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_208(N, SPU::FSMBIv2i64, MVT::v2i64);
    return Result;
  }

  // Pattern: (SPUselmask:v2i64 R32C:i32:$rA)
  // Emits: (FSM64r32:v2i64 R32C:i32:$rA)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_31(N, SPU::FSM64r32, MVT::v2i64);
    return Result;
  }

  // Pattern: (SPUselmask:v2i64 R16C:i16:$rA)
  // Emits: (FSM64r16:v2i64 R16C:i16:$rA)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N0.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_31(N, SPU::FSM64r16, MVT::v2i64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_SHLQUAD_L_BITS_v16i8(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);

  // Pattern: (SPUshlquad_l_bits:v16i8 VECREG:v16i8:$rA, (imm:i32)<<P:Predicate_bitshift>>:$val)
  // Emits: (SHLQBIIv16i8:v16i8 VECREG:v16i8:$rA, (imm:i32):$val)
  // Pattern complexity = 7  cost = 1  size = 0
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_bitshift(N1.getNode()) &&
      N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_2(N, SPU::SHLQBIIv16i8, MVT::v16i8);
    return Result;
  }

  // Pattern: (SPUshlquad_l_bits:v16i8 VECREG:v16i8:$rA, R32C:i32:$rB)
  // Emits: (SHLQBIv16i8:v16i8 VECREG:v16i8:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_0(N, SPU::SHLQBIv16i8, MVT::v16i8);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_SHLQUAD_L_BITS_v8i16(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);

  // Pattern: (SPUshlquad_l_bits:v8i16 VECREG:v8i16:$rA, (imm:i32)<<P:Predicate_bitshift>>:$val)
  // Emits: (SHLQBIIv8i16:v8i16 VECREG:v8i16:$rA, (imm:i32):$val)
  // Pattern complexity = 7  cost = 1  size = 0
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_bitshift(N1.getNode()) &&
      N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_2(N, SPU::SHLQBIIv8i16, MVT::v8i16);
    return Result;
  }

  // Pattern: (SPUshlquad_l_bits:v8i16 VECREG:v8i16:$rA, R32C:i32:$rB)
  // Emits: (SHLQBIv8i16:v8i16 VECREG:v8i16:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_0(N, SPU::SHLQBIv8i16, MVT::v8i16);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_SHLQUAD_L_BITS_v4i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);

  // Pattern: (SPUshlquad_l_bits:v4i32 VECREG:v4i32:$rA, (imm:i32)<<P:Predicate_bitshift>>:$val)
  // Emits: (SHLQBIIv4i32:v4i32 VECREG:v4i32:$rA, (imm:i32):$val)
  // Pattern complexity = 7  cost = 1  size = 0
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_bitshift(N1.getNode()) &&
      N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_2(N, SPU::SHLQBIIv4i32, MVT::v4i32);
    return Result;
  }

  // Pattern: (SPUshlquad_l_bits:v4i32 VECREG:v4i32:$rA, R32C:i32:$rB)
  // Emits: (SHLQBIv4i32:v4i32 VECREG:v4i32:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_0(N, SPU::SHLQBIv4i32, MVT::v4i32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_SHLQUAD_L_BITS_v2i64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);

  // Pattern: (SPUshlquad_l_bits:v2i64 VECREG:v2i64:$rA, (imm:i32)<<P:Predicate_bitshift>>:$val)
  // Emits: (SHLQBIIv2i64:v2i64 VECREG:v2i64:$rA, (imm:i32):$val)
  // Pattern complexity = 7  cost = 1  size = 0
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_bitshift(N1.getNode()) &&
      N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_2(N, SPU::SHLQBIIv2i64, MVT::v2i64);
    return Result;
  }

  // Pattern: (SPUshlquad_l_bits:v2i64 VECREG:v2i64:$rA, R32C:i32:$rB)
  // Emits: (SHLQBIv2i64:v2i64 VECREG:v2i64:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_0(N, SPU::SHLQBIv2i64, MVT::v2i64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_SHLQUAD_L_BITS_v4f32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);

  // Pattern: (SPUshlquad_l_bits:v4f32 VECREG:v4f32:$rA, (imm:i32)<<P:Predicate_bitshift>>:$val)
  // Emits: (SHLQBIIv4f32:v4f32 VECREG:v4f32:$rA, (imm:i32):$val)
  // Pattern complexity = 7  cost = 1  size = 0
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_bitshift(N1.getNode()) &&
      N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_2(N, SPU::SHLQBIIv4f32, MVT::v4f32);
    return Result;
  }

  // Pattern: (SPUshlquad_l_bits:v4f32 VECREG:v4f32:$rA, R32C:i32:$rB)
  // Emits: (SHLQBIv4f32:v4f32 VECREG:v4f32:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_0(N, SPU::SHLQBIv4f32, MVT::v4f32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_SHLQUAD_L_BITS_v2f64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);

  // Pattern: (SPUshlquad_l_bits:v2f64 VECREG:v2f64:$rA, (imm:i32)<<P:Predicate_bitshift>>:$val)
  // Emits: (SHLQBIIv2f64:v2f64 VECREG:v2f64:$rA, (imm:i32):$val)
  // Pattern complexity = 7  cost = 1  size = 0
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_bitshift(N1.getNode()) &&
      N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_2(N, SPU::SHLQBIIv2f64, MVT::v2f64);
    return Result;
  }

  // Pattern: (SPUshlquad_l_bits:v2f64 VECREG:v2f64:$rA, R32C:i32:$rB)
  // Emits: (SHLQBIv2f64:v2f64 VECREG:v2f64:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_0(N, SPU::SHLQBIv2f64, MVT::v2f64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_SHLQUAD_L_BYTES_i128(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);

  // Pattern: (SPUshlquad_l_bytes:i128 GPRC:i128:$rA, (imm:i32)<<P:Predicate_uimm7>>:$val)
  // Emits: (SHLQBYIr128:i128 GPRC:i128:$rA, (imm:i32):$val)
  // Pattern complexity = 7  cost = 1  size = 0
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_uimm7(N1.getNode()) &&
      N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_2(N, SPU::SHLQBYIr128, MVT::i128);
    return Result;
  }

  // Pattern: (SPUshlquad_l_bytes:i128 GPRC:i128:$rA, R32C:i32:$rB)
  // Emits: (SHLQBYr128:i128 GPRC:i128:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_0(N, SPU::SHLQBYr128, MVT::i128);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_SHLQUAD_L_BYTES_v16i8(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);

  // Pattern: (SPUshlquad_l_bytes:v16i8 VECREG:v16i8:$rA, (imm:i32)<<P:Predicate_uimm7>>:$val)
  // Emits: (SHLQBYIv16i8:v16i8 VECREG:v16i8:$rA, (imm:i32):$val)
  // Pattern complexity = 7  cost = 1  size = 0
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_uimm7(N1.getNode()) &&
      N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_2(N, SPU::SHLQBYIv16i8, MVT::v16i8);
    return Result;
  }

  // Pattern: (SPUshlquad_l_bytes:v16i8 VECREG:v16i8:$rA, R32C:i32:$rB)
  // Emits: (SHLQBYv16i8:v16i8 VECREG:v16i8:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_0(N, SPU::SHLQBYv16i8, MVT::v16i8);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_SHLQUAD_L_BYTES_v8i16(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);

  // Pattern: (SPUshlquad_l_bytes:v8i16 VECREG:v8i16:$rA, (imm:i32)<<P:Predicate_uimm7>>:$val)
  // Emits: (SHLQBYIv8i16:v8i16 VECREG:v8i16:$rA, (imm:i32):$val)
  // Pattern complexity = 7  cost = 1  size = 0
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_uimm7(N1.getNode()) &&
      N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_2(N, SPU::SHLQBYIv8i16, MVT::v8i16);
    return Result;
  }

  // Pattern: (SPUshlquad_l_bytes:v8i16 VECREG:v8i16:$rA, R32C:i32:$rB)
  // Emits: (SHLQBYv8i16:v8i16 VECREG:v8i16:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_0(N, SPU::SHLQBYv8i16, MVT::v8i16);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_SHLQUAD_L_BYTES_v4i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);

  // Pattern: (SPUshlquad_l_bytes:v4i32 VECREG:v4i32:$rA, (imm:i32)<<P:Predicate_uimm7>>:$val)
  // Emits: (SHLQBYIv4i32:v4i32 VECREG:v4i32:$rA, (imm:i32):$val)
  // Pattern complexity = 7  cost = 1  size = 0
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_uimm7(N1.getNode()) &&
      N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_2(N, SPU::SHLQBYIv4i32, MVT::v4i32);
    return Result;
  }

  // Pattern: (SPUshlquad_l_bytes:v4i32 VECREG:v4i32:$rA, R32C:i32:$rB)
  // Emits: (SHLQBYv4i32:v4i32 VECREG:v4i32:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_0(N, SPU::SHLQBYv4i32, MVT::v4i32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_SHLQUAD_L_BYTES_v2i64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);

  // Pattern: (SPUshlquad_l_bytes:v2i64 VECREG:v2i64:$rA, (imm:i32)<<P:Predicate_uimm7>>:$val)
  // Emits: (SHLQBYIv2i64:v2i64 VECREG:v2i64:$rA, (imm:i32):$val)
  // Pattern complexity = 7  cost = 1  size = 0
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_uimm7(N1.getNode()) &&
      N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_2(N, SPU::SHLQBYIv2i64, MVT::v2i64);
    return Result;
  }

  // Pattern: (SPUshlquad_l_bytes:v2i64 VECREG:v2i64:$rA, R32C:i32:$rB)
  // Emits: (SHLQBYv2i64:v2i64 VECREG:v2i64:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_0(N, SPU::SHLQBYv2i64, MVT::v2i64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_SHLQUAD_L_BYTES_v4f32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);

  // Pattern: (SPUshlquad_l_bytes:v4f32 VECREG:v4f32:$rA, (imm:i32)<<P:Predicate_uimm7>>:$val)
  // Emits: (SHLQBYIv4f32:v4f32 VECREG:v4f32:$rA, (imm:i32):$val)
  // Pattern complexity = 7  cost = 1  size = 0
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_uimm7(N1.getNode()) &&
      N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_2(N, SPU::SHLQBYIv4f32, MVT::v4f32);
    return Result;
  }

  // Pattern: (SPUshlquad_l_bytes:v4f32 VECREG:v4f32:$rA, R32C:i32:$rB)
  // Emits: (SHLQBYv4f32:v4f32 VECREG:v4f32:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_0(N, SPU::SHLQBYv4f32, MVT::v4f32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_SHLQUAD_L_BYTES_v2f64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);

  // Pattern: (SPUshlquad_l_bytes:v2f64 VECREG:v2f64:$rA, (imm:i32)<<P:Predicate_uimm7>>:$val)
  // Emits: (SHLQBYIv2f64:v2f64 VECREG:v2f64:$rA, (imm:i32):$val)
  // Pattern complexity = 7  cost = 1  size = 0
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_uimm7(N1.getNode()) &&
      N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_2(N, SPU::SHLQBYIv2f64, MVT::v2f64);
    return Result;
  }

  // Pattern: (SPUshlquad_l_bytes:v2f64 VECREG:v2f64:$rA, R32C:i32:$rB)
  // Emits: (SHLQBYv2f64:v2f64 VECREG:v2f64:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_0(N, SPU::SHLQBYv2f64, MVT::v2f64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_SHUFB_v16i8(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);

  // Pattern: (SPUshuffle:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB, VECREG:v16i8:$rC)
  // Emits: (SHUFBv16i8:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB, VECREG:v16i8:$rC)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N2.getNode()->getValueType(0) == MVT::v16i8) {
    SDNode *Result = Emit_207(N, SPU::SHUFBv16i8, MVT::v16i8);
    return Result;
  }

  // Pattern: (SPUshuffle:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB, VECREG:v4i32:$rC)
  // Emits: (SHUFBv16i8_m32:v16i8 VECREG:v16i8:$rA, VECREG:v16i8:$rB, VECREG:v4i32:$rC)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N2.getNode()->getValueType(0) == MVT::v4i32) {
    SDNode *Result = Emit_207(N, SPU::SHUFBv16i8_m32, MVT::v16i8);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_SHUFB_v8i16(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);

  // Pattern: (SPUshuffle:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB, VECREG:v16i8:$rC)
  // Emits: (SHUFBv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB, VECREG:v16i8:$rC)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N2.getNode()->getValueType(0) == MVT::v16i8) {
    SDNode *Result = Emit_207(N, SPU::SHUFBv8i16, MVT::v8i16);
    return Result;
  }

  // Pattern: (SPUshuffle:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB, VECREG:v4i32:$rC)
  // Emits: (SHUFBv8i16_m32:v8i16 VECREG:v8i16:$rA, VECREG:v8i16:$rB, VECREG:v4i32:$rC)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N2.getNode()->getValueType(0) == MVT::v4i32) {
    SDNode *Result = Emit_207(N, SPU::SHUFBv8i16_m32, MVT::v8i16);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_SHUFB_v4i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);

  // Pattern: (SPUshuffle:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB, VECREG:v16i8:$rC)
  // Emits: (SHUFBv4i32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB, VECREG:v16i8:$rC)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N2.getNode()->getValueType(0) == MVT::v16i8) {
    SDNode *Result = Emit_207(N, SPU::SHUFBv4i32, MVT::v4i32);
    return Result;
  }

  // Pattern: (SPUshuffle:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB, VECREG:v4i32:$rC)
  // Emits: (SHUFBv4i32_m32:v4i32 VECREG:v4i32:$rA, VECREG:v4i32:$rB, VECREG:v4i32:$rC)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N2.getNode()->getValueType(0) == MVT::v4i32) {
    SDNode *Result = Emit_207(N, SPU::SHUFBv4i32_m32, MVT::v4i32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_SHUFB_v2i64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);

  // Pattern: (SPUshuffle:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB, VECREG:v16i8:$rC)
  // Emits: (SHUFBv2i64:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB, VECREG:v16i8:$rC)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N2.getNode()->getValueType(0) == MVT::v16i8) {
    SDNode *Result = Emit_207(N, SPU::SHUFBv2i64, MVT::v2i64);
    return Result;
  }

  // Pattern: (SPUshuffle:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB, VECREG:v4i32:$rC)
  // Emits: (SHUFBv2i64_m32:v2i64 VECREG:v2i64:$rA, VECREG:v2i64:$rB, VECREG:v4i32:$rC)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N2.getNode()->getValueType(0) == MVT::v4i32) {
    SDNode *Result = Emit_207(N, SPU::SHUFBv2i64_m32, MVT::v2i64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_SHUFB_v4f32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);

  // Pattern: (SPUshuffle:v4f32 VECREG:v4f32:$rA, VECREG:v4f32:$rB, VECREG:v16i8:$rC)
  // Emits: (SHUFBv4f32:v4f32 VECREG:v4f32:$rA, VECREG:v4f32:$rB, VECREG:v16i8:$rC)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N2.getNode()->getValueType(0) == MVT::v16i8) {
    SDNode *Result = Emit_207(N, SPU::SHUFBv4f32, MVT::v4f32);
    return Result;
  }

  // Pattern: (SPUshuffle:v4f32 VECREG:v4f32:$rA, VECREG:v4f32:$rB, VECREG:v4i32:$rC)
  // Emits: (SHUFBv4f32_m32:v4f32 VECREG:v4f32:$rA, VECREG:v4f32:$rB, VECREG:v4i32:$rC)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N2.getNode()->getValueType(0) == MVT::v4i32) {
    SDNode *Result = Emit_207(N, SPU::SHUFBv4f32_m32, MVT::v4f32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_SHUFB_v2f64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);

  // Pattern: (SPUshuffle:v2f64 VECREG:v2f64:$rA, VECREG:v2f64:$rB, VECREG:v16i8:$rC)
  // Emits: (SHUFBv2f64:v2f64 VECREG:v2f64:$rA, VECREG:v2f64:$rB, VECREG:v16i8:$rC)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N2.getNode()->getValueType(0) == MVT::v16i8) {
    SDNode *Result = Emit_207(N, SPU::SHUFBv2f64, MVT::v2f64);
    return Result;
  }

  // Pattern: (SPUshuffle:v2f64 VECREG:v2f64:$rA, VECREG:v2f64:$rB, VECREG:v4i32:$rC)
  // Emits: (SHUFBv2f64_m32:v2f64 VECREG:v2f64:$rA, VECREG:v2f64:$rB, VECREG:v4i32:$rC)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N2.getNode()->getValueType(0) == MVT::v4i32) {
    SDNode *Result = Emit_207(N, SPU::SHUFBv2f64_m32, MVT::v2f64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Emit_209(const SDValue &N, unsigned Opc0, MVT VT0, SDValue &CPTmpN0_0, SDValue &CPTmpN0_1) DISABLE_INLINE {
  SDValue N0 = N.getOperand(0);
  return CurDAG->SelectNodeTo(N.getNode(), Opc0, VT0, CPTmpN0_0, CPTmpN0_1);
}
SDNode *Select_SPUISD_SHUFFLE_MASK_v16i8(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue CPTmpN0_0;
  SDValue CPTmpN0_1;

  // Pattern: (SPUshufmask:v16i8 dform2_addr:iPTR:$src)
  // Emits: (CBD:v16i8 dform2_addr:iPTR:$src)
  // Pattern complexity = 12  cost = 1  size = 0
  if (SelectDForm2Addr(N, N0, CPTmpN0_0, CPTmpN0_1) &&
      N0.getNode()->getValueType(0) == TLI.getPointerTy()) {
    SDNode *Result = Emit_209(N, SPU::CBD, MVT::v16i8, CPTmpN0_0, CPTmpN0_1);
    return Result;
  }

  // Pattern: (SPUshufmask:v16i8 xform_addr:iPTR:$src)
  // Emits: (CBX:v16i8 xform_addr:iPTR:$src)
  // Pattern complexity = 12  cost = 1  size = 0
  if (SelectXFormAddr(N, N0, CPTmpN0_0, CPTmpN0_1) &&
      N0.getNode()->getValueType(0) == TLI.getPointerTy()) {
    SDNode *Result = Emit_209(N, SPU::CBX, MVT::v16i8, CPTmpN0_0, CPTmpN0_1);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_SHUFFLE_MASK_v8i16(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue CPTmpN0_0;
  SDValue CPTmpN0_1;

  // Pattern: (SPUshufmask:v8i16 dform2_addr:iPTR:$src)
  // Emits: (CHD:v8i16 dform2_addr:iPTR:$src)
  // Pattern complexity = 12  cost = 1  size = 0
  if (SelectDForm2Addr(N, N0, CPTmpN0_0, CPTmpN0_1) &&
      N0.getNode()->getValueType(0) == TLI.getPointerTy()) {
    SDNode *Result = Emit_209(N, SPU::CHD, MVT::v8i16, CPTmpN0_0, CPTmpN0_1);
    return Result;
  }

  // Pattern: (SPUshufmask:v8i16 xform_addr:iPTR:$src)
  // Emits: (CHX:v8i16 xform_addr:iPTR:$src)
  // Pattern complexity = 12  cost = 1  size = 0
  if (SelectXFormAddr(N, N0, CPTmpN0_0, CPTmpN0_1) &&
      N0.getNode()->getValueType(0) == TLI.getPointerTy()) {
    SDNode *Result = Emit_209(N, SPU::CHX, MVT::v8i16, CPTmpN0_0, CPTmpN0_1);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_SHUFFLE_MASK_v4i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue CPTmpN0_0;
  SDValue CPTmpN0_1;

  // Pattern: (SPUshufmask:v4i32 dform2_addr:iPTR:$src)
  // Emits: (CWD:v4i32 dform2_addr:iPTR:$src)
  // Pattern complexity = 12  cost = 1  size = 0
  if (SelectDForm2Addr(N, N0, CPTmpN0_0, CPTmpN0_1) &&
      N0.getNode()->getValueType(0) == TLI.getPointerTy()) {
    SDNode *Result = Emit_209(N, SPU::CWD, MVT::v4i32, CPTmpN0_0, CPTmpN0_1);
    return Result;
  }

  // Pattern: (SPUshufmask:v4i32 xform_addr:iPTR:$src)
  // Emits: (CWX:v4i32 xform_addr:iPTR:$src)
  // Pattern complexity = 12  cost = 1  size = 0
  if (SelectXFormAddr(N, N0, CPTmpN0_0, CPTmpN0_1) &&
      N0.getNode()->getValueType(0) == TLI.getPointerTy()) {
    SDNode *Result = Emit_209(N, SPU::CWX, MVT::v4i32, CPTmpN0_0, CPTmpN0_1);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_SHUFFLE_MASK_v2i64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue CPTmpN0_0;
  SDValue CPTmpN0_1;

  // Pattern: (SPUshufmask:v2i64 dform2_addr:iPTR:$src)
  // Emits: (CDD:v2i64 dform2_addr:iPTR:$src)
  // Pattern complexity = 12  cost = 1  size = 0
  if (SelectDForm2Addr(N, N0, CPTmpN0_0, CPTmpN0_1) &&
      N0.getNode()->getValueType(0) == TLI.getPointerTy()) {
    SDNode *Result = Emit_209(N, SPU::CDD, MVT::v2i64, CPTmpN0_0, CPTmpN0_1);
    return Result;
  }

  // Pattern: (SPUshufmask:v2i64 xform_addr:iPTR:$src)
  // Emits: (CDX:v2i64 xform_addr:iPTR:$src)
  // Pattern complexity = 12  cost = 1  size = 0
  if (SelectXFormAddr(N, N0, CPTmpN0_0, CPTmpN0_1) &&
      N0.getNode()->getValueType(0) == TLI.getPointerTy()) {
    SDNode *Result = Emit_209(N, SPU::CDX, MVT::v2i64, CPTmpN0_0, CPTmpN0_1);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_SHUFFLE_MASK_v4f32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue CPTmpN0_0;
  SDValue CPTmpN0_1;

  // Pattern: (SPUshufmask:v4f32 dform2_addr:iPTR:$src)
  // Emits: (CWDf32:v4f32 dform2_addr:iPTR:$src)
  // Pattern complexity = 12  cost = 1  size = 0
  if (SelectDForm2Addr(N, N0, CPTmpN0_0, CPTmpN0_1) &&
      N0.getNode()->getValueType(0) == TLI.getPointerTy()) {
    SDNode *Result = Emit_209(N, SPU::CWDf32, MVT::v4f32, CPTmpN0_0, CPTmpN0_1);
    return Result;
  }

  // Pattern: (SPUshufmask:v4f32 xform_addr:iPTR:$src)
  // Emits: (CWXf32:v4f32 xform_addr:iPTR:$src)
  // Pattern complexity = 12  cost = 1  size = 0
  if (SelectXFormAddr(N, N0, CPTmpN0_0, CPTmpN0_1) &&
      N0.getNode()->getValueType(0) == TLI.getPointerTy()) {
    SDNode *Result = Emit_209(N, SPU::CWXf32, MVT::v4f32, CPTmpN0_0, CPTmpN0_1);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_SHUFFLE_MASK_v2f64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue CPTmpN0_0;
  SDValue CPTmpN0_1;

  // Pattern: (SPUshufmask:v2f64 dform2_addr:iPTR:$src)
  // Emits: (CDDf64:v2f64 dform2_addr:iPTR:$src)
  // Pattern complexity = 12  cost = 1  size = 0
  if (SelectDForm2Addr(N, N0, CPTmpN0_0, CPTmpN0_1) &&
      N0.getNode()->getValueType(0) == TLI.getPointerTy()) {
    SDNode *Result = Emit_209(N, SPU::CDDf64, MVT::v2f64, CPTmpN0_0, CPTmpN0_1);
    return Result;
  }

  // Pattern: (SPUshufmask:v2f64 xform_addr:iPTR:$src)
  // Emits: (CDXf64:v2f64 xform_addr:iPTR:$src)
  // Pattern complexity = 12  cost = 1  size = 0
  if (SelectXFormAddr(N, N0, CPTmpN0_0, CPTmpN0_1) &&
      N0.getNode()->getValueType(0) == TLI.getPointerTy()) {
    SDNode *Result = Emit_209(N, SPU::CDXf64, MVT::v2f64, CPTmpN0_0, CPTmpN0_1);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_SUB64_MARKER_i64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  if (N2.getNode()->getValueType(0) == MVT::v4i32) {
    SDNode *Result = Emit_200(N, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::BGv4i32, SPU::ORv2i64_i64, SPU::ORv2i64_i64, SPU::BGv4i32, SPU::SHUFBv4i32, SPU::SFXv4i32, SPU::ORi64_v2i64, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::i64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_SUB64_MARKER_v2i64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  if (N2.getNode()->getValueType(0) == MVT::v4i32) {
    SDNode *Result = Emit_201(N, SPU::BGv4i32, SPU::BGv4i32, SPU::SHUFBv4i32, SPU::SFXv4i32, MVT::v16i8, MVT::v16i8, MVT::v16i8, MVT::v2i64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_VEC2PREFSLOT_i8(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::v16i8) {
    SDNode *Result = Emit_31(N, SPU::ORi8_v16i8, MVT::i8);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_VEC2PREFSLOT_i16(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::v8i16) {
    SDNode *Result = Emit_31(N, SPU::ORi16_v8i16, MVT::i16);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_VEC2PREFSLOT_i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::v4i32) {
    SDNode *Result = Emit_31(N, SPU::ORi32_v4i32, MVT::i32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_VEC2PREFSLOT_i64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::v2i64) {
    SDNode *Result = Emit_31(N, SPU::ORi64_v2i64, MVT::i64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_VEC2PREFSLOT_f32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::v4f32) {
    SDNode *Result = Emit_31(N, SPU::ORf32_v4f32, MVT::f32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_VEC2PREFSLOT_f64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  if (N0.getNode()->getValueType(0) == MVT::v2f64) {
    SDNode *Result = Emit_31(N, SPU::ORf64_v2f64, MVT::f64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_VEC_ROTL_v16i8(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_uimm7(N1.getNode()) &&
      N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_1(N, SPU::ROTHIv8i16, MVT::v16i8);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_VEC_ROTL_v8i16(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);

  // Pattern: (SPUvec_rotl:v8i16 VECREG:v8i16:$rA, (imm:i16)<<P:Predicate_uimm7>>:$val)
  // Emits: (ROTHIv8i16:v8i16 VECREG:v8i16:$rA, (imm:i16):$val)
  // Pattern complexity = 7  cost = 1  size = 0
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_uimm7(N1.getNode()) &&
      N1.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_1(N, SPU::ROTHIv8i16, MVT::v8i16);
    return Result;
  }

  // Pattern: (SPUvec_rotl:v8i16 VECREG:v8i16:$rA, VECREG:v16i8:$rB)
  // Emits: (ROTHv8i16:v8i16 VECREG:v8i16:$rA, VECREG:v16i8:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N1.getNode()->getValueType(0) == MVT::v16i8) {
    SDNode *Result = Emit_0(N, SPU::ROTHv8i16, MVT::v8i16);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_VEC_ROTL_v4i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_uimm7(N1.getNode())) {

    // Pattern: (SPUvec_rotl:v4i32 VECREG:v4i32:$rA, (imm:i32)<<P:Predicate_uimm7>>:$val)
    // Emits: (ROTIv4i32:v4i32 VECREG:v4i32:$rA, (imm:i32):$val)
    // Pattern complexity = 7  cost = 1  size = 0
    if (N1.getNode()->getValueType(0) == MVT::i32) {
      SDNode *Result = Emit_2(N, SPU::ROTIv4i32, MVT::v4i32);
      return Result;
    }

    // Pattern: (SPUvec_rotl:v4i32 VECREG:v4i32:$rA, (imm:i16)<<P:Predicate_uimm7>>:$val)
    // Emits: (ROTIv4i32_i16:v4i32 VECREG:v4i32:$rA, (imm:i16):$val)
    // Pattern complexity = 7  cost = 1  size = 0
    if (N1.getNode()->getValueType(0) == MVT::i16) {
      SDNode *Result = Emit_1(N, SPU::ROTIv4i32_i16, MVT::v4i32);
      return Result;
    }

    // Pattern: (SPUvec_rotl:v4i32 VECREG:v4i32:$rA, (imm:i8)<<P:Predicate_uimm7>>:$val)
    // Emits: (ROTIv4i32_i8:v4i32 VECREG:v4i32:$rA, (imm:i8):$val)
    // Pattern complexity = 7  cost = 1  size = 0
    if (N1.getNode()->getValueType(0) == MVT::i8) {
      SDNode *Result = Emit_15(N, SPU::ROTIv4i32_i8, MVT::v4i32);
      return Result;
    }
  }

  // Pattern: (SPUvec_rotl:v4i32 VECREG:v4i32:$rA, R32C:i32:$rB)
  // Emits: (ROTv4i32:v4i32 VECREG:v4i32:$rA, R32C:i32:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_0(N, SPU::ROTv4i32, MVT::v4i32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_VEC_SHL_v8i16(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_uimm7(N1.getNode())) {

    // Pattern: (SPUvec_shl:v8i16 VECREG:v8i16:$rA, (imm:i16)<<P:Predicate_uimm7>>:$val)
    // Emits: (SHLHIv8i16:v8i16 VECREG:v8i16:$rA, (imm:i16):$val)
    // Pattern complexity = 7  cost = 1  size = 0
    if (N1.getNode()->getValueType(0) == MVT::i16) {
      SDNode *Result = Emit_1(N, SPU::SHLHIv8i16, MVT::v8i16);
      return Result;
    }

    // Pattern: (SPUvec_shl:v8i16 VECREG:v8i16:$rA, (imm:i32)<<P:Predicate_uimm7>>:$val)
    // Emits: (SHLHIv8i16:v8i16 VECREG:v16i8:$rA, (imm:i16)<<P:Predicate_uimm7>>:$val)
    // Pattern complexity = 7  cost = 1  size = 0
    if (N1.getNode()->getValueType(0) == MVT::i32) {
      SDNode *Result = Emit_1(N, SPU::SHLHIv8i16, MVT::v8i16);
      return Result;
    }
  }

  // Pattern: (SPUvec_shl:v8i16 VECREG:v8i16:$rA, R16C:i16:$rB)
  // Emits: (SHLHv8i16:v8i16 VECREG:v8i16:$rA, R16C:i16:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_0(N, SPU::SHLHv8i16, MVT::v8i16);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_VEC_SHL_v4i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);

  // Pattern: (SPUvec_shl:v4i32 VECREG:v4i32:$rA, (imm:i32)<<P:Predicate_uimm7>>:$val)
  // Emits: (SHLIv4i32:v4i32 VECREG:v4i32:$rA, (imm:i32):$val)
  // Pattern complexity = 7  cost = 1  size = 0
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_uimm7(N1.getNode()) &&
      N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_2(N, SPU::SHLIv4i32, MVT::v4i32);
    return Result;
  }

  // Pattern: (SPUvec_shl:v4i32 VECREG:v4i32:$rA, R16C:i16:$rB)
  // Emits: (SHLv4i32:v4i32 VECREG:v4i32:$rA, R16C:i16:$rB)
  // Pattern complexity = 3  cost = 1  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_0(N, SPU::SHLv4i32, MVT::v4i32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_VEC_SRA_v16i8(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getNode()->getValueType(0) == MVT::i32) {

    // Pattern: (SPUvec_sra:v16i8 VECREG:v16i8:$rA, R32C:i32:$rB)
    // Emits: (ROTMAHv8i16:v16i8 VECREG:v16i8:$rA, (SFIr32:i32 R32C:i32:$rB, 0:i32))
    // Pattern complexity = 3  cost = 2  size = 0
    {
      SDNode *Result = Emit_173(N, SPU::SFIr32, SPU::ROTMAHv8i16, MVT::i32, MVT::v16i8);
      return Result;
    }

    // Pattern: (SPUvec_sra:v16i8 VECREG:v16i8:$rA, R32C:i32:$rB)
    // Emits: (ROTMAv4i32:v16i8 VECREG:v4i32:$rA, (SFIr32:i32 R32C:i32:$rB, 0:i32))
    // Pattern complexity = 3  cost = 2  size = 0
    SDNode *Result = Emit_173(N, SPU::SFIr32, SPU::ROTMAv4i32, MVT::i32, MVT::v16i8);
    return Result;
  }
  if (N1.getNode()->getValueType(0) == MVT::i16) {

    // Pattern: (SPUvec_sra:v16i8 VECREG:v16i8:$rA, R16C:i16:$rB)
    // Emits: (ROTMAHv8i16:v16i8 VECREG:v16i8:$rA, (SFIr32:i32 (XSHWr16:i32 R16C:i16:$rB), 0:i32))
    // Pattern complexity = 3  cost = 3  size = 0
    {
      SDNode *Result = Emit_174(N, SPU::XSHWr16, SPU::SFIr32, SPU::ROTMAHv8i16, MVT::i32, MVT::i32, MVT::v16i8);
      return Result;
    }

    // Pattern: (SPUvec_sra:v16i8 VECREG:v16i8:$rA, R16C:i16:$rB)
    // Emits: (ROTMAv4i32:v16i8 VECREG:v4i32:$rA, (SFIr32:i32 (XSHWr16:i32 R16C:i16:$rB), 0:i32))
    // Pattern complexity = 3  cost = 3  size = 0
    SDNode *Result = Emit_174(N, SPU::XSHWr16, SPU::SFIr32, SPU::ROTMAv4i32, MVT::i32, MVT::i32, MVT::v16i8);
    return Result;
  }
  if (N1.getNode()->getValueType(0) == MVT::i8) {

    // Pattern: (SPUvec_sra:v16i8 VECREG:v16i8:$rA, R8C:i8:$rB)
    // Emits: (ROTMAHv8i16:v16i8 VECREG:v16i8:$rA, (SFIr32:i32 (XSHWr16:i32 (XSBHr8:i16 R8C:i8:$rB)), 0:i32))
    // Pattern complexity = 3  cost = 4  size = 0
    {
      SDNode *Result = Emit_175(N, SPU::XSBHr8, SPU::XSHWr16, SPU::SFIr32, SPU::ROTMAHv8i16, MVT::i16, MVT::i32, MVT::i32, MVT::v16i8);
      return Result;
    }

    // Pattern: (SPUvec_sra:v16i8 VECREG:v16i8:$rA, R8C:i8:$rB)
    // Emits: (ROTMAv4i32:v16i8 VECREG:v4i32:$rA, (SFIr32:i32 (XSHWr16:i32 (XSBHr8:i16 R8C:i8:$rB)), 0:i32))
    // Pattern complexity = 3  cost = 4  size = 0
    SDNode *Result = Emit_175(N, SPU::XSBHr8, SPU::XSHWr16, SPU::SFIr32, SPU::ROTMAv4i32, MVT::i16, MVT::i32, MVT::i32, MVT::v16i8);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_VEC_SRA_v8i16(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_uimm7(N1.getNode())) {

    // Pattern: (SPUvec_sra:v8i16 VECREG:v8i16:$rA, (imm:i32)<<P:Predicate_uimm7>>:$val)
    // Emits: (ROTMAHIv8i16:v8i16 VECREG:v8i16:$rA, (imm:i32):$val)
    // Pattern complexity = 7  cost = 1  size = 0
    if (N1.getNode()->getValueType(0) == MVT::i32) {
      SDNode *Result = Emit_2(N, SPU::ROTMAHIv8i16, MVT::v8i16);
      return Result;
    }

    // Pattern: (SPUvec_sra:v8i16 VECREG:v8i16:$rA, (imm:i16)<<P:Predicate_uimm7>>:$val)
    // Emits: (ROTMAHIv8i16:v8i16 VECREG:v8i16:$rA, (imm:i32)<<P:Predicate_uimm7>>:$val)
    // Pattern complexity = 7  cost = 1  size = 0
    if (N1.getNode()->getValueType(0) == MVT::i16) {
      SDNode *Result = Emit_2(N, SPU::ROTMAHIv8i16, MVT::v8i16);
      return Result;
    }

    // Pattern: (SPUvec_sra:v8i16 VECREG:v8i16:$rA, (imm:i8)<<P:Predicate_uimm7>>:$val)
    // Emits: (ROTMAHIv8i16:v8i16 VECREG:v8i16:$rA, (imm:i32)<<P:Predicate_uimm7>>:$val)
    // Pattern complexity = 7  cost = 1  size = 0
    if (N1.getNode()->getValueType(0) == MVT::i8) {
      SDNode *Result = Emit_2(N, SPU::ROTMAHIv8i16, MVT::v8i16);
      return Result;
    }
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_VEC_SRA_v4i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_uimm7(N1.getNode()) &&
      N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_2(N, SPU::ROTMAIv4i32_i32, MVT::v4i32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_VEC_SRA_v2i64(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_uimm7(N1.getNode()) &&
      N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_2(N, SPU::ROTMAIv2i64_i32, MVT::v2i64);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_VEC_SRL_v16i8(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_uimm7(N1.getNode())) {

    // Pattern: (SPUvec_srl:v16i8 VECREG:v16i8:$rA, (imm:i16)<<P:Predicate_uimm7>>:$val)
    // Emits: (ROTMIv4i32:v16i8 VECREG:v16i8:$rA, (imm:i32)<<P:Predicate_uimm7>>:$val)
    // Pattern complexity = 7  cost = 1  size = 0
    if (N1.getNode()->getValueType(0) == MVT::i16) {
      SDNode *Result = Emit_2(N, SPU::ROTMIv4i32, MVT::v16i8);
      return Result;
    }

    // Pattern: (SPUvec_srl:v16i8 VECREG:v16i8:$rA, (imm:i8)<<P:Predicate_uimm7>>:$val)
    // Emits: (ROTMIv4i32:v16i8 VECREG:v16i8:$rA, (imm:i32)<<P:Predicate_uimm7>>:$val)
    // Pattern complexity = 7  cost = 1  size = 0
    if (N1.getNode()->getValueType(0) == MVT::i8) {
      SDNode *Result = Emit_2(N, SPU::ROTMIv4i32, MVT::v16i8);
      return Result;
    }
  }

  // Pattern: (SPUvec_srl:v16i8 VECREG:v16i8:$rA, R32C:i32:$rB)
  // Emits: (ROTMv4i32:v16i8 VECREG:v16i8:$rA, (SFIr32:i32 R32C:i32:$rB, 0:i32))
  // Pattern complexity = 3  cost = 2  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_173(N, SPU::SFIr32, SPU::ROTMv4i32, MVT::i32, MVT::v16i8);
    return Result;
  }

  // Pattern: (SPUvec_srl:v16i8 VECREG:v16i8:$rA, R16C:i16:$rB)
  // Emits: (ROTMv4i32:v16i8 VECREG:v16i8:$rA, (SFIr32:i32 (XSHWr16:i32 R16C:i16:$rB), 0:i32))
  // Pattern complexity = 3  cost = 3  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_174(N, SPU::XSHWr16, SPU::SFIr32, SPU::ROTMv4i32, MVT::i32, MVT::i32, MVT::v16i8);
    return Result;
  }

  // Pattern: (SPUvec_srl:v16i8 VECREG:v16i8:$rA, R8C:i8:$rB)
  // Emits: (ROTMv4i32:v16i8 VECREG:v16i8:$rA, (SFIr32:i32 (XSHWr16:i32 (XSBHr8:i16 R8C:i8:$rB)), 0:i32))
  // Pattern complexity = 3  cost = 4  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i8) {
    SDNode *Result = Emit_175(N, SPU::XSBHr8, SPU::XSHWr16, SPU::SFIr32, SPU::ROTMv4i32, MVT::i16, MVT::i32, MVT::i32, MVT::v16i8);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_VEC_SRL_v8i16(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getOpcode() == ISD::Constant) {

    // Pattern: (SPUvec_srl:v8i16 VECREG:v8i16:$rA, (imm:i32):$val)
    // Emits: (ROTHMIv8i16:v8i16 VECREG:v16i8:$rA, (imm:i32):$val)
    // Pattern complexity = 6  cost = 1  size = 0
    if (N1.getNode()->getValueType(0) == MVT::i32) {
      SDNode *Result = Emit_2(N, SPU::ROTHMIv8i16, MVT::v8i16);
      return Result;
    }

    // Pattern: (SPUvec_srl:v8i16 VECREG:v8i16:$rA, (imm:i16):$val)
    // Emits: (ROTHMIv8i16:v8i16 VECREG:v16i8:$rA, (imm:i32):$val)
    // Pattern complexity = 6  cost = 1  size = 0
    if (N1.getNode()->getValueType(0) == MVT::i16) {
      SDNode *Result = Emit_2(N, SPU::ROTHMIv8i16, MVT::v8i16);
      return Result;
    }

    // Pattern: (SPUvec_srl:v8i16 VECREG:v8i16:$rA, (imm:i8):$val)
    // Emits: (ROTHMIv8i16:v8i16 VECREG:v16i8:$rA, (imm:i32):$val)
    // Pattern complexity = 6  cost = 1  size = 0
    if (N1.getNode()->getValueType(0) == MVT::i8) {
      SDNode *Result = Emit_2(N, SPU::ROTHMIv8i16, MVT::v8i16);
      return Result;
    }
  }

  // Pattern: (SPUvec_srl:v8i16 VECREG:v8i16:$rA, R32C:i32:$rB)
  // Emits: (ROTHMv8i16:v8i16 VECREG:v16i8:$rA, (SFIr32:i32 R32C:i32:$rB, 0:i32))
  // Pattern complexity = 3  cost = 2  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_173(N, SPU::SFIr32, SPU::ROTHMv8i16, MVT::i32, MVT::v8i16);
    return Result;
  }

  // Pattern: (SPUvec_srl:v8i16 VECREG:v8i16:$rA, R16C:i16:$rB)
  // Emits: (ROTHMv8i16:v8i16 VECREG:v16i8:$rA, (SFIr32:i32 (XSHWr16:i32 R16C:i16:$rB), 0:i32))
  // Pattern complexity = 3  cost = 3  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i16) {
    SDNode *Result = Emit_174(N, SPU::XSHWr16, SPU::SFIr32, SPU::ROTHMv8i16, MVT::i32, MVT::i32, MVT::v8i16);
    return Result;
  }

  // Pattern: (SPUvec_srl:v8i16 VECREG:v8i16:$rA, R8C:i8:$rB)
  // Emits: (ROTHMv8i16:v8i16 VECREG:v16i8:$rA, (SFIr32:i32 (XSHWr16:i32 (XSBHr8:i16 R8C:i8:$rB)), 0:i32))
  // Pattern complexity = 3  cost = 4  size = 0
  if (N1.getNode()->getValueType(0) == MVT::i8) {
    SDNode *Result = Emit_175(N, SPU::XSBHr8, SPU::XSHWr16, SPU::SFIr32, SPU::ROTHMv8i16, MVT::i16, MVT::i32, MVT::i32, MVT::v8i16);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_SPUISD_VEC_SRL_v4i32(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  if (N1.getOpcode() == ISD::Constant &&
      Predicate_uimm7(N1.getNode()) &&
      N1.getNode()->getValueType(0) == MVT::i32) {
    SDNode *Result = Emit_2(N, SPU::ROTMIv4i32, MVT::v4i32);
    return Result;
  }

  CannotYetSelect(N);
  return NULL;
}

SDNode *Select_INLINEASM(SDValue N) {
  std::vector<SDValue> Ops(N.getNode()->op_begin(), N.getNode()->op_end());
  SelectInlineAsmMemoryOperands(Ops);

  std::vector<MVT> VTs;
  VTs.push_back(MVT::Other);
  VTs.push_back(MVT::Flag);
  SDValue New = CurDAG->getNode(ISD::INLINEASM, VTs, &Ops[0], Ops.size());
  return New.getNode();
}

SDNode *Select_UNDEF(const SDValue &N) {
  return CurDAG->SelectNodeTo(N.getNode(), TargetInstrInfo::IMPLICIT_DEF,
                              N.getValueType());
}

SDNode *Select_DBG_LABEL(const SDValue &N) {
  SDValue Chain = N.getOperand(0);
  unsigned C = cast<LabelSDNode>(N)->getLabelID();
  SDValue Tmp = CurDAG->getTargetConstant(C, MVT::i32);
  return CurDAG->SelectNodeTo(N.getNode(), TargetInstrInfo::DBG_LABEL,
                              MVT::Other, Tmp, Chain);
}

SDNode *Select_EH_LABEL(const SDValue &N) {
  SDValue Chain = N.getOperand(0);
  unsigned C = cast<LabelSDNode>(N)->getLabelID();
  SDValue Tmp = CurDAG->getTargetConstant(C, MVT::i32);
  return CurDAG->SelectNodeTo(N.getNode(), TargetInstrInfo::EH_LABEL,
                              MVT::Other, Tmp, Chain);
}

SDNode *Select_DECLARE(const SDValue &N) {
  SDValue Chain = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  if (!isa<FrameIndexSDNode>(N1) || !isa<GlobalAddressSDNode>(N2)) {
    CannotYetSelect(N);
  }
  int FI = cast<FrameIndexSDNode>(N1)->getIndex();
  GlobalValue *GV = cast<GlobalAddressSDNode>(N2)->getGlobal();
  SDValue Tmp1 = CurDAG->getTargetFrameIndex(FI, TLI.getPointerTy());
  SDValue Tmp2 = CurDAG->getTargetGlobalAddress(GV, TLI.getPointerTy());
  return CurDAG->SelectNodeTo(N.getNode(), TargetInstrInfo::DECLARE,
                              MVT::Other, Tmp1, Tmp2, Chain);
}

SDNode *Select_EXTRACT_SUBREG(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  unsigned C = cast<ConstantSDNode>(N1)->getZExtValue();
  SDValue Tmp = CurDAG->getTargetConstant(C, MVT::i32);
  return CurDAG->SelectNodeTo(N.getNode(), TargetInstrInfo::EXTRACT_SUBREG,
                              N.getValueType(), N0, Tmp);
}

SDNode *Select_INSERT_SUBREG(const SDValue &N) {
  SDValue N0 = N.getOperand(0);
  SDValue N1 = N.getOperand(1);
  SDValue N2 = N.getOperand(2);
  unsigned C = cast<ConstantSDNode>(N2)->getZExtValue();
  SDValue Tmp = CurDAG->getTargetConstant(C, MVT::i32);
  return CurDAG->SelectNodeTo(N.getNode(), TargetInstrInfo::INSERT_SUBREG,
                              N.getValueType(), N0, N1, Tmp);
}

// The main instruction selector code.
SDNode *SelectCode(SDValue N) {
  MVT::SimpleValueType NVT = N.getNode()->getValueType(0).getSimpleVT();
  switch (N.getOpcode()) {
  default:
    assert(!N.isMachineOpcode() && "Node already selected!");
    break;
  case ISD::EntryToken:       // These nodes remain the same.
  case ISD::MEMOPERAND:
  case ISD::BasicBlock:
  case ISD::Register:
  case ISD::HANDLENODE:
  case ISD::TargetConstant:
  case ISD::TargetConstantFP:
  case ISD::TargetConstantPool:
  case ISD::TargetFrameIndex:
  case ISD::TargetExternalSymbol:
  case ISD::TargetJumpTable:
  case ISD::TargetGlobalTLSAddress:
  case ISD::TargetGlobalAddress:
  case ISD::TokenFactor:
  case ISD::CopyFromReg:
  case ISD::CopyToReg: {
    return NULL;
  }
  case ISD::AssertSext:
  case ISD::AssertZext: {
    ReplaceUses(N, N.getOperand(0));
    return NULL;
  }
  case ISD::INLINEASM: return Select_INLINEASM(N);
  case ISD::DBG_LABEL: return Select_DBG_LABEL(N);
  case ISD::EH_LABEL: return Select_EH_LABEL(N);
  case ISD::DECLARE: return Select_DECLARE(N);
  case ISD::EXTRACT_SUBREG: return Select_EXTRACT_SUBREG(N);
  case ISD::INSERT_SUBREG: return Select_INSERT_SUBREG(N);
  case ISD::UNDEF: return Select_UNDEF(N);
  case ISD::ADD: {
    switch (NVT) {
    case MVT::i16:
      return Select_ISD_ADD_i16(N);
    case MVT::i32:
      return Select_ISD_ADD_i32(N);
    case MVT::v16i8:
      return Select_ISD_ADD_v16i8(N);
    case MVT::v8i16:
      return Select_ISD_ADD_v8i16(N);
    case MVT::v4i32:
      return Select_ISD_ADD_v4i32(N);
    default:
      break;
    }
    break;
  }
  case ISD::AND: {
    switch (NVT) {
    case MVT::i8:
      return Select_ISD_AND_i8(N);
    case MVT::i16:
      return Select_ISD_AND_i16(N);
    case MVT::i32:
      return Select_ISD_AND_i32(N);
    case MVT::i64:
      return Select_ISD_AND_i64(N);
    case MVT::i128:
      return Select_ISD_AND_i128(N);
    case MVT::v16i8:
      return Select_ISD_AND_v16i8(N);
    case MVT::v8i16:
      return Select_ISD_AND_v8i16(N);
    case MVT::v4i32:
      return Select_ISD_AND_v4i32(N);
    case MVT::v2i64:
      return Select_ISD_AND_v2i64(N);
    default:
      break;
    }
    break;
  }
  case ISD::ANY_EXTEND: {
    switch (NVT) {
    case MVT::i16:
      return Select_ISD_ANY_EXTEND_i16(N);
    case MVT::i32:
      return Select_ISD_ANY_EXTEND_i32(N);
    case MVT::i128:
      return Select_ISD_ANY_EXTEND_i128(N);
    default:
      break;
    }
    break;
  }
  case ISD::BIT_CONVERT: {
    switch (NVT) {
    case MVT::i32:
      return Select_ISD_BIT_CONVERT_i32(N);
    case MVT::i64:
      return Select_ISD_BIT_CONVERT_i64(N);
    case MVT::f32:
      return Select_ISD_BIT_CONVERT_f32(N);
    case MVT::f64:
      return Select_ISD_BIT_CONVERT_f64(N);
    case MVT::v16i8:
      return Select_ISD_BIT_CONVERT_v16i8(N);
    case MVT::v8i16:
      return Select_ISD_BIT_CONVERT_v8i16(N);
    case MVT::v4i32:
      return Select_ISD_BIT_CONVERT_v4i32(N);
    case MVT::v2i64:
      return Select_ISD_BIT_CONVERT_v2i64(N);
    case MVT::v4f32:
      return Select_ISD_BIT_CONVERT_v4f32(N);
    case MVT::v2f64:
      return Select_ISD_BIT_CONVERT_v2f64(N);
    default:
      break;
    }
    break;
  }
  case ISD::BR: {
    switch (NVT) {
    default:
      return Select_ISD_BR(N);
      break;
    }
    break;
  }
  case ISD::BRCOND: {
    switch (NVT) {
    default:
      return Select_ISD_BRCOND(N);
      break;
    }
    break;
  }
  case ISD::BRIND: {
    switch (NVT) {
    default:
      return Select_ISD_BRIND(N);
      break;
    }
    break;
  }
  case ISD::BUILD_VECTOR: {
    switch (NVT) {
    case MVT::v8i16:
      return Select_ISD_BUILD_VECTOR_v8i16(N);
    case MVT::v4i32:
      return Select_ISD_BUILD_VECTOR_v4i32(N);
    case MVT::v2i64:
      return Select_ISD_BUILD_VECTOR_v2i64(N);
    default:
      break;
    }
    break;
  }
  case ISD::CALLSEQ_END: {
    switch (NVT) {
    default:
      return Select_ISD_CALLSEQ_END(N);
      break;
    }
    break;
  }
  case ISD::CALLSEQ_START: {
    switch (NVT) {
    default:
      return Select_ISD_CALLSEQ_START(N);
      break;
    }
    break;
  }
  case ISD::CTLZ: {
    switch (NVT) {
    case MVT::i32:
      return Select_ISD_CTLZ_i32(N);
    case MVT::v4i32:
      return Select_ISD_CTLZ_v4i32(N);
    default:
      break;
    }
    break;
  }
  case ISD::Constant: {
    switch (NVT) {
    case MVT::i8:
      return Select_ISD_Constant_i8(N);
    case MVT::i16:
      return Select_ISD_Constant_i16(N);
    case MVT::i32:
      return Select_ISD_Constant_i32(N);
    case MVT::i64:
      return Select_ISD_Constant_i64(N);
    default:
      break;
    }
    break;
  }
  case ISD::ConstantFP: {
    switch (NVT) {
    case MVT::f32:
      return Select_ISD_ConstantFP_f32(N);
    case MVT::f64:
      return Select_ISD_ConstantFP_f64(N);
    default:
      break;
    }
    break;
  }
  case ISD::DEBUG_LOC: {
    switch (NVT) {
    default:
      return Select_ISD_DEBUG_LOC(N);
      break;
    }
    break;
  }
  case ISD::FABS: {
    switch (NVT) {
    case MVT::f32:
      return Select_ISD_FABS_f32(N);
    case MVT::f64:
      return Select_ISD_FABS_f64(N);
    case MVT::v4f32:
      return Select_ISD_FABS_v4f32(N);
    case MVT::v2f64:
      return Select_ISD_FABS_v2f64(N);
    default:
      break;
    }
    break;
  }
  case ISD::FADD: {
    switch (NVT) {
    case MVT::f32:
      return Select_ISD_FADD_f32(N);
    case MVT::f64:
      return Select_ISD_FADD_f64(N);
    case MVT::v4f32:
      return Select_ISD_FADD_v4f32(N);
    case MVT::v2f64:
      return Select_ISD_FADD_v2f64(N);
    default:
      break;
    }
    break;
  }
  case ISD::FDIV: {
    switch (NVT) {
    case MVT::f32:
      return Select_ISD_FDIV_f32(N);
    case MVT::v4f32:
      return Select_ISD_FDIV_v4f32(N);
    default:
      break;
    }
    break;
  }
  case ISD::FMUL: {
    switch (NVT) {
    case MVT::f32:
      return Select_ISD_FMUL_f32(N);
    case MVT::f64:
      return Select_ISD_FMUL_f64(N);
    case MVT::v4f32:
      return Select_ISD_FMUL_v4f32(N);
    case MVT::v2f64:
      return Select_ISD_FMUL_v2f64(N);
    default:
      break;
    }
    break;
  }
  case ISD::FNEG: {
    switch (NVT) {
    case MVT::f32:
      return Select_ISD_FNEG_f32(N);
    case MVT::f64:
      return Select_ISD_FNEG_f64(N);
    case MVT::v4f32:
      return Select_ISD_FNEG_v4f32(N);
    case MVT::v2f64:
      return Select_ISD_FNEG_v2f64(N);
    default:
      break;
    }
    break;
  }
  case ISD::FP_EXTEND: {
    switch (NVT) {
    case MVT::f64:
      return Select_ISD_FP_EXTEND_f64(N);
    case MVT::v2f64:
      return Select_ISD_FP_EXTEND_v2f64(N);
    default:
      break;
    }
    break;
  }
  case ISD::FP_ROUND: {
    switch (NVT) {
    case MVT::f32:
      return Select_ISD_FP_ROUND_f32(N);
    default:
      break;
    }
    break;
  }
  case ISD::FP_TO_SINT: {
    switch (NVT) {
    case MVT::i32:
      return Select_ISD_FP_TO_SINT_i32(N);
    case MVT::v4i32:
      return Select_ISD_FP_TO_SINT_v4i32(N);
    default:
      break;
    }
    break;
  }
  case ISD::FP_TO_UINT: {
    switch (NVT) {
    case MVT::i32:
      return Select_ISD_FP_TO_UINT_i32(N);
    case MVT::v4i32:
      return Select_ISD_FP_TO_UINT_v4i32(N);
    default:
      break;
    }
    break;
  }
  case ISD::FSUB: {
    switch (NVT) {
    case MVT::f32:
      return Select_ISD_FSUB_f32(N);
    case MVT::f64:
      return Select_ISD_FSUB_f64(N);
    case MVT::v4f32:
      return Select_ISD_FSUB_v4f32(N);
    case MVT::v2f64:
      return Select_ISD_FSUB_v2f64(N);
    default:
      break;
    }
    break;
  }
  case ISD::INTRINSIC_WO_CHAIN: {
    switch (NVT) {
    case MVT::v16i8:
      return Select_ISD_INTRINSIC_WO_CHAIN_v16i8(N);
    case MVT::v8i16:
      return Select_ISD_INTRINSIC_WO_CHAIN_v8i16(N);
    case MVT::v4i32:
      return Select_ISD_INTRINSIC_WO_CHAIN_v4i32(N);
    case MVT::v4f32:
      return Select_ISD_INTRINSIC_WO_CHAIN_v4f32(N);
    case MVT::v2f64:
      return Select_ISD_INTRINSIC_WO_CHAIN_v2f64(N);
    default:
      break;
    }
    break;
  }
  case ISD::LOAD: {
    switch (NVT) {
    case MVT::i8:
      return Select_ISD_LOAD_i8(N);
    case MVT::i16:
      return Select_ISD_LOAD_i16(N);
    case MVT::i32:
      return Select_ISD_LOAD_i32(N);
    case MVT::i64:
      return Select_ISD_LOAD_i64(N);
    case MVT::i128:
      return Select_ISD_LOAD_i128(N);
    case MVT::f32:
      return Select_ISD_LOAD_f32(N);
    case MVT::f64:
      return Select_ISD_LOAD_f64(N);
    case MVT::v2i32:
      return Select_ISD_LOAD_v2i32(N);
    case MVT::v16i8:
      return Select_ISD_LOAD_v16i8(N);
    case MVT::v8i16:
      return Select_ISD_LOAD_v8i16(N);
    case MVT::v4i32:
      return Select_ISD_LOAD_v4i32(N);
    case MVT::v2i64:
      return Select_ISD_LOAD_v2i64(N);
    case MVT::v4f32:
      return Select_ISD_LOAD_v4f32(N);
    case MVT::v2f64:
      return Select_ISD_LOAD_v2f64(N);
    default:
      break;
    }
    break;
  }
  case ISD::MUL: {
    switch (NVT) {
    case MVT::i16:
      return Select_ISD_MUL_i16(N);
    case MVT::i32:
      return Select_ISD_MUL_i32(N);
    case MVT::v16i8:
      return Select_ISD_MUL_v16i8(N);
    case MVT::v8i16:
      return Select_ISD_MUL_v8i16(N);
    case MVT::v4i32:
      return Select_ISD_MUL_v4i32(N);
    default:
      break;
    }
    break;
  }
  case ISD::OR: {
    switch (NVT) {
    case MVT::i8:
      return Select_ISD_OR_i8(N);
    case MVT::i16:
      return Select_ISD_OR_i16(N);
    case MVT::i32:
      return Select_ISD_OR_i32(N);
    case MVT::i64:
      return Select_ISD_OR_i64(N);
    case MVT::i128:
      return Select_ISD_OR_i128(N);
    case MVT::v16i8:
      return Select_ISD_OR_v16i8(N);
    case MVT::v8i16:
      return Select_ISD_OR_v8i16(N);
    case MVT::v4i32:
      return Select_ISD_OR_v4i32(N);
    case MVT::v2i64:
      return Select_ISD_OR_v2i64(N);
    default:
      break;
    }
    break;
  }
  case ISD::RET: {
    switch (NVT) {
    default:
      return Select_ISD_RET(N);
      break;
    }
    break;
  }
  case ISD::ROTL: {
    switch (NVT) {
    case MVT::i16:
      return Select_ISD_ROTL_i16(N);
    case MVT::i32:
      return Select_ISD_ROTL_i32(N);
    default:
      break;
    }
    break;
  }
  case ISD::SELECT: {
    switch (NVT) {
    case MVT::i8:
      return Select_ISD_SELECT_i8(N);
    case MVT::i16:
      return Select_ISD_SELECT_i16(N);
    case MVT::i32:
      return Select_ISD_SELECT_i32(N);
    case MVT::i64:
      return Select_ISD_SELECT_i64(N);
    case MVT::f32:
      return Select_ISD_SELECT_f32(N);
    case MVT::f64:
      return Select_ISD_SELECT_f64(N);
    case MVT::v16i8:
      return Select_ISD_SELECT_v16i8(N);
    case MVT::v8i16:
      return Select_ISD_SELECT_v8i16(N);
    case MVT::v4i32:
      return Select_ISD_SELECT_v4i32(N);
    case MVT::v2i64:
      return Select_ISD_SELECT_v2i64(N);
    case MVT::v4f32:
      return Select_ISD_SELECT_v4f32(N);
    default:
      break;
    }
    break;
  }
  case ISD::SETCC: {
    switch (NVT) {
    case MVT::i8:
      return Select_ISD_SETCC_i8(N);
    case MVT::i16:
      return Select_ISD_SETCC_i16(N);
    case MVT::i32:
      return Select_ISD_SETCC_i32(N);
    case MVT::v16i8:
      return Select_ISD_SETCC_v16i8(N);
    case MVT::v8i16:
      return Select_ISD_SETCC_v8i16(N);
    case MVT::v4i32:
      return Select_ISD_SETCC_v4i32(N);
    default:
      break;
    }
    break;
  }
  case ISD::SHL: {
    switch (NVT) {
    case MVT::i16:
      return Select_ISD_SHL_i16(N);
    case MVT::i32:
      return Select_ISD_SHL_i32(N);
    case MVT::i128:
      return Select_ISD_SHL_i128(N);
    default:
      break;
    }
    break;
  }
  case ISD::SIGN_EXTEND: {
    switch (NVT) {
    case MVT::i16:
      return Select_ISD_SIGN_EXTEND_i16(N);
    case MVT::i32:
      return Select_ISD_SIGN_EXTEND_i32(N);
    case MVT::i64:
      return Select_ISD_SIGN_EXTEND_i64(N);
    case MVT::v8i16:
      return Select_ISD_SIGN_EXTEND_v8i16(N);
    case MVT::v2i64:
      return Select_ISD_SIGN_EXTEND_v2i64(N);
    default:
      break;
    }
    break;
  }
  case ISD::SIGN_EXTEND_INREG: {
    switch (NVT) {
    case MVT::i16:
      return Select_ISD_SIGN_EXTEND_INREG_i16(N);
    case MVT::i32:
      return Select_ISD_SIGN_EXTEND_INREG_i32(N);
    case MVT::i64:
      return Select_ISD_SIGN_EXTEND_INREG_i64(N);
    default:
      break;
    }
    break;
  }
  case ISD::SINT_TO_FP: {
    switch (NVT) {
    case MVT::f32:
      return Select_ISD_SINT_TO_FP_f32(N);
    case MVT::v4f32:
      return Select_ISD_SINT_TO_FP_v4f32(N);
    default:
      break;
    }
    break;
  }
  case ISD::SRA: {
    switch (NVT) {
    case MVT::i16:
      return Select_ISD_SRA_i16(N);
    case MVT::i32:
      return Select_ISD_SRA_i32(N);
    case MVT::i64:
      return Select_ISD_SRA_i64(N);
    default:
      break;
    }
    break;
  }
  case ISD::SRL: {
    switch (NVT) {
    case MVT::i16:
      return Select_ISD_SRL_i16(N);
    case MVT::i32:
      return Select_ISD_SRL_i32(N);
    default:
      break;
    }
    break;
  }
  case ISD::STORE: {
    switch (NVT) {
    default:
      return Select_ISD_STORE(N);
      break;
    }
    break;
  }
  case ISD::SUB: {
    switch (NVT) {
    case MVT::i16:
      return Select_ISD_SUB_i16(N);
    case MVT::i32:
      return Select_ISD_SUB_i32(N);
    case MVT::v8i16:
      return Select_ISD_SUB_v8i16(N);
    case MVT::v4i32:
      return Select_ISD_SUB_v4i32(N);
    default:
      break;
    }
    break;
  }
  case ISD::TRUNCATE: {
    switch (NVT) {
    case MVT::i8:
      return Select_ISD_TRUNCATE_i8(N);
    case MVT::i16:
      return Select_ISD_TRUNCATE_i16(N);
    case MVT::i32:
      return Select_ISD_TRUNCATE_i32(N);
    default:
      break;
    }
    break;
  }
  case ISD::UINT_TO_FP: {
    switch (NVT) {
    case MVT::f32:
      return Select_ISD_UINT_TO_FP_f32(N);
    case MVT::v4f32:
      return Select_ISD_UINT_TO_FP_v4f32(N);
    default:
      break;
    }
    break;
  }
  case ISD::XOR: {
    switch (NVT) {
    case MVT::i8:
      return Select_ISD_XOR_i8(N);
    case MVT::i16:
      return Select_ISD_XOR_i16(N);
    case MVT::i32:
      return Select_ISD_XOR_i32(N);
    case MVT::i64:
      return Select_ISD_XOR_i64(N);
    case MVT::i128:
      return Select_ISD_XOR_i128(N);
    case MVT::v16i8:
      return Select_ISD_XOR_v16i8(N);
    case MVT::v8i16:
      return Select_ISD_XOR_v8i16(N);
    case MVT::v4i32:
      return Select_ISD_XOR_v4i32(N);
    case MVT::v2i64:
      return Select_ISD_XOR_v2i64(N);
    default:
      break;
    }
    break;
  }
  case ISD::ZERO_EXTEND: {
    switch (NVT) {
    case MVT::i16:
      return Select_ISD_ZERO_EXTEND_i16(N);
    case MVT::i32:
      return Select_ISD_ZERO_EXTEND_i32(N);
    case MVT::i64:
      return Select_ISD_ZERO_EXTEND_i64(N);
    case MVT::i128:
      return Select_ISD_ZERO_EXTEND_i128(N);
    default:
      break;
    }
    break;
  }
  case SPUISD::ADD64_MARKER: {
    switch (NVT) {
    case MVT::i64:
      return Select_SPUISD_ADD64_MARKER_i64(N);
    case MVT::v2i64:
      return Select_SPUISD_ADD64_MARKER_v2i64(N);
    default:
      break;
    }
    break;
  }
  case SPUISD::AFormAddr: {
    switch (NVT) {
    case MVT::i32:
      return Select_SPUISD_AFormAddr_i32(N);
    default:
      break;
    }
    break;
  }
  case SPUISD::CALL: {
    switch (NVT) {
    default:
      return Select_SPUISD_CALL(N);
      break;
    }
    break;
  }
  case SPUISD::CNTB: {
    switch (NVT) {
    case MVT::v16i8:
      return Select_SPUISD_CNTB_v16i8(N);
    case MVT::v8i16:
      return Select_SPUISD_CNTB_v8i16(N);
    case MVT::v4i32:
      return Select_SPUISD_CNTB_v4i32(N);
    default:
      break;
    }
    break;
  }
  case SPUISD::IndirectAddr: {
    switch (NVT) {
    case MVT::i32:
      return Select_SPUISD_IndirectAddr_i32(N);
    default:
      break;
    }
    break;
  }
  case SPUISD::MUL64_MARKER: {
    switch (NVT) {
    case MVT::i64:
      return Select_SPUISD_MUL64_MARKER_i64(N);
    case MVT::v2i64:
      return Select_SPUISD_MUL64_MARKER_v2i64(N);
    default:
      break;
    }
    break;
  }
  case SPUISD::PREFSLOT2VEC: {
    switch (NVT) {
    case MVT::v16i8:
      return Select_SPUISD_PREFSLOT2VEC_v16i8(N);
    case MVT::v8i16:
      return Select_SPUISD_PREFSLOT2VEC_v8i16(N);
    case MVT::v4i32:
      return Select_SPUISD_PREFSLOT2VEC_v4i32(N);
    case MVT::v2i64:
      return Select_SPUISD_PREFSLOT2VEC_v2i64(N);
    case MVT::v4f32:
      return Select_SPUISD_PREFSLOT2VEC_v4f32(N);
    case MVT::v2f64:
      return Select_SPUISD_PREFSLOT2VEC_v2f64(N);
    default:
      break;
    }
    break;
  }
  case SPUISD::RET_FLAG: {
    switch (NVT) {
    default:
      return Select_SPUISD_RET_FLAG(N);
      break;
    }
    break;
  }
  case SPUISD::ROTBYTES_LEFT: {
    switch (NVT) {
    case MVT::v16i8:
      return Select_SPUISD_ROTBYTES_LEFT_v16i8(N);
    case MVT::v8i16:
      return Select_SPUISD_ROTBYTES_LEFT_v8i16(N);
    case MVT::v4i32:
      return Select_SPUISD_ROTBYTES_LEFT_v4i32(N);
    case MVT::v2i64:
      return Select_SPUISD_ROTBYTES_LEFT_v2i64(N);
    case MVT::v4f32:
      return Select_SPUISD_ROTBYTES_LEFT_v4f32(N);
    case MVT::v2f64:
      return Select_SPUISD_ROTBYTES_LEFT_v2f64(N);
    default:
      break;
    }
    break;
  }
  case SPUISD::ROTBYTES_LEFT_BITS: {
    switch (NVT) {
    case MVT::v16i8:
      return Select_SPUISD_ROTBYTES_LEFT_BITS_v16i8(N);
    case MVT::v8i16:
      return Select_SPUISD_ROTBYTES_LEFT_BITS_v8i16(N);
    case MVT::v4i32:
      return Select_SPUISD_ROTBYTES_LEFT_BITS_v4i32(N);
    case MVT::v2i64:
      return Select_SPUISD_ROTBYTES_LEFT_BITS_v2i64(N);
    default:
      break;
    }
    break;
  }
  case SPUISD::SELB: {
    switch (NVT) {
    case MVT::i8:
      return Select_SPUISD_SELB_i8(N);
    case MVT::i16:
      return Select_SPUISD_SELB_i16(N);
    case MVT::i32:
      return Select_SPUISD_SELB_i32(N);
    case MVT::i64:
      return Select_SPUISD_SELB_i64(N);
    case MVT::v16i8:
      return Select_SPUISD_SELB_v16i8(N);
    case MVT::v8i16:
      return Select_SPUISD_SELB_v8i16(N);
    case MVT::v4i32:
      return Select_SPUISD_SELB_v4i32(N);
    case MVT::v2i64:
      return Select_SPUISD_SELB_v2i64(N);
    default:
      break;
    }
    break;
  }
  case SPUISD::SELECT_MASK: {
    switch (NVT) {
    case MVT::v16i8:
      return Select_SPUISD_SELECT_MASK_v16i8(N);
    case MVT::v8i16:
      return Select_SPUISD_SELECT_MASK_v8i16(N);
    case MVT::v4i32:
      return Select_SPUISD_SELECT_MASK_v4i32(N);
    case MVT::v2i64:
      return Select_SPUISD_SELECT_MASK_v2i64(N);
    default:
      break;
    }
    break;
  }
  case SPUISD::SHLQUAD_L_BITS: {
    switch (NVT) {
    case MVT::v16i8:
      return Select_SPUISD_SHLQUAD_L_BITS_v16i8(N);
    case MVT::v8i16:
      return Select_SPUISD_SHLQUAD_L_BITS_v8i16(N);
    case MVT::v4i32:
      return Select_SPUISD_SHLQUAD_L_BITS_v4i32(N);
    case MVT::v2i64:
      return Select_SPUISD_SHLQUAD_L_BITS_v2i64(N);
    case MVT::v4f32:
      return Select_SPUISD_SHLQUAD_L_BITS_v4f32(N);
    case MVT::v2f64:
      return Select_SPUISD_SHLQUAD_L_BITS_v2f64(N);
    default:
      break;
    }
    break;
  }
  case SPUISD::SHLQUAD_L_BYTES: {
    switch (NVT) {
    case MVT::i128:
      return Select_SPUISD_SHLQUAD_L_BYTES_i128(N);
    case MVT::v16i8:
      return Select_SPUISD_SHLQUAD_L_BYTES_v16i8(N);
    case MVT::v8i16:
      return Select_SPUISD_SHLQUAD_L_BYTES_v8i16(N);
    case MVT::v4i32:
      return Select_SPUISD_SHLQUAD_L_BYTES_v4i32(N);
    case MVT::v2i64:
      return Select_SPUISD_SHLQUAD_L_BYTES_v2i64(N);
    case MVT::v4f32:
      return Select_SPUISD_SHLQUAD_L_BYTES_v4f32(N);
    case MVT::v2f64:
      return Select_SPUISD_SHLQUAD_L_BYTES_v2f64(N);
    default:
      break;
    }
    break;
  }
  case SPUISD::SHUFB: {
    switch (NVT) {
    case MVT::v16i8:
      return Select_SPUISD_SHUFB_v16i8(N);
    case MVT::v8i16:
      return Select_SPUISD_SHUFB_v8i16(N);
    case MVT::v4i32:
      return Select_SPUISD_SHUFB_v4i32(N);
    case MVT::v2i64:
      return Select_SPUISD_SHUFB_v2i64(N);
    case MVT::v4f32:
      return Select_SPUISD_SHUFB_v4f32(N);
    case MVT::v2f64:
      return Select_SPUISD_SHUFB_v2f64(N);
    default:
      break;
    }
    break;
  }
  case SPUISD::SHUFFLE_MASK: {
    switch (NVT) {
    case MVT::v16i8:
      return Select_SPUISD_SHUFFLE_MASK_v16i8(N);
    case MVT::v8i16:
      return Select_SPUISD_SHUFFLE_MASK_v8i16(N);
    case MVT::v4i32:
      return Select_SPUISD_SHUFFLE_MASK_v4i32(N);
    case MVT::v2i64:
      return Select_SPUISD_SHUFFLE_MASK_v2i64(N);
    case MVT::v4f32:
      return Select_SPUISD_SHUFFLE_MASK_v4f32(N);
    case MVT::v2f64:
      return Select_SPUISD_SHUFFLE_MASK_v2f64(N);
    default:
      break;
    }
    break;
  }
  case SPUISD::SUB64_MARKER: {
    switch (NVT) {
    case MVT::i64:
      return Select_SPUISD_SUB64_MARKER_i64(N);
    case MVT::v2i64:
      return Select_SPUISD_SUB64_MARKER_v2i64(N);
    default:
      break;
    }
    break;
  }
  case SPUISD::VEC2PREFSLOT: {
    switch (NVT) {
    case MVT::i8:
      return Select_SPUISD_VEC2PREFSLOT_i8(N);
    case MVT::i16:
      return Select_SPUISD_VEC2PREFSLOT_i16(N);
    case MVT::i32:
      return Select_SPUISD_VEC2PREFSLOT_i32(N);
    case MVT::i64:
      return Select_SPUISD_VEC2PREFSLOT_i64(N);
    case MVT::f32:
      return Select_SPUISD_VEC2PREFSLOT_f32(N);
    case MVT::f64:
      return Select_SPUISD_VEC2PREFSLOT_f64(N);
    default:
      break;
    }
    break;
  }
  case SPUISD::VEC_ROTL: {
    switch (NVT) {
    case MVT::v16i8:
      return Select_SPUISD_VEC_ROTL_v16i8(N);
    case MVT::v8i16:
      return Select_SPUISD_VEC_ROTL_v8i16(N);
    case MVT::v4i32:
      return Select_SPUISD_VEC_ROTL_v4i32(N);
    default:
      break;
    }
    break;
  }
  case SPUISD::VEC_SHL: {
    switch (NVT) {
    case MVT::v8i16:
      return Select_SPUISD_VEC_SHL_v8i16(N);
    case MVT::v4i32:
      return Select_SPUISD_VEC_SHL_v4i32(N);
    default:
      break;
    }
    break;
  }
  case SPUISD::VEC_SRA: {
    switch (NVT) {
    case MVT::v16i8:
      return Select_SPUISD_VEC_SRA_v16i8(N);
    case MVT::v8i16:
      return Select_SPUISD_VEC_SRA_v8i16(N);
    case MVT::v4i32:
      return Select_SPUISD_VEC_SRA_v4i32(N);
    case MVT::v2i64:
      return Select_SPUISD_VEC_SRA_v2i64(N);
    default:
      break;
    }
    break;
  }
  case SPUISD::VEC_SRL: {
    switch (NVT) {
    case MVT::v16i8:
      return Select_SPUISD_VEC_SRL_v16i8(N);
    case MVT::v8i16:
      return Select_SPUISD_VEC_SRL_v8i16(N);
    case MVT::v4i32:
      return Select_SPUISD_VEC_SRL_v4i32(N);
    default:
      break;
    }
    break;
  }
  } // end of big switch.

  if (N.getOpcode() != ISD::INTRINSIC_W_CHAIN &&
      N.getOpcode() != ISD::INTRINSIC_WO_CHAIN &&
      N.getOpcode() != ISD::INTRINSIC_VOID) {
    CannotYetSelect(N);
  } else {
    CannotYetSelectIntrinsic(N);
  }
  return NULL;
}

void CannotYetSelect(SDValue N) DISABLE_INLINE {
  cerr << "Cannot yet select: ";
  N.getNode()->dump(CurDAG);
  cerr << '\n';
  abort();
}

void CannotYetSelectIntrinsic(SDValue N) DISABLE_INLINE {
  cerr << "Cannot yet select: ";
  unsigned iid = cast<ConstantSDNode>(N.getOperand(N.getOperand(0).getValueType() == MVT::Other))->getZExtValue();
  cerr << "intrinsic %"<< Intrinsic::getName((Intrinsic::ID)iid);
  cerr << '\n';
  abort();
}

