//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.  This method returns true if the
/// machine instruction was sufficiently described to print it, otherwise
/// it returns false.
bool SPUAsmPrinter::printInstruction(const MachineInstr *MI) {
  static const unsigned OpInfo[] = {
    2U,	// PHI
    0U,	// INLINEASM
    0U,	// DBG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// DECLARE
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    536870923U,	// ABSDB
    536870930U,	// ADDXr32
    536870930U,	// ADDXr64
    536870930U,	// ADDXv2i64
    536870930U,	// ADDXv4i32
    1140850689U,	// ADJCALLSTACKDOWN
    1207959553U,	// ADJCALLSTACKUP
    537002008U,	// AHIr16
    537002008U,	// AHIvec
    536870941U,	// AHr16
    536870941U,	// AHv8i16
    537002017U,	// AIf32
    537002017U,	// AIr32
    537002017U,	// AIv4f32
    537002017U,	// AIv4i32
    537133093U,	// ANDBIr8
    537133093U,	// ANDBIv16i8
    536870956U,	// ANDCr128
    536870956U,	// ANDCr16
    536870956U,	// ANDCr32
    536870956U,	// ANDCr64
    536870956U,	// ANDCr8
    536870956U,	// ANDCv16i8
    536870956U,	// ANDCv2i64
    536870956U,	// ANDCv4i32
    536870956U,	// ANDCv8i16
    537133106U,	// ANDHIi8i16
    537133106U,	// ANDHIr16
    537002034U,	// ANDHIv8i16
    537002041U,	// ANDIi16i32
    537002041U,	// ANDIi8i32
    537002041U,	// ANDIr32
    537002041U,	// ANDIv4i32
    536870975U,	// ANDfabs32
    536870975U,	// ANDfabs64
    536870975U,	// ANDfabsvec
    536870975U,	// ANDi16i32
    536870975U,	// ANDr128
    536870975U,	// ANDr16
    536870975U,	// ANDr32
    536870975U,	// ANDr64
    536870975U,	// ANDr8
    536870975U,	// ANDv16i8
    536870975U,	// ANDv2i64
    536870975U,	// ANDv4i32
    536870975U,	// ANDv8i16
    536870980U,	// AVGB
    536870986U,	// Ar32
    536870986U,	// Av16i8
    536870986U,	// Av4i32
    536870989U,	// BGXvec
    536870994U,	// BGr32
    536870994U,	// BGr64
    536870994U,	// BGv2i64
    536870994U,	// BGv4i32
    738197590U,	// BI
    738197594U,	// BISL
    1610612837U,	// BISLED_00
    1610612837U,	// BISLED_0D
    1610612837U,	// BISLED_E0
    1610612837U,	// BISLED_ED
    2147483762U,	// BR
    2147483766U,	// BRA
    1610612859U,	// BRASL
    805306503U,	// BRHNZr16
    805306503U,	// BRHNZv8i16
    805306510U,	// BRHZr16
    805306510U,	// BRHZv8i16
    805306516U,	// BRNZr32
    805306516U,	// BRNZv4i32
    2147483802U,	// BRSL
    805306533U,	// BRZr32
    805306533U,	// BRZv4i32
    541065386U,	// CBD
    545259695U,	// CBX
    541065396U,	// CDD
    541065396U,	// CDDf64
    545259705U,	// CDX
    545259705U,	// CDXf64
    537002174U,	// CEQBIr8
    537002174U,	// CEQBIv16i8
    536871109U,	// CEQBr8
    536871109U,	// CEQBv16i8
    537002187U,	// CEQHIr16
    537002187U,	// CEQHIv8i16
    536871122U,	// CEQHr16
    536871122U,	// CEQHv8i16
    537002200U,	// CEQIr32
    537002200U,	// CEQIv4i32
    536871134U,	// CEQr32
    536871134U,	// CEQv4i32
    537919715U,	// CFSif32
    537919715U,	// CFSiv4f32
    537919722U,	// CFUif32
    537919722U,	// CFUiv4f32
    537002225U,	// CGTBIr8
    537002225U,	// CGTBIv16i8
    536871160U,	// CGTBr8
    536871160U,	// CGTBv16i8
    537002238U,	// CGTHIr16
    537002238U,	// CGTHIv8i16
    536871173U,	// CGTHr16
    536871173U,	// CGTHv8i16
    537002251U,	// CGTIf32
    537002251U,	// CGTIr32
    537002251U,	// CGTIv4f32
    537002251U,	// CGTIv4i32
    536871185U,	// CGTr32
    536871185U,	// CGTv4i32
    536871190U,	// CGr32
    536871190U,	// CGr64
    536871190U,	// CGv2i64
    536871190U,	// CGv4i32
    541065498U,	// CHD
    545259807U,	// CHX
    537002276U,	// CLGTBIr8
    537002276U,	// CLGTBIv16i8
    536871212U,	// CLGTBr8
    536871212U,	// CLGTBv16i8
    537002291U,	// CLGTHIr16
    537002291U,	// CLGTHIv8i16
    536871227U,	// CLGTHr16
    536871227U,	// CLGTHv8i16
    537002306U,	// CLGTIr32
    537002306U,	// CLGTIv4i32
    536871241U,	// CLGTr32
    536871241U,	// CLGTv4i32
    538968399U,	// CLZr32
    538968399U,	// CLZv4i32
    538968404U,	// CNTBv16i8
    538968404U,	// CNTBv4i32
    538968404U,	// CNTBv8i16
    537919834U,	// CSiFf32
    537919834U,	// CSiFv4f32
    537919841U,	// CUiFf32
    537919841U,	// CUiFv4f32
    541065576U,	// CWD
    541065576U,	// CWDf32
    545259885U,	// CWX
    545259885U,	// CWXf32
    536871282U,	// CellSDKa
    536871285U,	// CellSDKaddx
    536871291U,	// CellSDKah
    549847423U,	// CellSDKahi
    549847428U,	// CellSDKai
    536871304U,	// CellSDKand
    537133454U,	// CellSDKandbi
    536871318U,	// CellSDKandc
    537002397U,	// CellSDKandhi
    537002405U,	// CellSDKandi
    536871340U,	// CellSDKbg
    536871344U,	// CellSDKbgx
    536871349U,	// CellSDKceq
    536871355U,	// CellSDKceqb
    537133506U,	// CellSDKceqbi
    536871370U,	// CellSDKceqh
    537002449U,	// CellSDKceqhi
    537002457U,	// CellSDKceqi
    536871392U,	// CellSDKcg
    536871396U,	// CellSDKcgt
    536871402U,	// CellSDKcgtb
    537133553U,	// CellSDKcgtbi
    536871417U,	// CellSDKcgth
    537002496U,	// CellSDKcgthi
    537002504U,	// CellSDKcgti
    536871439U,	// CellSDKcgx
    536871444U,	// CellSDKclgt
    536871451U,	// CellSDKclgtb
    537133603U,	// CellSDKclgtbi
    536871468U,	// CellSDKclgth
    537002548U,	// CellSDKclgthi
    537002557U,	// CellSDKclgti
    536871493U,	// CellSDKdfa
    536871499U,	// CellSDKdfm
    536871505U,	// CellSDKdfma
    536871512U,	// CellSDKdfms
    536871519U,	// CellSDKdfnma
    536871527U,	// CellSDKdfnms
    536871535U,	// CellSDKdfs
    536871541U,	// CellSDKfa
    536871546U,	// CellSDKfceq
    536871553U,	// CellSDKfcgt
    536871560U,	// CellSDKfcmeq
    536871568U,	// CellSDKfcmgt
    536871576U,	// CellSDKfm
    536937117U,	// CellSDKfma
    536937123U,	// CellSDKfms
    536937129U,	// CellSDKfnms
    536871600U,	// CellSDKfs
    536871605U,	// CellSDKmpy
    536937146U,	// CellSDKmpya
    536871616U,	// CellSDKmpyh
    536871622U,	// CellSDKmpyhh
    536871629U,	// CellSDKmpyhha
    536871637U,	// CellSDKmpyhhau
    536871646U,	// CellSDKmpyhhu
    537002726U,	// CellSDKmpyi
    536871660U,	// CellSDKmpys
    536871666U,	// CellSDKmpyu
    537002744U,	// CellSDKmpyui
    536871679U,	// CellSDKnand
    536871686U,	// CellSDKnor
    536871692U,	// CellSDKor
    537133841U,	// CellSDKorbi
    536871704U,	// CellSDKorc
    537002783U,	// CellSDKorhi
    537002790U,	// CellSDKori
    536871724U,	// CellSDKsf
    536871728U,	// CellSDKsfh
    549847861U,	// CellSDKsfhi
    549847867U,	// CellSDKsfi
    536871744U,	// CellSDKsfx
    536871749U,	// CellSDKxor
    537133899U,	// CellSDKxorbi
    537002835U,	// CellSDKxorhi
    537002843U,	// CellSDKxori
    2684355426U,	// DWARF_LOC
    872U,	// ENOP
    536871790U,	// EQVr128
    536871790U,	// EQVr128_1
    536871790U,	// EQVr128_2
    536871790U,	// EQVr128_3
    536871790U,	// EQVr16
    536871790U,	// EQVr16_1
    536871790U,	// EQVr16_2
    536871790U,	// EQVr16_3
    536871790U,	// EQVr32
    536871790U,	// EQVr32_1
    536871790U,	// EQVr32_2
    536871790U,	// EQVr32_3
    536871790U,	// EQVr64
    536871790U,	// EQVr64_1
    536871790U,	// EQVr64_2
    536871790U,	// EQVr64_3
    536871790U,	// EQVr8
    536871790U,	// EQVr8_1
    536871790U,	// EQVr8_2
    536871790U,	// EQVr8_3
    536871790U,	// EQVv16i8
    536871790U,	// EQVv16i8_1
    536871790U,	// EQVv16i8_2
    536871790U,	// EQVv16i8_3
    536871790U,	// EQVv2i64
    536871790U,	// EQVv2i64_1
    536871790U,	// EQVv2i64_2
    536871790U,	// EQVv2i64_3
    536871790U,	// EQVv4i32
    536871790U,	// EQVv4i32_1
    536871790U,	// EQVv4i32_2
    536871790U,	// EQVv4i32_3
    536871790U,	// EQVv8i16
    536871790U,	// EQVv8i16_1
    536871790U,	// EQVv8i16_2
    536871790U,	// EQVv8i16_3
    536871795U,	// FAf32
    536871799U,	// FAf64
    536871799U,	// FAv2f64
    536871795U,	// FAv4f32
    536871804U,	// FCEQf32
    536871810U,	// FCGTf32
    536871816U,	// FCMEQf32
    536871823U,	// FCMGTf32
    538968982U,	// FESDf32
    538968982U,	// FESDvec
    536871836U,	// FIf32
    536871836U,	// FIv4f32
    536937376U,	// FMAf32
    536871845U,	// FMAf64
    536871845U,	// FMAv2f64
    536937376U,	// FMAv4f32
    536937387U,	// FMSf32
    536871856U,	// FMSf64
    536871856U,	// FMSv2f64
    536937387U,	// FMSv4f32
    536871862U,	// FMf32
    536871866U,	// FMf64
    536871866U,	// FMv2f64
    536871862U,	// FMv4f32
    536871871U,	// FNMAf64
    536871871U,	// FNMAv2f64
    536937414U,	// FNMSf32
    536871884U,	// FNMSf64
    536871884U,	// FNMSv2f64
    536937414U,	// FNMSv4f32
    538969043U,	// FRDSf64
    538969049U,	// FRESTf32
    538969049U,	// FRESTv4f32
    738198496U,	// FSCRRf32
    3221226472U,	// FSCRWf32
    538969072U,	// FSM64r16
    538969072U,	// FSM64r32
    553649141U,	// FSMBIv16i8
    553649141U,	// FSMBIv2i64
    553649141U,	// FSMBIv4i32
    553649141U,	// FSMBIv8i16
    538969084U,	// FSMBv16i8
    538969084U,	// FSMBv16i8_r16
    538969090U,	// FSMHv8i16
    538969090U,	// FSMHv8i16_r16
    538969072U,	// FSMr16
    538969072U,	// FSMr32
    538969072U,	// FSMv4i32
    536871944U,	// FSf32
    536871948U,	// FSf64
    536871948U,	// FSv2f64
    536871944U,	// FSv4f32
    538969105U,	// GBBv16i8
    538969105U,	// GBBv16i8_r16
    538969105U,	// GBBv16i8_r32
    538969110U,	// GBHv8i16
    538969110U,	// GBHv8i16_r16
    538969110U,	// GBHv8i16_r32
    538969115U,	// GBv4i32
    538969115U,	// GBv4i32_r16
    538969115U,	// GBv4i32_r32
    557843487U,	// HEQIr32
    538969125U,	// HEQr32
    557843498U,	// HGTIr32
    538969136U,	// HGTr32
    557843509U,	// HLGTIr32
    538969148U,	// HLGTr32
    562037826U,	// ILAf32
    562037826U,	// ILAf64
    566232130U,	// ILAhi
    570426434U,	// ILAlo
    574620738U,	// ILAlsa
    562037826U,	// ILAr32
    562037826U,	// ILAr64
    562037826U,	// ILAv2i64
    562037826U,	// ILAv4i32
    553649223U,	// ILHUf32
    566232135U,	// ILHUhi
    553649223U,	// ILHUr32
    553649223U,	// ILHUr64
    553649223U,	// ILHUv2i64
    553649223U,	// ILHUv4i32
    578815053U,	// ILHr16
    578815053U,	// ILHr8
    578815053U,	// ILHv8i16
    578815058U,	// ILf32
    578815058U,	// ILf64
    578815058U,	// ILr32
    578815058U,	// ILr64
    578815058U,	// ILv2i64
    578815058U,	// ILv4i32
    551552086U,	// IOHLf32
    583009366U,	// IOHLlo
    551552086U,	// IOHLr32
    587203670U,	// IOHLv2i64
    587203670U,	// IOHLv4i32
    1116U,	// LNOP
    591397986U,	// LQAf32
    591397986U,	// LQAf64
    591397986U,	// LQAr128
    591397986U,	// LQAr16
    591397986U,	// LQAr32
    591397986U,	// LQAr64
    591397986U,	// LQAr8
    591397986U,	// LQAv16i8
    591397986U,	// LQAv2f64
    591397986U,	// LQAv2i32
    591397986U,	// LQAv2i64
    591397986U,	// LQAv4f32
    591397986U,	// LQAv4i32
    591397986U,	// LQAv8i16
    595592295U,	// LQDf32
    595592295U,	// LQDf64
    595592295U,	// LQDr128
    595592295U,	// LQDr16
    595592295U,	// LQDr32
    595592295U,	// LQDr64
    595592295U,	// LQDr8
    595592295U,	// LQDv16i8
    595592295U,	// LQDv2f64
    595592295U,	// LQDv2i32
    595592295U,	// LQDv2i64
    595592295U,	// LQDv4f32
    595592295U,	// LQDv4i32
    595592295U,	// LQDv8i16
    545260652U,	// LQXf32
    545260652U,	// LQXf64
    545260652U,	// LQXr128
    545260652U,	// LQXr16
    545260652U,	// LQXr32
    545260652U,	// LQXr64
    545260652U,	// LQXr8
    545260652U,	// LQXv16i8
    545260652U,	// LQXv2f64
    545260652U,	// LQXv2i32
    545260652U,	// LQXv2i64
    545260652U,	// LQXv4f32
    545260652U,	// LQXv4i32
    545260652U,	// LQXv8i16
    538969201U,	// LRf32
    538969201U,	// LRf64
    538969201U,	// LRr128
    538969201U,	// LRr16
    538969201U,	// LRr32
    538969201U,	// LRr64
    538969201U,	// LRr8
    538969201U,	// LRv16i8
    538969201U,	// LRv2f64
    538969201U,	// LRv2i64
    538969201U,	// LRv4f32
    538969201U,	// LRv4i32
    538969201U,	// LRv8i16
    536937589U,	// MPYAr32
    536937589U,	// MPYAr32_sext
    536937589U,	// MPYAr32_sextinreg
    536937589U,	// MPYAv4i32
    536872059U,	// MPYHHAUr32
    536872059U,	// MPYHHAUvec
    536872068U,	// MPYHHAr32
    536872068U,	// MPYHHAvec
    536872076U,	// MPYHHUr32
    536872076U,	// MPYHHUv4i32
    536872084U,	// MPYHHr32
    536872084U,	// MPYHHv8i16
    536872091U,	// MPYHr32
    536872091U,	// MPYHv4i32
    537003169U,	// MPYIr16
    537003169U,	// MPYIvec
    536872103U,	// MPYSr16
    536872103U,	// MPYSv4i32
    537003181U,	// MPYUIr16
    537003181U,	// MPYUIvec
    536872116U,	// MPYUr16
    536872116U,	// MPYUr32
    536872116U,	// MPYUv4i32
    536872122U,	// MPYr16
    536872122U,	// MPYv8i16
    536872127U,	// NANDr16
    536872127U,	// NANDr32
    536872127U,	// NANDr8
    536872127U,	// NANDv16i8
    536872127U,	// NANDv4i32
    536872127U,	// NANDv8i16
    536872133U,	// NORr16
    536872133U,	// NORr32
    536872133U,	// NORr8
    536872133U,	// NORv16i8
    536872133U,	// NORv4i32
    536872133U,	// NORv8i16
    537134282U,	// ORBIr8
    537134282U,	// ORBIv16i8
    536872144U,	// ORCr16
    536872144U,	// ORCr32
    536872144U,	// ORCr64
    536872144U,	// ORCr8
    536872144U,	// ORCv16i8
    536872144U,	// ORCv2i64
    536872144U,	// ORCv4i32
    536872144U,	// ORCv8i16
    537003221U,	// ORHIi8i16
    537134293U,	// ORHIr16
    537134293U,	// ORHIv8i16
    537003227U,	// ORIi16i32
    537003227U,	// ORIi8i32
    537134299U,	// ORIr32
    537134299U,	// ORIv4i32
    536872160U,	// ORXv4i32
    536872165U,	// ORf32
    537396453U,	// ORf32_r32
    537396453U,	// ORf32_v4f32
    536872165U,	// ORf64
    537396453U,	// ORf64_r64
    537396453U,	// ORf64_v2f64
    537396453U,	// ORi16_v8i16
    537396453U,	// ORi32_v4i32
    537396453U,	// ORi64_v2i64
    537396453U,	// ORi8_v16i8
    536872165U,	// ORr128
    536872165U,	// ORr16
    536872165U,	// ORr32
    537396453U,	// ORr32_f32
    537396453U,	// ORr32_r64
    536872165U,	// ORr64
    537396453U,	// ORr64_f64
    537396453U,	// ORr64_r32
    536872165U,	// ORr8
    536872165U,	// ORv16i8
    537396453U,	// ORv16i8_i8
    536872165U,	// ORv2f64
    537396453U,	// ORv2f64_f64
    536872165U,	// ORv2i64
    537396453U,	// ORv2i64_i64
    536872165U,	// ORv4f32
    537396453U,	// ORv4f32_f32
    536872165U,	// ORv4i32
    537396453U,	// ORv4i32_i32
    536872165U,	// ORv8i16
    537396453U,	// ORv8i16_i16
    1257U,	// RET
    537527537U,	// ROTHIr16
    537527537U,	// ROTHIr16_r32
    537527537U,	// ROTHIv8i16
    537658616U,	// ROTHMIr16
    537658616U,	// ROTHMIv8i16
    536872192U,	// ROTHMr16
    536872192U,	// ROTHMv8i16
    536872199U,	// ROTHr16
    536872199U,	// ROTHr16_r32
    536872199U,	// ROTHv8i16
    537527565U,	// ROTIr32
    537527565U,	// ROTIr32_i16
    537527565U,	// ROTIr32_i8
    537527565U,	// ROTIv4i32
    537527565U,	// ROTIv4i32_i16
    537527565U,	// ROTIv4i32_i8
    537658643U,	// ROTMAHIr16
    537658643U,	// ROTMAHIv8i16
    536872220U,	// ROTMAHr16
    536872220U,	// ROTMAHv8i16
    537789732U,	// ROTMAIr32_i32
    537789732U,	// ROTMAIr64_i32
    537789732U,	// ROTMAIv2i64_i32
    537789732U,	// ROTMAIv4i32_i32
    536872236U,	// ROTMAr32
    536872236U,	// ROTMAv4i32
    537789747U,	// ROTMIr32
    537789747U,	// ROTMIv4i32
    536872250U,	// ROTMr32
    536872250U,	// ROTMv4i32
    537527616U,	// ROTQBIIr128
    537527616U,	// ROTQBIIr64
    537527616U,	// ROTQBIIv16i8
    537527616U,	// ROTQBIIv2i64
    537527616U,	// ROTQBIIv4i32
    537527616U,	// ROTQBIIv8i16
    536872265U,	// ROTQBIr128
    536872265U,	// ROTQBIr64
    536872265U,	// ROTQBIv16i8
    536872265U,	// ROTQBIv2i64
    536872265U,	// ROTQBIv4i32
    536872265U,	// ROTQBIv8i16
    536872273U,	// ROTQBYBIv16i8_r32
    536872273U,	// ROTQBYBIv2i64_r32
    536872273U,	// ROTQBYBIv4i32_r32
    536872273U,	// ROTQBYBIv8i16_r32
    537527643U,	// ROTQBYIv16i8
    537527643U,	// ROTQBYIv2i64
    537527643U,	// ROTQBYIv4f32
    537527643U,	// ROTQBYIv4i32
    537527643U,	// ROTQBYIv8i16
    537527643U,	// ROTQBYIvfi64
    536872292U,	// ROTQBYv16i8
    536872292U,	// ROTQBYv2f64
    536872292U,	// ROTQBYv2i64
    536872292U,	// ROTQBYv4f32
    536872292U,	// ROTQBYv4i32
    536872292U,	// ROTQBYv8i16
    537789804U,	// ROTQMBIIr128
    537789804U,	// ROTQMBIIr64
    537789804U,	// ROTQMBIIv16i8
    537789804U,	// ROTQMBIIv2i64
    537789804U,	// ROTQMBIIv4i32
    537789804U,	// ROTQMBIIv8i16
    536872310U,	// ROTQMBIr128
    536872310U,	// ROTQMBIr64
    536872310U,	// ROTQMBIv16i8
    536872310U,	// ROTQMBIv2i64
    536872310U,	// ROTQMBIv4i32
    536872310U,	// ROTQMBIv8i16
    536872319U,	// ROTQMBYBIv16i8
    536872319U,	// ROTQMBYBIv2i64
    536872319U,	// ROTQMBYBIv4i32
    536872319U,	// ROTQMBYBIv8i16
    537789834U,	// ROTQMBYIr128
    537789834U,	// ROTQMBYIr128_zext_r16
    537789834U,	// ROTQMBYIr128_zext_r32
    537789834U,	// ROTQMBYIr128_zext_r64
    537789834U,	// ROTQMBYIr128_zext_r8
    537789834U,	// ROTQMBYIr64
    537789834U,	// ROTQMBYIv16i8
    537789834U,	// ROTQMBYIv2i64
    537789834U,	// ROTQMBYIv4i32
    537789834U,	// ROTQMBYIv8i16
    536872340U,	// ROTQMBYr128
    536872340U,	// ROTQMBYr64
    536872340U,	// ROTQMBYv16i8
    536872340U,	// ROTQMBYv2i64
    536872340U,	// ROTQMBYv4i32
    536872340U,	// ROTQMBYv8i16
    536872349U,	// ROTr32
    536872349U,	// ROTr32_r16_anyext
    536872349U,	// ROTr32_r8_anyext
    536872349U,	// ROTv4i32
    536937890U,	// SELBf32_cond
    536937890U,	// SELBf64_cond
    536937890U,	// SELBr128
    536937890U,	// SELBr16
    536937890U,	// SELBr16_cond
    536937890U,	// SELBr32
    536937890U,	// SELBr32_cond
    536937890U,	// SELBr64
    536937890U,	// SELBr64_cond
    536937890U,	// SELBr8
    536937890U,	// SELBr8_cond
    536937890U,	// SELBv16i8
    536937890U,	// SELBv16i8_cond
    536937890U,	// SELBv16i8_vcond
    536937890U,	// SELBv2i64
    536937890U,	// SELBv2i64_cond
    536937890U,	// SELBv2i64_vcond
    536937890U,	// SELBv4f32_cond
    536937890U,	// SELBv4i32
    536937890U,	// SELBv4i32_cond
    536937890U,	// SELBv4i32_vcond
    536937890U,	// SELBv8i16
    536937890U,	// SELBv8i16_cond
    536937890U,	// SELBv8i16_vcond
    537003432U,	// SFHIr16
    537003432U,	// SFHIvec
    536872366U,	// SFHr16
    536872366U,	// SFHvec
    537003443U,	// SFIr32
    537003443U,	// SFIvec
    536872376U,	// SFXr32
    536872376U,	// SFXr64
    536872376U,	// SFXv2i64
    536872376U,	// SFXv4i32
    536872381U,	// SFr32
    536872381U,	// SFvec
    537527745U,	// SHLHIr16
    537527745U,	// SHLHIv8i16
    536872392U,	// SHLHr16
    536872392U,	// SHLHr16_r32
    536872392U,	// SHLHv8i16
    537527758U,	// SHLIr32
    537527758U,	// SHLIv4i32
    537527764U,	// SHLQBIIv16i8
    537527764U,	// SHLQBIIv2f64
    537527764U,	// SHLQBIIv2i64
    537527764U,	// SHLQBIIv4f32
    537527764U,	// SHLQBIIv4i32
    537527764U,	// SHLQBIIv8i16
    536872413U,	// SHLQBIr128
    536872413U,	// SHLQBIv16i8
    536872413U,	// SHLQBIv2f64
    536872413U,	// SHLQBIv2i64
    536872413U,	// SHLQBIv4f32
    536872413U,	// SHLQBIv4i32
    536872413U,	// SHLQBIv8i16
    536872421U,	// SHLQBYBIr128
    536872421U,	// SHLQBYBIv16i8
    536872421U,	// SHLQBYBIv2f64
    536872421U,	// SHLQBYBIv2i64
    536872421U,	// SHLQBYBIv4f32
    536872421U,	// SHLQBYBIv4i32
    536872421U,	// SHLQBYBIv8i16
    537527791U,	// SHLQBYIr128
    537527791U,	// SHLQBYIv16i8
    537527791U,	// SHLQBYIv2f64
    537527791U,	// SHLQBYIv2i64
    537527791U,	// SHLQBYIv4f32
    537527791U,	// SHLQBYIv4i32
    537527791U,	// SHLQBYIv8i16
    536872440U,	// SHLQBYr128
    536872440U,	// SHLQBYv16i8
    536872440U,	// SHLQBYv2f64
    536872440U,	// SHLQBYv2i64
    536872440U,	// SHLQBYv4f32
    536872440U,	// SHLQBYv4i32
    536872440U,	// SHLQBYv8i16
    536872448U,	// SHLr32
    536872448U,	// SHLv4i32
    536937989U,	// SHUFBgprc
    536937989U,	// SHUFBv16i8
    536937989U,	// SHUFBv16i8_m32
    536937989U,	// SHUFBv2f64
    536937989U,	// SHUFBv2f64_m32
    536937989U,	// SHUFBv2i64
    536937989U,	// SHUFBv2i64_m32
    536937989U,	// SHUFBv4f32
    536937989U,	// SHUFBv4f32_m32
    536937989U,	// SHUFBv4i32
    536937989U,	// SHUFBv4i32_m32
    536937989U,	// SHUFBv8i16
    536937989U,	// SHUFBv8i16_m32
    591398412U,	// STQAf32
    591398412U,	// STQAf64
    591398412U,	// STQAr128
    591398412U,	// STQAr16
    591398412U,	// STQAr32
    591398412U,	// STQAr64
    591398412U,	// STQAr8
    591398412U,	// STQAv16i8
    591398412U,	// STQAv2f64
    591398412U,	// STQAv2i32
    591398412U,	// STQAv2i64
    591398412U,	// STQAv4f32
    591398412U,	// STQAv4i32
    591398412U,	// STQAv8i16
    595592722U,	// STQDf32
    595592722U,	// STQDf64
    595592722U,	// STQDr128
    595592722U,	// STQDr16
    595592722U,	// STQDr32
    595592722U,	// STQDr64
    595592722U,	// STQDr8
    595592722U,	// STQDv16i8
    595592722U,	// STQDv2f64
    595592722U,	// STQDv2i32
    595592722U,	// STQDv2i64
    595592722U,	// STQDv4f32
    595592722U,	// STQDv4i32
    595592722U,	// STQDv8i16
    545261080U,	// STQXf32
    545261080U,	// STQXf64
    545261080U,	// STQXr128
    545261080U,	// STQXr16
    545261080U,	// STQXr32
    545261080U,	// STQXr64
    545261080U,	// STQXr8
    545261080U,	// STQXv16i8
    545261080U,	// STQXv2f64
    545261080U,	// STQXv2i32
    545261080U,	// STQXv2i64
    545261080U,	// STQXv4f32
    545261080U,	// STQXv4i32
    545261080U,	// STQXv8i16
    536872478U,	// SUMB
    537134628U,	// XORBIr8
    537134628U,	// XORBIv16i8
    537003563U,	// XORHIr16
    537134635U,	// XORHIv8i16
    537003570U,	// XORIr32
    537003570U,	// XORIv4i32
    536872504U,	// XORfneg32
    536872504U,	// XORfneg64
    536872504U,	// XORfnegvec
    536872504U,	// XORr128
    536872504U,	// XORr16
    536872504U,	// XORr32
    536872504U,	// XORr64
    536872504U,	// XORr8
    536872504U,	// XORv16i8
    536872504U,	// XORv2i64
    536872504U,	// XORv4i32
    536872504U,	// XORv8i16
    538969661U,	// XSBHr16
    538969661U,	// XSBHr32
    538969661U,	// XSBHr64
    538969661U,	// XSBHr8
    538969661U,	// XSBHv16i8
    538969667U,	// XSHWr16
    538969667U,	// XSHWr32
    538969667U,	// XSHWr64
    538969667U,	// XSHWv4i32
    538969673U,	// XSWDr64
    538969673U,	// XSWDr64_inreg
    538969673U,	// XSWDv2i64
    0U
  };

  const char *AsmStrs = 
    "\000\000PHINODE\n\000absdb\t\000addx\t\000ahi\t\000ah\t\000ai\t\000andb"
    "i\t\000andc\t\000andhi\t\000andi\t\000and\t\000avgb\t\000a\t\000bgx\t\000"
    "bg\t\000bi\t\000bisl\t$lr, \000bisled\t$lr, \000br\t\000bra\t\000brasl\t"
    "$lr, \000brhnz\t\000brhz\t\000brnz\t\000brsl\t$lr, \000brz\t\000cbd\t\000"
    "cbx\t\000cdd\t\000cdx\t\000ceqbi\t\000ceqb\t\000ceqhi\t\000ceqh\t\000ce"
    "qi\t\000ceq\t\000cflts\t\000cfltu\t\000cgtbi\t\000cgtb\t\000cgthi\t\000"
    "cgth\t\000cgti\t\000cgt\t\000cg\t\000chd\t\000chx\t\000clgtbi\t\000clgt"
    "b\t\000clgthi\t\000clgth\t\000clgti\t\000clgt\t\000clz\t\000cntb\t\000c"
    "sflt\t\000cuflt\t\000cwd\t\000cwx\t\000a \000addx \000ah \000ahi \000ai"
    " \000and\t \000andbi\t \000andc\t \000andhi\t \000andi\t \000bg \000bgx"
    " \000ceq\t \000ceqb\t \000ceqbi\t \000ceqh\t \000ceqhi\t \000ceqi\t \000"
    "cg \000cgt\t \000cgtb\t \000cgtbi\t \000cgth\t \000cgthi\t \000cgti\t \000"
    "cgx \000clgt\t \000clgtb\t \000clgtbi\t \000clgth\t \000clgthi\t \000cl"
    "gti\t \000dfa\t \000dfm\t \000dfma\t \000dfms\t \000dfnma\t \000dfnms\t"
    " \000dfs\t \000fa\t \000fceq\t \000fcgt\t \000fcmeq\t \000fcmgt\t \000f"
    "m\t \000fma\t \000fms\t \000fnms\t \000fs\t \000mpy \000mpya \000mpyh \000"
    "mpyhh \000mpyhha \000mpyhhau \000mpyhhu \000mpyi \000mpys \000mpyu \000"
    "mpyui \000nand\t \000nor\t \000or\t \000orbi\t \000addc\t \000orhi\t \000"
    "ori\t \000sf \000sfh \000sfhi \000sfi \000sfx \000xor\t \000xorbi\t \000"
    "xorhi\t \000xori\t \000.loc \000enop\n\000eqv\t\000fa\t\000dfa\t\000fce"
    "q\t\000fcgt\t\000fcmeq\t\000fcmgt\t\000fesd\t\000fi\t\000fma\t\000dfma\t"
    "\000fms\t\000dfms\t\000fm\t\000dfm\t\000dfnma\t\000fnms\t\000dfnms\t\000"
    "frds\t\000frest\t\000fscrrd\t\000fscrwr\t\000fsm\t\000fsmbi\t\000fsmb\t"
    "\000fsmh\t\000fs\t\000dfs\t\000gbb\t\000gbh\t\000gb\t\000heqi\t\000heq\t"
    "\000hgti\t\000hgt\t\000hlgti\t\000hlgt\t\000ila\t\000ilhu\t\000ilh\t\000"
    "il\t\000iohl\t\000lnop\n\000lqa\t\000lqd\t\000lqx\t\000lr\t\000mpya\t\000"
    "mpyhhau\t\000mpyhha\t\000mpyhhu\t\000mpyhh\t\000mpyh\t\000mpyi\t\000mpy"
    "s\t\000mpyui\t\000mpyu\t\000mpy\t\000nand\t\000nor\t\000orbi\t\000orc\t"
    "\000orhi\t\000ori\t\000orx\t\000or\t\000bi\t$lr\n\000rothi\t\000rothmi\t"
    "\000rothm\t\000roth\t\000roti\t\000rotmahi\t\000rotmah\t\000rotmai\t\000"
    "rotma\t\000rotmi\t\000rotm\t\000rotqbii\t\000rotqbi\t\000rotqbybi\t\000"
    "rotqbyi\t\000rotqby\t\000rotqmbii\t\000rotqmbi\t\000rotqmbybi\t\000rotq"
    "mbyi\t\000rotqmby\t\000rot\t\000selb\t\000sfhi\t\000sfh\t\000sfi\t\000s"
    "fx\t\000sf\t\000shlhi\t\000shlh\t\000shli\t\000shlqbii\t\000shlqbi\t\000"
    "shlqbybi\t\000shlqbyi\t\000shlqby\t\000shl\t\000shufb\t\000stqa\t\000st"
    "qd\t\000stqx\t\000sumb\t\000xorbi\t\000xorhi\t\000xori\t\000xor\t\000xs"
    "bh\t\000xshw\t\000xswd\t\000";

  if (MI->getOpcode() == TargetInstrInfo::INLINEASM) {
    O << "\t";
    printInlineAsm(MI);
    return true;
  } else if (MI->isLabel()) {
    printLabel(MI);
    return true;
  } else if (MI->getOpcode() == TargetInstrInfo::DECLARE) {
    printDeclare(MI);
    return true;
  } else if (MI->getOpcode() == TargetInstrInfo::IMPLICIT_DEF) {
    printImplicitDef(MI);
    return true;
  }

  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  if (Bits == 0) return false;
  O << AsmStrs+(Bits & 2047);


  // Fragment 0 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 29) & 7) {
  default:   // unreachable.
  case 0:
    return true;
    break;
  case 1:
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHIr16, AHIvec, AHr16, ...
    printOperand(MI, 0); 
    break;
  case 2:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP
    PrintSpecial(MI, "comment"); 
    break;
  case 3:
    // BISLED_00, BISLED_0D, BISLED_E0, BISLED_ED, BRASL
    printCallOperand(MI, 0); 
    O << "\n"; 
    return true;
    break;
  case 4:
    // BR, BRA, BRSL
    printPCRelativeOperand(MI, 0); 
    O << "\n"; 
    return true;
    break;
  case 5:
    // DWARF_LOC
    printOperand(MI, 2); 
    O << ", "; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    O << "\n"; 
    return true;
    break;
  case 6:
    // FSCRWf32
    printOperand(MI, 1); 
    O << "\n"; 
    return true;
    break;
  }


  // Fragment 1 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 26) & 7) {
  default:   // unreachable.
  case 0:
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHIr16, AHIvec, AHr16, ...
    O << ", "; 
    break;
  case 1:
    // ADJCALLSTACKDOWN
    O << " ADJCALLSTACKDOWN\n"; 
    return true;
    break;
  case 2:
    // ADJCALLSTACKUP
    O << " ADJCALLSTACKUP\n"; 
    return true;
    break;
  case 3:
    // BI, BISL, FSCRRf32
    O << "\n"; 
    return true;
    break;
  case 4:
    // BRHNZr16, BRHNZv8i16, BRHZr16, BRHZv8i16, BRNZr32, BRNZv4i32, BRZr32, ...
    O << ","; 
    printPCRelativeOperand(MI, 1); 
    O << "\n"; 
    return true;
    break;
  }


  // Fragment 2 encoded into 4 bits for 15 unique commands.
  switch ((Bits >> 22) & 15) {
  default:   // unreachable.
  case 0:
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHIr16, AHIvec, AHr16, ...
    printOperand(MI, 1); 
    break;
  case 1:
    // CBD, CDD, CDDf64, CHD, CWD, CWDf32
    printShufAddr(MI, 1); 
    O << "\n"; 
    return true;
    break;
  case 2:
    // CBX, CDX, CDXf64, CHX, CWX, CWXf32, LQXf32, LQXf64, LQXr128, LQXr16, L...
    printMemRegReg(MI, 1); 
    O << "\n"; 
    return true;
    break;
  case 3:
    // CellSDKahi, CellSDKai, CellSDKsfhi, CellSDKsfi, IOHLf32, IOHLr32
    printOperand(MI, 2); 
    break;
  case 4:
    // FSMBIv16i8, FSMBIv2i64, FSMBIv4i32, FSMBIv8i16, ILHUf32, ILHUr32, ILHU...
    printU16ImmOperand(MI, 1); 
    O << "\n"; 
    return true;
    break;
  case 5:
    // HEQIr32, HGTIr32, HLGTIr32
    printS10ImmOperand(MI, 1); 
    O << "\n"; 
    return true;
    break;
  case 6:
    // ILAf32, ILAf64, ILAr32, ILAr64, ILAv2i64, ILAv4i32
    printU18ImmOperand(MI, 1); 
    O << "\n"; 
    return true;
    break;
  case 7:
    // ILAhi, ILHUhi
    printSymbolHi(MI, 1); 
    O << "\n"; 
    return true;
    break;
  case 8:
    // ILAlo
    printSymbolLo(MI, 1); 
    O << "\n"; 
    return true;
    break;
  case 9:
    // ILAlsa
    printSymbolLSA(MI, 1); 
    O << "\n"; 
    return true;
    break;
  case 10:
    // ILHr16, ILHr8, ILHv8i16, ILf32, ILf64, ILr32, ILr64, ILv2i64, ILv4i32
    printS16ImmOperand(MI, 1); 
    O << "\n"; 
    return true;
    break;
  case 11:
    // IOHLlo
    printSymbolLo(MI, 2); 
    O << "\n"; 
    return true;
    break;
  case 12:
    // IOHLv2i64, IOHLv4i32
    printU16ImmOperand(MI, 2); 
    O << "\n"; 
    return true;
    break;
  case 13:
    // LQAf32, LQAf64, LQAr128, LQAr16, LQAr32, LQAr64, LQAr8, LQAv16i8, LQAv...
    printAddr256K(MI, 1); 
    O << "\n"; 
    return true;
    break;
  case 14:
    // LQDf32, LQDf64, LQDr128, LQDr16, LQDr32, LQDr64, LQDr8, LQDv16i8, LQDv...
    printDFormAddr(MI, 1); 
    O << "\n"; 
    return true;
    break;
  }


  // Fragment 3 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 20) & 3) {
  default:   // unreachable.
  case 0:
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHIr16, AHIvec, AHr16, ...
    O << ", "; 
    break;
  case 1:
    // CFSif32, CFSiv4f32, CFUif32, CFUiv4f32, CSiFf32, CSiFv4f32, CUiFf32, C...
    O << ", 0\n"; 
    return true;
    break;
  case 2:
    // CLZr32, CLZv4i32, CNTBv16i8, CNTBv4i32, CNTBv8i16, FESDf32, FESDvec, F...
    O << "\n"; 
    return true;
    break;
  }


  // Fragment 4 encoded into 3 bits for 8 unique commands.
  switch ((Bits >> 17) & 7) {
  default:   // unreachable.
  case 0:
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHr16, AHv8i16, ANDCr12...
    printOperand(MI, 2); 
    break;
  case 1:
    // AHIr16, AHIvec, AIf32, AIr32, AIv4f32, AIv4i32, ANDHIv8i16, ANDIi16i32...
    printS10ImmOperand(MI, 2); 
    O << "\n"; 
    return true;
    break;
  case 2:
    // ANDBIr8, ANDBIv16i8, ANDHIi8i16, ANDHIr16, CellSDKandbi, CellSDKceqbi,...
    printU10ImmOperand(MI, 2); 
    O << "\n"; 
    return true;
    break;
  case 3:
    // CellSDKahi, CellSDKai, CellSDKsfhi, CellSDKsfi
    printS10ImmOperand(MI, 1); 
    O << "\n"; 
    return true;
    break;
  case 4:
    // ORf32_r32, ORf32_v4f32, ORf64_r64, ORf64_v2f64, ORi16_v8i16, ORi32_v4i...
    printOperand(MI, 1); 
    O << "\n"; 
    return true;
    break;
  case 5:
    // ROTHIr16, ROTHIr16_r32, ROTHIv8i16, ROTIr32, ROTIr32_i16, ROTIr32_i8, ...
    printU7ImmOperand(MI, 2); 
    O << "\n"; 
    return true;
    break;
  case 6:
    // ROTHMIr16, ROTHMIv8i16, ROTMAHIr16, ROTMAHIv8i16
    printROTHNeg7Imm(MI, 2); 
    O << "\n"; 
    return true;
    break;
  case 7:
    // ROTMAIr32_i32, ROTMAIr64_i32, ROTMAIv2i64_i32, ROTMAIv4i32_i32, ROTMIr...
    printROTNeg7Imm(MI, 2); 
    O << "\n"; 
    return true;
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 16) & 1) {
    // CellSDKfma, CellSDKfms, CellSDKfnms, CellSDKmpya, FMAf32, FMAv4f32, FM...
    O << ", "; 
    printOperand(MI, 3); 
    O << "\n"; 
    return true;
  } else {
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHr16, AHv8i16, ANDCr12...
    O << "\n"; 
    return true;
  }

}
