//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Register Information Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

namespace llvm {

namespace {     // Register classes...
  // CCR Register Class...
  static const unsigned CCR[] = {
    X86::EFLAGS, 
  };

  // FR32 Register Class...
  static const unsigned FR32[] = {
    X86::XMM0, X86::XMM1, X86::XMM2, X86::XMM3, X86::XMM4, X86::XMM5, X86::XMM6, X86::XMM7, X86::XMM8, X86::XMM9, X86::XMM10, X86::XMM11, X86::XMM12, X86::XMM13, X86::XMM14, X86::XMM15, 
  };

  // FR64 Register Class...
  static const unsigned FR64[] = {
    X86::XMM0, X86::XMM1, X86::XMM2, X86::XMM3, X86::XMM4, X86::XMM5, X86::XMM6, X86::XMM7, X86::XMM8, X86::XMM9, X86::XMM10, X86::XMM11, X86::XMM12, X86::XMM13, X86::XMM14, X86::XMM15, 
  };

  // GR16 Register Class...
  static const unsigned GR16[] = {
    X86::AX, X86::CX, X86::DX, X86::SI, X86::DI, X86::BX, X86::BP, X86::SP, X86::R8W, X86::R9W, X86::R10W, X86::R11W, X86::R14W, X86::R15W, X86::R12W, X86::R13W, 
  };

  // GR16_ Register Class...
  static const unsigned GR16_[] = {
    X86::AX, X86::CX, X86::DX, X86::BX, 
  };

  // GR32 Register Class...
  static const unsigned GR32[] = {
    X86::EAX, X86::ECX, X86::EDX, X86::ESI, X86::EDI, X86::EBX, X86::EBP, X86::ESP, X86::R8D, X86::R9D, X86::R10D, X86::R11D, X86::R14D, X86::R15D, X86::R12D, X86::R13D, 
  };

  // GR32_ Register Class...
  static const unsigned GR32_[] = {
    X86::EAX, X86::ECX, X86::EDX, X86::EBX, 
  };

  // GR64 Register Class...
  static const unsigned GR64[] = {
    X86::RAX, X86::RCX, X86::RDX, X86::RSI, X86::RDI, X86::R8, X86::R9, X86::R10, X86::R11, X86::RBX, X86::R14, X86::R15, X86::R12, X86::R13, X86::RBP, X86::RSP, 
  };

  // GR8 Register Class...
  static const unsigned GR8[] = {
    X86::AL, X86::CL, X86::DL, X86::BL, X86::AH, X86::CH, X86::DH, X86::BH, X86::SIL, X86::DIL, X86::BPL, X86::SPL, X86::R8B, X86::R9B, X86::R10B, X86::R11B, X86::R14B, X86::R15B, X86::R12B, X86::R13B, 
  };

  // GRAD Register Class...
  static const unsigned GRAD[] = {
    X86::EAX, X86::EDX, 
  };

  // RFP32 Register Class...
  static const unsigned RFP32[] = {
    X86::FP0, X86::FP1, X86::FP2, X86::FP3, X86::FP4, X86::FP5, X86::FP6, 
  };

  // RFP64 Register Class...
  static const unsigned RFP64[] = {
    X86::FP0, X86::FP1, X86::FP2, X86::FP3, X86::FP4, X86::FP5, X86::FP6, 
  };

  // RFP80 Register Class...
  static const unsigned RFP80[] = {
    X86::FP0, X86::FP1, X86::FP2, X86::FP3, X86::FP4, X86::FP5, X86::FP6, 
  };

  // RST Register Class...
  static const unsigned RST[] = {
    X86::ST0, X86::ST1, X86::ST2, X86::ST3, X86::ST4, X86::ST5, X86::ST6, X86::ST7, 
  };

  // VR128 Register Class...
  static const unsigned VR128[] = {
    X86::XMM0, X86::XMM1, X86::XMM2, X86::XMM3, X86::XMM4, X86::XMM5, X86::XMM6, X86::XMM7, X86::XMM8, X86::XMM9, X86::XMM10, X86::XMM11, X86::XMM12, X86::XMM13, X86::XMM14, X86::XMM15, 
  };

  // VR64 Register Class...
  static const unsigned VR64[] = {
    X86::MM0, X86::MM1, X86::MM2, X86::MM3, X86::MM4, X86::MM5, X86::MM6, X86::MM7, 
  };

  // CCRVTs Register Class Value Types...
  static const MVT CCRVTs[] = {
    MVT::i32, MVT::Other
  };

  // FR32VTs Register Class Value Types...
  static const MVT FR32VTs[] = {
    MVT::f32, MVT::Other
  };

  // FR64VTs Register Class Value Types...
  static const MVT FR64VTs[] = {
    MVT::f64, MVT::Other
  };

  // GR16VTs Register Class Value Types...
  static const MVT GR16VTs[] = {
    MVT::i16, MVT::Other
  };

  // GR16_VTs Register Class Value Types...
  static const MVT GR16_VTs[] = {
    MVT::i16, MVT::Other
  };

  // GR32VTs Register Class Value Types...
  static const MVT GR32VTs[] = {
    MVT::i32, MVT::Other
  };

  // GR32_VTs Register Class Value Types...
  static const MVT GR32_VTs[] = {
    MVT::i32, MVT::Other
  };

  // GR64VTs Register Class Value Types...
  static const MVT GR64VTs[] = {
    MVT::i64, MVT::Other
  };

  // GR8VTs Register Class Value Types...
  static const MVT GR8VTs[] = {
    MVT::i8, MVT::Other
  };

  // GRADVTs Register Class Value Types...
  static const MVT GRADVTs[] = {
    MVT::i32, MVT::Other
  };

  // RFP32VTs Register Class Value Types...
  static const MVT RFP32VTs[] = {
    MVT::f32, MVT::Other
  };

  // RFP64VTs Register Class Value Types...
  static const MVT RFP64VTs[] = {
    MVT::f64, MVT::Other
  };

  // RFP80VTs Register Class Value Types...
  static const MVT RFP80VTs[] = {
    MVT::f80, MVT::Other
  };

  // RSTVTs Register Class Value Types...
  static const MVT RSTVTs[] = {
    MVT::f80, MVT::f64, MVT::f32, MVT::Other
  };

  // VR128VTs Register Class Value Types...
  static const MVT VR128VTs[] = {
    MVT::v16i8, MVT::v8i16, MVT::v4i32, MVT::v2i64, MVT::v4f32, MVT::v2f64, MVT::Other
  };

  // VR64VTs Register Class Value Types...
  static const MVT VR64VTs[] = {
    MVT::v8i8, MVT::v4i16, MVT::v2i32, MVT::v1i64, MVT::v2f32, MVT::Other
  };

}  // end anonymous namespace

namespace X86 {   // Register class instances
  CCRClass	CCRRegClass;
  FR32Class	FR32RegClass;
  FR64Class	FR64RegClass;
  GR16Class	GR16RegClass;
  GR16_Class	GR16_RegClass;
  GR32Class	GR32RegClass;
  GR32_Class	GR32_RegClass;
  GR64Class	GR64RegClass;
  GR8Class	GR8RegClass;
  GRADClass	GRADRegClass;
  RFP32Class	RFP32RegClass;
  RFP64Class	RFP64RegClass;
  RFP80Class	RFP80RegClass;
  RSTClass	RSTRegClass;
  VR128Class	VR128RegClass;
  VR64Class	VR64RegClass;

  // CCR Register Class sub-classes...
  static const TargetRegisterClass* const CCRSubclasses [] = {
    NULL
  };

  // FR32 Register Class sub-classes...
  static const TargetRegisterClass* const FR32Subclasses [] = {
    NULL
  };

  // FR64 Register Class sub-classes...
  static const TargetRegisterClass* const FR64Subclasses [] = {
    NULL
  };

  // GR16 Register Class sub-classes...
  static const TargetRegisterClass* const GR16Subclasses [] = {
    &X86::GR16_RegClass, NULL
  };

  // GR16_ Register Class sub-classes...
  static const TargetRegisterClass* const GR16_Subclasses [] = {
    NULL
  };

  // GR32 Register Class sub-classes...
  static const TargetRegisterClass* const GR32Subclasses [] = {
    &X86::GR32_RegClass, &X86::GRADRegClass, NULL
  };

  // GR32_ Register Class sub-classes...
  static const TargetRegisterClass* const GR32_Subclasses [] = {
    &X86::GRADRegClass, NULL
  };

  // GR64 Register Class sub-classes...
  static const TargetRegisterClass* const GR64Subclasses [] = {
    NULL
  };

  // GR8 Register Class sub-classes...
  static const TargetRegisterClass* const GR8Subclasses [] = {
    NULL
  };

  // GRAD Register Class sub-classes...
  static const TargetRegisterClass* const GRADSubclasses [] = {
    NULL
  };

  // RFP32 Register Class sub-classes...
  static const TargetRegisterClass* const RFP32Subclasses [] = {
    NULL
  };

  // RFP64 Register Class sub-classes...
  static const TargetRegisterClass* const RFP64Subclasses [] = {
    NULL
  };

  // RFP80 Register Class sub-classes...
  static const TargetRegisterClass* const RFP80Subclasses [] = {
    NULL
  };

  // RST Register Class sub-classes...
  static const TargetRegisterClass* const RSTSubclasses [] = {
    NULL
  };

  // VR128 Register Class sub-classes...
  static const TargetRegisterClass* const VR128Subclasses [] = {
    NULL
  };

  // VR64 Register Class sub-classes...
  static const TargetRegisterClass* const VR64Subclasses [] = {
    NULL
  };

  // CCR Register Class super-classes...
  static const TargetRegisterClass* const CCRSuperclasses [] = {
    NULL
  };

  // FR32 Register Class super-classes...
  static const TargetRegisterClass* const FR32Superclasses [] = {
    NULL
  };

  // FR64 Register Class super-classes...
  static const TargetRegisterClass* const FR64Superclasses [] = {
    NULL
  };

  // GR16 Register Class super-classes...
  static const TargetRegisterClass* const GR16Superclasses [] = {
    NULL
  };

  // GR16_ Register Class super-classes...
  static const TargetRegisterClass* const GR16_Superclasses [] = {
    &X86::GR16RegClass, NULL
  };

  // GR32 Register Class super-classes...
  static const TargetRegisterClass* const GR32Superclasses [] = {
    NULL
  };

  // GR32_ Register Class super-classes...
  static const TargetRegisterClass* const GR32_Superclasses [] = {
    &X86::GR32RegClass, NULL
  };

  // GR64 Register Class super-classes...
  static const TargetRegisterClass* const GR64Superclasses [] = {
    NULL
  };

  // GR8 Register Class super-classes...
  static const TargetRegisterClass* const GR8Superclasses [] = {
    NULL
  };

  // GRAD Register Class super-classes...
  static const TargetRegisterClass* const GRADSuperclasses [] = {
    &X86::GR32RegClass, &X86::GR32_RegClass, NULL
  };

  // RFP32 Register Class super-classes...
  static const TargetRegisterClass* const RFP32Superclasses [] = {
    NULL
  };

  // RFP64 Register Class super-classes...
  static const TargetRegisterClass* const RFP64Superclasses [] = {
    NULL
  };

  // RFP80 Register Class super-classes...
  static const TargetRegisterClass* const RFP80Superclasses [] = {
    NULL
  };

  // RST Register Class super-classes...
  static const TargetRegisterClass* const RSTSuperclasses [] = {
    NULL
  };

  // VR128 Register Class super-classes...
  static const TargetRegisterClass* const VR128Superclasses [] = {
    NULL
  };

  // VR64 Register Class super-classes...
  static const TargetRegisterClass* const VR64Superclasses [] = {
    NULL
  };


CCRClass::CCRClass()  : TargetRegisterClass(CCRRegClassID, CCRVTs, CCRSubclasses, CCRSuperclasses, 4, 4, -1, CCR, CCR + 1) {}

    FR32Class::iterator
    FR32Class::allocation_order_end(const MachineFunction &MF) const {
      const TargetMachine &TM = MF.getTarget();
      const X86Subtarget &Subtarget = TM.getSubtarget<X86Subtarget>();
      if (!Subtarget.is64Bit())
        return end()-8; // Only XMM0 to XMM7 are available in 32-bit mode.
      else
        return end();
    }
  
FR32Class::FR32Class()  : TargetRegisterClass(FR32RegClassID, FR32VTs, FR32Subclasses, FR32Superclasses, 4, 4, 1, FR32, FR32 + 16) {}

    FR64Class::iterator
    FR64Class::allocation_order_end(const MachineFunction &MF) const {
      const TargetMachine &TM = MF.getTarget();
      const X86Subtarget &Subtarget = TM.getSubtarget<X86Subtarget>();
      if (!Subtarget.is64Bit())
        return end()-8; // Only XMM0 to XMM7 are available in 32-bit mode.
      else
        return end();
    }
  
FR64Class::FR64Class()  : TargetRegisterClass(FR64RegClassID, FR64VTs, FR64Subclasses, FR64Superclasses, 8, 8, 1, FR64, FR64 + 16) {}

    // Does the function dedicate RBP / EBP to being a frame ptr?
    // If so, don't allocate SP or BP.
    static const unsigned X86_GR16_AO_64_fp[] = {
      X86::AX,  X86::CX,   X86::DX,   X86::SI,   X86::DI,
      X86::R8W, X86::R9W,  X86::R10W, X86::R11W,
      X86::BX, X86::R14W, X86::R15W,  X86::R12W, X86::R13W
    };
    static const unsigned X86_GR16_AO_32_fp[] = {
      X86::AX, X86::CX, X86::DX, X86::SI, X86::DI, X86::BX
    };
    // If not, just don't allocate SPL.
    static const unsigned X86_GR16_AO_64[] = {
      X86::AX,  X86::CX,   X86::DX,   X86::SI,   X86::DI,
      X86::R8W, X86::R9W,  X86::R10W, X86::R11W,
      X86::BX, X86::R14W, X86::R15W,  X86::R12W, X86::R13W, X86::BP
    };
    static const unsigned X86_GR16_AO_32[] = {
      X86::AX, X86::CX, X86::DX, X86::SI, X86::DI, X86::BX, X86::BP
    };

    GR16Class::iterator
    GR16Class::allocation_order_begin(const MachineFunction &MF) const {
      const TargetMachine &TM = MF.getTarget();
      const TargetRegisterInfo *RI = TM.getRegisterInfo();
      const X86Subtarget &Subtarget = TM.getSubtarget<X86Subtarget>();
      if (Subtarget.is64Bit()) {
        if (RI->hasFP(MF))
          return X86_GR16_AO_64_fp;
        else
          return X86_GR16_AO_64;
      } else {
        if (RI->hasFP(MF))
          return X86_GR16_AO_32_fp;
        else
          return X86_GR16_AO_32;
      }
    }

    GR16Class::iterator
    GR16Class::allocation_order_end(const MachineFunction &MF) const {
      const TargetMachine &TM = MF.getTarget();
      const TargetRegisterInfo *RI = TM.getRegisterInfo();
      const X86Subtarget &Subtarget = TM.getSubtarget<X86Subtarget>();
      if (Subtarget.is64Bit()) {
        if (RI->hasFP(MF))
          return X86_GR16_AO_64_fp+(sizeof(X86_GR16_AO_64_fp)/sizeof(unsigned));
        else
          return X86_GR16_AO_64 + (sizeof(X86_GR16_AO_64) / sizeof(unsigned));
      } else {
        if (RI->hasFP(MF))
          return X86_GR16_AO_32_fp+(sizeof(X86_GR16_AO_32_fp)/sizeof(unsigned));
        else
          return X86_GR16_AO_32 + (sizeof(X86_GR16_AO_32) / sizeof(unsigned));
      }
    }
  
GR16Class::GR16Class()  : TargetRegisterClass(GR16RegClassID, GR16VTs, GR16Subclasses, GR16Superclasses, 2, 2, 1, GR16, GR16 + 16) {}

GR16_Class::GR16_Class()  : TargetRegisterClass(GR16_RegClassID, GR16_VTs, GR16_Subclasses, GR16_Superclasses, 2, 2, 1, GR16_, GR16_ + 4) {}

    // Does the function dedicate RBP / EBP to being a frame ptr?
    // If so, don't allocate ESP or EBP.
    static const unsigned X86_GR32_AO_64_fp[] = {
      X86::EAX, X86::ECX,  X86::EDX,  X86::ESI,  X86::EDI,
      X86::R8D, X86::R9D,  X86::R10D, X86::R11D,
      X86::EBX, X86::R14D, X86::R15D, X86::R12D, X86::R13D
    };
    static const unsigned X86_GR32_AO_32_fp[] = {
      X86::EAX, X86::ECX, X86::EDX, X86::ESI, X86::EDI, X86::EBX
    };
    // If not, just don't allocate SPL.
    static const unsigned X86_GR32_AO_64[] = {
      X86::EAX, X86::ECX,  X86::EDX,  X86::ESI,  X86::EDI,
      X86::R8D, X86::R9D,  X86::R10D, X86::R11D,
      X86::EBX, X86::R14D, X86::R15D, X86::R12D, X86::R13D, X86::EBP
    };
    static const unsigned X86_GR32_AO_32[] = {
      X86::EAX, X86::ECX, X86::EDX, X86::ESI, X86::EDI, X86::EBX, X86::EBP
    };

    GR32Class::iterator
    GR32Class::allocation_order_begin(const MachineFunction &MF) const {
      const TargetMachine &TM = MF.getTarget();
      const TargetRegisterInfo *RI = TM.getRegisterInfo();
      const X86Subtarget &Subtarget = TM.getSubtarget<X86Subtarget>();
      if (Subtarget.is64Bit()) {
        if (RI->hasFP(MF))
          return X86_GR32_AO_64_fp;
        else
          return X86_GR32_AO_64;
      } else {
        if (RI->hasFP(MF))
          return X86_GR32_AO_32_fp;
        else
          return X86_GR32_AO_32;
      }
    }

    GR32Class::iterator
    GR32Class::allocation_order_end(const MachineFunction &MF) const {
      const TargetMachine &TM = MF.getTarget();
      const TargetRegisterInfo *RI = TM.getRegisterInfo();
      const X86Subtarget &Subtarget = TM.getSubtarget<X86Subtarget>();
      if (Subtarget.is64Bit()) {
        if (RI->hasFP(MF))
          return X86_GR32_AO_64_fp+(sizeof(X86_GR32_AO_64_fp)/sizeof(unsigned));
        else
          return X86_GR32_AO_64 + (sizeof(X86_GR32_AO_64) / sizeof(unsigned));
      } else {
        if (RI->hasFP(MF))
          return X86_GR32_AO_32_fp+(sizeof(X86_GR32_AO_32_fp)/sizeof(unsigned));
        else
          return X86_GR32_AO_32 + (sizeof(X86_GR32_AO_32) / sizeof(unsigned));
      }
    }
  
GR32Class::GR32Class()  : TargetRegisterClass(GR32RegClassID, GR32VTs, GR32Subclasses, GR32Superclasses, 4, 4, 1, GR32, GR32 + 16) {}

GR32_Class::GR32_Class()  : TargetRegisterClass(GR32_RegClassID, GR32_VTs, GR32_Subclasses, GR32_Superclasses, 4, 4, 1, GR32_, GR32_ + 4) {}

    GR64Class::iterator
    GR64Class::allocation_order_end(const MachineFunction &MF) const {
      const TargetMachine &TM = MF.getTarget();
      const TargetRegisterInfo *RI = TM.getRegisterInfo();
      const X86Subtarget &Subtarget = TM.getSubtarget<X86Subtarget>();
      if (!Subtarget.is64Bit())
        return begin();  // None of these are allocatable in 32-bit.
      if (RI->hasFP(MF)) // Does the function dedicate RBP to being a frame ptr?
        return end()-2;  // If so, don't allocate RSP or RBP
      else
        return end()-1;  // If not, just don't allocate RSP
    }
  
GR64Class::GR64Class()  : TargetRegisterClass(GR64RegClassID, GR64VTs, GR64Subclasses, GR64Superclasses, 8, 8, 1, GR64, GR64 + 16) {}

    // Does the function dedicate RBP / EBP to being a frame ptr?
    // If so, don't allocate SPL or BPL.
    static const unsigned X86_GR8_AO_64_fp[] = {
      X86::AL,   X86::CL,   X86::DL,   X86::SIL, X86::DIL,
      X86::R8B,  X86::R9B,  X86::R10B, X86::R11B,
      X86::BL,   X86::R14B, X86::R15B, X86::R12B, X86::R13B
    };
    // If not, just don't allocate SPL.
    static const unsigned X86_GR8_AO_64[] = {
      X86::AL,   X86::CL,   X86::DL,   X86::SIL, X86::DIL,
      X86::R8B,  X86::R9B,  X86::R10B, X86::R11B,
      X86::BL,   X86::R14B, X86::R15B, X86::R12B, X86::R13B, X86::BPL
    };
    // In 32-mode, none of the 8-bit registers aliases EBP or ESP.
    static const unsigned X86_GR8_AO_32[] = {
      X86::AL, X86::CL, X86::DL, X86::AH, X86::CH, X86::DH, X86::BL, X86::BH
    };

    GR8Class::iterator
    GR8Class::allocation_order_begin(const MachineFunction &MF) const {
      const TargetMachine &TM = MF.getTarget();
      const TargetRegisterInfo *RI = TM.getRegisterInfo();
      const X86Subtarget &Subtarget = TM.getSubtarget<X86Subtarget>();
      if (!Subtarget.is64Bit())
        return X86_GR8_AO_32;
      else if (RI->hasFP(MF))
        return X86_GR8_AO_64_fp;
      else
        return X86_GR8_AO_64;
    }

    GR8Class::iterator
    GR8Class::allocation_order_end(const MachineFunction &MF) const {
      const TargetMachine &TM = MF.getTarget();
      const TargetRegisterInfo *RI = TM.getRegisterInfo();
      const X86Subtarget &Subtarget = TM.getSubtarget<X86Subtarget>();
      if (!Subtarget.is64Bit())
        return X86_GR8_AO_32 + (sizeof(X86_GR8_AO_32) / sizeof(unsigned));
      else if (RI->hasFP(MF))
        return X86_GR8_AO_64_fp + (sizeof(X86_GR8_AO_64_fp) / sizeof(unsigned));
      else
        return X86_GR8_AO_64 + (sizeof(X86_GR8_AO_64) / sizeof(unsigned));
    }
  
GR8Class::GR8Class()  : TargetRegisterClass(GR8RegClassID, GR8VTs, GR8Subclasses, GR8Superclasses, 1, 1, 1, GR8, GR8 + 20) {}

GRADClass::GRADClass()  : TargetRegisterClass(GRADRegClassID, GRADVTs, GRADSubclasses, GRADSuperclasses, 4, 4, 1, GRAD, GRAD + 2) {}

RFP32Class::RFP32Class()  : TargetRegisterClass(RFP32RegClassID, RFP32VTs, RFP32Subclasses, RFP32Superclasses, 4, 4, 1, RFP32, RFP32 + 7) {}

RFP64Class::RFP64Class()  : TargetRegisterClass(RFP64RegClassID, RFP64VTs, RFP64Subclasses, RFP64Superclasses, 8, 4, 1, RFP64, RFP64 + 7) {}

RFP80Class::RFP80Class()  : TargetRegisterClass(RFP80RegClassID, RFP80VTs, RFP80Subclasses, RFP80Superclasses, 10, 4, 1, RFP80, RFP80 + 7) {}

    RSTClass::iterator
    RSTClass::allocation_order_end(const MachineFunction &MF) const {
      return begin();
    }
  
RSTClass::RSTClass()  : TargetRegisterClass(RSTRegClassID, RSTVTs, RSTSubclasses, RSTSuperclasses, 10, 4, 1, RST, RST + 8) {}

    VR128Class::iterator
    VR128Class::allocation_order_end(const MachineFunction &MF) const {
      const TargetMachine &TM = MF.getTarget();
      const X86Subtarget &Subtarget = TM.getSubtarget<X86Subtarget>();
      if (!Subtarget.is64Bit())
        return end()-8; // Only XMM0 to XMM7 are available in 32-bit mode.
      else
        return end();
    }
  
VR128Class::VR128Class()  : TargetRegisterClass(VR128RegClassID, VR128VTs, VR128Subclasses, VR128Superclasses, 16, 16, 1, VR128, VR128 + 16) {}

VR64Class::VR64Class()  : TargetRegisterClass(VR64RegClassID, VR64VTs, VR64Subclasses, VR64Superclasses, 8, 8, 1, VR64, VR64 + 8) {}
}

namespace {
  const TargetRegisterClass* const RegisterClasses[] = {
    &X86::CCRRegClass,
    &X86::FR32RegClass,
    &X86::FR64RegClass,
    &X86::GR16RegClass,
    &X86::GR16_RegClass,
    &X86::GR32RegClass,
    &X86::GR32_RegClass,
    &X86::GR64RegClass,
    &X86::GR8RegClass,
    &X86::GRADRegClass,
    &X86::RFP32RegClass,
    &X86::RFP64RegClass,
    &X86::RFP80RegClass,
    &X86::RSTRegClass,
    &X86::VR128RegClass,
    &X86::VR64RegClass,
  };


  // Number of hash collisions: 10
  const unsigned SubregHashTable[] = { X86::NoRegister, X86::NoRegister, 
                                       X86::R12, X86::R12W, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::R12D, X86::R12W, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::RDX, X86::DH, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::DI, X86::DIL, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::RSP, X86::ESP, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::R8, X86::R8B, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::R8D, X86::R8B, 
                                       X86::R8W, X86::R8B, 
                                       X86::EDI, X86::DIL, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::AX, X86::AH, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::RDI, X86::DI, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::EAX, X86::AH, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::DX, X86::DL, 
                                       X86::R8, X86::R8D, 
                                       X86::ESI, X86::SI, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::EDX, X86::DL, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::AX, X86::AL, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::R13, X86::R13B, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::R13D, X86::R13B, 
                                       X86::R13W, X86::R13B, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::RDI, X86::DIL, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::EAX, X86::AL, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::R8, X86::R8W, 
                                       X86::ESI, X86::SIL, 
                                       X86::R8D, X86::R8W, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::EDX, X86::DX, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::RAX, X86::AH, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::R13, X86::R13D, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::RSI, X86::SI, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::RDX, X86::DL, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::EAX, X86::AX, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::R10, X86::R10B, 
                                       X86::ESP, X86::SP, 
                                       X86::R10D, X86::R10B, 
                                       X86::R10W, X86::R10B, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::RAX, X86::AL, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::R13, X86::R13W, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::R13D, X86::R13W, 
                                       X86::BX, X86::BH, 
                                       X86::RSI, X86::SIL, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::SI, X86::SIL, 
                                       X86::RDX, X86::DX, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::EBX, X86::BH, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::R10, X86::R10D, 
                                       X86::ESP, X86::SPL, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::R9, X86::R9B, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::R9D, X86::R9B, 
                                       X86::R9W, X86::R9B, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::RAX, X86::AX, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::RAX, X86::EAX, 
                                       X86::BX, X86::BL, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::RSP, X86::SP, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::EBX, X86::BL, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::R10, X86::R10W, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::R10D, X86::R10W, 
                                       X86::R9, X86::R9D, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::RBX, X86::BH, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::RBP, X86::EBP, 
                                       X86::R14, X86::R14B, 
                                       X86::RSP, X86::SPL, 
                                       X86::R14D, X86::R14B, 
                                       X86::R14W, X86::R14B, 
                                       X86::SP, X86::SPL, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::EBP, X86::BP, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::R9, X86::R9W, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::R9D, X86::R9W, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::EIP, X86::IP, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::RBX, X86::BL, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::BP, X86::BPL, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::R14, X86::R14D, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::RBX, X86::EBX, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::EBP, X86::BPL, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::R11, X86::R11B, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::R11D, X86::R11B, 
                                       X86::R11W, X86::R11B, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::RBP, X86::BP, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::R14, X86::R14W, 
                                       X86::RCX, X86::ECX, 
                                       X86::R14D, X86::R14W, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::EBX, X86::BX, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::RIP, X86::IP, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::R11, X86::R11D, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::RBP, X86::BPL, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::CX, X86::CH, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::RDI, X86::EDI, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::ECX, X86::CH, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::R11, X86::R11W, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::R11D, X86::R11W, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::RBX, X86::BX, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::CX, X86::CL, 
                                       X86::RDX, X86::EDX, 
                                       X86::R15, X86::R15B, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::R15D, X86::R15B, 
                                       X86::R15W, X86::R15B, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::ECX, X86::CL, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::RCX, X86::CH, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::R15, X86::R15D, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::ECX, X86::CX, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::R12, X86::R12B, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::R12D, X86::R12B, 
                                       X86::R12W, X86::R12B, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::RCX, X86::CL, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::R15, X86::R15W, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::R15D, X86::R15W, 
                                       X86::DX, X86::DH, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::RIP, X86::EIP, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::EDX, X86::DH, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::R12, X86::R12D, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::RCX, X86::CX, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::RSI, X86::ESI, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::EDI, X86::DI, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
                                       X86::NoRegister, X86::NoRegister, 
X86::NoRegister, X86::NoRegister };
  const unsigned SubregHashTableSize = 512;


  // Register Alias Sets...
  const unsigned Empty_AliasSet[] = { 0 };
  const unsigned AH_AliasSet[] = { X86::AX, X86::EAX, X86::RAX, 0 };
  const unsigned AL_AliasSet[] = { X86::AX, X86::EAX, X86::RAX, 0 };
  const unsigned AX_AliasSet[] = { X86::AL, X86::AH, X86::EAX, X86::RAX, 0 };
  const unsigned BH_AliasSet[] = { X86::BX, X86::EBX, X86::RBX, 0 };
  const unsigned BL_AliasSet[] = { X86::BX, X86::EBX, X86::RBX, 0 };
  const unsigned BP_AliasSet[] = { X86::BPL, X86::EBP, X86::RBP, 0 };
  const unsigned BPL_AliasSet[] = { X86::BP, X86::EBP, X86::RBP, 0 };
  const unsigned BX_AliasSet[] = { X86::BL, X86::BH, X86::EBX, X86::RBX, 0 };
  const unsigned CH_AliasSet[] = { X86::CX, X86::ECX, X86::RCX, 0 };
  const unsigned CL_AliasSet[] = { X86::CX, X86::ECX, X86::RCX, 0 };
  const unsigned CX_AliasSet[] = { X86::CL, X86::CH, X86::ECX, X86::RCX, 0 };
  const unsigned DH_AliasSet[] = { X86::DX, X86::EDX, X86::RDX, 0 };
  const unsigned DI_AliasSet[] = { X86::DIL, X86::EDI, X86::RDI, 0 };
  const unsigned DIL_AliasSet[] = { X86::DI, X86::EDI, X86::RDI, 0 };
  const unsigned DL_AliasSet[] = { X86::DX, X86::EDX, X86::RDX, 0 };
  const unsigned DX_AliasSet[] = { X86::DL, X86::DH, X86::EDX, X86::RDX, 0 };
  const unsigned EAX_AliasSet[] = { X86::AL, X86::AH, X86::AX, X86::RAX, 0 };
  const unsigned EBP_AliasSet[] = { X86::BPL, X86::BP, X86::RBP, 0 };
  const unsigned EBX_AliasSet[] = { X86::BL, X86::BH, X86::BX, X86::RBX, 0 };
  const unsigned ECX_AliasSet[] = { X86::CL, X86::CH, X86::CX, X86::RCX, 0 };
  const unsigned EDI_AliasSet[] = { X86::DIL, X86::DI, X86::RDI, 0 };
  const unsigned EDX_AliasSet[] = { X86::DL, X86::DH, X86::DX, X86::RDX, 0 };
  const unsigned EIP_AliasSet[] = { X86::IP, X86::RIP, 0 };
  const unsigned ESI_AliasSet[] = { X86::SIL, X86::SI, X86::RSI, 0 };
  const unsigned ESP_AliasSet[] = { X86::SPL, X86::SP, X86::RSP, 0 };
  const unsigned IP_AliasSet[] = { X86::EIP, X86::RIP, 0 };
  const unsigned R10_AliasSet[] = { X86::R10B, X86::R10W, X86::R10D, 0 };
  const unsigned R10B_AliasSet[] = { X86::R10W, X86::R10D, X86::R10, 0 };
  const unsigned R10D_AliasSet[] = { X86::R10B, X86::R10W, X86::R10, 0 };
  const unsigned R10W_AliasSet[] = { X86::R10B, X86::R10D, X86::R10, 0 };
  const unsigned R11_AliasSet[] = { X86::R11B, X86::R11W, X86::R11D, 0 };
  const unsigned R11B_AliasSet[] = { X86::R11W, X86::R11D, X86::R11, 0 };
  const unsigned R11D_AliasSet[] = { X86::R11B, X86::R11W, X86::R11, 0 };
  const unsigned R11W_AliasSet[] = { X86::R11B, X86::R11D, X86::R11, 0 };
  const unsigned R12_AliasSet[] = { X86::R12B, X86::R12W, X86::R12D, 0 };
  const unsigned R12B_AliasSet[] = { X86::R12W, X86::R12D, X86::R12, 0 };
  const unsigned R12D_AliasSet[] = { X86::R12B, X86::R12W, X86::R12, 0 };
  const unsigned R12W_AliasSet[] = { X86::R12B, X86::R12D, X86::R12, 0 };
  const unsigned R13_AliasSet[] = { X86::R13B, X86::R13W, X86::R13D, 0 };
  const unsigned R13B_AliasSet[] = { X86::R13W, X86::R13D, X86::R13, 0 };
  const unsigned R13D_AliasSet[] = { X86::R13B, X86::R13W, X86::R13, 0 };
  const unsigned R13W_AliasSet[] = { X86::R13B, X86::R13D, X86::R13, 0 };
  const unsigned R14_AliasSet[] = { X86::R14B, X86::R14W, X86::R14D, 0 };
  const unsigned R14B_AliasSet[] = { X86::R14W, X86::R14D, X86::R14, 0 };
  const unsigned R14D_AliasSet[] = { X86::R14B, X86::R14W, X86::R14, 0 };
  const unsigned R14W_AliasSet[] = { X86::R14B, X86::R14D, X86::R14, 0 };
  const unsigned R15_AliasSet[] = { X86::R15B, X86::R15W, X86::R15D, 0 };
  const unsigned R15B_AliasSet[] = { X86::R15W, X86::R15D, X86::R15, 0 };
  const unsigned R15D_AliasSet[] = { X86::R15B, X86::R15W, X86::R15, 0 };
  const unsigned R15W_AliasSet[] = { X86::R15B, X86::R15D, X86::R15, 0 };
  const unsigned R8_AliasSet[] = { X86::R8B, X86::R8W, X86::R8D, 0 };
  const unsigned R8B_AliasSet[] = { X86::R8W, X86::R8D, X86::R8, 0 };
  const unsigned R8D_AliasSet[] = { X86::R8B, X86::R8W, X86::R8, 0 };
  const unsigned R8W_AliasSet[] = { X86::R8B, X86::R8D, X86::R8, 0 };
  const unsigned R9_AliasSet[] = { X86::R9B, X86::R9W, X86::R9D, 0 };
  const unsigned R9B_AliasSet[] = { X86::R9W, X86::R9D, X86::R9, 0 };
  const unsigned R9D_AliasSet[] = { X86::R9B, X86::R9W, X86::R9, 0 };
  const unsigned R9W_AliasSet[] = { X86::R9B, X86::R9D, X86::R9, 0 };
  const unsigned RAX_AliasSet[] = { X86::AL, X86::AH, X86::AX, X86::EAX, 0 };
  const unsigned RBP_AliasSet[] = { X86::BPL, X86::BP, X86::EBP, 0 };
  const unsigned RBX_AliasSet[] = { X86::BL, X86::BH, X86::BX, X86::EBX, 0 };
  const unsigned RCX_AliasSet[] = { X86::CL, X86::CH, X86::CX, X86::ECX, 0 };
  const unsigned RDI_AliasSet[] = { X86::DIL, X86::DI, X86::EDI, 0 };
  const unsigned RDX_AliasSet[] = { X86::DL, X86::DH, X86::DX, X86::EDX, 0 };
  const unsigned RIP_AliasSet[] = { X86::IP, X86::EIP, 0 };
  const unsigned RSI_AliasSet[] = { X86::SIL, X86::SI, X86::ESI, 0 };
  const unsigned RSP_AliasSet[] = { X86::SPL, X86::SP, X86::ESP, 0 };
  const unsigned SI_AliasSet[] = { X86::SIL, X86::ESI, X86::RSI, 0 };
  const unsigned SIL_AliasSet[] = { X86::SI, X86::ESI, X86::RSI, 0 };
  const unsigned SP_AliasSet[] = { X86::SPL, X86::ESP, X86::RSP, 0 };
  const unsigned SPL_AliasSet[] = { X86::SP, X86::ESP, X86::RSP, 0 };


  // Register Sub-registers Sets...
  const unsigned Empty_SubRegsSet[] = { 0 };
  const unsigned AH_SubRegsSet[] = { 0 };
  const unsigned AL_SubRegsSet[] = { 0 };
  const unsigned AX_SubRegsSet[] = { X86::AL, X86::AH, 0 };
  const unsigned BH_SubRegsSet[] = { 0 };
  const unsigned BL_SubRegsSet[] = { 0 };
  const unsigned BP_SubRegsSet[] = { X86::BPL, 0 };
  const unsigned BPL_SubRegsSet[] = { 0 };
  const unsigned BX_SubRegsSet[] = { X86::BL, X86::BH, 0 };
  const unsigned CH_SubRegsSet[] = { 0 };
  const unsigned CL_SubRegsSet[] = { 0 };
  const unsigned CX_SubRegsSet[] = { X86::CL, X86::CH, 0 };
  const unsigned DH_SubRegsSet[] = { 0 };
  const unsigned DI_SubRegsSet[] = { X86::DIL, 0 };
  const unsigned DIL_SubRegsSet[] = { 0 };
  const unsigned DL_SubRegsSet[] = { 0 };
  const unsigned DX_SubRegsSet[] = { X86::DL, X86::DH, 0 };
  const unsigned EAX_SubRegsSet[] = { X86::AX, X86::AL, X86::AH, 0 };
  const unsigned EBP_SubRegsSet[] = { X86::BP, X86::BPL, 0 };
  const unsigned EBX_SubRegsSet[] = { X86::BX, X86::BL, X86::BH, 0 };
  const unsigned ECX_SubRegsSet[] = { X86::CX, X86::CL, X86::CH, 0 };
  const unsigned EDI_SubRegsSet[] = { X86::DI, X86::DIL, 0 };
  const unsigned EDX_SubRegsSet[] = { X86::DX, X86::DL, X86::DH, 0 };
  const unsigned EFLAGS_SubRegsSet[] = { 0 };
  const unsigned EIP_SubRegsSet[] = { X86::IP, 0 };
  const unsigned ESI_SubRegsSet[] = { X86::SI, X86::SIL, 0 };
  const unsigned ESP_SubRegsSet[] = { X86::SP, X86::SPL, 0 };
  const unsigned FP0_SubRegsSet[] = { 0 };
  const unsigned FP1_SubRegsSet[] = { 0 };
  const unsigned FP2_SubRegsSet[] = { 0 };
  const unsigned FP3_SubRegsSet[] = { 0 };
  const unsigned FP4_SubRegsSet[] = { 0 };
  const unsigned FP5_SubRegsSet[] = { 0 };
  const unsigned FP6_SubRegsSet[] = { 0 };
  const unsigned IP_SubRegsSet[] = { 0 };
  const unsigned MM0_SubRegsSet[] = { 0 };
  const unsigned MM1_SubRegsSet[] = { 0 };
  const unsigned MM2_SubRegsSet[] = { 0 };
  const unsigned MM3_SubRegsSet[] = { 0 };
  const unsigned MM4_SubRegsSet[] = { 0 };
  const unsigned MM5_SubRegsSet[] = { 0 };
  const unsigned MM6_SubRegsSet[] = { 0 };
  const unsigned MM7_SubRegsSet[] = { 0 };
  const unsigned R10_SubRegsSet[] = { X86::R10D, X86::R10W, X86::R10B, 0 };
  const unsigned R10B_SubRegsSet[] = { 0 };
  const unsigned R10D_SubRegsSet[] = { X86::R10W, X86::R10B, 0 };
  const unsigned R10W_SubRegsSet[] = { X86::R10B, 0 };
  const unsigned R11_SubRegsSet[] = { X86::R11D, X86::R11W, X86::R11B, 0 };
  const unsigned R11B_SubRegsSet[] = { 0 };
  const unsigned R11D_SubRegsSet[] = { X86::R11W, X86::R11B, 0 };
  const unsigned R11W_SubRegsSet[] = { X86::R11B, 0 };
  const unsigned R12_SubRegsSet[] = { X86::R12D, X86::R12W, X86::R12B, 0 };
  const unsigned R12B_SubRegsSet[] = { 0 };
  const unsigned R12D_SubRegsSet[] = { X86::R12W, X86::R12B, 0 };
  const unsigned R12W_SubRegsSet[] = { X86::R12B, 0 };
  const unsigned R13_SubRegsSet[] = { X86::R13D, X86::R13W, X86::R13B, 0 };
  const unsigned R13B_SubRegsSet[] = { 0 };
  const unsigned R13D_SubRegsSet[] = { X86::R13W, X86::R13B, 0 };
  const unsigned R13W_SubRegsSet[] = { X86::R13B, 0 };
  const unsigned R14_SubRegsSet[] = { X86::R14D, X86::R14W, X86::R14B, 0 };
  const unsigned R14B_SubRegsSet[] = { 0 };
  const unsigned R14D_SubRegsSet[] = { X86::R14W, X86::R14B, 0 };
  const unsigned R14W_SubRegsSet[] = { X86::R14B, 0 };
  const unsigned R15_SubRegsSet[] = { X86::R15D, X86::R15W, X86::R15B, 0 };
  const unsigned R15B_SubRegsSet[] = { 0 };
  const unsigned R15D_SubRegsSet[] = { X86::R15W, X86::R15B, 0 };
  const unsigned R15W_SubRegsSet[] = { X86::R15B, 0 };
  const unsigned R8_SubRegsSet[] = { X86::R8D, X86::R8W, X86::R8B, 0 };
  const unsigned R8B_SubRegsSet[] = { 0 };
  const unsigned R8D_SubRegsSet[] = { X86::R8W, X86::R8B, 0 };
  const unsigned R8W_SubRegsSet[] = { X86::R8B, 0 };
  const unsigned R9_SubRegsSet[] = { X86::R9D, X86::R9W, X86::R9B, 0 };
  const unsigned R9B_SubRegsSet[] = { 0 };
  const unsigned R9D_SubRegsSet[] = { X86::R9W, X86::R9B, 0 };
  const unsigned R9W_SubRegsSet[] = { X86::R9B, 0 };
  const unsigned RAX_SubRegsSet[] = { X86::EAX, X86::AX, X86::AL, X86::AH, 0 };
  const unsigned RBP_SubRegsSet[] = { X86::EBP, X86::BP, X86::BPL, 0 };
  const unsigned RBX_SubRegsSet[] = { X86::EBX, X86::BX, X86::BL, X86::BH, 0 };
  const unsigned RCX_SubRegsSet[] = { X86::ECX, X86::CX, X86::CL, X86::CH, 0 };
  const unsigned RDI_SubRegsSet[] = { X86::EDI, X86::DI, X86::DIL, 0 };
  const unsigned RDX_SubRegsSet[] = { X86::EDX, X86::DX, X86::DL, X86::DH, 0 };
  const unsigned RIP_SubRegsSet[] = { X86::EIP, X86::IP, 0 };
  const unsigned RSI_SubRegsSet[] = { X86::ESI, X86::SI, X86::SIL, 0 };
  const unsigned RSP_SubRegsSet[] = { X86::ESP, X86::SP, X86::SPL, 0 };
  const unsigned SI_SubRegsSet[] = { X86::SIL, 0 };
  const unsigned SIL_SubRegsSet[] = { 0 };
  const unsigned SP_SubRegsSet[] = { X86::SPL, 0 };
  const unsigned SPL_SubRegsSet[] = { 0 };
  const unsigned ST0_SubRegsSet[] = { 0 };
  const unsigned ST1_SubRegsSet[] = { 0 };
  const unsigned ST2_SubRegsSet[] = { 0 };
  const unsigned ST3_SubRegsSet[] = { 0 };
  const unsigned ST4_SubRegsSet[] = { 0 };
  const unsigned ST5_SubRegsSet[] = { 0 };
  const unsigned ST6_SubRegsSet[] = { 0 };
  const unsigned ST7_SubRegsSet[] = { 0 };
  const unsigned XMM0_SubRegsSet[] = { 0 };
  const unsigned XMM1_SubRegsSet[] = { 0 };
  const unsigned XMM10_SubRegsSet[] = { 0 };
  const unsigned XMM11_SubRegsSet[] = { 0 };
  const unsigned XMM12_SubRegsSet[] = { 0 };
  const unsigned XMM13_SubRegsSet[] = { 0 };
  const unsigned XMM14_SubRegsSet[] = { 0 };
  const unsigned XMM15_SubRegsSet[] = { 0 };
  const unsigned XMM2_SubRegsSet[] = { 0 };
  const unsigned XMM3_SubRegsSet[] = { 0 };
  const unsigned XMM4_SubRegsSet[] = { 0 };
  const unsigned XMM5_SubRegsSet[] = { 0 };
  const unsigned XMM6_SubRegsSet[] = { 0 };
  const unsigned XMM7_SubRegsSet[] = { 0 };
  const unsigned XMM8_SubRegsSet[] = { 0 };
  const unsigned XMM9_SubRegsSet[] = { 0 };


  // Register Super-registers Sets...
  const unsigned Empty_SuperRegsSet[] = { 0 };
  const unsigned AH_SuperRegsSet[] = { X86::RAX, X86::EAX, X86::AX, 0 };
  const unsigned AL_SuperRegsSet[] = { X86::RAX, X86::EAX, X86::AX, 0 };
  const unsigned AX_SuperRegsSet[] = { X86::RAX, X86::EAX, 0 };
  const unsigned BH_SuperRegsSet[] = { X86::RBX, X86::EBX, X86::BX, 0 };
  const unsigned BL_SuperRegsSet[] = { X86::RBX, X86::EBX, X86::BX, 0 };
  const unsigned BP_SuperRegsSet[] = { X86::RBP, X86::EBP, 0 };
  const unsigned BPL_SuperRegsSet[] = { X86::RBP, X86::EBP, X86::BP, 0 };
  const unsigned BX_SuperRegsSet[] = { X86::RBX, X86::EBX, 0 };
  const unsigned CH_SuperRegsSet[] = { X86::RCX, X86::ECX, X86::CX, 0 };
  const unsigned CL_SuperRegsSet[] = { X86::RCX, X86::ECX, X86::CX, 0 };
  const unsigned CX_SuperRegsSet[] = { X86::RCX, X86::ECX, 0 };
  const unsigned DH_SuperRegsSet[] = { X86::RDX, X86::EDX, X86::DX, 0 };
  const unsigned DI_SuperRegsSet[] = { X86::RDI, X86::EDI, 0 };
  const unsigned DIL_SuperRegsSet[] = { X86::RDI, X86::EDI, X86::DI, 0 };
  const unsigned DL_SuperRegsSet[] = { X86::RDX, X86::EDX, X86::DX, 0 };
  const unsigned DX_SuperRegsSet[] = { X86::RDX, X86::EDX, 0 };
  const unsigned EAX_SuperRegsSet[] = { X86::RAX, 0 };
  const unsigned EBP_SuperRegsSet[] = { X86::RBP, 0 };
  const unsigned EBX_SuperRegsSet[] = { X86::RBX, 0 };
  const unsigned ECX_SuperRegsSet[] = { X86::RCX, 0 };
  const unsigned EDI_SuperRegsSet[] = { X86::RDI, 0 };
  const unsigned EDX_SuperRegsSet[] = { X86::RDX, 0 };
  const unsigned EIP_SuperRegsSet[] = { X86::RIP, 0 };
  const unsigned ESI_SuperRegsSet[] = { X86::RSI, 0 };
  const unsigned ESP_SuperRegsSet[] = { X86::RSP, 0 };
  const unsigned IP_SuperRegsSet[] = { X86::RIP, X86::EIP, 0 };
  const unsigned R10B_SuperRegsSet[] = { X86::R10, X86::R10D, X86::R10W, 0 };
  const unsigned R10D_SuperRegsSet[] = { X86::R10, 0 };
  const unsigned R10W_SuperRegsSet[] = { X86::R10, X86::R10D, 0 };
  const unsigned R11B_SuperRegsSet[] = { X86::R11, X86::R11D, X86::R11W, 0 };
  const unsigned R11D_SuperRegsSet[] = { X86::R11, 0 };
  const unsigned R11W_SuperRegsSet[] = { X86::R11, X86::R11D, 0 };
  const unsigned R12B_SuperRegsSet[] = { X86::R12, X86::R12D, X86::R12W, 0 };
  const unsigned R12D_SuperRegsSet[] = { X86::R12, 0 };
  const unsigned R12W_SuperRegsSet[] = { X86::R12, X86::R12D, 0 };
  const unsigned R13B_SuperRegsSet[] = { X86::R13, X86::R13D, X86::R13W, 0 };
  const unsigned R13D_SuperRegsSet[] = { X86::R13, 0 };
  const unsigned R13W_SuperRegsSet[] = { X86::R13, X86::R13D, 0 };
  const unsigned R14B_SuperRegsSet[] = { X86::R14, X86::R14D, X86::R14W, 0 };
  const unsigned R14D_SuperRegsSet[] = { X86::R14, 0 };
  const unsigned R14W_SuperRegsSet[] = { X86::R14, X86::R14D, 0 };
  const unsigned R15B_SuperRegsSet[] = { X86::R15, X86::R15D, X86::R15W, 0 };
  const unsigned R15D_SuperRegsSet[] = { X86::R15, 0 };
  const unsigned R15W_SuperRegsSet[] = { X86::R15, X86::R15D, 0 };
  const unsigned R8B_SuperRegsSet[] = { X86::R8, X86::R8D, X86::R8W, 0 };
  const unsigned R8D_SuperRegsSet[] = { X86::R8, 0 };
  const unsigned R8W_SuperRegsSet[] = { X86::R8, X86::R8D, 0 };
  const unsigned R9B_SuperRegsSet[] = { X86::R9, X86::R9D, X86::R9W, 0 };
  const unsigned R9D_SuperRegsSet[] = { X86::R9, 0 };
  const unsigned R9W_SuperRegsSet[] = { X86::R9, X86::R9D, 0 };
  const unsigned SI_SuperRegsSet[] = { X86::RSI, X86::ESI, 0 };
  const unsigned SIL_SuperRegsSet[] = { X86::RSI, X86::ESI, X86::SI, 0 };
  const unsigned SP_SuperRegsSet[] = { X86::RSP, X86::ESP, 0 };
  const unsigned SPL_SuperRegsSet[] = { X86::RSP, X86::ESP, X86::SP, 0 };

  const TargetRegisterDesc RegisterDescriptors[] = { // Descriptors
    { "NOREG",	"NOREG",	0,	0,	0 },
    { "ah",	"AH",	AH_AliasSet,	AH_SubRegsSet,	AH_SuperRegsSet },
    { "al",	"AL",	AL_AliasSet,	AL_SubRegsSet,	AL_SuperRegsSet },
    { "ax",	"AX",	AX_AliasSet,	AX_SubRegsSet,	AX_SuperRegsSet },
    { "bh",	"BH",	BH_AliasSet,	BH_SubRegsSet,	BH_SuperRegsSet },
    { "bl",	"BL",	BL_AliasSet,	BL_SubRegsSet,	BL_SuperRegsSet },
    { "bp",	"BP",	BP_AliasSet,	BP_SubRegsSet,	BP_SuperRegsSet },
    { "bpl",	"BPL",	BPL_AliasSet,	BPL_SubRegsSet,	BPL_SuperRegsSet },
    { "bx",	"BX",	BX_AliasSet,	BX_SubRegsSet,	BX_SuperRegsSet },
    { "ch",	"CH",	CH_AliasSet,	CH_SubRegsSet,	CH_SuperRegsSet },
    { "cl",	"CL",	CL_AliasSet,	CL_SubRegsSet,	CL_SuperRegsSet },
    { "cx",	"CX",	CX_AliasSet,	CX_SubRegsSet,	CX_SuperRegsSet },
    { "dh",	"DH",	DH_AliasSet,	DH_SubRegsSet,	DH_SuperRegsSet },
    { "di",	"DI",	DI_AliasSet,	DI_SubRegsSet,	DI_SuperRegsSet },
    { "dil",	"DIL",	DIL_AliasSet,	DIL_SubRegsSet,	DIL_SuperRegsSet },
    { "dl",	"DL",	DL_AliasSet,	DL_SubRegsSet,	DL_SuperRegsSet },
    { "dx",	"DX",	DX_AliasSet,	DX_SubRegsSet,	DX_SuperRegsSet },
    { "eax",	"EAX",	EAX_AliasSet,	EAX_SubRegsSet,	EAX_SuperRegsSet },
    { "ebp",	"EBP",	EBP_AliasSet,	EBP_SubRegsSet,	EBP_SuperRegsSet },
    { "ebx",	"EBX",	EBX_AliasSet,	EBX_SubRegsSet,	EBX_SuperRegsSet },
    { "ecx",	"ECX",	ECX_AliasSet,	ECX_SubRegsSet,	ECX_SuperRegsSet },
    { "edi",	"EDI",	EDI_AliasSet,	EDI_SubRegsSet,	EDI_SuperRegsSet },
    { "edx",	"EDX",	EDX_AliasSet,	EDX_SubRegsSet,	EDX_SuperRegsSet },
    { "eflags",	"EFLAGS",	Empty_AliasSet,	EFLAGS_SubRegsSet,	Empty_SuperRegsSet },
    { "eip",	"EIP",	EIP_AliasSet,	EIP_SubRegsSet,	EIP_SuperRegsSet },
    { "esi",	"ESI",	ESI_AliasSet,	ESI_SubRegsSet,	ESI_SuperRegsSet },
    { "esp",	"ESP",	ESP_AliasSet,	ESP_SubRegsSet,	ESP_SuperRegsSet },
    { "fp0",	"FP0",	Empty_AliasSet,	FP0_SubRegsSet,	Empty_SuperRegsSet },
    { "fp1",	"FP1",	Empty_AliasSet,	FP1_SubRegsSet,	Empty_SuperRegsSet },
    { "fp2",	"FP2",	Empty_AliasSet,	FP2_SubRegsSet,	Empty_SuperRegsSet },
    { "fp3",	"FP3",	Empty_AliasSet,	FP3_SubRegsSet,	Empty_SuperRegsSet },
    { "fp4",	"FP4",	Empty_AliasSet,	FP4_SubRegsSet,	Empty_SuperRegsSet },
    { "fp5",	"FP5",	Empty_AliasSet,	FP5_SubRegsSet,	Empty_SuperRegsSet },
    { "fp6",	"FP6",	Empty_AliasSet,	FP6_SubRegsSet,	Empty_SuperRegsSet },
    { "ip",	"IP",	IP_AliasSet,	IP_SubRegsSet,	IP_SuperRegsSet },
    { "mm0",	"MM0",	Empty_AliasSet,	MM0_SubRegsSet,	Empty_SuperRegsSet },
    { "mm1",	"MM1",	Empty_AliasSet,	MM1_SubRegsSet,	Empty_SuperRegsSet },
    { "mm2",	"MM2",	Empty_AliasSet,	MM2_SubRegsSet,	Empty_SuperRegsSet },
    { "mm3",	"MM3",	Empty_AliasSet,	MM3_SubRegsSet,	Empty_SuperRegsSet },
    { "mm4",	"MM4",	Empty_AliasSet,	MM4_SubRegsSet,	Empty_SuperRegsSet },
    { "mm5",	"MM5",	Empty_AliasSet,	MM5_SubRegsSet,	Empty_SuperRegsSet },
    { "mm6",	"MM6",	Empty_AliasSet,	MM6_SubRegsSet,	Empty_SuperRegsSet },
    { "mm7",	"MM7",	Empty_AliasSet,	MM7_SubRegsSet,	Empty_SuperRegsSet },
    { "r10",	"R10",	R10_AliasSet,	R10_SubRegsSet,	Empty_SuperRegsSet },
    { "r10b",	"R10B",	R10B_AliasSet,	R10B_SubRegsSet,	R10B_SuperRegsSet },
    { "r10d",	"R10D",	R10D_AliasSet,	R10D_SubRegsSet,	R10D_SuperRegsSet },
    { "r10w",	"R10W",	R10W_AliasSet,	R10W_SubRegsSet,	R10W_SuperRegsSet },
    { "r11",	"R11",	R11_AliasSet,	R11_SubRegsSet,	Empty_SuperRegsSet },
    { "r11b",	"R11B",	R11B_AliasSet,	R11B_SubRegsSet,	R11B_SuperRegsSet },
    { "r11d",	"R11D",	R11D_AliasSet,	R11D_SubRegsSet,	R11D_SuperRegsSet },
    { "r11w",	"R11W",	R11W_AliasSet,	R11W_SubRegsSet,	R11W_SuperRegsSet },
    { "r12",	"R12",	R12_AliasSet,	R12_SubRegsSet,	Empty_SuperRegsSet },
    { "r12b",	"R12B",	R12B_AliasSet,	R12B_SubRegsSet,	R12B_SuperRegsSet },
    { "r12d",	"R12D",	R12D_AliasSet,	R12D_SubRegsSet,	R12D_SuperRegsSet },
    { "r12w",	"R12W",	R12W_AliasSet,	R12W_SubRegsSet,	R12W_SuperRegsSet },
    { "r13",	"R13",	R13_AliasSet,	R13_SubRegsSet,	Empty_SuperRegsSet },
    { "r13b",	"R13B",	R13B_AliasSet,	R13B_SubRegsSet,	R13B_SuperRegsSet },
    { "r13d",	"R13D",	R13D_AliasSet,	R13D_SubRegsSet,	R13D_SuperRegsSet },
    { "r13w",	"R13W",	R13W_AliasSet,	R13W_SubRegsSet,	R13W_SuperRegsSet },
    { "r14",	"R14",	R14_AliasSet,	R14_SubRegsSet,	Empty_SuperRegsSet },
    { "r14b",	"R14B",	R14B_AliasSet,	R14B_SubRegsSet,	R14B_SuperRegsSet },
    { "r14d",	"R14D",	R14D_AliasSet,	R14D_SubRegsSet,	R14D_SuperRegsSet },
    { "r14w",	"R14W",	R14W_AliasSet,	R14W_SubRegsSet,	R14W_SuperRegsSet },
    { "r15",	"R15",	R15_AliasSet,	R15_SubRegsSet,	Empty_SuperRegsSet },
    { "r15b",	"R15B",	R15B_AliasSet,	R15B_SubRegsSet,	R15B_SuperRegsSet },
    { "r15d",	"R15D",	R15D_AliasSet,	R15D_SubRegsSet,	R15D_SuperRegsSet },
    { "r15w",	"R15W",	R15W_AliasSet,	R15W_SubRegsSet,	R15W_SuperRegsSet },
    { "r8",	"R8",	R8_AliasSet,	R8_SubRegsSet,	Empty_SuperRegsSet },
    { "r8b",	"R8B",	R8B_AliasSet,	R8B_SubRegsSet,	R8B_SuperRegsSet },
    { "r8d",	"R8D",	R8D_AliasSet,	R8D_SubRegsSet,	R8D_SuperRegsSet },
    { "r8w",	"R8W",	R8W_AliasSet,	R8W_SubRegsSet,	R8W_SuperRegsSet },
    { "r9",	"R9",	R9_AliasSet,	R9_SubRegsSet,	Empty_SuperRegsSet },
    { "r9b",	"R9B",	R9B_AliasSet,	R9B_SubRegsSet,	R9B_SuperRegsSet },
    { "r9d",	"R9D",	R9D_AliasSet,	R9D_SubRegsSet,	R9D_SuperRegsSet },
    { "r9w",	"R9W",	R9W_AliasSet,	R9W_SubRegsSet,	R9W_SuperRegsSet },
    { "rax",	"RAX",	RAX_AliasSet,	RAX_SubRegsSet,	Empty_SuperRegsSet },
    { "rbp",	"RBP",	RBP_AliasSet,	RBP_SubRegsSet,	Empty_SuperRegsSet },
    { "rbx",	"RBX",	RBX_AliasSet,	RBX_SubRegsSet,	Empty_SuperRegsSet },
    { "rcx",	"RCX",	RCX_AliasSet,	RCX_SubRegsSet,	Empty_SuperRegsSet },
    { "rdi",	"RDI",	RDI_AliasSet,	RDI_SubRegsSet,	Empty_SuperRegsSet },
    { "rdx",	"RDX",	RDX_AliasSet,	RDX_SubRegsSet,	Empty_SuperRegsSet },
    { "rip",	"RIP",	RIP_AliasSet,	RIP_SubRegsSet,	Empty_SuperRegsSet },
    { "rsi",	"RSI",	RSI_AliasSet,	RSI_SubRegsSet,	Empty_SuperRegsSet },
    { "rsp",	"RSP",	RSP_AliasSet,	RSP_SubRegsSet,	Empty_SuperRegsSet },
    { "si",	"SI",	SI_AliasSet,	SI_SubRegsSet,	SI_SuperRegsSet },
    { "sil",	"SIL",	SIL_AliasSet,	SIL_SubRegsSet,	SIL_SuperRegsSet },
    { "sp",	"SP",	SP_AliasSet,	SP_SubRegsSet,	SP_SuperRegsSet },
    { "spl",	"SPL",	SPL_AliasSet,	SPL_SubRegsSet,	SPL_SuperRegsSet },
    { "st(0)",	"ST0",	Empty_AliasSet,	ST0_SubRegsSet,	Empty_SuperRegsSet },
    { "st(1)",	"ST1",	Empty_AliasSet,	ST1_SubRegsSet,	Empty_SuperRegsSet },
    { "st(2)",	"ST2",	Empty_AliasSet,	ST2_SubRegsSet,	Empty_SuperRegsSet },
    { "st(3)",	"ST3",	Empty_AliasSet,	ST3_SubRegsSet,	Empty_SuperRegsSet },
    { "st(4)",	"ST4",	Empty_AliasSet,	ST4_SubRegsSet,	Empty_SuperRegsSet },
    { "st(5)",	"ST5",	Empty_AliasSet,	ST5_SubRegsSet,	Empty_SuperRegsSet },
    { "st(6)",	"ST6",	Empty_AliasSet,	ST6_SubRegsSet,	Empty_SuperRegsSet },
    { "st(7)",	"ST7",	Empty_AliasSet,	ST7_SubRegsSet,	Empty_SuperRegsSet },
    { "xmm0",	"XMM0",	Empty_AliasSet,	XMM0_SubRegsSet,	Empty_SuperRegsSet },
    { "xmm1",	"XMM1",	Empty_AliasSet,	XMM1_SubRegsSet,	Empty_SuperRegsSet },
    { "xmm10",	"XMM10",	Empty_AliasSet,	XMM10_SubRegsSet,	Empty_SuperRegsSet },
    { "xmm11",	"XMM11",	Empty_AliasSet,	XMM11_SubRegsSet,	Empty_SuperRegsSet },
    { "xmm12",	"XMM12",	Empty_AliasSet,	XMM12_SubRegsSet,	Empty_SuperRegsSet },
    { "xmm13",	"XMM13",	Empty_AliasSet,	XMM13_SubRegsSet,	Empty_SuperRegsSet },
    { "xmm14",	"XMM14",	Empty_AliasSet,	XMM14_SubRegsSet,	Empty_SuperRegsSet },
    { "xmm15",	"XMM15",	Empty_AliasSet,	XMM15_SubRegsSet,	Empty_SuperRegsSet },
    { "xmm2",	"XMM2",	Empty_AliasSet,	XMM2_SubRegsSet,	Empty_SuperRegsSet },
    { "xmm3",	"XMM3",	Empty_AliasSet,	XMM3_SubRegsSet,	Empty_SuperRegsSet },
    { "xmm4",	"XMM4",	Empty_AliasSet,	XMM4_SubRegsSet,	Empty_SuperRegsSet },
    { "xmm5",	"XMM5",	Empty_AliasSet,	XMM5_SubRegsSet,	Empty_SuperRegsSet },
    { "xmm6",	"XMM6",	Empty_AliasSet,	XMM6_SubRegsSet,	Empty_SuperRegsSet },
    { "xmm7",	"XMM7",	Empty_AliasSet,	XMM7_SubRegsSet,	Empty_SuperRegsSet },
    { "xmm8",	"XMM8",	Empty_AliasSet,	XMM8_SubRegsSet,	Empty_SuperRegsSet },
    { "xmm9",	"XMM9",	Empty_AliasSet,	XMM9_SubRegsSet,	Empty_SuperRegsSet },
  };
}

unsigned X86GenRegisterInfo::getSubReg(unsigned RegNo, unsigned Index) const {
  switch (RegNo) {
  default:
    return 0;
  case X86::AX:
    switch (Index) {
    default: return 0;
    case 1: return X86::AL;
    };
    break;
  case X86::DX:
    switch (Index) {
    default: return 0;
    case 1: return X86::DL;
    };
    break;
  case X86::CX:
    switch (Index) {
    default: return 0;
    case 1: return X86::CL;
    };
    break;
  case X86::BX:
    switch (Index) {
    default: return 0;
    case 1: return X86::BL;
    };
    break;
  case X86::SI:
    switch (Index) {
    default: return 0;
    case 1: return X86::SIL;
    };
    break;
  case X86::DI:
    switch (Index) {
    default: return 0;
    case 1: return X86::DIL;
    };
    break;
  case X86::BP:
    switch (Index) {
    default: return 0;
    case 1: return X86::BPL;
    };
    break;
  case X86::SP:
    switch (Index) {
    default: return 0;
    case 1: return X86::SPL;
    };
    break;
  case X86::R8W:
    switch (Index) {
    default: return 0;
    case 1: return X86::R8B;
    };
    break;
  case X86::R9W:
    switch (Index) {
    default: return 0;
    case 1: return X86::R9B;
    };
    break;
  case X86::R10W:
    switch (Index) {
    default: return 0;
    case 1: return X86::R10B;
    };
    break;
  case X86::R11W:
    switch (Index) {
    default: return 0;
    case 1: return X86::R11B;
    };
    break;
  case X86::R12W:
    switch (Index) {
    default: return 0;
    case 1: return X86::R12B;
    };
    break;
  case X86::R13W:
    switch (Index) {
    default: return 0;
    case 1: return X86::R13B;
    };
    break;
  case X86::R14W:
    switch (Index) {
    default: return 0;
    case 1: return X86::R14B;
    };
    break;
  case X86::R15W:
    switch (Index) {
    default: return 0;
    case 1: return X86::R15B;
    };
    break;
  case X86::EAX:
    switch (Index) {
    default: return 0;
    case 1: return X86::AL;
    case 2: return X86::AX;
    };
    break;
  case X86::EDX:
    switch (Index) {
    default: return 0;
    case 1: return X86::DL;
    case 2: return X86::DX;
    };
    break;
  case X86::ECX:
    switch (Index) {
    default: return 0;
    case 1: return X86::CL;
    case 2: return X86::CX;
    };
    break;
  case X86::EBX:
    switch (Index) {
    default: return 0;
    case 1: return X86::BL;
    case 2: return X86::BX;
    };
    break;
  case X86::ESI:
    switch (Index) {
    default: return 0;
    case 1: return X86::SIL;
    case 2: return X86::SI;
    };
    break;
  case X86::EDI:
    switch (Index) {
    default: return 0;
    case 1: return X86::DIL;
    case 2: return X86::DI;
    };
    break;
  case X86::EBP:
    switch (Index) {
    default: return 0;
    case 1: return X86::BPL;
    case 2: return X86::BP;
    };
    break;
  case X86::ESP:
    switch (Index) {
    default: return 0;
    case 1: return X86::SPL;
    case 2: return X86::SP;
    };
    break;
  case X86::R8D:
    switch (Index) {
    default: return 0;
    case 1: return X86::R8B;
    case 2: return X86::R8W;
    };
    break;
  case X86::R9D:
    switch (Index) {
    default: return 0;
    case 1: return X86::R9B;
    case 2: return X86::R9W;
    };
    break;
  case X86::R10D:
    switch (Index) {
    default: return 0;
    case 1: return X86::R10B;
    case 2: return X86::R10W;
    };
    break;
  case X86::R11D:
    switch (Index) {
    default: return 0;
    case 1: return X86::R11B;
    case 2: return X86::R11W;
    };
    break;
  case X86::R12D:
    switch (Index) {
    default: return 0;
    case 1: return X86::R12B;
    case 2: return X86::R12W;
    };
    break;
  case X86::R13D:
    switch (Index) {
    default: return 0;
    case 1: return X86::R13B;
    case 2: return X86::R13W;
    };
    break;
  case X86::R14D:
    switch (Index) {
    default: return 0;
    case 1: return X86::R14B;
    case 2: return X86::R14W;
    };
    break;
  case X86::R15D:
    switch (Index) {
    default: return 0;
    case 1: return X86::R15B;
    case 2: return X86::R15W;
    };
    break;
  case X86::RAX:
    switch (Index) {
    default: return 0;
    case 1: return X86::AL;
    case 2: return X86::AX;
    case 3: return X86::EAX;
    };
    break;
  case X86::RDX:
    switch (Index) {
    default: return 0;
    case 1: return X86::DL;
    case 2: return X86::DX;
    case 3: return X86::EDX;
    };
    break;
  case X86::RCX:
    switch (Index) {
    default: return 0;
    case 1: return X86::CL;
    case 2: return X86::CX;
    case 3: return X86::ECX;
    };
    break;
  case X86::RBX:
    switch (Index) {
    default: return 0;
    case 1: return X86::BL;
    case 2: return X86::BX;
    case 3: return X86::EBX;
    };
    break;
  case X86::RSI:
    switch (Index) {
    default: return 0;
    case 1: return X86::SIL;
    case 2: return X86::SI;
    case 3: return X86::ESI;
    };
    break;
  case X86::RDI:
    switch (Index) {
    default: return 0;
    case 1: return X86::DIL;
    case 2: return X86::DI;
    case 3: return X86::EDI;
    };
    break;
  case X86::RBP:
    switch (Index) {
    default: return 0;
    case 1: return X86::BPL;
    case 2: return X86::BP;
    case 3: return X86::EBP;
    };
    break;
  case X86::RSP:
    switch (Index) {
    default: return 0;
    case 1: return X86::SPL;
    case 2: return X86::SP;
    case 3: return X86::ESP;
    };
    break;
  case X86::R8:
    switch (Index) {
    default: return 0;
    case 1: return X86::R8B;
    case 2: return X86::R8W;
    case 3: return X86::R8D;
    };
    break;
  case X86::R9:
    switch (Index) {
    default: return 0;
    case 1: return X86::R9B;
    case 2: return X86::R9W;
    case 3: return X86::R9D;
    };
    break;
  case X86::R10:
    switch (Index) {
    default: return 0;
    case 1: return X86::R10B;
    case 2: return X86::R10W;
    case 3: return X86::R10D;
    };
    break;
  case X86::R11:
    switch (Index) {
    default: return 0;
    case 1: return X86::R11B;
    case 2: return X86::R11W;
    case 3: return X86::R11D;
    };
    break;
  case X86::R12:
    switch (Index) {
    default: return 0;
    case 1: return X86::R12B;
    case 2: return X86::R12W;
    case 3: return X86::R12D;
    };
    break;
  case X86::R13:
    switch (Index) {
    default: return 0;
    case 1: return X86::R13B;
    case 2: return X86::R13W;
    case 3: return X86::R13D;
    };
    break;
  case X86::R14:
    switch (Index) {
    default: return 0;
    case 1: return X86::R14B;
    case 2: return X86::R14W;
    case 3: return X86::R14D;
    };
    break;
  case X86::R15:
    switch (Index) {
    default: return 0;
    case 1: return X86::R15B;
    case 2: return X86::R15W;
    case 3: return X86::R15D;
    };
    break;
  };
  return 0;
}

X86GenRegisterInfo::X86GenRegisterInfo(int CallFrameSetupOpcode, int CallFrameDestroyOpcode)
  : TargetRegisterInfo(RegisterDescriptors, 112, RegisterClasses, RegisterClasses+16,
                  CallFrameSetupOpcode, CallFrameDestroyOpcode,
                 SubregHashTable, SubregHashTableSize) {
}

int X86GenRegisterInfo::getDwarfRegNumFull(unsigned RegNum, unsigned Flavour) const {
  switch (Flavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    return -1;
  case 0:
    switch (RegNum) {
    default:
      assert(0 && "Invalid RegNum");
      return -1;
    case X86::AH:
      return 0;
    case X86::AL:
      return 0;
    case X86::AX:
      return 0;
    case X86::BH:
      return 3;
    case X86::BL:
      return 3;
    case X86::BP:
      return 6;
    case X86::BPL:
      return 6;
    case X86::BX:
      return 3;
    case X86::CH:
      return 2;
    case X86::CL:
      return 2;
    case X86::CX:
      return 2;
    case X86::DH:
      return 1;
    case X86::DI:
      return 5;
    case X86::DIL:
      return 5;
    case X86::DL:
      return 1;
    case X86::DX:
      return 1;
    case X86::EAX:
      return 0;
    case X86::EBP:
      return 6;
    case X86::EBX:
      return 3;
    case X86::ECX:
      return 2;
    case X86::EDI:
      return 5;
    case X86::EDX:
      return 1;
    case X86::EFLAGS:
      return -1;
    case X86::EIP:
      return 16;
    case X86::ESI:
      return 4;
    case X86::ESP:
      return 7;
    case X86::FP0:
      return -1;
    case X86::FP1:
      return -1;
    case X86::FP2:
      return -1;
    case X86::FP3:
      return -1;
    case X86::FP4:
      return -1;
    case X86::FP5:
      return -1;
    case X86::FP6:
      return -1;
    case X86::IP:
      return 16;
    case X86::MM0:
      return 41;
    case X86::MM1:
      return 42;
    case X86::MM2:
      return 43;
    case X86::MM3:
      return 44;
    case X86::MM4:
      return 45;
    case X86::MM5:
      return 46;
    case X86::MM6:
      return 47;
    case X86::MM7:
      return 48;
    case X86::R10:
      return 10;
    case X86::R10B:
      return 10;
    case X86::R10D:
      return 10;
    case X86::R10W:
      return 10;
    case X86::R11:
      return 11;
    case X86::R11B:
      return 11;
    case X86::R11D:
      return 11;
    case X86::R11W:
      return 11;
    case X86::R12:
      return 12;
    case X86::R12B:
      return 12;
    case X86::R12D:
      return 12;
    case X86::R12W:
      return 12;
    case X86::R13:
      return 13;
    case X86::R13B:
      return 13;
    case X86::R13D:
      return 13;
    case X86::R13W:
      return 13;
    case X86::R14:
      return 14;
    case X86::R14B:
      return 14;
    case X86::R14D:
      return 14;
    case X86::R14W:
      return 14;
    case X86::R15:
      return 15;
    case X86::R15B:
      return 15;
    case X86::R15D:
      return 15;
    case X86::R15W:
      return 15;
    case X86::R8:
      return 8;
    case X86::R8B:
      return 8;
    case X86::R8D:
      return 8;
    case X86::R8W:
      return 8;
    case X86::R9:
      return 9;
    case X86::R9B:
      return 9;
    case X86::R9D:
      return 9;
    case X86::R9W:
      return 9;
    case X86::RAX:
      return 0;
    case X86::RBP:
      return 6;
    case X86::RBX:
      return 3;
    case X86::RCX:
      return 2;
    case X86::RDI:
      return 5;
    case X86::RDX:
      return 1;
    case X86::RIP:
      return 16;
    case X86::RSI:
      return 4;
    case X86::RSP:
      return 7;
    case X86::SI:
      return 4;
    case X86::SIL:
      return 4;
    case X86::SP:
      return 7;
    case X86::SPL:
      return 7;
    case X86::ST0:
      return 33;
    case X86::ST1:
      return 34;
    case X86::ST2:
      return 35;
    case X86::ST3:
      return 36;
    case X86::ST4:
      return 37;
    case X86::ST5:
      return 38;
    case X86::ST6:
      return 39;
    case X86::ST7:
      return 40;
    case X86::XMM0:
      return 17;
    case X86::XMM1:
      return 18;
    case X86::XMM10:
      return 27;
    case X86::XMM11:
      return 28;
    case X86::XMM12:
      return 29;
    case X86::XMM13:
      return 30;
    case X86::XMM14:
      return 31;
    case X86::XMM15:
      return 32;
    case X86::XMM2:
      return 19;
    case X86::XMM3:
      return 20;
    case X86::XMM4:
      return 21;
    case X86::XMM5:
      return 22;
    case X86::XMM6:
      return 23;
    case X86::XMM7:
      return 24;
    case X86::XMM8:
      return 25;
    case X86::XMM9:
      return 26;
    };
  case 1:
    switch (RegNum) {
    default:
      assert(0 && "Invalid RegNum");
      return -1;
    case X86::AH:
      return 0;
    case X86::AL:
      return 0;
    case X86::AX:
      return 0;
    case X86::BH:
      return 3;
    case X86::BL:
      return 3;
    case X86::BP:
      return 4;
    case X86::BPL:
      return 4;
    case X86::BX:
      return 3;
    case X86::CH:
      return 1;
    case X86::CL:
      return 1;
    case X86::CX:
      return 1;
    case X86::DH:
      return 2;
    case X86::DI:
      return 7;
    case X86::DIL:
      return 7;
    case X86::DL:
      return 2;
    case X86::DX:
      return 2;
    case X86::EAX:
      return 0;
    case X86::EBP:
      return 4;
    case X86::EBX:
      return 3;
    case X86::ECX:
      return 1;
    case X86::EDI:
      return 7;
    case X86::EDX:
      return 2;
    case X86::EFLAGS:
      return -1;
    case X86::EIP:
      return 8;
    case X86::ESI:
      return 6;
    case X86::ESP:
      return 5;
    case X86::FP0:
      return -1;
    case X86::FP1:
      return -1;
    case X86::FP2:
      return -1;
    case X86::FP3:
      return -1;
    case X86::FP4:
      return -1;
    case X86::FP5:
      return -1;
    case X86::FP6:
      return -1;
    case X86::IP:
      return -1;
    case X86::MM0:
      return 29;
    case X86::MM1:
      return 30;
    case X86::MM2:
      return 31;
    case X86::MM3:
      return 32;
    case X86::MM4:
      return 33;
    case X86::MM5:
      return 34;
    case X86::MM6:
      return 35;
    case X86::MM7:
      return 36;
    case X86::R10:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R10B:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R10D:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R10W:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R11:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R11B:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R11D:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R11W:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R12:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R12B:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R12D:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R12W:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R13:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R13B:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R13D:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R13W:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R14:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R14B:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R14D:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R14W:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R15:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R15B:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R15D:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R15W:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R8:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R8B:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R8D:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R8W:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R9:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R9B:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R9D:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R9W:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::RAX:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::RBP:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::RBX:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::RCX:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::RDI:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::RDX:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::RIP:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::RSI:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::RSP:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::SI:
      return 6;
    case X86::SIL:
      return 6;
    case X86::SP:
      return 5;
    case X86::SPL:
      return 5;
    case X86::ST0:
      return 12;
    case X86::ST1:
      return 13;
    case X86::ST2:
      return 14;
    case X86::ST3:
      return 15;
    case X86::ST4:
      return 16;
    case X86::ST5:
      return 17;
    case X86::ST6:
      return 18;
    case X86::ST7:
      return 19;
    case X86::XMM0:
      return 21;
    case X86::XMM1:
      return 22;
    case X86::XMM10:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::XMM11:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::XMM12:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::XMM13:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::XMM14:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::XMM15:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::XMM2:
      return 23;
    case X86::XMM3:
      return 24;
    case X86::XMM4:
      return 25;
    case X86::XMM5:
      return 26;
    case X86::XMM6:
      return 27;
    case X86::XMM7:
      return 28;
    case X86::XMM8:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::XMM9:
      assert(0 && "Invalid register for this mode");
      return -1;
    };
  case 2:
    switch (RegNum) {
    default:
      assert(0 && "Invalid RegNum");
      return -1;
    case X86::AH:
      return 0;
    case X86::AL:
      return 0;
    case X86::AX:
      return 0;
    case X86::BH:
      return 3;
    case X86::BL:
      return 3;
    case X86::BP:
      return 5;
    case X86::BPL:
      return 5;
    case X86::BX:
      return 3;
    case X86::CH:
      return 1;
    case X86::CL:
      return 1;
    case X86::CX:
      return 1;
    case X86::DH:
      return 2;
    case X86::DI:
      return 7;
    case X86::DIL:
      return 7;
    case X86::DL:
      return 2;
    case X86::DX:
      return 2;
    case X86::EAX:
      return 0;
    case X86::EBP:
      return 5;
    case X86::EBX:
      return 3;
    case X86::ECX:
      return 1;
    case X86::EDI:
      return 7;
    case X86::EDX:
      return 2;
    case X86::EFLAGS:
      return -1;
    case X86::EIP:
      return 8;
    case X86::ESI:
      return 6;
    case X86::ESP:
      return 4;
    case X86::FP0:
      return -1;
    case X86::FP1:
      return -1;
    case X86::FP2:
      return -1;
    case X86::FP3:
      return -1;
    case X86::FP4:
      return -1;
    case X86::FP5:
      return -1;
    case X86::FP6:
      return -1;
    case X86::IP:
      return -1;
    case X86::MM0:
      return 29;
    case X86::MM1:
      return 30;
    case X86::MM2:
      return 31;
    case X86::MM3:
      return 32;
    case X86::MM4:
      return 33;
    case X86::MM5:
      return 34;
    case X86::MM6:
      return 35;
    case X86::MM7:
      return 36;
    case X86::R10:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R10B:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R10D:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R10W:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R11:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R11B:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R11D:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R11W:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R12:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R12B:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R12D:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R12W:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R13:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R13B:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R13D:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R13W:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R14:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R14B:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R14D:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R14W:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R15:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R15B:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R15D:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R15W:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R8:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R8B:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R8D:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R8W:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R9:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R9B:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R9D:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::R9W:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::RAX:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::RBP:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::RBX:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::RCX:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::RDI:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::RDX:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::RIP:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::RSI:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::RSP:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::SI:
      return 6;
    case X86::SIL:
      return 6;
    case X86::SP:
      return 4;
    case X86::SPL:
      return 4;
    case X86::ST0:
      return 11;
    case X86::ST1:
      return 12;
    case X86::ST2:
      return 13;
    case X86::ST3:
      return 14;
    case X86::ST4:
      return 15;
    case X86::ST5:
      return 16;
    case X86::ST6:
      return 17;
    case X86::ST7:
      return 18;
    case X86::XMM0:
      return 21;
    case X86::XMM1:
      return 22;
    case X86::XMM10:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::XMM11:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::XMM12:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::XMM13:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::XMM14:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::XMM15:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::XMM2:
      return 23;
    case X86::XMM3:
      return 24;
    case X86::XMM4:
      return 25;
    case X86::XMM5:
      return 26;
    case X86::XMM6:
      return 27;
    case X86::XMM7:
      return 28;
    case X86::XMM8:
      assert(0 && "Invalid register for this mode");
      return -1;
    case X86::XMM9:
      assert(0 && "Invalid register for this mode");
      return -1;
    };
  };
}

} // End llvm namespace 
