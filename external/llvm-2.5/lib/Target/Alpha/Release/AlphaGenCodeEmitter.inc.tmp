//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Machine Code Emitter
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

unsigned AlphaCodeEmitter::getBinaryCodeForInstr(const MachineInstr &MI) {
  static const unsigned InstBits[] = {
    0U,
    0U,
    0U,
    0U,
    0U,
    0U,
    0U,
    0U,
    0U,
    0U,
    1073745920U,	// ADDLi
    1073741824U,	// ADDLr
    1073746944U,	// ADDQi
    1073742848U,	// ADDQr
    1476440064U,	// ADDS
    1476441088U,	// ADDT
    0U,	// ADJUSTSTACKDOWN
    0U,	// ADJUSTSTACKUP
    0U,	// ALTENT
    1140854784U,	// ANDi
    1140850688U,	// ANDr
    3825205248U,	// BEQ
    4160749568U,	// BGE
    4227858432U,	// BGT
    1140855040U,	// BICi
    1140850944U,	// BICr
    1140855808U,	// BISi
    1140851712U,	// BISr
    3758096384U,	// BLBC
    4026531840U,	// BLBS
    3959422976U,	// BLE
    3892314112U,	// BLT
    4093640704U,	// BNE
    3286237184U,	// BR
    3544186880U,	// BSR
    0U,	// CAS32
    0U,	// CAS64
    1140855936U,	// CMOVEQi
    1140851840U,	// CMOVEQr
    1140857024U,	// CMOVGEi
    1140852928U,	// CMOVGEr
    1140858048U,	// CMOVGTi
    1140853952U,	// CMOVGTr
    1140855488U,	// CMOVLBCi
    1140851392U,	// CMOVLBCr
    1140855424U,	// CMOVLBSi
    1140851328U,	// CMOVLBSr
    1140857984U,	// CMOVLEi
    1140853888U,	// CMOVLEr
    1140856960U,	// CMOVLTi
    1140852864U,	// CMOVLTr
    1140856000U,	// CMOVNEi
    1140851904U,	// CMOVNEr
    1073742304U,	// CMPBGE
    1073746400U,	// CMPBGEi
    1073743264U,	// CMPEQ
    1073747360U,	// CMPEQi
    1073745312U,	// CMPLE
    1073749408U,	// CMPLEi
    1073744288U,	// CMPLT
    1073748384U,	// CMPLTi
    1476441248U,	// CMPTEQ
    1476441312U,	// CMPTLE
    1476441280U,	// CMPTLT
    1476441216U,	// CMPTUN
    1073743776U,	// CMPULE
    1073747872U,	// CMPULEi
    1073742752U,	// CMPULT
    1073746848U,	// CMPULTi
    0U,	// COND_BRANCH_F
    0U,	// COND_BRANCH_I
    1543504960U,	// CPYSES
    1543504960U,	// CPYSESt
    1543504960U,	// CPYSET
    1543504928U,	// CPYSNS
    1543504928U,	// CPYSNSt
    1543504928U,	// CPYSNT
    1543504928U,	// CPYSNTs
    1543504896U,	// CPYSS
    1543504896U,	// CPYSSt
    1543504896U,	// CPYST
    1543504896U,	// CPYSTs
    1944061504U,	// CTLZ
    1944061440U,	// CTPOP
    1944061536U,	// CTTZ
    1541470080U,	// CVTQS
    1541470144U,	// CVTQT
    1541461376U,	// CVTST
    1541449184U,	// CVTTQ
    1541469568U,	// CVTTS
    1476440160U,	// DIVS
    1476441184U,	// DIVT
    1140857088U,	// EQVi
    1140852992U,	// EQVr
    1207959744U,	// EXTBL
    1207960768U,	// EXTLL
    1207960256U,	// EXTWL
    3288334336U,	// FBEQ
    3623878656U,	// FBGE
    3690987520U,	// FBGT
    3422552064U,	// FBLE
    3355443200U,	// FBLT
    3623878656U,	// FBNE
    1543505216U,	// FCMOVEQS
    1543505216U,	// FCMOVEQT
    1543505312U,	// FCMOVGES
    1543505312U,	// FCMOVGET
    1543505376U,	// FCMOVGTS
    1543505376U,	// FCMOVGTT
    1543505344U,	// FCMOVLES
    1543505344U,	// FCMOVLET
    1543505280U,	// FCMOVLTS
    1543505280U,	// FCMOVLTT
    1543505248U,	// FCMOVNES
    1543505248U,	// FCMOVNET
    1881083648U,	// FTOIS
    1881083392U,	// FTOIT
    1344209024U,	// ITOFS
    1344210048U,	// ITOFT
    1809842176U,	// JMP
    1801142272U,	// JSR
    1744879616U,	// JSR_COROUTINE
    1794850816U,	// JSRs
    0U,	// LAS32
    0U,	// LAS64
    536870912U,	// LDA
    603979776U,	// LDAH
    603979776U,	// LDAHg
    603979776U,	// LDAHr
    536870912U,	// LDAg
    536870912U,	// LDAr
    671088640U,	// LDBU
    671088640U,	// LDBUr
    2684354560U,	// LDL
    2818572288U,	// LDL_L
    2684354560U,	// LDLr
    2751463424U,	// LDQ
    2885681152U,	// LDQ_L
    2751463424U,	// LDQl
    2751463424U,	// LDQr
    2281701376U,	// LDS
    2281701376U,	// LDSr
    2348810240U,	// LDT
    2348810240U,	// LDTr
    805306368U,	// LDWU
    805306368U,	// LDWUr
    1610629120U,	// MB
    0U,	// MEMLABEL
    1275072512U,	// MULLi
    1275068416U,	// MULLr
    1275073536U,	// MULQi
    1275069440U,	// MULQr
    1476440128U,	// MULS
    1476441152U,	// MULT
    1140856064U,	// ORNOTi
    1140851968U,	// ORNOTr
    0U,	// PCLABEL
    1811578881U,	// RETDAG
    1811578881U,	// RETDAGp
    1610661888U,	// RPCC
    1073745984U,	// S4ADDLi
    1073741888U,	// S4ADDLr
    1073747008U,	// S4ADDQi
    1073742912U,	// S4ADDQr
    1073746272U,	// S4SUBLi
    1073742176U,	// S4SUBLr
    1073747296U,	// S4SUBQi
    1073743200U,	// S4SUBQr
    1073746496U,	// S8ADDLi
    1073742400U,	// S8ADDLr
    1073747520U,	// S8ADDQi
    1073743424U,	// S8ADDQr
    1073746784U,	// S8SUBLi
    1073742688U,	// S8SUBLr
    1073747808U,	// S8SUBQi
    1073743712U,	// S8SUBQr
    1944059904U,	// SEXTB
    1944059936U,	// SEXTW
    1207965472U,	// SLi
    1207961376U,	// SLr
    1407234400U,	// SQRTS
    1407235424U,	// SQRTT
    1207965568U,	// SRAi
    1207961472U,	// SRAr
    1207965312U,	// SRLi
    1207961216U,	// SRLr
    939524096U,	// STB
    939524096U,	// STBr
    2952790016U,	// STL
    3087007744U,	// STL_C
    2952790016U,	// STLr
    3019898880U,	// STQ
    3154116608U,	// STQ_C
    3019898880U,	// STQr
    2550136832U,	// STS
    2550136832U,	// STSr
    2617245696U,	// STT
    2617245696U,	// STTr
    872415232U,	// STW
    872415232U,	// STWr
    1073746208U,	// SUBLi
    1073742112U,	// SUBLr
    1073747232U,	// SUBQi
    1073743136U,	// SUBQr
    1476440096U,	// SUBS
    1476441120U,	// SUBT
    0U,	// SWAP32
    0U,	// SWAP64
    1275074048U,	// UMULHi
    1275069952U,	// UMULHr
    1610630144U,	// WMB
    0U,	// WTF
    1140856832U,	// XORi
    1140852736U,	// XORr
    1207965216U,	// ZAPNOTi
    0U
  };
  const unsigned opcode = MI.getOpcode();
  unsigned Value = InstBits[opcode];
  unsigned op = 0;
  op = op;  // suppress warning
  switch (opcode) {
    case Alpha::ADJUSTSTACKDOWN:
    case Alpha::ADJUSTSTACKUP:
    case Alpha::ALTENT:
    case Alpha::CAS32:
    case Alpha::CAS64:
    case Alpha::JSR:
    case Alpha::JSRs:
    case Alpha::LAS32:
    case Alpha::LAS64:
    case Alpha::MB:
    case Alpha::MEMLABEL:
    case Alpha::PCLABEL:
    case Alpha::RETDAG:
    case Alpha::RETDAGp:
    case Alpha::SWAP32:
    case Alpha::SWAP64:
    case Alpha::WMB:
    case Alpha::WTF: {
      break;
    }
    case Alpha::FTOIS:
    case Alpha::FTOIT:
    case Alpha::ITOFS:
    case Alpha::ITOFT: {
      // op: Fc
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= op & 31U;
      // op: Fa
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & 31U) << 21;
      break;
    }
    case Alpha::ADDS:
    case Alpha::ADDT:
    case Alpha::CMPTEQ:
    case Alpha::CMPTLE:
    case Alpha::CMPTLT:
    case Alpha::CMPTUN:
    case Alpha::CPYSES:
    case Alpha::CPYSESt:
    case Alpha::CPYSET:
    case Alpha::CPYSNS:
    case Alpha::CPYSNSt:
    case Alpha::CPYSNT:
    case Alpha::CPYSNTs:
    case Alpha::CPYSS:
    case Alpha::CPYSSt:
    case Alpha::CPYST:
    case Alpha::CPYSTs:
    case Alpha::DIVS:
    case Alpha::DIVT:
    case Alpha::FCMOVEQS:
    case Alpha::FCMOVEQT:
    case Alpha::FCMOVGES:
    case Alpha::FCMOVGET:
    case Alpha::FCMOVGTS:
    case Alpha::FCMOVGTT:
    case Alpha::FCMOVLES:
    case Alpha::FCMOVLET:
    case Alpha::FCMOVLTS:
    case Alpha::FCMOVLTT:
    case Alpha::FCMOVNES:
    case Alpha::FCMOVNET:
    case Alpha::MULS:
    case Alpha::MULT:
    case Alpha::SUBS:
    case Alpha::SUBT: {
      // op: Fc
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= op & 31U;
      // op: Fa
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & 31U) << 21;
      // op: Fb
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & 31U) << 16;
      break;
    }
    case Alpha::CVTQS:
    case Alpha::CVTQT:
    case Alpha::CVTST:
    case Alpha::CVTTQ:
    case Alpha::CVTTS:
    case Alpha::SQRTS:
    case Alpha::SQRTT: {
      // op: Fc
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= op & 31U;
      // op: Fb
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & 31U) << 16;
      break;
    }
    case Alpha::RPCC: {
      // op: Ra
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & 31U) << 21;
      break;
    }
    case Alpha::JSR_COROUTINE: {
      // op: Ra
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & 31U) << 21;
      // op: Rb
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & 31U) << 16;
      // op: disp
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= op & 16383U;
      break;
    }
    case Alpha::BEQ:
    case Alpha::BGE:
    case Alpha::BGT:
    case Alpha::BLBC:
    case Alpha::BLBS:
    case Alpha::BLE:
    case Alpha::BLT:
    case Alpha::BNE:
    case Alpha::COND_BRANCH_F:
    case Alpha::COND_BRANCH_I:
    case Alpha::FBEQ:
    case Alpha::FBGE:
    case Alpha::FBGT:
    case Alpha::FBLE:
    case Alpha::FBLT:
    case Alpha::FBNE: {
      // op: Ra
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & 31U) << 21;
      // op: disp
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= op & 2097151U;
      break;
    }
    case Alpha::LDA:
    case Alpha::LDAH:
    case Alpha::LDAHg:
    case Alpha::LDAHr:
    case Alpha::LDAg:
    case Alpha::LDAr:
    case Alpha::LDBU:
    case Alpha::LDBUr:
    case Alpha::LDL:
    case Alpha::LDL_L:
    case Alpha::LDLr:
    case Alpha::LDQ:
    case Alpha::LDQ_L:
    case Alpha::LDQl:
    case Alpha::LDQr:
    case Alpha::LDS:
    case Alpha::LDSr:
    case Alpha::LDT:
    case Alpha::LDTr:
    case Alpha::LDWU:
    case Alpha::LDWUr:
    case Alpha::STB:
    case Alpha::STBr:
    case Alpha::STL:
    case Alpha::STLr:
    case Alpha::STQ:
    case Alpha::STQr:
    case Alpha::STS:
    case Alpha::STSr:
    case Alpha::STT:
    case Alpha::STTr:
    case Alpha::STW:
    case Alpha::STWr: {
      // op: Ra
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & 31U) << 21;
      // op: disp
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= op & 65535U;
      // op: Rb
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & 31U) << 16;
      break;
    }
    case Alpha::STL_C:
    case Alpha::STQ_C: {
      // op: Ra
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & 31U) << 21;
      // op: disp
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= op & 65535U;
      // op: Rb
      op = getMachineOpValue(MI, MI.getOperand(3));
      Value |= (op & 31U) << 16;
      break;
    }
    case Alpha::JMP: {
      // op: Rb
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & 31U) << 16;
      break;
    }
    case Alpha::ADDLi:
    case Alpha::ADDQi:
    case Alpha::ANDi:
    case Alpha::BICi:
    case Alpha::BISi:
    case Alpha::CMOVEQi:
    case Alpha::CMOVGEi:
    case Alpha::CMOVGTi:
    case Alpha::CMOVLBCi:
    case Alpha::CMOVLBSi:
    case Alpha::CMOVLEi:
    case Alpha::CMOVLTi:
    case Alpha::CMOVNEi:
    case Alpha::CMPBGEi:
    case Alpha::CMPEQi:
    case Alpha::CMPLEi:
    case Alpha::CMPLTi:
    case Alpha::CMPULEi:
    case Alpha::CMPULTi:
    case Alpha::EQVi:
    case Alpha::MULLi:
    case Alpha::MULQi:
    case Alpha::ORNOTi:
    case Alpha::S4ADDLi:
    case Alpha::S4ADDQi:
    case Alpha::S4SUBLi:
    case Alpha::S4SUBQi:
    case Alpha::S8ADDLi:
    case Alpha::S8ADDQi:
    case Alpha::S8SUBLi:
    case Alpha::S8SUBQi:
    case Alpha::SLi:
    case Alpha::SRAi:
    case Alpha::SRLi:
    case Alpha::SUBLi:
    case Alpha::SUBQi:
    case Alpha::UMULHi:
    case Alpha::XORi:
    case Alpha::ZAPNOTi: {
      // op: Rc
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= op & 31U;
      // op: Ra
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & 31U) << 21;
      // op: LIT
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & 255U) << 13;
      break;
    }
    case Alpha::ADDLr:
    case Alpha::ADDQr:
    case Alpha::ANDr:
    case Alpha::BICr:
    case Alpha::BISr:
    case Alpha::CMOVEQr:
    case Alpha::CMOVGEr:
    case Alpha::CMOVGTr:
    case Alpha::CMOVLBCr:
    case Alpha::CMOVLBSr:
    case Alpha::CMOVLEr:
    case Alpha::CMOVLTr:
    case Alpha::CMOVNEr:
    case Alpha::CMPBGE:
    case Alpha::CMPEQ:
    case Alpha::CMPLE:
    case Alpha::CMPLT:
    case Alpha::CMPULE:
    case Alpha::CMPULT:
    case Alpha::EQVr:
    case Alpha::EXTBL:
    case Alpha::EXTLL:
    case Alpha::EXTWL:
    case Alpha::MULLr:
    case Alpha::MULQr:
    case Alpha::ORNOTr:
    case Alpha::S4ADDLr:
    case Alpha::S4ADDQr:
    case Alpha::S4SUBLr:
    case Alpha::S4SUBQr:
    case Alpha::S8ADDLr:
    case Alpha::S8ADDQr:
    case Alpha::S8SUBLr:
    case Alpha::S8SUBQr:
    case Alpha::SLr:
    case Alpha::SRAr:
    case Alpha::SRLr:
    case Alpha::SUBLr:
    case Alpha::SUBQr:
    case Alpha::UMULHr:
    case Alpha::XORr: {
      // op: Rc
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= op & 31U;
      // op: Ra
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & 31U) << 21;
      // op: Rb
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & 31U) << 16;
      break;
    }
    case Alpha::CTLZ:
    case Alpha::CTPOP:
    case Alpha::CTTZ:
    case Alpha::SEXTB:
    case Alpha::SEXTW: {
      // op: Rc
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= op & 31U;
      // op: Rb
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & 31U) << 16;
      break;
    }
    case Alpha::BR:
    case Alpha::BSR: {
      // op: disp
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= op & 2097151U;
      break;
    }
  default:
    cerr << "Not supported instr: " << MI << "\n";
    abort();
  }
  return Value;
}

