//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.  This method returns true if the
/// machine instruction was sufficiently described to print it, otherwise
/// it returns false.
bool PPCAsmPrinter::printInstruction(const MachineInstr *MI) {
  static const unsigned OpInfo[] = {
    2U,	// PHI
    0U,	// INLINEASM
    0U,	// DBG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// DECLARE
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    268435467U,	// ADD4
    268435467U,	// ADD8
    268435472U,	// ADDC
    268435472U,	// ADDC8
    268435478U,	// ADDE
    268435478U,	// ADDE8
    268439580U,	// ADDI
    268439580U,	// ADDI8
    268439586U,	// ADDIC
    268439593U,	// ADDICo
    268443697U,	// ADDIS
    268443697U,	// ADDIS8
    268468280U,	// ADDME
    268468280U,	// ADDME8
    268468287U,	// ADDZE
    268468287U,	// ADDZE8
    541065217U,	// ADJCALLSTACKDOWN
    545259521U,	// ADJCALLSTACKUP
    268435526U,	// AND
    268435526U,	// AND8
    268435531U,	// ANDC
    268435531U,	// ANDC8
    268447825U,	// ANDISo
    268447825U,	// ANDISo8
    268447833U,	// ANDIo
    268447833U,	// ANDIo8
    549453825U,	// ATOMIC_CMP_SWAP_I16
    553648129U,	// ATOMIC_CMP_SWAP_I32
    557842433U,	// ATOMIC_CMP_SWAP_I64
    562036737U,	// ATOMIC_CMP_SWAP_I8
    566231041U,	// ATOMIC_LOAD_ADD_I16
    570425345U,	// ATOMIC_LOAD_ADD_I32
    574619649U,	// ATOMIC_LOAD_ADD_I64
    578813953U,	// ATOMIC_LOAD_ADD_I8
    583008257U,	// ATOMIC_LOAD_AND_I16
    587202561U,	// ATOMIC_LOAD_AND_I32
    591396865U,	// ATOMIC_LOAD_AND_I64
    595591169U,	// ATOMIC_LOAD_AND_I8
    599785473U,	// ATOMIC_LOAD_NAND_I16
    603979777U,	// ATOMIC_LOAD_NAND_I32
    608174081U,	// ATOMIC_LOAD_NAND_I64
    612368385U,	// ATOMIC_LOAD_NAND_I8
    616562689U,	// ATOMIC_LOAD_OR_I16
    620756993U,	// ATOMIC_LOAD_OR_I32
    624951297U,	// ATOMIC_LOAD_OR_I64
    629145601U,	// ATOMIC_LOAD_OR_I8
    633339905U,	// ATOMIC_LOAD_SUB_I16
    637534209U,	// ATOMIC_LOAD_SUB_I32
    641728513U,	// ATOMIC_LOAD_SUB_I64
    645922817U,	// ATOMIC_LOAD_SUB_I8
    650117121U,	// ATOMIC_LOAD_XOR_I16
    654311425U,	// ATOMIC_LOAD_XOR_I32
    658505729U,	// ATOMIC_LOAD_XOR_I64
    662700033U,	// ATOMIC_LOAD_XOR_I8
    666894337U,	// ATOMIC_SWAP_I16
    671088641U,	// ATOMIC_SWAP_I32
    675282945U,	// ATOMIC_SWAP_I64
    679477249U,	// ATOMIC_SWAP_I8
    805306464U,	// B
    1220804707U,	// BCC
    101U,	// BCTR
    107U,	// BCTRL8_ELF
    107U,	// BCTRL8_Macho
    107U,	// BCTRL_ELF
    107U,	// BCTRL_Macho
    1493172338U,	// BL8_ELF
    1493172338U,	// BL8_Macho
    1761607798U,	// BLA8_ELF
    1761607798U,	// BLA8_Macho
    1761607798U,	// BLA_ELF
    1761607798U,	// BLA_Macho
    1228931171U,	// BLR
    1493172338U,	// BL_ELF
    1493172338U,	// BL_Macho
    268435579U,	// CMPD
    268439681U,	// CMPDI
    268435592U,	// CMPLD
    268447887U,	// CMPLDI
    268435607U,	// CMPLW
    268447902U,	// CMPLWI
    268435622U,	// CMPW
    268439724U,	// CMPWI
    268468403U,	// CNTLZD
    268468411U,	// CNTLZW
    268435651U,	// CREQV
    268435658U,	// CROR
    268959939U,	// CRSET
    1879048400U,	// DCBA
    1879048406U,	// DCBF
    1879048412U,	// DCBI
    1879048418U,	// DCBST
    1879048425U,	// DCBT
    1879048431U,	// DCBTST
    1879048439U,	// DCBZ
    1879048445U,	// DCBZL
    268435716U,	// DIVD
    268435722U,	// DIVDU
    268435729U,	// DIVW
    268435735U,	// DIVWU
    2147483934U,	// DSS
    291U,	// DSSALL
    2415919403U,	// DST
    2415919403U,	// DST64
    2415919408U,	// DSTST
    2415919408U,	// DSTST64
    2415919415U,	// DSTSTT
    2415919415U,	// DSTSTT64
    2415919423U,	// DSTT
    2415919423U,	// DSTT64
    696254465U,	// DWARF_LOC
    700448769U,	// DYNALLOC
    704643073U,	// DYNALLOC8
    268435781U,	// EQV
    268435781U,	// EQV8
    268468554U,	// EXTSB
    268468554U,	// EXTSB8
    268468561U,	// EXTSH
    268468561U,	// EXTSH8
    268468568U,	// EXTSW
    268468568U,	// EXTSW_32
    268468568U,	// EXTSW_32_64
    268468575U,	// FABSD
    268468575U,	// FABSS
    268435813U,	// FADD
    268435819U,	// FADDS
    268435813U,	// FADDrtz
    268468594U,	// FCFID
    268435833U,	// FCMPUD
    268435833U,	// FCMPUS
    268468608U,	// FCTIDZ
    268468616U,	// FCTIWZ
    268435856U,	// FDIV
    268435862U,	// FDIVS
    268435869U,	// FMADD
    268435876U,	// FMADDS
    268468652U,	// FMRD
    268468652U,	// FMRS
    268468652U,	// FMRSD
    268435889U,	// FMSUB
    268435896U,	// FMSUBS
    268435904U,	// FMUL
    268435910U,	// FMULS
    268468685U,	// FNABSD
    268468685U,	// FNABSS
    268468692U,	// FNEGD
    268468692U,	// FNEGS
    268435930U,	// FNMADD
    268435938U,	// FNMADDS
    268435947U,	// FNMSUB
    268435955U,	// FNMSUBS
    268468732U,	// FRSP
    268435970U,	// FSELD
    268435970U,	// FSELS
    268468744U,	// FSQRT
    268468751U,	// FSQRTS
    268435991U,	// FSUB
    268435997U,	// FSUBS
    269287972U,	// LA
    269484584U,	// LBZ
    269484584U,	// LBZ8
    269746733U,	// LBZU
    269746733U,	// LBZU8
    270008883U,	// LBZX
    270008883U,	// LBZX8
    270271033U,	// LD
    270008893U,	// LDARX
    270533188U,	// LDU
    270008905U,	// LDX
    269484622U,	// LFD
    269746766U,	// LFDU
    270008915U,	// LFDX
    269484633U,	// LFS
    269746777U,	// LFSU
    270008926U,	// LFSX
    269484644U,	// LHA
    269484644U,	// LHA8
    269746793U,	// LHAU
    269320809U,	// LHAU8
    270008943U,	// LHAX
    270008943U,	// LHAX8
    270008949U,	// LHBRX
    269484668U,	// LHZ
    269484668U,	// LHZ8
    269746817U,	// LHZU
    269746817U,	// LHZU8
    270008967U,	// LHZX
    270008967U,	// LHZX8
    270795405U,	// LI
    270795405U,	// LI8
    271057553U,	// LIS
    271057553U,	// LIS8
    270008982U,	// LVEBX
    270008989U,	// LVEHX
    270008996U,	// LVEWX
    270009003U,	// LVSL
    270009009U,	// LVSR
    270009015U,	// LVX
    270009020U,	// LVXL
    270271170U,	// LWA
    270009031U,	// LWARX
    270009038U,	// LWAX
    270009044U,	// LWBRX
    269484763U,	// LWZ
    269484763U,	// LWZ8
    269746912U,	// LWZU
    269746912U,	// LWZU8
    270009062U,	// LWZX
    270009062U,	// LWZX8
    268468972U,	// MCRF
    419431154U,	// MFCR
    419431160U,	// MFCTR
    419431160U,	// MFCTR8
    419431167U,	// MFFS
    419431173U,	// MFLR
    419431173U,	// MFLR8
    271319794U,	// MFOCRF
    440402699U,	// MFVRSAVE
    419431186U,	// MFVSCR
    2684355354U,	// MTCRF
    419431201U,	// MTCTR
    419431201U,	// MTCTR8
    2952790824U,	// MTFSB0
    2952790832U,	// MTFSB1
    3397387064U,	// MTFSF
    419431231U,	// MTLR
    419431231U,	// MTLR8
    419431237U,	// MTVRSAVE
    419431249U,	// MTVSCR
    268436313U,	// MULHD
    268436320U,	// MULHDU
    268436328U,	// MULHW
    268436335U,	// MULHWU
    268436343U,	// MULLD
    268440446U,	// MULLI
    268436357U,	// MULLW
    3489661042U,	// MovePCtoLR
    3489661042U,	// MovePCtoLR8
    268436364U,	// NAND
    268436364U,	// NAND8
    268469138U,	// NEG
    268469138U,	// NEG8
    919U,	// NOP
    268436380U,	// NOR
    268436380U,	// NOR8
    268436385U,	// OR
    268436385U,	// OR4To8
    268436385U,	// OR8
    268436385U,	// OR8To4
    268436389U,	// ORC
    268436389U,	// ORC8
    268448682U,	// ORI
    268448682U,	// ORI8
    268448687U,	// ORIS
    268448687U,	// ORIS8
    268436405U,	// RLDCL
    268452796U,	// RLDICL
    268452804U,	// RLDICR
    271713228U,	// RLDIMI
    271746004U,	// RLWIMI
    268456924U,	// RLWINM
    268456932U,	// RLWINMo
    268436461U,	// RLWNM
    717225985U,	// SELECT_CC_F4
    717225985U,	// SELECT_CC_F8
    717225985U,	// SELECT_CC_I4
    717225985U,	// SELECT_CC_I8
    717225985U,	// SELECT_CC_VRRC
    268436468U,	// SLD
    268436473U,	// SLW
    721420289U,	// SPILL_CR
    268436478U,	// SRAD
    268452868U,	// SRADI
    268436491U,	// SRAW
    268456977U,	// SRAWI
    268436504U,	// SRD
    268436509U,	// SRW
    269485090U,	// STB
    269485090U,	// STB8
    3409970215U,	// STBU
    3409970215U,	// STBU8
    270009389U,	// STBX
    270009389U,	// STBX8
    270271539U,	// STD
    270009400U,	// STDCX
    3414164544U,	// STDU
    270009414U,	// STDUX
    270009421U,	// STDX
    270009421U,	// STDX_32
    270271539U,	// STD_32
    269485139U,	// STFD
    3409970265U,	// STFDU
    270009440U,	// STFDX
    270009447U,	// STFIWX
    269485167U,	// STFS
    3409970293U,	// STFSU
    270009468U,	// STFSX
    269485187U,	// STH
    269485187U,	// STH8
    270009480U,	// STHBRX
    3409970320U,	// STHU
    3409970320U,	// STHU8
    270009494U,	// STHX
    270009494U,	// STHX8
    270009500U,	// STVEBX
    270009508U,	// STVEHX
    270009516U,	// STVEWX
    270009524U,	// STVX
    270009530U,	// STVXL
    269485249U,	// STW
    269485249U,	// STW8
    270009542U,	// STWBRX
    270009550U,	// STWCX
    3409970390U,	// STWU
    3409970390U,	// STWU8
    268436700U,	// STWUX
    270009571U,	// STWX
    270009571U,	// STWX8
    268436713U,	// SUBF
    268436713U,	// SUBF8
    268436719U,	// SUBFC
    268436719U,	// SUBFC8
    268436726U,	// SUBFE
    268436726U,	// SUBFE8
    268440829U,	// SUBFIC
    268440829U,	// SUBFIC8
    268469509U,	// SUBFME
    268469509U,	// SUBFME8
    268469517U,	// SUBFZE
    268469517U,	// SUBFZE8
    1301U,	// SYNC
    1493172320U,	// TAILB
    1493172320U,	// TAILB8
    1761608987U,	// TAILBA
    1761608987U,	// TAILBA8
    101U,	// TAILBCTR
    101U,	// TAILBCTR8
    1757447455U,	// TCRETURNai
    1757447468U,	// TCRETURNai8
    1489012026U,	// TCRETURNdi
    1489012039U,	// TCRETURNdi8
    415270229U,	// TCRETURNri
    415270242U,	// TCRETURNri8
    1392U,	// TRAP
    268469622U,	// UPDATE_VRSAVE
    268436869U,	// VADDCUW
    268436878U,	// VADDFP
    268436886U,	// VADDSBS
    268436895U,	// VADDSHS
    268436904U,	// VADDSWS
    268436913U,	// VADDUBM
    268436922U,	// VADDUBS
    268436931U,	// VADDUHM
    268436940U,	// VADDUHS
    268436949U,	// VADDUWM
    268436958U,	// VADDUWS
    268436967U,	// VAND
    268436973U,	// VANDC
    268436980U,	// VAVGSB
    268436988U,	// VAVGSH
    268436996U,	// VAVGSW
    268437004U,	// VAVGUB
    268437012U,	// VAVGUH
    268437020U,	// VAVGUW
    271779364U,	// VCFSX
    271779371U,	// VCFUX
    268437042U,	// VCMPBFP
    268437051U,	// VCMPBFPo
    268437061U,	// VCMPEQFP
    268437071U,	// VCMPEQFPo
    268437082U,	// VCMPEQUB
    268437092U,	// VCMPEQUBo
    268437103U,	// VCMPEQUH
    268437113U,	// VCMPEQUHo
    268437124U,	// VCMPEQUW
    268437134U,	// VCMPEQUWo
    268437145U,	// VCMPGEFP
    268437155U,	// VCMPGEFPo
    268437166U,	// VCMPGTFP
    268437176U,	// VCMPGTFPo
    268437187U,	// VCMPGTSB
    268437197U,	// VCMPGTSBo
    268437208U,	// VCMPGTSH
    268437218U,	// VCMPGTSHo
    268437229U,	// VCMPGTSW
    268437239U,	// VCMPGTSWo
    268437250U,	// VCMPGTUB
    268437260U,	// VCMPGTUBo
    268437271U,	// VCMPGTUH
    268437281U,	// VCMPGTUHo
    268437292U,	// VCMPGTUW
    268437302U,	// VCMPGTUWo
    271779649U,	// VCTSXS
    271779657U,	// VCTUXS
    268470097U,	// VEXPTEFP
    268470107U,	// VLOGEFP
    268437348U,	// VMADDFP
    268437357U,	// VMAXFP
    268437365U,	// VMAXSB
    268437373U,	// VMAXSH
    268437381U,	// VMAXSW
    268437389U,	// VMAXUB
    268437397U,	// VMAXUH
    268437405U,	// VMAXUW
    268437413U,	// VMHADDSHS
    268437424U,	// VMHRADDSHS
    268437436U,	// VMINFP
    268437444U,	// VMINSB
    268437452U,	// VMINSH
    268437460U,	// VMINSW
    268437468U,	// VMINUB
    268437476U,	// VMINUH
    268437484U,	// VMINUW
    268437492U,	// VMLADDUHM
    268437503U,	// VMRGHB
    268437511U,	// VMRGHH
    268437519U,	// VMRGHW
    268437527U,	// VMRGLB
    268437535U,	// VMRGLH
    268437543U,	// VMRGLW
    268437551U,	// VMSUMMBM
    268437561U,	// VMSUMSHM
    268437571U,	// VMSUMSHS
    268437581U,	// VMSUMUBM
    268437591U,	// VMSUMUHM
    268437601U,	// VMSUMUHS
    268437611U,	// VMULESB
    268437620U,	// VMULESH
    268437629U,	// VMULEUB
    268437638U,	// VMULEUH
    268437647U,	// VMULOSB
    268437656U,	// VMULOSH
    268437665U,	// VMULOUB
    268437674U,	// VMULOUH
    268437683U,	// VNMSUBFP
    268437693U,	// VNOR
    268437699U,	// VOR
    268437704U,	// VPERM
    268437711U,	// VPKPX
    268437718U,	// VPKSHSS
    268437727U,	// VPKSHUS
    268437736U,	// VPKSWSS
    268437745U,	// VPKSWUS
    268437754U,	// VPKUHUM
    268437763U,	// VPKUHUS
    268437772U,	// VPKUWUM
    268437781U,	// VPKUWUS
    268470558U,	// VREFP
    268470565U,	// VRFIM
    268470572U,	// VRFIN
    268470579U,	// VRFIP
    268470586U,	// VRFIZ
    268437825U,	// VRLB
    268437831U,	// VRLH
    268437837U,	// VRLW
    268470611U,	// VRSQRTEFP
    268437854U,	// VSEL
    268437860U,	// VSL
    268437865U,	// VSLB
    268437871U,	// VSLDOI
    268437879U,	// VSLH
    268437885U,	// VSLO
    268437891U,	// VSLW
    271780233U,	// VSPLTB
    271780241U,	// VSPLTH
    271845785U,	// VSPLTISB
    271845795U,	// VSPLTISH
    271845805U,	// VSPLTISW
    271780279U,	// VSPLTW
    268437951U,	// VSR
    268437956U,	// VSRAB
    268437963U,	// VSRAH
    268437970U,	// VSRAW
    268437977U,	// VSRB
    268437983U,	// VSRH
    268437989U,	// VSRO
    268437995U,	// VSRW
    268438001U,	// VSUBCUW
    268438010U,	// VSUBFP
    268438018U,	// VSUBSBS
    268438027U,	// VSUBSHS
    268438036U,	// VSUBSWS
    268438045U,	// VSUBUBM
    268438054U,	// VSUBUBS
    268438063U,	// VSUBUHM
    268438072U,	// VSUBUHS
    268438081U,	// VSUBUWM
    268438090U,	// VSUBUWS
    268438099U,	// VSUM2SWS
    268438109U,	// VSUM4SBS
    268438119U,	// VSUM4SHS
    268438129U,	// VSUM4UBS
    268438139U,	// VSUMSWS
    268470916U,	// VUPKHPX
    268470925U,	// VUPKHSB
    268470934U,	// VUPKHSH
    268470943U,	// VUPKLPX
    268470952U,	// VUPKLSB
    268470961U,	// VUPKLSH
    268438202U,	// VXOR
    268962490U,	// V_SET0
    268438208U,	// XOR
    268438208U,	// XOR8
    268450501U,	// XORI
    268450501U,	// XORI8
    268450507U,	// XORIS
    268450507U,	// XORIS8
    0U
  };

  const char *AsmStrs = 
    "\000\000PHINODE\n\000add \000addc \000adde \000addi \000addic \000addic"
    ". \000addis \000addme \000addze \000and \000andc \000andis. \000andi. \000"
    "b \000b\000bctr\n\000bctrl\n\000bl \000bla \000cmpd \000cmpdi \000cmpld"
    " \000cmpldi \000cmplw \000cmplwi \000cmpw \000cmpwi \000cntlzd \000cntl"
    "zw \000creqv \000cror \000dcba \000dcbf \000dcbi \000dcbst \000dcbt \000"
    "dcbtst \000dcbz \000dcbzl \000divd \000divdu \000divw \000divwu \000dss"
    " \000dssall\n\000dst \000dstst \000dststt \000dstt \000eqv \000extsb \000"
    "extsh \000extsw \000fabs \000fadd \000fadds \000fcfid \000fcmpu \000fct"
    "idz \000fctiwz \000fdiv \000fdivs \000fmadd \000fmadds \000fmr \000fmsu"
    "b \000fmsubs \000fmul \000fmuls \000fnabs \000fneg \000fnmadd \000fnmad"
    "ds \000fnmsub \000fnmsubs \000frsp \000fsel \000fsqrt \000fsqrts \000fs"
    "ub \000fsubs \000la \000lbz \000lbzu \000lbzx \000ld \000ldarx \000ldu "
    "\000ldx \000lfd \000lfdx \000lfs \000lfsx \000lha \000lhau \000lhax \000"
    "lhbrx \000lhz \000lhzu \000lhzx \000li \000lis \000lvebx \000lvehx \000"
    "lvewx \000lvsl \000lvsr \000lvx \000lvxl \000lwa \000lwarx \000lwax \000"
    "lwbrx \000lwz \000lwzu \000lwzx \000mcrf \000mfcr \000mfctr \000mffs \000"
    "mflr \000mfspr \000mfvscr \000mtcrf \000mtctr \000mtfsb0 \000mtfsb1 \000"
    "mtfsf \000mtlr \000mtspr 256, \000mtvscr \000mulhd \000mulhdu \000mulhw"
    " \000mulhwu \000mulld \000mulli \000mullw \000nand \000neg \000nop\n\000"
    "nor \000or \000orc \000ori \000oris \000rldcl \000rldicl \000rldicr \000"
    "rldimi \000rlwimi \000rlwinm \000rlwinm. \000rlwnm \000sld \000slw \000"
    "srad \000sradi \000sraw \000srawi \000srd \000srw \000stb \000stbu \000"
    "stbx \000std \000stdcx. \000stdu \000stdux \000stdx \000stfd \000stfdu "
    "\000stfdx \000stfiwx \000stfs \000stfsu \000stfsx \000sth \000sthbrx \000"
    "sthu \000sthx \000stvebx \000stvehx \000stvewx \000stvx \000stvxl \000s"
    "tw \000stwbrx \000stwcx. \000stwu \000stwux \000stwx \000subf \000subfc"
    " \000subfe \000subfic \000subfme \000subfze \000sync\n\000ba \000#TC_RE"
    "TURNa \000#TC_RETURNa8 \000#TC_RETURNd \000#TC_RETURNd8 \000#TC_RETURNr"
    " \000#TC_RETURNr8 \000trap\n\000UPDATE_VRSAVE \000vaddcuw \000vaddfp \000"
    "vaddsbs \000vaddshs \000vaddsws \000vaddubm \000vaddubs \000vadduhm \000"
    "vadduhs \000vadduwm \000vadduws \000vand \000vandc \000vavgsb \000vavgs"
    "h \000vavgsw \000vavgub \000vavguh \000vavguw \000vcfsx \000vcfux \000v"
    "cmpbfp \000vcmpbfp. \000vcmpeqfp \000vcmpeqfp. \000vcmpequb \000vcmpequ"
    "b. \000vcmpequh \000vcmpequh. \000vcmpequw \000vcmpequw. \000vcmpgefp \000"
    "vcmpgefp. \000vcmpgtfp \000vcmpgtfp. \000vcmpgtsb \000vcmpgtsb. \000vcm"
    "pgtsh \000vcmpgtsh. \000vcmpgtsw \000vcmpgtsw. \000vcmpgtub \000vcmpgtu"
    "b. \000vcmpgtuh \000vcmpgtuh. \000vcmpgtuw \000vcmpgtuw. \000vctsxs \000"
    "vctuxs \000vexptefp \000vlogefp \000vmaddfp \000vmaxfp \000vmaxsb \000v"
    "maxsh \000vmaxsw \000vmaxub \000vmaxuh \000vmaxuw \000vmhaddshs \000vmh"
    "raddshs \000vminfp \000vminsb \000vminsh \000vminsw \000vminub \000vmin"
    "uh \000vminuw \000vmladduhm \000vmrghb \000vmrghh \000vmrghw \000vmrglb"
    " \000vmrglh \000vmrglw \000vmsummbm \000vmsumshm \000vmsumshs \000vmsum"
    "ubm \000vmsumuhm \000vmsumuhs \000vmulesb \000vmulesh \000vmuleub \000v"
    "muleuh \000vmulosb \000vmulosh \000vmuloub \000vmulouh \000vnmsubfp \000"
    "vnor \000vor \000vperm \000vpkpx \000vpkshss \000vpkshus \000vpkswss \000"
    "vpkswus \000vpkuhum \000vpkuhus \000vpkuwum \000vpkuwus \000vrefp \000v"
    "rfim \000vrfin \000vrfip \000vrfiz \000vrlb \000vrlh \000vrlw \000vrsqr"
    "tefp \000vsel \000vsl \000vslb \000vsldoi \000vslh \000vslo \000vslw \000"
    "vspltb \000vsplth \000vspltisb \000vspltish \000vspltisw \000vspltw \000"
    "vsr \000vsrab \000vsrah \000vsraw \000vsrb \000vsrh \000vsro \000vsrw \000"
    "vsubcuw \000vsubfp \000vsubsbs \000vsubshs \000vsubsws \000vsububm \000"
    "vsububs \000vsubuhm \000vsubuhs \000vsubuwm \000vsubuws \000vsum2sws \000"
    "vsum4sbs \000vsum4shs \000vsum4ubs \000vsumsws \000vupkhpx \000vupkhsb "
    "\000vupkhsh \000vupklpx \000vupklsb \000vupklsh \000vxor \000xor \000xo"
    "ri \000xoris \000";

  if (MI->getOpcode() == TargetInstrInfo::INLINEASM) {
    O << "\t";
    printInlineAsm(MI);
    return true;
  } else if (MI->isLabel()) {
    printLabel(MI);
    return true;
  } else if (MI->getOpcode() == TargetInstrInfo::DECLARE) {
    printDeclare(MI);
    return true;
  } else if (MI->getOpcode() == TargetInstrInfo::IMPLICIT_DEF) {
    printImplicitDef(MI);
    return true;
  }

  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  if (Bits == 0) return false;
  O << AsmStrs+(Bits & 4095);


  // Fragment 0 encoded into 4 bits for 14 unique commands.
  switch ((Bits >> 28) & 15) {
  default:   // unreachable.
  case 0:
    return true;
    break;
  case 1:
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, ADDI, ADDI8, ADDIC, ADDICo, ADDI...
    printOperand(MI, 0); 
    break;
  case 2:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP, ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP...
    PrintSpecial(MI, "comment"); 
    break;
  case 3:
    // B
    printBranchOperand(MI, 0); 
    O << "\n"; 
    return true;
    break;
  case 4:
    // BCC, BLR
    printPredicateOperand(MI, 0, "cc"); 
    break;
  case 5:
    // BL8_ELF, BL8_Macho, BL_ELF, BL_Macho, TAILB, TAILB8, TCRETURNdi, TCRET...
    printCallOperand(MI, 0); 
    break;
  case 6:
    // BLA8_ELF, BLA8_Macho, BLA_ELF, BLA_Macho, TAILBA, TAILBA8, TCRETURNai,...
    printAbsAddrOperand(MI, 0); 
    break;
  case 7:
    // DCBA, DCBF, DCBI, DCBST, DCBT, DCBTST, DCBZ, DCBZL
    printMemRegReg(MI, 0); 
    O << "\n"; 
    return true;
    break;
  case 8:
    // DSS
    printU5ImmOperand(MI, 1); 
    O << "\n"; 
    return true;
    break;
  case 9:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64
    printOperand(MI, 2); 
    O << ", "; 
    printOperand(MI, 3); 
    O << ", "; 
    printU5ImmOperand(MI, 1); 
    O << "\n"; 
    return true;
    break;
  case 10:
    // MTCRF
    printcrbitm(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    O << "\n"; 
    return true;
    break;
  case 11:
    // MTFSB0, MTFSB1
    printU5ImmOperand(MI, 0); 
    O << "\n"; 
    return true;
    break;
  case 12:
    // MTFSF, STBU, STBU8, STDU, STFDU, STFSU, STHU, STHU8, STWU, STWU8
    printOperand(MI, 1); 
    O << ", "; 
    break;
  case 13:
    // MovePCtoLR, MovePCtoLR8
    printPICLabel(MI, 0); 
    O << "\n"; 
    return true;
    break;
  }


  // Fragment 1 encoded into 6 bits for 47 unique commands.
  switch ((Bits >> 22) & 63) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, ADDI, ADDI8, ADDIC, ADDICo, ADDI...
    O << ", "; 
    break;
  case 1:
    // ADJCALLSTACKDOWN
    O << " ADJCALLSTACKDOWN\n"; 
    return true;
    break;
  case 2:
    // ADJCALLSTACKUP
    O << " ADJCALLSTACKUP\n"; 
    return true;
    break;
  case 3:
    // ATOMIC_CMP_SWAP_I16
    O << " ATOMIC_CMP_SWAP_I16 PSEUDO!\n"; 
    return true;
    break;
  case 4:
    // ATOMIC_CMP_SWAP_I32
    O << " ATOMIC_CMP_SWAP_I32 PSEUDO!\n"; 
    return true;
    break;
  case 5:
    // ATOMIC_CMP_SWAP_I64
    O << " ATOMIC_CMP_SWAP_I64 PSEUDO!\n"; 
    return true;
    break;
  case 6:
    // ATOMIC_CMP_SWAP_I8
    O << " ATOMIC_CMP_SWAP_I8 PSEUDO!\n"; 
    return true;
    break;
  case 7:
    // ATOMIC_LOAD_ADD_I16
    O << " ATOMIC_LOAD_ADD_I16 PSEUDO!\n"; 
    return true;
    break;
  case 8:
    // ATOMIC_LOAD_ADD_I32
    O << " ATOMIC_LOAD_ADD_I32 PSEUDO!\n"; 
    return true;
    break;
  case 9:
    // ATOMIC_LOAD_ADD_I64
    O << " ATOMIC_LOAD_ADD_I64 PSEUDO!\n"; 
    return true;
    break;
  case 10:
    // ATOMIC_LOAD_ADD_I8
    O << " ATOMIC_LOAD_ADD_I8 PSEUDO!\n"; 
    return true;
    break;
  case 11:
    // ATOMIC_LOAD_AND_I16
    O << " ATOMIC_LOAD_AND_I16 PSEUDO!\n"; 
    return true;
    break;
  case 12:
    // ATOMIC_LOAD_AND_I32
    O << " ATOMIC_LOAD_AND_I32 PSEUDO!\n"; 
    return true;
    break;
  case 13:
    // ATOMIC_LOAD_AND_I64
    O << " ATOMIC_LOAD_AND_I64 PSEUDO!\n"; 
    return true;
    break;
  case 14:
    // ATOMIC_LOAD_AND_I8
    O << " ATOMIC_LOAD_AND_I8 PSEUDO!\n"; 
    return true;
    break;
  case 15:
    // ATOMIC_LOAD_NAND_I16
    O << " ATOMIC_LOAD_NAND_I16 PSEUDO!\n"; 
    return true;
    break;
  case 16:
    // ATOMIC_LOAD_NAND_I32
    O << " ATOMIC_LOAD_NAND_I32 PSEUDO!\n"; 
    return true;
    break;
  case 17:
    // ATOMIC_LOAD_NAND_I64
    O << " ATOMIC_LOAD_NAND_I64 PSEUDO!\n"; 
    return true;
    break;
  case 18:
    // ATOMIC_LOAD_NAND_I8
    O << " ATOMIC_LOAD_NAND_I8 PSEUDO!\n"; 
    return true;
    break;
  case 19:
    // ATOMIC_LOAD_OR_I16
    O << " ATOMIC_LOAD_OR_I16 PSEUDO!\n"; 
    return true;
    break;
  case 20:
    // ATOMIC_LOAD_OR_I32
    O << " ATOMIC_LOAD_OR_I32 PSEUDO!\n"; 
    return true;
    break;
  case 21:
    // ATOMIC_LOAD_OR_I64
    O << " ATOMIC_LOAD_OR_I64 PSEUDO!\n"; 
    return true;
    break;
  case 22:
    // ATOMIC_LOAD_OR_I8
    O << " ATOMIC_LOAD_OR_I8 PSEUDO!\n"; 
    return true;
    break;
  case 23:
    // ATOMIC_LOAD_SUB_I16
    O << " ATOMIC_LOAD_SUB_I16 PSEUDO!\n"; 
    return true;
    break;
  case 24:
    // ATOMIC_LOAD_SUB_I32
    O << " ATOMIC_LOAD_SUB_I32 PSEUDO!\n"; 
    return true;
    break;
  case 25:
    // ATOMIC_LOAD_SUB_I64
    O << " ATOMIC_LOAD_SUB_I64 PSEUDO!\n"; 
    return true;
    break;
  case 26:
    // ATOMIC_LOAD_SUB_I8
    O << " ATOMIC_LOAD_SUB_I8 PSEUDO!\n"; 
    return true;
    break;
  case 27:
    // ATOMIC_LOAD_XOR_I16
    O << " ATOMIC_LOAD_XOR_I16 PSEUDO!\n"; 
    return true;
    break;
  case 28:
    // ATOMIC_LOAD_XOR_I32
    O << " ATOMIC_LOAD_XOR_I32 PSEUDO!\n"; 
    return true;
    break;
  case 29:
    // ATOMIC_LOAD_XOR_I64
    O << " ATOMIC_LOAD_XOR_I64 PSEUDO!\n"; 
    return true;
    break;
  case 30:
    // ATOMIC_LOAD_XOR_I8
    O << " ATOMIC_LOAD_XOR_I8 PSEUDO!\n"; 
    return true;
    break;
  case 31:
    // ATOMIC_SWAP_I16
    O << " ATOMIC_SWAP_I16 PSEUDO!\n"; 
    return true;
    break;
  case 32:
    // ATOMIC_SWAP_I32
    O << " ATOMIC_SWAP_I32 PSEUDO!\n"; 
    return true;
    break;
  case 33:
    // ATOMIC_SWAP_I64
    O << " ATOMIC_SWAP_I64 PSEUDO!\n"; 
    return true;
    break;
  case 34:
    // ATOMIC_SWAP_I8
    O << " ATOMIC_SWAP_I8 PSEUDO!\n"; 
    return true;
    break;
  case 35:
    // BCC, TCRETURNai, TCRETURNai8, TCRETURNdi, TCRETURNdi8, TCRETURNri, TCR...
    O << " "; 
    break;
  case 36:
    // BL8_ELF, BL8_Macho, BLA8_ELF, BLA8_Macho, BLA_ELF, BLA_Macho, BL_ELF, ...
    O << "\n"; 
    return true;
    break;
  case 37:
    // BLR
    O << "lr "; 
    printPredicateOperand(MI, 0, "reg"); 
    O << "\n"; 
    return true;
    break;
  case 38:
    // DWARF_LOC
    O << " .loc "; 
    printOperand(MI, 2); 
    O << ", "; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    O << "\n"; 
    return true;
    break;
  case 39:
    // DYNALLOC
    O << " DYNALLOC "; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    O << ", "; 
    printMemRegImm(MI, 2); 
    O << "\n"; 
    return true;
    break;
  case 40:
    // DYNALLOC8
    O << " DYNALLOC8 "; 
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 1); 
    O << ", "; 
    printMemRegImm(MI, 2); 
    O << "\n"; 
    return true;
    break;
  case 41:
    // MFVRSAVE
    O << ", 256\n"; 
    return true;
    break;
  case 42:
    // MTFSF
    printOperand(MI, 2); 
    O << "\n"; 
    return true;
    break;
  case 43:
    // SELECT_CC_F4, SELECT_CC_F8, SELECT_CC_I4, SELECT_CC_I8, SELECT_CC_VRRC
    O << " SELECT_CC PSEUDO!\n"; 
    return true;
    break;
  case 44:
    // SPILL_CR
    O << " SPILL_CR "; 
    printOperand(MI, 0); 
    O << " "; 
    printMemRegImm(MI, 1); 
    O << "\n"; 
    return true;
    break;
  case 45:
    // STBU, STBU8, STFDU, STFSU, STHU, STHU8, STWU, STWU8
    printSymbolLo(MI, 2); 
    O << "("; 
    printOperand(MI, 3); 
    O << ")\n"; 
    return true;
    break;
  case 46:
    // STDU
    printS16X4ImmOperand(MI, 2); 
    O << "("; 
    printOperand(MI, 3); 
    O << ")\n"; 
    return true;
    break;
  }


  // Fragment 2 encoded into 4 bits for 14 unique commands.
  switch ((Bits >> 18) & 15) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, ADDI, ADDI8, ADDIC, ADDICo, ADDI...
    printOperand(MI, 1); 
    break;
  case 1:
    // BCC
    printPredicateOperand(MI, 0, "reg"); 
    O << ", "; 
    printBranchOperand(MI, 2); 
    O << "\n"; 
    return true;
    break;
  case 2:
    // CRSET, V_SET0
    printOperand(MI, 0); 
    O << ", "; 
    printOperand(MI, 0); 
    O << "\n"; 
    return true;
    break;
  case 3:
    // LA, LHAU8
    printSymbolLo(MI, 2); 
    O << "("; 
    break;
  case 4:
    // LBZ, LBZ8, LFD, LFS, LHA, LHA8, LHZ, LHZ8, LWZ, LWZ8, STB, STB8, STFD,...
    printMemRegImm(MI, 1); 
    O << "\n"; 
    return true;
    break;
  case 5:
    // LBZU, LBZU8, LFDU, LFSU, LHAU, LHZU, LHZU8, LWZU, LWZU8
    printMemRegImm(MI, 2); 
    O << "\n"; 
    return true;
    break;
  case 6:
    // LBZX, LBZX8, LDARX, LDX, LFDX, LFSX, LHAX, LHAX8, LHBRX, LHZX, LHZX8, ...
    printMemRegReg(MI, 1); 
    O << "\n"; 
    return true;
    break;
  case 7:
    // LD, LWA, STD, STD_32
    printMemRegImmShifted(MI, 1); 
    O << "\n"; 
    return true;
    break;
  case 8:
    // LDU
    printMemRegImmShifted(MI, 2); 
    O << "\n"; 
    return true;
    break;
  case 9:
    // LI, LI8
    printSymbolLo(MI, 1); 
    O << "\n"; 
    return true;
    break;
  case 10:
    // LIS, LIS8
    printSymbolHi(MI, 1); 
    O << "\n"; 
    return true;
    break;
  case 11:
    // MFOCRF
    printcrbitm(MI, 1); 
    O << "\n"; 
    return true;
    break;
  case 12:
    // RLDIMI, RLWIMI, VCFSX, VCFUX, VCTSXS, VCTUXS, VSPLTB, VSPLTH, VSPLTW
    printOperand(MI, 2); 
    O << ", "; 
    break;
  case 13:
    // VSPLTISB, VSPLTISH, VSPLTISW
    printS5ImmOperand(MI, 1); 
    O << "\n"; 
    return true;
    break;
  }


  // Fragment 3 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 15) & 7) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, ADDI, ADDI8, ADDIC, ADDICo, ADDI...
    O << ", "; 
    break;
  case 1:
    // ADDME, ADDME8, ADDZE, ADDZE8, CNTLZD, CNTLZW, EXTSB, EXTSB8, EXTSH, EX...
    O << "\n"; 
    return true;
    break;
  case 2:
    // LA
    printOperand(MI, 1); 
    O << ")\n"; 
    return true;
    break;
  case 3:
    // LHAU8
    printOperand(MI, 3); 
    O << ")\n"; 
    return true;
    break;
  case 4:
    // RLDIMI
    printU6ImmOperand(MI, 3); 
    O << ", "; 
    printU6ImmOperand(MI, 4); 
    O << "\n"; 
    return true;
    break;
  case 5:
    // RLWIMI
    printU5ImmOperand(MI, 3); 
    O << ", "; 
    printU5ImmOperand(MI, 4); 
    O << ", "; 
    printU5ImmOperand(MI, 5); 
    O << "\n"; 
    return true;
    break;
  case 6:
    // VCFSX, VCFUX, VCTSXS, VCTUXS, VSPLTB, VSPLTH, VSPLTW
    printU5ImmOperand(MI, 1); 
    O << "\n"; 
    return true;
    break;
  }


  // Fragment 4 encoded into 3 bits for 6 unique commands.
  switch ((Bits >> 12) & 7) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, AND, AND8, ANDC, ANDC8, CMPD, CM...
    printOperand(MI, 2); 
    break;
  case 1:
    // ADDI, ADDI8, ADDIC, ADDICo, CMPDI, CMPWI, MULLI, SUBFIC, SUBFIC8
    printS16ImmOperand(MI, 2); 
    O << "\n"; 
    return true;
    break;
  case 2:
    // ADDIS, ADDIS8
    printSymbolHi(MI, 2); 
    O << "\n"; 
    return true;
    break;
  case 3:
    // ANDISo, ANDISo8, ANDIo, ANDIo8, CMPLDI, CMPLWI, ORI, ORI8, ORIS, ORIS8...
    printU16ImmOperand(MI, 2); 
    O << "\n"; 
    return true;
    break;
  case 4:
    // RLDICL, RLDICR, SRADI
    printU6ImmOperand(MI, 2); 
    break;
  case 5:
    // RLWINM, RLWINMo, SRAWI
    printU5ImmOperand(MI, 2); 
    break;
  }

  switch (MI->getOpcode()) {
  case PPC::ADD4:
  case PPC::ADD8:
  case PPC::ADDC:
  case PPC::ADDC8:
  case PPC::ADDE:
  case PPC::ADDE8:
  case PPC::AND:
  case PPC::AND8:
  case PPC::ANDC:
  case PPC::ANDC8:
  case PPC::CMPD:
  case PPC::CMPLD:
  case PPC::CMPLW:
  case PPC::CMPW:
  case PPC::CREQV:
  case PPC::CROR:
  case PPC::DIVD:
  case PPC::DIVDU:
  case PPC::DIVW:
  case PPC::DIVWU:
  case PPC::EQV:
  case PPC::EQV8:
  case PPC::FADD:
  case PPC::FADDS:
  case PPC::FADDrtz:
  case PPC::FCMPUD:
  case PPC::FCMPUS:
  case PPC::FDIV:
  case PPC::FDIVS:
  case PPC::FMUL:
  case PPC::FMULS:
  case PPC::FSUB:
  case PPC::FSUBS:
  case PPC::MULHD:
  case PPC::MULHDU:
  case PPC::MULHW:
  case PPC::MULHWU:
  case PPC::MULLD:
  case PPC::MULLW:
  case PPC::NAND:
  case PPC::NAND8:
  case PPC::NOR:
  case PPC::NOR8:
  case PPC::OR:
  case PPC::OR4To8:
  case PPC::OR8:
  case PPC::OR8To4:
  case PPC::ORC:
  case PPC::ORC8:
  case PPC::SLD:
  case PPC::SLW:
  case PPC::SRAD:
  case PPC::SRADI:
  case PPC::SRAW:
  case PPC::SRAWI:
  case PPC::SRD:
  case PPC::SRW:
  case PPC::STWUX:
  case PPC::SUBF:
  case PPC::SUBF8:
  case PPC::SUBFC:
  case PPC::SUBFC8:
  case PPC::SUBFE:
  case PPC::SUBFE8:
  case PPC::VADDCUW:
  case PPC::VADDFP:
  case PPC::VADDSBS:
  case PPC::VADDSHS:
  case PPC::VADDSWS:
  case PPC::VADDUBM:
  case PPC::VADDUBS:
  case PPC::VADDUHM:
  case PPC::VADDUHS:
  case PPC::VADDUWM:
  case PPC::VADDUWS:
  case PPC::VAND:
  case PPC::VANDC:
  case PPC::VAVGSB:
  case PPC::VAVGSH:
  case PPC::VAVGSW:
  case PPC::VAVGUB:
  case PPC::VAVGUH:
  case PPC::VAVGUW:
  case PPC::VCMPBFP:
  case PPC::VCMPBFPo:
  case PPC::VCMPEQFP:
  case PPC::VCMPEQFPo:
  case PPC::VCMPEQUB:
  case PPC::VCMPEQUBo:
  case PPC::VCMPEQUH:
  case PPC::VCMPEQUHo:
  case PPC::VCMPEQUW:
  case PPC::VCMPEQUWo:
  case PPC::VCMPGEFP:
  case PPC::VCMPGEFPo:
  case PPC::VCMPGTFP:
  case PPC::VCMPGTFPo:
  case PPC::VCMPGTSB:
  case PPC::VCMPGTSBo:
  case PPC::VCMPGTSH:
  case PPC::VCMPGTSHo:
  case PPC::VCMPGTSW:
  case PPC::VCMPGTSWo:
  case PPC::VCMPGTUB:
  case PPC::VCMPGTUBo:
  case PPC::VCMPGTUH:
  case PPC::VCMPGTUHo:
  case PPC::VCMPGTUW:
  case PPC::VCMPGTUWo:
  case PPC::VMAXFP:
  case PPC::VMAXSB:
  case PPC::VMAXSH:
  case PPC::VMAXSW:
  case PPC::VMAXUB:
  case PPC::VMAXUH:
  case PPC::VMAXUW:
  case PPC::VMINFP:
  case PPC::VMINSB:
  case PPC::VMINSH:
  case PPC::VMINSW:
  case PPC::VMINUB:
  case PPC::VMINUH:
  case PPC::VMINUW:
  case PPC::VMRGHB:
  case PPC::VMRGHH:
  case PPC::VMRGHW:
  case PPC::VMRGLB:
  case PPC::VMRGLH:
  case PPC::VMRGLW:
  case PPC::VMULESB:
  case PPC::VMULESH:
  case PPC::VMULEUB:
  case PPC::VMULEUH:
  case PPC::VMULOSB:
  case PPC::VMULOSH:
  case PPC::VMULOUB:
  case PPC::VMULOUH:
  case PPC::VNOR:
  case PPC::VOR:
  case PPC::VPKPX:
  case PPC::VPKSHSS:
  case PPC::VPKSHUS:
  case PPC::VPKSWSS:
  case PPC::VPKSWUS:
  case PPC::VPKUHUM:
  case PPC::VPKUHUS:
  case PPC::VPKUWUM:
  case PPC::VPKUWUS:
  case PPC::VRLB:
  case PPC::VRLH:
  case PPC::VRLW:
  case PPC::VSL:
  case PPC::VSLB:
  case PPC::VSLH:
  case PPC::VSLO:
  case PPC::VSLW:
  case PPC::VSR:
  case PPC::VSRAB:
  case PPC::VSRAH:
  case PPC::VSRAW:
  case PPC::VSRB:
  case PPC::VSRH:
  case PPC::VSRO:
  case PPC::VSRW:
  case PPC::VSUBCUW:
  case PPC::VSUBFP:
  case PPC::VSUBSBS:
  case PPC::VSUBSHS:
  case PPC::VSUBSWS:
  case PPC::VSUBUBM:
  case PPC::VSUBUBS:
  case PPC::VSUBUHM:
  case PPC::VSUBUHS:
  case PPC::VSUBUWM:
  case PPC::VSUBUWS:
  case PPC::VSUM2SWS:
  case PPC::VSUM4SBS:
  case PPC::VSUM4SHS:
  case PPC::VSUM4UBS:
  case PPC::VSUMSWS:
  case PPC::VXOR:
  case PPC::XOR:
  case PPC::XOR8:
    O << "\n"; 
    break;
  case PPC::FMADD:
  case PPC::FMADDS:
  case PPC::FMSUB:
  case PPC::FMSUBS:
  case PPC::FNMADD:
  case PPC::FNMADDS:
  case PPC::FNMSUB:
  case PPC::FNMSUBS:
  case PPC::FSELD:
  case PPC::FSELS:
  case PPC::RLDCL:
  case PPC::RLDICL:
  case PPC::RLDICR:
  case PPC::VMADDFP:
  case PPC::VMHADDSHS:
  case PPC::VMHRADDSHS:
  case PPC::VMLADDUHM:
  case PPC::VMSUMMBM:
  case PPC::VMSUMSHM:
  case PPC::VMSUMSHS:
  case PPC::VMSUMUBM:
  case PPC::VMSUMUHM:
  case PPC::VMSUMUHS:
  case PPC::VNMSUBFP:
  case PPC::VPERM:
  case PPC::VSEL:
  case PPC::VSLDOI:
    O << ", "; 
    switch (MI->getOpcode()) {
    case PPC::FMADD: 
    case PPC::FMADDS: 
    case PPC::FMSUB: 
    case PPC::FMSUBS: 
    case PPC::FNMADD: 
    case PPC::FNMADDS: 
    case PPC::FNMSUB: 
    case PPC::FNMSUBS: 
    case PPC::FSELD: 
    case PPC::FSELS: 
    case PPC::VMADDFP: 
    case PPC::VMHADDSHS: 
    case PPC::VMHRADDSHS: 
    case PPC::VMLADDUHM: 
    case PPC::VMSUMMBM: 
    case PPC::VMSUMSHM: 
    case PPC::VMSUMSHS: 
    case PPC::VMSUMUBM: 
    case PPC::VMSUMUHM: 
    case PPC::VMSUMUHS: 
    case PPC::VNMSUBFP: 
    case PPC::VPERM: 
    case PPC::VSEL: printOperand(MI, 3); break;
    case PPC::RLDCL: 
    case PPC::RLDICL: 
    case PPC::RLDICR: printU6ImmOperand(MI, 3); break;
    case PPC::VSLDOI: printU5ImmOperand(MI, 3); break;
    }
    O << "\n"; 
    break;
  case PPC::RLWINM:
  case PPC::RLWINMo:
  case PPC::RLWNM:
    O << ", "; 
    printU5ImmOperand(MI, 3); 
    O << ", "; 
    printU5ImmOperand(MI, 4); 
    O << "\n"; 
    break;
  }
  return true;
}
